
DeviceProcessor03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf0  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800bf28  0800bf28  0000cf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c040  0800c040  0000d040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800c044  0800c044  0000d044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000019f  20000000  0800c048  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002369  200001a0  0800c1e7  0000e1a0  2**2
                  ALLOC
  7 ._user_heap_stack 00000607  20002509  0800c1e7  0000e509  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000e19f  2**0
                  CONTENTS, READONLY
  9 .debug_info   000208fb  00000000  00000000  0000e1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000457f  00000000  00000000  0002ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001c50  00000000  00000000  00033050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000015c9  00000000  00000000  00034ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036ac5  00000000  00000000  00036269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00025f30  00000000  00000000  0006cd2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014af23  00000000  00000000  00092c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ddb81  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000078c8  00000000  00000000  001ddbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001e548c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001a0 	.word	0x200001a0
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bf10 	.word	0x0800bf10

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001a4 	.word	0x200001a4
 8000274:	0800bf10 	.word	0x0800bf10

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	f5ad 6dfd 	sub.w	sp, sp, #2024	@ 0x7e8
 800027e:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef funcResult;
	uint16_t dmaValCheck1[500];
	uint16_t dmaValCheck2[500];
	for(int i = 0; i < 500; i++){
 8000280:	2300      	movs	r3, #0
 8000282:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
 8000286:	e00f      	b.n	80002a8 <main+0x30>
		dmaValCheck1[i] = i;
 8000288:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 800028c:	b299      	uxth	r1, r3
 800028e:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8000292:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8000296:	f8d7 27dc 	ldr.w	r2, [r7, #2012]	@ 0x7dc
 800029a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 500; i++){
 800029e:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 80002a2:	3301      	adds	r3, #1
 80002a4:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
 80002a8:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 80002ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80002b0:	dbea      	blt.n	8000288 <main+0x10>
	}
	for(int i = 0; i < 500; i++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
 80002b8:	e00f      	b.n	80002da <main+0x62>
		dmaValCheck2[i] = i;
 80002ba:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	@ 0x7d8
 80002be:	b299      	uxth	r1, r3
 80002c0:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 80002c4:	f2a3 73dc 	subw	r3, r3, #2012	@ 0x7dc
 80002c8:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	@ 0x7d8
 80002cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 500; i++){
 80002d0:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	@ 0x7d8
 80002d4:	3301      	adds	r3, #1
 80002d6:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
 80002da:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	@ 0x7d8
 80002de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80002e2:	dbea      	blt.n	80002ba <main+0x42>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f001 f858 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f8f0 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 fbc4 	bl	8000a78 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80002f0:	f000 f950 	bl	8000594 <MX_GPDMA1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80002f4:	f000 fb8e 	bl	8000a14 <MX_USB_OTG_FS_PCD_Init>
  MX_ICACHE_Init();
 80002f8:	f000 f9e8 	bl	80006cc <MX_ICACHE_Init>
  MX_TIM8_Init();
 80002fc:	f000 fada 	bl	80008b4 <MX_TIM8_Init>
  MX_I2C2_Init();
 8000300:	f000 f968 	bl	80005d4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000304:	f000 f9a4 	bl	8000650 <MX_I2C3_Init>
  MX_SPI2_Init();
 8000308:	f000 fa64 	bl	80007d4 <MX_SPI2_Init>
  MX_SPI1_Init();
 800030c:	f000 f9f2 	bl	80006f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 8000310:	f009 fcda 	bl	8009cc8 <MX_USB_Device_Init>
  HAL_Delay(2000);
 8000314:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000318:	f001 f904 	bl	8001524 <HAL_Delay>
//  run_device();
  TIM8->ARR = 8-1;
 800031c:	4b5e      	ldr	r3, [pc, #376]	@ (8000498 <main+0x220>)
 800031e:	2207      	movs	r2, #7
 8000320:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM8->CCR1 = TIM8->ARR/2;
 8000322:	4b5d      	ldr	r3, [pc, #372]	@ (8000498 <main+0x220>)
 8000324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000326:	4a5c      	ldr	r2, [pc, #368]	@ (8000498 <main+0x220>)
 8000328:	085b      	lsrs	r3, r3, #1
 800032a:	6353      	str	r3, [r2, #52]	@ 0x34
  TIM8->CCR2 = TIM8->ARR/2;
 800032c:	4b5a      	ldr	r3, [pc, #360]	@ (8000498 <main+0x220>)
 800032e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000330:	4a59      	ldr	r2, [pc, #356]	@ (8000498 <main+0x220>)
 8000332:	085b      	lsrs	r3, r3, #1
 8000334:	6393      	str	r3, [r2, #56]	@ 0x38
//  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_SPI_Transmit(&hspi2, SPI_TX_Buffer1, 10, 1000);
 8000336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800033a:	220a      	movs	r2, #10
 800033c:	4957      	ldr	r1, [pc, #348]	@ (800049c <main+0x224>)
 800033e:	4858      	ldr	r0, [pc, #352]	@ (80004a0 <main+0x228>)
 8000340:	f006 fcee 	bl	8006d20 <HAL_SPI_Transmit>
  funcResult = HAL_I2C_Master_Transmit(&hi2c3,0x2E,I2C_TX_Buffer1,1,1000);
 8000344:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2301      	movs	r3, #1
 800034c:	4a55      	ldr	r2, [pc, #340]	@ (80004a4 <main+0x22c>)
 800034e:	212e      	movs	r1, #46	@ 0x2e
 8000350:	4855      	ldr	r0, [pc, #340]	@ (80004a8 <main+0x230>)
 8000352:	f002 fb6f 	bl	8002a34 <HAL_I2C_Master_Transmit>
 8000356:	4603      	mov	r3, r0
 8000358:	f887 37d7 	strb.w	r3, [r7, #2007]	@ 0x7d7
  funcResult = HAL_I2C_Master_Transmit(&hi2c3,0x2E,I2C_TX_Buffer2,1,1000);
 800035c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2301      	movs	r3, #1
 8000364:	4a51      	ldr	r2, [pc, #324]	@ (80004ac <main+0x234>)
 8000366:	212e      	movs	r1, #46	@ 0x2e
 8000368:	484f      	ldr	r0, [pc, #316]	@ (80004a8 <main+0x230>)
 800036a:	f002 fb63 	bl	8002a34 <HAL_I2C_Master_Transmit>
 800036e:	4603      	mov	r3, r0
 8000370:	f887 37d7 	strb.w	r3, [r7, #2007]	@ 0x7d7
  funcResult = HAL_I2C_Master_Transmit(&hi2c3,0x2E,I2C_TX_Buffer3,1,1000);
 8000374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	2301      	movs	r3, #1
 800037c:	4a4c      	ldr	r2, [pc, #304]	@ (80004b0 <main+0x238>)
 800037e:	212e      	movs	r1, #46	@ 0x2e
 8000380:	4849      	ldr	r0, [pc, #292]	@ (80004a8 <main+0x230>)
 8000382:	f002 fb57 	bl	8002a34 <HAL_I2C_Master_Transmit>
 8000386:	4603      	mov	r3, r0
 8000388:	f887 37d7 	strb.w	r3, [r7, #2007]	@ 0x7d7
  funcResult = HAL_I2C_Master_Transmit(&hi2c3,0x2E,I2C_TX_Buffer4,1,1000);
 800038c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2301      	movs	r3, #1
 8000394:	4a47      	ldr	r2, [pc, #284]	@ (80004b4 <main+0x23c>)
 8000396:	212e      	movs	r1, #46	@ 0x2e
 8000398:	4843      	ldr	r0, [pc, #268]	@ (80004a8 <main+0x230>)
 800039a:	f002 fb4b 	bl	8002a34 <HAL_I2C_Master_Transmit>
 800039e:	4603      	mov	r3, r0
 80003a0:	f887 37d7 	strb.w	r3, [r7, #2007]	@ 0x7d7
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (test_cmd == '1'){
 80003a4:	4b44      	ldr	r3, [pc, #272]	@ (80004b8 <main+0x240>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b31      	cmp	r3, #49	@ 0x31
 80003aa:	d107      	bne.n	80003bc <main+0x144>
		  HAL_GPIO_TogglePin(GPIOD, SWNT_CTRL_17_Pin);
 80003ac:	2120      	movs	r1, #32
 80003ae:	4843      	ldr	r0, [pc, #268]	@ (80004bc <main+0x244>)
 80003b0:	f002 fa8a 	bl	80028c8 <HAL_GPIO_TogglePin>
		  test_cmd = '0';
 80003b4:	4b40      	ldr	r3, [pc, #256]	@ (80004b8 <main+0x240>)
 80003b6:	2230      	movs	r2, #48	@ 0x30
 80003b8:	701a      	strb	r2, [r3, #0]
 80003ba:	e7f3      	b.n	80003a4 <main+0x12c>
	  }
	  else if (test_cmd == '2'){
 80003bc:	4b3e      	ldr	r3, [pc, #248]	@ (80004b8 <main+0x240>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b32      	cmp	r3, #50	@ 0x32
 80003c2:	d107      	bne.n	80003d4 <main+0x15c>
		  HAL_GPIO_TogglePin(GPIOD, SWNT_CTRL_18_Pin);
 80003c4:	2140      	movs	r1, #64	@ 0x40
 80003c6:	483d      	ldr	r0, [pc, #244]	@ (80004bc <main+0x244>)
 80003c8:	f002 fa7e 	bl	80028c8 <HAL_GPIO_TogglePin>
		  test_cmd = '0';
 80003cc:	4b3a      	ldr	r3, [pc, #232]	@ (80004b8 <main+0x240>)
 80003ce:	2230      	movs	r2, #48	@ 0x30
 80003d0:	701a      	strb	r2, [r3, #0]
 80003d2:	e7e7      	b.n	80003a4 <main+0x12c>
	  }
	  else if (test_cmd == '3'){
 80003d4:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <main+0x240>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b33      	cmp	r3, #51	@ 0x33
 80003da:	d107      	bne.n	80003ec <main+0x174>
		  HAL_GPIO_TogglePin(GPIOD, SWNT_CTRL_19_Pin);
 80003dc:	2180      	movs	r1, #128	@ 0x80
 80003de:	4837      	ldr	r0, [pc, #220]	@ (80004bc <main+0x244>)
 80003e0:	f002 fa72 	bl	80028c8 <HAL_GPIO_TogglePin>
		  test_cmd = '0';
 80003e4:	4b34      	ldr	r3, [pc, #208]	@ (80004b8 <main+0x240>)
 80003e6:	2230      	movs	r2, #48	@ 0x30
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	e7db      	b.n	80003a4 <main+0x12c>
	  }
	  else if (test_cmd == '4'){
 80003ec:	4b32      	ldr	r3, [pc, #200]	@ (80004b8 <main+0x240>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b34      	cmp	r3, #52	@ 0x34
 80003f2:	d108      	bne.n	8000406 <main+0x18e>
		  HAL_GPIO_TogglePin(GPIOD, SWNT_CTRL_20_Pin);
 80003f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003f8:	4830      	ldr	r0, [pc, #192]	@ (80004bc <main+0x244>)
 80003fa:	f002 fa65 	bl	80028c8 <HAL_GPIO_TogglePin>
		  test_cmd = '0';
 80003fe:	4b2e      	ldr	r3, [pc, #184]	@ (80004b8 <main+0x240>)
 8000400:	2230      	movs	r2, #48	@ 0x30
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	e7ce      	b.n	80003a4 <main+0x12c>
	  }
	  else if (test_cmd == '5'){
 8000406:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <main+0x240>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b35      	cmp	r3, #53	@ 0x35
 800040c:	d108      	bne.n	8000420 <main+0x1a8>
		  HAL_GPIO_TogglePin(GPIOD, SWNT_CTRL_21_Pin);
 800040e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000412:	482a      	ldr	r0, [pc, #168]	@ (80004bc <main+0x244>)
 8000414:	f002 fa58 	bl	80028c8 <HAL_GPIO_TogglePin>
		  test_cmd = '0';
 8000418:	4b27      	ldr	r3, [pc, #156]	@ (80004b8 <main+0x240>)
 800041a:	2230      	movs	r2, #48	@ 0x30
 800041c:	701a      	strb	r2, [r3, #0]
 800041e:	e7c1      	b.n	80003a4 <main+0x12c>
	  }
	  else if (test_cmd == '6'){
 8000420:	4b25      	ldr	r3, [pc, #148]	@ (80004b8 <main+0x240>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b36      	cmp	r3, #54	@ 0x36
 8000426:	d119      	bne.n	800045c <main+0x1e4>
		  HAL_DMA_Abort(&handle_GPDMA1_Channel12);
 8000428:	4825      	ldr	r0, [pc, #148]	@ (80004c0 <main+0x248>)
 800042a:	f001 fb9f 	bl	8001b6c <HAL_DMA_Abort>
		  HAL_Delay(1000);
 800042e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000432:	f001 f877 	bl	8001524 <HAL_Delay>
		  HAL_DMA_Start(&handle_GPDMA1_Channel12,(uint32_t)&GPIOE->IDR,(uint32_t)&dmaValCheck1,500*sizeof(uint16_t));
 8000436:	f507 727b 	add.w	r2, r7, #1004	@ 0x3ec
 800043a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800043e:	4921      	ldr	r1, [pc, #132]	@ (80004c4 <main+0x24c>)
 8000440:	481f      	ldr	r0, [pc, #124]	@ (80004c0 <main+0x248>)
 8000442:	f001 fb53 	bl	8001aec <HAL_DMA_Start>
		  HAL_Delay(1000);
 8000446:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800044a:	f001 f86b 	bl	8001524 <HAL_Delay>
		  HAL_DMA_Abort(&handle_GPDMA1_Channel12);
 800044e:	481c      	ldr	r0, [pc, #112]	@ (80004c0 <main+0x248>)
 8000450:	f001 fb8c 	bl	8001b6c <HAL_DMA_Abort>
		  test_cmd = '0';
 8000454:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <main+0x240>)
 8000456:	2230      	movs	r2, #48	@ 0x30
 8000458:	701a      	strb	r2, [r3, #0]
 800045a:	e7a3      	b.n	80003a4 <main+0x12c>
	  }
	  else if (test_cmd == '7'){
 800045c:	4b16      	ldr	r3, [pc, #88]	@ (80004b8 <main+0x240>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b37      	cmp	r3, #55	@ 0x37
 8000462:	d19f      	bne.n	80003a4 <main+0x12c>
		  HAL_DMA_Abort(&handle_GPDMA1_Channel12);
 8000464:	4816      	ldr	r0, [pc, #88]	@ (80004c0 <main+0x248>)
 8000466:	f001 fb81 	bl	8001b6c <HAL_DMA_Abort>
		  HAL_Delay(1000);
 800046a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800046e:	f001 f859 	bl	8001524 <HAL_Delay>
		  HAL_DMA_Start(&handle_GPDMA1_Channel12,(uint32_t)&GPIOF->IDR,(uint32_t)&dmaValCheck2,500*sizeof(uint16_t));
 8000472:	1d3a      	adds	r2, r7, #4
 8000474:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000478:	4913      	ldr	r1, [pc, #76]	@ (80004c8 <main+0x250>)
 800047a:	4811      	ldr	r0, [pc, #68]	@ (80004c0 <main+0x248>)
 800047c:	f001 fb36 	bl	8001aec <HAL_DMA_Start>
		  HAL_Delay(1000);
 8000480:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000484:	f001 f84e 	bl	8001524 <HAL_Delay>
		  HAL_DMA_Abort(&handle_GPDMA1_Channel12);
 8000488:	480d      	ldr	r0, [pc, #52]	@ (80004c0 <main+0x248>)
 800048a:	f001 fb6f 	bl	8001b6c <HAL_DMA_Abort>
		  test_cmd = '0';
 800048e:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <main+0x240>)
 8000490:	2230      	movs	r2, #48	@ 0x30
 8000492:	701a      	strb	r2, [r3, #0]
	  if (test_cmd == '1'){
 8000494:	e786      	b.n	80003a4 <main+0x12c>
 8000496:	bf00      	nop
 8000498:	40013400 	.word	0x40013400
 800049c:	20000010 	.word	0x20000010
 80004a0:	200002f4 	.word	0x200002f4
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000210 	.word	0x20000210
 80004ac:	20000004 	.word	0x20000004
 80004b0:	20000008 	.word	0x20000008
 80004b4:	2000000c 	.word	0x2000000c
 80004b8:	2000092c 	.word	0x2000092c
 80004bc:	42020c00 	.word	0x42020c00
 80004c0:	200003d0 	.word	0x200003d0
 80004c4:	42021010 	.word	0x42021010
 80004c8:	42021410 	.word	0x42021410

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b09e      	sub	sp, #120	@ 0x78
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	2260      	movs	r2, #96	@ 0x60
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f00b fcec 	bl	800beb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	463b      	mov	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]
 80004ee:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004f0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80004f4:	f004 f90e 	bl	8004714 <HAL_PWREx_ControlVoltageScaling>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80004fe:	f000 fb9b 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI
 8000502:	2370      	movs	r3, #112	@ 0x70
 8000504:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800050a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800050c:	2301      	movs	r3, #1
 800050e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000510:	2310      	movs	r3, #16
 8000512:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000514:	2300      	movs	r3, #0
 8000516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 8000518:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800051c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 800051e:	2310      	movs	r3, #16
 8000520:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000522:	2302      	movs	r3, #2
 8000524:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000526:	2301      	movs	r3, #1
 8000528:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800052a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800052e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000530:	2303      	movs	r3, #3
 8000532:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000534:	230a      	movs	r3, #10
 8000536:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000538:	2302      	movs	r3, #2
 800053a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800053c:	2302      	movs	r3, #2
 800053e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000544:	230c      	movs	r3, #12
 8000546:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	4618      	mov	r0, r3
 8000552:	f004 f98b 	bl	800486c <HAL_RCC_OscConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800055c:	f000 fb6c 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	231f      	movs	r3, #31
 8000562:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000564:	2303      	movs	r3, #3
 8000566:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	2104      	movs	r1, #4
 800057c:	4618      	mov	r0, r3
 800057e:	f005 f851 	bl	8005624 <HAL_RCC_ClockConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000588:	f000 fb56 	bl	8000c38 <Error_Handler>
  }
}
 800058c:	bf00      	nop
 800058e:	3778      	adds	r7, #120	@ 0x78
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800059a:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <MX_GPDMA1_Init+0x3c>)
 800059c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005a0:	4a0b      	ldr	r2, [pc, #44]	@ (80005d0 <MX_GPDMA1_Init+0x3c>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <MX_GPDMA1_Init+0x3c>)
 80005ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2054      	movs	r0, #84	@ 0x54
 80005be:	f001 f88d 	bl	80016dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80005c2:	2054      	movs	r0, #84	@ 0x54
 80005c4:	f001 f8a4 	bl	8001710 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	46020c00 	.word	0x46020c00

080005d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <MX_I2C2_Init+0x74>)
 80005da:	4a1c      	ldr	r2, [pc, #112]	@ (800064c <MX_I2C2_Init+0x78>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80005de:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <MX_I2C2_Init+0x74>)
 80005e0:	f640 6214 	movw	r2, #3604	@ 0xe14
 80005e4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005e6:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <MX_I2C2_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <MX_I2C2_Init+0x74>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_I2C2_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005f8:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <MX_I2C2_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005fe:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_I2C2_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <MX_I2C2_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_I2C2_Init+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <MX_I2C2_Init+0x74>)
 8000612:	f002 f973 	bl	80028fc <HAL_I2C_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800061c:	f000 fb0c 	bl	8000c38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000620:	2100      	movs	r1, #0
 8000622:	4809      	ldr	r0, [pc, #36]	@ (8000648 <MX_I2C2_Init+0x74>)
 8000624:	f002 fd14 	bl	8003050 <HAL_I2CEx_ConfigAnalogFilter>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800062e:	f000 fb03 	bl	8000c38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000632:	2100      	movs	r1, #0
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <MX_I2C2_Init+0x74>)
 8000636:	f002 fd56 	bl	80030e6 <HAL_I2CEx_ConfigDigitalFilter>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000640:	f000 fafa 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200001bc 	.word	0x200001bc
 800064c:	40005800 	.word	0x40005800

08000650 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000654:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <MX_I2C3_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	@ (80006c8 <MX_I2C3_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <MX_I2C3_Init+0x74>)
 800065c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000660:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <MX_I2C3_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000668:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <MX_I2C3_Init+0x74>)
 800066a:	2201      	movs	r2, #1
 800066c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066e:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_I2C3_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_I2C3_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800067a:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_I2C3_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_I2C3_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_I2C3_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800068c:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <MX_I2C3_Init+0x74>)
 800068e:	f002 f935 	bl	80028fc <HAL_I2C_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 face 	bl	8000c38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069c:	2100      	movs	r1, #0
 800069e:	4809      	ldr	r0, [pc, #36]	@ (80006c4 <MX_I2C3_Init+0x74>)
 80006a0:	f002 fcd6 	bl	8003050 <HAL_I2CEx_ConfigAnalogFilter>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80006aa:	f000 fac5 	bl	8000c38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_I2C3_Init+0x74>)
 80006b2:	f002 fd18 	bl	80030e6 <HAL_I2CEx_ConfigDigitalFilter>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80006bc:	f000 fabc 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000210 	.word	0x20000210
 80006c8:	46002800 	.word	0x46002800

080006cc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f002 fd55 	bl	8003180 <HAL_ICACHE_ConfigAssociativityMode>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80006dc:	f000 faac 	bl	8000c38 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006e0:	f002 fd6e 	bl	80031c0 <HAL_ICACHE_Enable>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80006ea:	f000 faa5 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000704:	4b31      	ldr	r3, [pc, #196]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000706:	4a32      	ldr	r2, [pc, #200]	@ (80007d0 <MX_SPI1_Init+0xdc>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b30      	ldr	r3, [pc, #192]	@ (80007cc <MX_SPI1_Init+0xd8>)
 800070c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b2e      	ldr	r3, [pc, #184]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000718:	4b2c      	ldr	r3, [pc, #176]	@ (80007cc <MX_SPI1_Init+0xd8>)
 800071a:	2207      	movs	r2, #7
 800071c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800071e:	4b2b      	ldr	r3, [pc, #172]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000720:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000724:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000726:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <MX_SPI1_Init+0xd8>)
 800072e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000732:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000734:	4b25      	ldr	r3, [pc, #148]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073a:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <MX_SPI1_Init+0xd8>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000746:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_SPI1_Init+0xd8>)
 800074e:	2207      	movs	r2, #7
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000752:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000754:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000758:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_SPI1_Init+0xd8>)
 800075c:	2200      	movs	r2, #0
 800075e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000762:	2200      	movs	r2, #0
 8000764:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000768:	2200      	movs	r2, #0
 800076a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800076c:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_SPI1_Init+0xd8>)
 800076e:	2200      	movs	r2, #0
 8000770:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000772:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000774:	2200      	movs	r2, #0
 8000776:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_SPI1_Init+0xd8>)
 800077a:	2200      	movs	r2, #0
 800077c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000780:	2200      	movs	r2, #0
 8000782:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000786:	2200      	movs	r2, #0
 8000788:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <MX_SPI1_Init+0xd8>)
 800078c:	2200      	movs	r2, #0
 800078e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000790:	480e      	ldr	r0, [pc, #56]	@ (80007cc <MX_SPI1_Init+0xd8>)
 8000792:	f006 f9af 	bl	8006af4 <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 800079c:	f000 fa4c 	bl	8000c38 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80007a4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	@ (80007cc <MX_SPI1_Init+0xd8>)
 80007b4:	f006 fdb1 	bl	800731a <HAL_SPIEx_SetConfigAutonomousMode>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 80007be:	f000 fa3b 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000264 	.word	0x20000264
 80007d0:	40013000 	.word	0x40013000

080007d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007e4:	4b31      	ldr	r3, [pc, #196]	@ (80008ac <MX_SPI2_Init+0xd8>)
 80007e6:	4a32      	ldr	r2, [pc, #200]	@ (80008b0 <MX_SPI2_Init+0xdc>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b30      	ldr	r3, [pc, #192]	@ (80008ac <MX_SPI2_Init+0xd8>)
 80007ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b2e      	ldr	r3, [pc, #184]	@ (80008ac <MX_SPI2_Init+0xd8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b2c      	ldr	r3, [pc, #176]	@ (80008ac <MX_SPI2_Init+0xd8>)
 80007fa:	2207      	movs	r2, #7
 80007fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007fe:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000800:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000804:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000806:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800080c:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <MX_SPI2_Init+0xd8>)
 800080e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000812:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000814:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081a:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <MX_SPI2_Init+0xd8>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000826:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_SPI2_Init+0xd8>)
 800082e:	2207      	movs	r2, #7
 8000830:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000832:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000834:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000838:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_SPI2_Init+0xd8>)
 800083c:	2200      	movs	r2, #0
 800083e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000840:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000842:	2200      	movs	r2, #0
 8000844:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000846:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000848:	2200      	movs	r2, #0
 800084a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_SPI2_Init+0xd8>)
 800084e:	2200      	movs	r2, #0
 8000850:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000854:	2200      	movs	r2, #0
 8000856:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_SPI2_Init+0xd8>)
 800085a:	2200      	movs	r2, #0
 800085c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000860:	2200      	movs	r2, #0
 8000862:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000866:	2200      	movs	r2, #0
 8000868:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_SPI2_Init+0xd8>)
 800086c:	2200      	movs	r2, #0
 800086e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000870:	480e      	ldr	r0, [pc, #56]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000872:	f006 f93f 	bl	8006af4 <HAL_SPI_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 800087c:	f000 f9dc 	bl	8000c38 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000884:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000888:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	@ (80008ac <MX_SPI2_Init+0xd8>)
 8000894:	f006 fd41 	bl	800731a <HAL_SPIEx_SetConfigAutonomousMode>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 800089e:	f000 f9cb 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200002f4 	.word	0x200002f4
 80008b0:	40003800 	.word	0x40003800

080008b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b09c      	sub	sp, #112	@ 0x70
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2234      	movs	r2, #52	@ 0x34
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f00b fae2 	bl	800beb8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008f4:	4b45      	ldr	r3, [pc, #276]	@ (8000a0c <MX_TIM8_Init+0x158>)
 80008f6:	4a46      	ldr	r2, [pc, #280]	@ (8000a10 <MX_TIM8_Init+0x15c>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80008fa:	4b44      	ldr	r3, [pc, #272]	@ (8000a0c <MX_TIM8_Init+0x158>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b42      	ldr	r3, [pc, #264]	@ (8000a0c <MX_TIM8_Init+0x158>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000906:	4b41      	ldr	r3, [pc, #260]	@ (8000a0c <MX_TIM8_Init+0x158>)
 8000908:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800090c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a0c <MX_TIM8_Init+0x158>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000914:	4b3d      	ldr	r3, [pc, #244]	@ (8000a0c <MX_TIM8_Init+0x158>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a0c <MX_TIM8_Init+0x158>)
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000920:	483a      	ldr	r0, [pc, #232]	@ (8000a0c <MX_TIM8_Init+0x158>)
 8000922:	f006 fd3b 	bl	800739c <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800092c:	f000 f984 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000934:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800093a:	4619      	mov	r1, r3
 800093c:	4833      	ldr	r0, [pc, #204]	@ (8000a0c <MX_TIM8_Init+0x158>)
 800093e:	f006 fef9 	bl	8007734 <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000948:	f000 f976 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800094c:	482f      	ldr	r0, [pc, #188]	@ (8000a0c <MX_TIM8_Init+0x158>)
 800094e:	f006 fd7c 	bl	800744a <HAL_TIM_PWM_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000958:	f000 f96e 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000968:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800096c:	4619      	mov	r1, r3
 800096e:	4827      	ldr	r0, [pc, #156]	@ (8000a0c <MX_TIM8_Init+0x158>)
 8000970:	f007 fd54 	bl	800841c <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800097a:	f000 f95d 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097e:	2360      	movs	r3, #96	@ 0x60
 8000980:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000986:	2300      	movs	r3, #0
 8000988:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800098a:	2300      	movs	r3, #0
 800098c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800099a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800099e:	2204      	movs	r2, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	481a      	ldr	r0, [pc, #104]	@ (8000a0c <MX_TIM8_Init+0x158>)
 80009a4:	f006 fdb2 	bl	800750c <HAL_TIM_PWM_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80009ae:	f000 f943 	bl	8000c38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4807      	ldr	r0, [pc, #28]	@ (8000a0c <MX_TIM8_Init+0x158>)
 80009f0:	f007 fdd6 	bl	80085a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80009fa:	f000 f91d 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80009fe:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <MX_TIM8_Init+0x158>)
 8000a00:	f000 fb56 	bl	80010b0 <HAL_TIM_MspPostInit>

}
 8000a04:	bf00      	nop
 8000a06:	3770      	adds	r7, #112	@ 0x70
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000384 	.word	0x20000384
 8000a10:	40013400 	.word	0x40013400

08000a14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1a:	4a16      	ldr	r2, [pc, #88]	@ (8000a74 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a20:	2206      	movs	r2, #6
 8000a22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a48:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5c:	f002 fbc0 	bl	80031e0 <HAL_PCD_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a66:	f000 f8e7 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000448 	.word	0x20000448
 8000a74:	42040000 	.word	0x42040000

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	@ 0x30
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8e:	4b65      	ldr	r3, [pc, #404]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a94:	4a63      	ldr	r2, [pc, #396]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a9e:	4b61      	ldr	r3, [pc, #388]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aa4:	f003 0310 	and.w	r3, r3, #16
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aac:	4b5d      	ldr	r3, [pc, #372]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000ab4:	f043 0320 	orr.w	r3, r3, #32
 8000ab8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000abc:	4b59      	ldr	r3, [pc, #356]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac2:	f003 0320 	and.w	r3, r3, #32
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b56      	ldr	r3, [pc, #344]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad0:	4a54      	ldr	r2, [pc, #336]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ada:	4b52      	ldr	r3, [pc, #328]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aee:	4a4d      	ldr	r2, [pc, #308]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000af8:	4b4a      	ldr	r3, [pc, #296]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b06:	4b47      	ldr	r3, [pc, #284]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b0c:	4a45      	ldr	r2, [pc, #276]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b16:	4b43      	ldr	r3, [pc, #268]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b3f      	ldr	r3, [pc, #252]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b2a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b34:	4b3b      	ldr	r3, [pc, #236]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	4b38      	ldr	r3, [pc, #224]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b48:	4a36      	ldr	r2, [pc, #216]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b52:	4b34      	ldr	r3, [pc, #208]	@ (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 8000b60:	2200      	movs	r2, #0
 8000b62:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b66:	4830      	ldr	r0, [pc, #192]	@ (8000c28 <MX_GPIO_Init+0x1b0>)
 8000b68:	f001 fe96 	bl	8002898 <HAL_GPIO_WritePin>
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000b72:	482e      	ldr	r0, [pc, #184]	@ (8000c2c <MX_GPIO_Init+0x1b4>)
 8000b74:	f001 fe90 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADCV1_D13_Pin ADCV1_D12_Pin ADCV1_D11_Pin ADCV1_D10_Pin
                           ADCV1_D09_Pin ADCV1_D08_Pin ADCV1_D07_Pin ADCV1_D06_Pin
                           ADCV1_D05_Pin ADCV1_D04_Pin ADCV1_D03_Pin ADCV1_D02_Pin
                           ADCV1_D01_Pin ADCV1_D00_Pin ADCV1_D15_Pin ADCV1_D14_Pin */
  GPIO_InitStruct.Pin = ADCV1_D13_Pin|ADCV1_D12_Pin|ADCV1_D11_Pin|ADCV1_D10_Pin
 8000b78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b7c:	61fb      	str	r3, [r7, #28]
                          |ADCV1_D09_Pin|ADCV1_D08_Pin|ADCV1_D07_Pin|ADCV1_D06_Pin
                          |ADCV1_D05_Pin|ADCV1_D04_Pin|ADCV1_D03_Pin|ADCV1_D02_Pin
                          |ADCV1_D01_Pin|ADCV1_D00_Pin|ADCV1_D15_Pin|ADCV1_D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4828      	ldr	r0, [pc, #160]	@ (8000c30 <MX_GPIO_Init+0x1b8>)
 8000b8e:	f001 fcab 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D00_Pin ADCV2_D01_Pin ADCV2_D02_Pin ADCV2_D03_Pin
                           ADCV2_D04_Pin ADCV2_D05_Pin ADCV2_D06_Pin ADCV2_D07_Pin
                           ADCV2_D08_Pin ADCV2_D09_Pin ADCV2_D10_Pin ADCV2_D11_Pin */
  GPIO_InitStruct.Pin = ADCV2_D00_Pin|ADCV2_D01_Pin|ADCV2_D02_Pin|ADCV2_D03_Pin
 8000b92:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000b96:	61fb      	str	r3, [r7, #28]
                          |ADCV2_D04_Pin|ADCV2_D05_Pin|ADCV2_D06_Pin|ADCV2_D07_Pin
                          |ADCV2_D08_Pin|ADCV2_D09_Pin|ADCV2_D10_Pin|ADCV2_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4823      	ldr	r0, [pc, #140]	@ (8000c34 <MX_GPIO_Init+0x1bc>)
 8000ba8:	f001 fc9e 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D12_Pin ADCV2_D13_Pin ADCV2_D14_Pin ADCV2_D15_Pin */
  GPIO_InitStruct.Pin = ADCV2_D12_Pin|ADCV2_D13_Pin|ADCV2_D14_Pin|ADCV2_D15_Pin;
 8000bac:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	481c      	ldr	r0, [pc, #112]	@ (8000c34 <MX_GPIO_Init+0x1bc>)
 8000bc2:	f001 fc91 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_01_Pin SWNT_CTRL_02_Pin SWNT_CTRL_03_Pin SWNT_CTRL_04_Pin
                           SWNT_CTRL_05_Pin SWNT_CTRL_06_Pin SWNT_CTRL_07_Pin SWNT_CTRL_08_Pin
                           SWNT_CTRL_09_Pin SWNT_CTRL_10_Pin SWNT_CTRL_11_Pin SWNT_CTRL_12_Pin
                           SWNT_CTRL_13_Pin SWNT_CTRL_14_Pin SWNT_CTRL_15_Pin SWNT_CTRL_16_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 8000bc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bca:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4812      	ldr	r0, [pc, #72]	@ (8000c28 <MX_GPIO_Init+0x1b0>)
 8000be0:	f001 fc82 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_20_Pin SWNT_CTRL_21_Pin SWNT_CTRL_17_Pin SWNT_CTRL_18_Pin
                           SWNT_CTRL_19_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 8000be4:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000be8:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_19_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <MX_GPIO_Init+0x1b4>)
 8000bfe:	f001 fc73 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV1_OTR_Pin ADCV2_OTR_Pin */
  GPIO_InitStruct.Pin = ADCV1_OTR_Pin|ADCV2_OTR_Pin;
 8000c02:	2306      	movs	r3, #6
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_GPIO_Init+0x1b4>)
 8000c16:	f001 fc67 	bl	80024e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3730      	adds	r7, #48	@ 0x30
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	46020c00 	.word	0x46020c00
 8000c28:	42021800 	.word	0x42021800
 8000c2c:	42020c00 	.word	0x42020c00
 8000c30:	42021000 	.word	0x42021000
 8000c34:	42021400 	.word	0x42021400

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <HAL_MspInit+0x34>)
 8000c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c50:	4a09      	ldr	r2, [pc, #36]	@ (8000c78 <HAL_MspInit+0x34>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <HAL_MspInit+0x34>)
 8000c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000c68:	f003 fde0 	bl	800482c <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8000c6c:	f003 fdee 	bl	800484c <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	46020c00 	.word	0x46020c00

08000c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0bc      	sub	sp, #240	@ 0xf0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0318 	add.w	r3, r7, #24
 8000c98:	22c0      	movs	r2, #192	@ 0xc0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f00b f90b 	bl	800beb8 <memset>
  if(hi2c->Instance==I2C2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a4d      	ldr	r2, [pc, #308]	@ (8000ddc <HAL_I2C_MspInit+0x160>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d148      	bne.n	8000d3e <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cac:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_MSIK;
 8000cb8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	f107 0318 	add.w	r3, r7, #24
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f005 f841 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000cd0:	f7ff ffb2 	bl	8000c38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	4b42      	ldr	r3, [pc, #264]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cda:	4a41      	ldr	r2, [pc, #260]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_DAC2_CURR_POT_SCL_Pin|I2C_DAC2_CURR_POT_SDA_Pin;
 8000cf2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d16:	4619      	mov	r1, r3
 8000d18:	4832      	ldr	r0, [pc, #200]	@ (8000de4 <HAL_I2C_MspInit+0x168>)
 8000d1a:	f001 fbe5 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d1e:	4b30      	ldr	r3, [pc, #192]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d24:	4a2e      	ldr	r2, [pc, #184]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000d26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d2a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d3c:	e04a      	b.n	8000dd4 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a29      	ldr	r2, [pc, #164]	@ (8000de8 <HAL_I2C_MspInit+0x16c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d145      	bne.n	8000dd4 <HAL_I2C_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_MSIK;
 8000d54:	23c0      	movs	r3, #192	@ 0xc0
 8000d56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5a:	f107 0318 	add.w	r3, r7, #24
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 fff4 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8000d6a:	f7ff ff65 	bl	8000c38 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d74:	4a1a      	ldr	r2, [pc, #104]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_DAC1_POT_SCL_Pin|I2C_DAC1_POT_SDA_Pin;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d92:	2312      	movs	r3, #18
 8000d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000da4:	2304      	movs	r3, #4
 8000da6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dae:	4619      	mov	r1, r3
 8000db0:	480e      	ldr	r0, [pc, #56]	@ (8000dec <HAL_I2C_MspInit+0x170>)
 8000db2:	f001 fb99 	bl	80024e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000db8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000dbc:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_I2C_MspInit+0x164>)
 8000dc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
}
 8000dd4:	bf00      	nop
 8000dd6:	37f0      	adds	r7, #240	@ 0xf0
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40005800 	.word	0x40005800
 8000de0:	46020c00 	.word	0x46020c00
 8000de4:	42020400 	.word	0x42020400
 8000de8:	46002800 	.word	0x46002800
 8000dec:	42020800 	.word	0x42020800

08000df0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0be      	sub	sp, #248	@ 0xf8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e08:	f107 0320 	add.w	r3, r7, #32
 8000e0c:	22c0      	movs	r2, #192	@ 0xc0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00b f851 	bl	800beb8 <memset>
  if(hspi->Instance==SPI1)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc4 <HAL_SPI_MspInit+0x1d4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d147      	bne.n	8000eb0 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_MSIK;
 8000e2c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e34:	f107 0320 	add.w	r3, r7, #32
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 ff87 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000e44:	f7ff fef8 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e48:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000e50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e54:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e58:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000e5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b58      	ldr	r3, [pc, #352]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e6c:	4a56      	ldr	r2, [pc, #344]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e76:	4b54      	ldr	r3, [pc, #336]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_DAC2_SCK_Pin|SPI_DAC2_NSS_Pin|SPI_DAC2_MISO_Pin|SPI_DAC2_MOSI_Pin;
 8000e84:	23d2      	movs	r3, #210	@ 0xd2
 8000e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4848      	ldr	r0, [pc, #288]	@ (8000fcc <HAL_SPI_MspInit+0x1dc>)
 8000eaa:	f001 fb1d 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000eae:	e084      	b.n	8000fba <HAL_SPI_MspInit+0x1ca>
  else if(hspi->Instance==SPI2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a46      	ldr	r2, [pc, #280]	@ (8000fd0 <HAL_SPI_MspInit+0x1e0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d17f      	bne.n	8000fba <HAL_SPI_MspInit+0x1ca>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000eba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_MSIK;
 8000ec6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000eca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f004 ff3a 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 8000ede:	f7ff feab 	bl	8000c38 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ee2:	4b39      	ldr	r3, [pc, #228]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ee8:	4a37      	ldr	r2, [pc, #220]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000eea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ef2:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f00:	4b31      	ldr	r3, [pc, #196]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f06:	4a30      	ldr	r2, [pc, #192]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f10:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f24:	4a28      	ldr	r2, [pc, #160]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f2e:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <HAL_SPI_MspInit+0x1d8>)
 8000f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI_DAC1_MISO_Pin;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f54:	2305      	movs	r3, #5
 8000f56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481c      	ldr	r0, [pc, #112]	@ (8000fd4 <HAL_SPI_MspInit+0x1e4>)
 8000f62:	f001 fac1 	bl	80024e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_NSS_Pin|SPI_DAC1_MOSI_Pin;
 8000f66:	2311      	movs	r3, #17
 8000f68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f7e:	2305      	movs	r3, #5
 8000f80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f84:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <HAL_SPI_MspInit+0x1e8>)
 8000f8c:	f001 faac 	bl	80024e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_SCK_Pin;
 8000f90:	2308      	movs	r3, #8
 8000f92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <HAL_SPI_MspInit+0x1e8>)
 8000fb6:	f001 fa97 	bl	80024e8 <HAL_GPIO_Init>
}
 8000fba:	bf00      	nop
 8000fbc:	37f8      	adds	r7, #248	@ 0xf8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40013000 	.word	0x40013000
 8000fc8:	46020c00 	.word	0x46020c00
 8000fcc:	42020000 	.word	0x42020000
 8000fd0:	40003800 	.word	0x40003800
 8000fd4:	42020800 	.word	0x42020800
 8000fd8:	42020c00 	.word	0x42020c00

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80010a0 <HAL_TIM_Base_MspInit+0xc4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d153      	bne.n	8001096 <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000fee:	4b2d      	ldr	r3, [pc, #180]	@ (80010a4 <HAL_TIM_Base_MspInit+0xc8>)
 8000ff0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ff4:	4a2b      	ldr	r2, [pc, #172]	@ (80010a4 <HAL_TIM_Base_MspInit+0xc8>)
 8000ff6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ffa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000ffe:	4b29      	ldr	r3, [pc, #164]	@ (80010a4 <HAL_TIM_Base_MspInit+0xc8>)
 8001000:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* GPDMA1_REQUEST_TIM8_UP Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 800100c:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 800100e:	4a27      	ldr	r2, [pc, #156]	@ (80010ac <HAL_TIM_Base_MspInit+0xd0>)
 8001010:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_TIM8_UP;
 8001012:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 8001014:	2235      	movs	r2, #53	@ 0x35
 8001016:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001018:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800101e:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 8001020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001024:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 8001026:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 800102c:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 800102e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001032:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001034:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 8001036:	2201      	movs	r2, #1
 8001038:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800103a:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 800103c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001040:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 8001044:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001048:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 800104c:	2201      	movs	r2, #1
 800104e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 8001052:	2201      	movs	r2, #1
 8001054:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 8001058:	2200      	movs	r2, #0
 800105a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 800105e:	2200      	movs	r2, #0
 8001060:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 8001064:	2200      	movs	r2, #0
 8001066:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8001068:	480f      	ldr	r0, [pc, #60]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 800106a:	f000 fc13 	bl	8001894 <HAL_DMA_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_TIM_Base_MspInit+0x9c>
    {
      Error_Handler();
 8001074:	f7ff fde0 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel12);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 800107c:	621a      	str	r2, [r3, #32]
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001084:	2110      	movs	r1, #16
 8001086:	4808      	ldr	r0, [pc, #32]	@ (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 8001088:	f000 ff4d 	bl	8001f26 <HAL_DMA_ConfigChannelAttributes>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_TIM_Base_MspInit+0xba>
    {
      Error_Handler();
 8001092:	f7ff fdd1 	bl	8000c38 <Error_Handler>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40013400 	.word	0x40013400
 80010a4:	46020c00 	.word	0x46020c00
 80010a8:	200003d0 	.word	0x200003d0
 80010ac:	40020650 	.word	0x40020650

080010b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <HAL_TIM_MspPostInit+0x68>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d11e      	bne.n	8001110 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_TIM_MspPostInit+0x6c>)
 80010d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010d8:	4a10      	ldr	r2, [pc, #64]	@ (800111c <HAL_TIM_MspPostInit+0x6c>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <HAL_TIM_MspPostInit+0x6c>)
 80010e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ADC_CLK_DVC_Pin;
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001100:	2303      	movs	r3, #3
 8001102:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_CLK_DVC_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <HAL_TIM_MspPostInit+0x70>)
 800110c:	f001 f9ec 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40013400 	.word	0x40013400
 800111c:	46020c00 	.word	0x46020c00
 8001120:	42020800 	.word	0x42020800

08001124 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0bc      	sub	sp, #240	@ 0xf0
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	22c0      	movs	r2, #192	@ 0xc0
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00a feb7 	bl	800beb8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a3c      	ldr	r2, [pc, #240]	@ (8001240 <HAL_PCD_MspInit+0x11c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d171      	bne.n	8001238 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001154:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fdee 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001176:	f7ff fd5f 	bl	8000c38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b32      	ldr	r3, [pc, #200]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 800117c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001180:	4a30      	ldr	r2, [pc, #192]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800118a:	4b2e      	ldr	r3, [pc, #184]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 800118c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001198:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800119c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80011b2:	230a      	movs	r3, #10
 80011b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011bc:	4619      	mov	r1, r3
 80011be:	4822      	ldr	r0, [pc, #136]	@ (8001248 <HAL_PCD_MspInit+0x124>)
 80011c0:	f001 f992 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 80011c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 80011d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e2:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 80011e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d119      	bne.n	8001224 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 80011f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011f6:	4a13      	ldr	r2, [pc, #76]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001200:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 8001202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800120e:	f003 fb0d 	bl	800482c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 8001214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001218:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <HAL_PCD_MspInit+0x120>)
 800121a:	f023 0304 	bic.w	r3, r3, #4
 800121e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001222:	e001      	b.n	8001228 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001224:	f003 fb02 	bl	800482c <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2049      	movs	r0, #73	@ 0x49
 800122e:	f000 fa55 	bl	80016dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001232:	2049      	movs	r0, #73	@ 0x49
 8001234:	f000 fa6c 	bl	8001710 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001238:	bf00      	nop
 800123a:	37f0      	adds	r7, #240	@ 0xf0
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	42040000 	.word	0x42040000
 8001244:	46020c00 	.word	0x46020c00
 8001248:	42020000 	.word	0x42020000

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <NMI_Handler+0x4>

08001254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <MemManage_Handler+0x4>

08001264 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <UsageFault_Handler+0x4>

08001274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a2:	f000 f91f 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
//  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <OTG_FS_IRQHandler+0x10>)
 80012b2:	f002 f8dc 	bl	800346e <HAL_PCD_IRQHandler>
  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20001e04 	.word	0x20001e04

080012c0 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <GPDMA1_Channel12_IRQHandler+0x10>)
 80012c6:	f000 fccd 	bl	8001c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200003d0 	.word	0x200003d0

080012d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012d8:	4b18      	ldr	r3, [pc, #96]	@ (800133c <SystemInit+0x68>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012de:	4a17      	ldr	r2, [pc, #92]	@ (800133c <SystemInit+0x68>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <SystemInit+0x6c>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <SystemInit+0x6c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <SystemInit+0x6c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <SystemInit+0x6c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <SystemInit+0x6c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <SystemInit+0x6c>)
 8001306:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800130a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800130e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <SystemInit+0x6c>)
 8001312:	2200      	movs	r2, #0
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <SystemInit+0x6c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a09      	ldr	r2, [pc, #36]	@ (8001340 <SystemInit+0x6c>)
 800131c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001320:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <SystemInit+0x6c>)
 8001324:	2200      	movs	r2, #0
 8001326:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <SystemInit+0x68>)
 800132a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800132e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00
 8001340:	46020c00 	.word	0x46020c00

08001344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800137c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001348:	f7ff ffc4 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800134c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800134e:	e003      	b.n	8001358 <LoopCopyDataInit>

08001350 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001352:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001354:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001356:	3104      	adds	r1, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001358:	480a      	ldr	r0, [pc, #40]	@ (8001384 <LoopForever+0xa>)
	ldr	r3, =_edata
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <LoopForever+0xe>)
	adds	r2, r0, r1
 800135c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800135e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001360:	d3f6      	bcc.n	8001350 <CopyDataInit>
	ldr	r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001364:	e002      	b.n	800136c <LoopFillZerobss>

08001366 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001366:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001368:	f842 3b04 	str.w	r3, [r2], #4

0800136c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <LoopForever+0x16>)
	cmp	r2, r3
 800136e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001370:	d3f9      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f00a fda9 	bl	800bec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001376:	f7fe ff7f 	bl	8000278 <main>

0800137a <LoopForever>:

LoopForever:
    b LoopForever
 800137a:	e7fe      	b.n	800137a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800137c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001380:	0800c048 	.word	0x0800c048
	ldr	r0, =_sdata
 8001384:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001388:	2000019f 	.word	0x2000019f
	ldr	r2, =_sbss
 800138c:	200001a0 	.word	0x200001a0
	ldr	r3, = _ebss
 8001390:	20002509 	.word	0x20002509

08001394 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_IRQHandler>
	...

08001398 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_Init+0x50>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <HAL_Init+0x50>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f98c 	bl	80016c6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80013ae:	f004 fb2b 	bl	8005a08 <HAL_RCC_GetSysClockFreq>
 80013b2:	4602      	mov	r2, r0
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <HAL_Init+0x54>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	490c      	ldr	r1, [pc, #48]	@ (80013f0 <HAL_Init+0x58>)
 80013be:	5ccb      	ldrb	r3, [r1, r3]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	4a0b      	ldr	r2, [pc, #44]	@ (80013f4 <HAL_Init+0x5c>)
 80013c6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013c8:	2004      	movs	r0, #4
 80013ca:	f000 f9d1 	bl	8001770 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ce:	200f      	movs	r0, #15
 80013d0:	f000 f812 	bl	80013f8 <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e002      	b.n	80013e4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013de:	f7ff fc31 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40022000 	.word	0x40022000
 80013ec:	46020c00 	.word	0x46020c00
 80013f0:	0800bf70 	.word	0x0800bf70
 80013f4:	2000001c 	.word	0x2000001c

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001404:	4b33      	ldr	r3, [pc, #204]	@ (80014d4 <HAL_InitTick+0xdc>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e05c      	b.n	80014ca <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001410:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <HAL_InitTick+0xe0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b04      	cmp	r3, #4
 800141a:	d10c      	bne.n	8001436 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <HAL_InitTick+0xe4>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <HAL_InitTick+0xdc>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e037      	b.n	80014a6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001436:	f000 f9f3 	bl	8001820 <HAL_SYSTICK_GetCLKSourceConfig>
 800143a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d023      	beq.n	800148a <HAL_InitTick+0x92>
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d82d      	bhi.n	80014a4 <HAL_InitTick+0xac>
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_InitTick+0x5e>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d00d      	beq.n	8001470 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001454:	e026      	b.n	80014a4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001456:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <HAL_InitTick+0xe4>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <HAL_InitTick+0xdc>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001464:	fbb3 f3f1 	udiv	r3, r3, r1
 8001468:	fbb2 f3f3 	udiv	r3, r2, r3
 800146c:	60fb      	str	r3, [r7, #12]
        break;
 800146e:	e01a      	b.n	80014a6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001470:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <HAL_InitTick+0xdc>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147a:	fbb3 f3f2 	udiv	r3, r3, r2
 800147e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	60fb      	str	r3, [r7, #12]
        break;
 8001488:	e00d      	b.n	80014a6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800148a:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_InitTick+0xdc>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001494:	fbb3 f3f2 	udiv	r3, r3, r2
 8001498:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800149c:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a0:	60fb      	str	r3, [r7, #12]
        break;
 80014a2:	e000      	b.n	80014a6 <HAL_InitTick+0xae>
        break;
 80014a4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f940 	bl	800172c <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e009      	b.n	80014ca <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b6:	2200      	movs	r2, #0
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	f04f 30ff 	mov.w	r0, #4294967295
 80014be:	f000 f90d 	bl	80016dc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80014c2:	4a07      	ldr	r2, [pc, #28]	@ (80014e0 <HAL_InitTick+0xe8>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000024 	.word	0x20000024
 80014d8:	e000e010 	.word	0xe000e010
 80014dc:	2000001c 	.word	0x2000001c
 80014e0:	20000020 	.word	0x20000020

080014e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000024 	.word	0x20000024
 8001508:	20000930 	.word	0x20000930

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000930 	.word	0x20000930

08001524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff ffee 	bl	800150c <HAL_GetTick>
 8001530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d005      	beq.n	800154a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153e:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_Delay+0x44>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800154a:	bf00      	nop
 800154c:	f7ff ffde 	bl	800150c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8f7      	bhi.n	800154c <HAL_Delay+0x28>
  {
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000024 	.word	0x20000024

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	@ (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	@ (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	@ (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	@ (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	@ 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff4c 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ea:	f7ff ff63 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 80016ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	6978      	ldr	r0, [r7, #20]
 80016f6:	f7ff ffb3 	bl	8001660 <NVIC_EncodePriority>
 80016fa:	4602      	mov	r2, r0
 80016fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff82 	bl	800160c <__NVIC_SetPriority>
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff56 	bl	80015d0 <__NVIC_EnableIRQ>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800173c:	d301      	bcc.n	8001742 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800173e:	2301      	movs	r3, #1
 8001740:	e00d      	b.n	800175e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001742:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_SYSTICK_Config+0x40>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <HAL_SYSTICK_Config+0x40>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_SYSTICK_Config+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a05      	ldr	r2, [pc, #20]	@ (800176c <HAL_SYSTICK_Config+0x40>)
 8001756:	f043 0303 	orr.w	r3, r3, #3
 800175a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b04      	cmp	r3, #4
 800177c:	d844      	bhi.n	8001808 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800177e:	a201      	add	r2, pc, #4	@ (adr r2, 8001784 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	080017a7 	.word	0x080017a7
 8001788:	080017c5 	.word	0x080017c5
 800178c:	080017e7 	.word	0x080017e7
 8001790:	08001809 	.word	0x08001809
 8001794:	08001799 	.word	0x08001799
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001798:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1e      	ldr	r2, [pc, #120]	@ (8001818 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6013      	str	r3, [r2, #0]
      break;
 80017a4:	e031      	b.n	800180a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001818 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80017b2:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b8:	4a18      	ldr	r2, [pc, #96]	@ (800181c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017ba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80017c2:	e022      	b.n	800180a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a13      	ldr	r2, [pc, #76]	@ (8001818 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017ca:	f023 0304 	bic.w	r3, r3, #4
 80017ce:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017da:	4a10      	ldr	r2, [pc, #64]	@ (800181c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80017e4:	e011      	b.n	800180a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017ec:	f023 0304 	bic.w	r3, r3, #4
 80017f0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80017f2:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017fc:	4a07      	ldr	r2, [pc, #28]	@ (800181c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001806:	e000      	b.n	800180a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001808:	bf00      	nop
  }
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010
 800181c:	46020c00 	.word	0x46020c00

08001820 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001832:	2304      	movs	r3, #4
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	e021      	b.n	800187c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001838:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001842:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800184a:	d011      	beq.n	8001870 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001852:	d810      	bhi.n	8001876 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001860:	d003      	beq.n	800186a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001862:	e008      	b.n	8001876 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
        break;
 8001868:	e008      	b.n	800187c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800186a:	2301      	movs	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
        break;
 800186e:	e005      	b.n	800187c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001870:	2302      	movs	r3, #2
 8001872:	607b      	str	r3, [r7, #4]
        break;
 8001874:	e002      	b.n	800187c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
        break;
 800187a:	bf00      	nop
    }
  }
  return systick_source;
 800187c:	687b      	ldr	r3, [r7, #4]
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010
 8001890:	46020c00 	.word	0x46020c00

08001894 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff fe36 	bl	800150c <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0db      	b.n	8001a64 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6e      	ldr	r2, [pc, #440]	@ (8001a6c <HAL_DMA_Init+0x1d8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	f000 809f 	beq.w	80019f6 <HAL_DMA_Init+0x162>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a6c      	ldr	r2, [pc, #432]	@ (8001a70 <HAL_DMA_Init+0x1dc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	f000 8099 	beq.w	80019f6 <HAL_DMA_Init+0x162>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001a74 <HAL_DMA_Init+0x1e0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	f000 8093 	beq.w	80019f6 <HAL_DMA_Init+0x162>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a68      	ldr	r2, [pc, #416]	@ (8001a78 <HAL_DMA_Init+0x1e4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	f000 808d 	beq.w	80019f6 <HAL_DMA_Init+0x162>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a66      	ldr	r2, [pc, #408]	@ (8001a7c <HAL_DMA_Init+0x1e8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	f000 8087 	beq.w	80019f6 <HAL_DMA_Init+0x162>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a64      	ldr	r2, [pc, #400]	@ (8001a80 <HAL_DMA_Init+0x1ec>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	f000 8081 	beq.w	80019f6 <HAL_DMA_Init+0x162>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a62      	ldr	r2, [pc, #392]	@ (8001a84 <HAL_DMA_Init+0x1f0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d07b      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a61      	ldr	r2, [pc, #388]	@ (8001a88 <HAL_DMA_Init+0x1f4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d076      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a5f      	ldr	r2, [pc, #380]	@ (8001a8c <HAL_DMA_Init+0x1f8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d071      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a5e      	ldr	r2, [pc, #376]	@ (8001a90 <HAL_DMA_Init+0x1fc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d06c      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a5c      	ldr	r2, [pc, #368]	@ (8001a94 <HAL_DMA_Init+0x200>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d067      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a5b      	ldr	r2, [pc, #364]	@ (8001a98 <HAL_DMA_Init+0x204>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d062      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a59      	ldr	r2, [pc, #356]	@ (8001a9c <HAL_DMA_Init+0x208>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d05d      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a58      	ldr	r2, [pc, #352]	@ (8001aa0 <HAL_DMA_Init+0x20c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d058      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a56      	ldr	r2, [pc, #344]	@ (8001aa4 <HAL_DMA_Init+0x210>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d053      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a55      	ldr	r2, [pc, #340]	@ (8001aa8 <HAL_DMA_Init+0x214>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d04e      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a53      	ldr	r2, [pc, #332]	@ (8001aac <HAL_DMA_Init+0x218>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d049      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a52      	ldr	r2, [pc, #328]	@ (8001ab0 <HAL_DMA_Init+0x21c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d044      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a50      	ldr	r2, [pc, #320]	@ (8001ab4 <HAL_DMA_Init+0x220>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d03f      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ab8 <HAL_DMA_Init+0x224>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d03a      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a4d      	ldr	r2, [pc, #308]	@ (8001abc <HAL_DMA_Init+0x228>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d035      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac0 <HAL_DMA_Init+0x22c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d030      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a4a      	ldr	r2, [pc, #296]	@ (8001ac4 <HAL_DMA_Init+0x230>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d02b      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a49      	ldr	r2, [pc, #292]	@ (8001ac8 <HAL_DMA_Init+0x234>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d026      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a47      	ldr	r2, [pc, #284]	@ (8001acc <HAL_DMA_Init+0x238>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d021      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a46      	ldr	r2, [pc, #280]	@ (8001ad0 <HAL_DMA_Init+0x23c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d01c      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a44      	ldr	r2, [pc, #272]	@ (8001ad4 <HAL_DMA_Init+0x240>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d017      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a43      	ldr	r2, [pc, #268]	@ (8001ad8 <HAL_DMA_Init+0x244>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d012      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a41      	ldr	r2, [pc, #260]	@ (8001adc <HAL_DMA_Init+0x248>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00d      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a40      	ldr	r2, [pc, #256]	@ (8001ae0 <HAL_DMA_Init+0x24c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d008      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a3e      	ldr	r2, [pc, #248]	@ (8001ae4 <HAL_DMA_Init+0x250>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d003      	beq.n	80019f6 <HAL_DMA_Init+0x162>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ae8 <HAL_DMA_Init+0x254>)
 80019f4:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2202      	movs	r2, #2
 8001a02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0206 	orr.w	r2, r2, #6
 8001a14:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001a16:	e00f      	b.n	8001a38 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001a18:	f7ff fd78 	bl	800150c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d908      	bls.n	8001a38 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2210      	movs	r2, #16
 8001a2a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2203      	movs	r2, #3
 8001a30:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e015      	b.n	8001a64 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1e8      	bne.n	8001a18 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 face 	bl	8001fe8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40020050 	.word	0x40020050
 8001a70:	50020050 	.word	0x50020050
 8001a74:	400200d0 	.word	0x400200d0
 8001a78:	500200d0 	.word	0x500200d0
 8001a7c:	40020150 	.word	0x40020150
 8001a80:	50020150 	.word	0x50020150
 8001a84:	400201d0 	.word	0x400201d0
 8001a88:	500201d0 	.word	0x500201d0
 8001a8c:	40020250 	.word	0x40020250
 8001a90:	50020250 	.word	0x50020250
 8001a94:	400202d0 	.word	0x400202d0
 8001a98:	500202d0 	.word	0x500202d0
 8001a9c:	40020350 	.word	0x40020350
 8001aa0:	50020350 	.word	0x50020350
 8001aa4:	400203d0 	.word	0x400203d0
 8001aa8:	500203d0 	.word	0x500203d0
 8001aac:	40020450 	.word	0x40020450
 8001ab0:	50020450 	.word	0x50020450
 8001ab4:	400204d0 	.word	0x400204d0
 8001ab8:	500204d0 	.word	0x500204d0
 8001abc:	40020550 	.word	0x40020550
 8001ac0:	50020550 	.word	0x50020550
 8001ac4:	400205d0 	.word	0x400205d0
 8001ac8:	500205d0 	.word	0x500205d0
 8001acc:	40020650 	.word	0x40020650
 8001ad0:	50020650 	.word	0x50020650
 8001ad4:	400206d0 	.word	0x400206d0
 8001ad8:	500206d0 	.word	0x500206d0
 8001adc:	40020750 	.word	0x40020750
 8001ae0:	50020750 	.word	0x50020750
 8001ae4:	400207d0 	.word	0x400207d0
 8001ae8:	500207d0 	.word	0x500207d0

08001aec <HAL_DMA_Start>:
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *const hdma,
                                uint32_t SrcAddress,
                                uint32_t DstAddress,
                                uint32_t SrcDataSize)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_DMA_Start+0x18>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e02f      	b.n	8001b64 <HAL_DMA_Start+0x78>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_DMA_Start+0x26>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e028      	b.n	8001b64 <HAL_DMA_Start+0x78>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d116      	bne.n	8001b54 <HAL_DMA_Start+0x68>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 fa2f 	bl	8001f9e <DMA_SetConfig>

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	e007      	b.n	8001b64 <HAL_DMA_Start+0x78>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2240      	movs	r2, #64	@ 0x40
 8001b58:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001b74:	f7ff fcca 	bl	800150c <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e06b      	b.n	8001c5c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d008      	beq.n	8001ba2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2220      	movs	r2, #32
 8001b94:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e05c      	b.n	8001c5c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0204 	orr.w	r2, r2, #4
 8001bb0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2205      	movs	r2, #5
 8001bb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001bba:	e020      	b.n	8001bfe <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001bbc:	f7ff fca6 	bl	800150c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d919      	bls.n	8001bfe <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bce:	f043 0210 	orr.w	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bee:	2201      	movs	r2, #1
 8001bf0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e02e      	b.n	8001c5c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0d7      	beq.n	8001bbc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0202 	orr.w	r2, r2, #2
 8001c1a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001c2c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c46:	2201      	movs	r2, #1
 8001c48:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001c74:	f023 030f 	bic.w	r3, r3, #15
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c82:	3b50      	subs	r3, #80	@ 0x50
 8001c84:	09db      	lsrs	r3, r3, #7
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 813b 	beq.w	8001f1a <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d011      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cc8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d011      	beq.n	8001d08 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cfa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d00:	f043 0202 	orr.w	r2, r3, #2
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d011      	beq.n	8001d3a <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00a      	beq.n	8001d3a <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d2c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	f043 0204 	orr.w	r2, r3, #4
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d011      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00a      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d5e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d64:	f043 0208 	orr.w	r2, r3, #8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d013      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00c      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d90:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d04c      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d045      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dc6:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d12e      	bne.n	8001e32 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001de2:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0202 	orr.w	r2, r2, #2
 8001df2:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2200      	movs	r2, #0
 8001e16:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d07a      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
        }

        return;
 8001e30:	e075      	b.n	8001f1e <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2205      	movs	r2, #5
 8001e36:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d039      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d032      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d012      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d116      	bne.n	8001eaa <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d111      	bne.n	8001eaa <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e92:	2201      	movs	r2, #1
 8001e94:	731a      	strb	r2, [r3, #12]
 8001e96:	e008      	b.n	8001eaa <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d103      	bne.n	8001eaa <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001eb2:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d025      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0202 	orr.w	r2, r2, #2
 8001ee2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001efc:	2201      	movs	r2, #1
 8001efe:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
 8001f18:	e002      	b.n	8001f20 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001f1a:	bf00      	nop
 8001f1c:	e000      	b.n	8001f20 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001f1e:	bf00      	nop
    }
  }
}
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e02b      	b.n	8001f92 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f42:	f023 030f 	bic.w	r3, r3, #15
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f50:	3b50      	subs	r3, #80	@ 0x50
 8001f52:	09db      	lsrs	r3, r3, #7
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	2201      	movs	r2, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d012      	beq.n	8001f90 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f003 0311 	and.w	r3, r3, #17
 8001f70:	2b11      	cmp	r3, #17
 8001f72:	d106      	bne.n	8001f82 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	e006      	b.n	8001f90 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb2:	0c1b      	lsrs	r3, r3, #16
 8001fb4:	041b      	lsls	r3, r3, #16
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	b291      	uxth	r1, r2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001fca:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	430a      	orrs	r2, r1
 8002008:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a53      	ldr	r2, [pc, #332]	@ (8002174 <DMA_Init+0x18c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	f000 80a0 	beq.w	800216e <DMA_Init+0x186>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a51      	ldr	r2, [pc, #324]	@ (8002178 <DMA_Init+0x190>)
 8002034:	4293      	cmp	r3, r2
 8002036:	f000 809a 	beq.w	800216e <DMA_Init+0x186>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a4f      	ldr	r2, [pc, #316]	@ (800217c <DMA_Init+0x194>)
 8002040:	4293      	cmp	r3, r2
 8002042:	f000 8094 	beq.w	800216e <DMA_Init+0x186>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a4d      	ldr	r2, [pc, #308]	@ (8002180 <DMA_Init+0x198>)
 800204c:	4293      	cmp	r3, r2
 800204e:	f000 808e 	beq.w	800216e <DMA_Init+0x186>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a4b      	ldr	r2, [pc, #300]	@ (8002184 <DMA_Init+0x19c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	f000 8088 	beq.w	800216e <DMA_Init+0x186>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a49      	ldr	r2, [pc, #292]	@ (8002188 <DMA_Init+0x1a0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	f000 8082 	beq.w	800216e <DMA_Init+0x186>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a47      	ldr	r2, [pc, #284]	@ (800218c <DMA_Init+0x1a4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d07c      	beq.n	800216e <DMA_Init+0x186>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a45      	ldr	r2, [pc, #276]	@ (8002190 <DMA_Init+0x1a8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d077      	beq.n	800216e <DMA_Init+0x186>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a44      	ldr	r2, [pc, #272]	@ (8002194 <DMA_Init+0x1ac>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d072      	beq.n	800216e <DMA_Init+0x186>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a42      	ldr	r2, [pc, #264]	@ (8002198 <DMA_Init+0x1b0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d06d      	beq.n	800216e <DMA_Init+0x186>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a41      	ldr	r2, [pc, #260]	@ (800219c <DMA_Init+0x1b4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d068      	beq.n	800216e <DMA_Init+0x186>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a3f      	ldr	r2, [pc, #252]	@ (80021a0 <DMA_Init+0x1b8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d063      	beq.n	800216e <DMA_Init+0x186>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a3e      	ldr	r2, [pc, #248]	@ (80021a4 <DMA_Init+0x1bc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d05e      	beq.n	800216e <DMA_Init+0x186>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a3c      	ldr	r2, [pc, #240]	@ (80021a8 <DMA_Init+0x1c0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d059      	beq.n	800216e <DMA_Init+0x186>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a3b      	ldr	r2, [pc, #236]	@ (80021ac <DMA_Init+0x1c4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d054      	beq.n	800216e <DMA_Init+0x186>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a39      	ldr	r2, [pc, #228]	@ (80021b0 <DMA_Init+0x1c8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d04f      	beq.n	800216e <DMA_Init+0x186>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a38      	ldr	r2, [pc, #224]	@ (80021b4 <DMA_Init+0x1cc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d04a      	beq.n	800216e <DMA_Init+0x186>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a36      	ldr	r2, [pc, #216]	@ (80021b8 <DMA_Init+0x1d0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d045      	beq.n	800216e <DMA_Init+0x186>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a35      	ldr	r2, [pc, #212]	@ (80021bc <DMA_Init+0x1d4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d040      	beq.n	800216e <DMA_Init+0x186>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a33      	ldr	r2, [pc, #204]	@ (80021c0 <DMA_Init+0x1d8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d03b      	beq.n	800216e <DMA_Init+0x186>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a32      	ldr	r2, [pc, #200]	@ (80021c4 <DMA_Init+0x1dc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d036      	beq.n	800216e <DMA_Init+0x186>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a30      	ldr	r2, [pc, #192]	@ (80021c8 <DMA_Init+0x1e0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d031      	beq.n	800216e <DMA_Init+0x186>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2f      	ldr	r2, [pc, #188]	@ (80021cc <DMA_Init+0x1e4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d02c      	beq.n	800216e <DMA_Init+0x186>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2d      	ldr	r2, [pc, #180]	@ (80021d0 <DMA_Init+0x1e8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d027      	beq.n	800216e <DMA_Init+0x186>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2c      	ldr	r2, [pc, #176]	@ (80021d4 <DMA_Init+0x1ec>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <DMA_Init+0x186>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2a      	ldr	r2, [pc, #168]	@ (80021d8 <DMA_Init+0x1f0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01d      	beq.n	800216e <DMA_Init+0x186>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a29      	ldr	r2, [pc, #164]	@ (80021dc <DMA_Init+0x1f4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d018      	beq.n	800216e <DMA_Init+0x186>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a27      	ldr	r2, [pc, #156]	@ (80021e0 <DMA_Init+0x1f8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <DMA_Init+0x186>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a26      	ldr	r2, [pc, #152]	@ (80021e4 <DMA_Init+0x1fc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00e      	beq.n	800216e <DMA_Init+0x186>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a24      	ldr	r2, [pc, #144]	@ (80021e8 <DMA_Init+0x200>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d009      	beq.n	800216e <DMA_Init+0x186>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <DMA_Init+0x204>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <DMA_Init+0x186>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a21      	ldr	r2, [pc, #132]	@ (80021f0 <DMA_Init+0x208>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d142      	bne.n	80021f4 <DMA_Init+0x20c>
 800216e:	2301      	movs	r3, #1
 8002170:	e041      	b.n	80021f6 <DMA_Init+0x20e>
 8002172:	bf00      	nop
 8002174:	40020050 	.word	0x40020050
 8002178:	50020050 	.word	0x50020050
 800217c:	400200d0 	.word	0x400200d0
 8002180:	500200d0 	.word	0x500200d0
 8002184:	40020150 	.word	0x40020150
 8002188:	50020150 	.word	0x50020150
 800218c:	400201d0 	.word	0x400201d0
 8002190:	500201d0 	.word	0x500201d0
 8002194:	40020250 	.word	0x40020250
 8002198:	50020250 	.word	0x50020250
 800219c:	400202d0 	.word	0x400202d0
 80021a0:	500202d0 	.word	0x500202d0
 80021a4:	40020350 	.word	0x40020350
 80021a8:	50020350 	.word	0x50020350
 80021ac:	400203d0 	.word	0x400203d0
 80021b0:	500203d0 	.word	0x500203d0
 80021b4:	40020450 	.word	0x40020450
 80021b8:	50020450 	.word	0x50020450
 80021bc:	400204d0 	.word	0x400204d0
 80021c0:	500204d0 	.word	0x500204d0
 80021c4:	40020550 	.word	0x40020550
 80021c8:	50020550 	.word	0x50020550
 80021cc:	400205d0 	.word	0x400205d0
 80021d0:	500205d0 	.word	0x500205d0
 80021d4:	40020650 	.word	0x40020650
 80021d8:	50020650 	.word	0x50020650
 80021dc:	400206d0 	.word	0x400206d0
 80021e0:	500206d0 	.word	0x500206d0
 80021e4:	40020750 	.word	0x40020750
 80021e8:	50020750 	.word	0x50020750
 80021ec:	400207d0 	.word	0x400207d0
 80021f0:	500207d0 	.word	0x500207d0
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d012      	beq.n	8002220 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002202:	3b01      	subs	r3, #1
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800220a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	3b01      	subs	r3, #1
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002218:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	430a      	orrs	r2, r1
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002252:	f040 80b0 	bne.w	80023b6 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a82      	ldr	r2, [pc, #520]	@ (8002464 <DMA_Init+0x47c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	f000 80a0 	beq.w	80023a2 <DMA_Init+0x3ba>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a80      	ldr	r2, [pc, #512]	@ (8002468 <DMA_Init+0x480>)
 8002268:	4293      	cmp	r3, r2
 800226a:	f000 809a 	beq.w	80023a2 <DMA_Init+0x3ba>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7e      	ldr	r2, [pc, #504]	@ (800246c <DMA_Init+0x484>)
 8002274:	4293      	cmp	r3, r2
 8002276:	f000 8094 	beq.w	80023a2 <DMA_Init+0x3ba>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7c      	ldr	r2, [pc, #496]	@ (8002470 <DMA_Init+0x488>)
 8002280:	4293      	cmp	r3, r2
 8002282:	f000 808e 	beq.w	80023a2 <DMA_Init+0x3ba>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a7a      	ldr	r2, [pc, #488]	@ (8002474 <DMA_Init+0x48c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	f000 8088 	beq.w	80023a2 <DMA_Init+0x3ba>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a78      	ldr	r2, [pc, #480]	@ (8002478 <DMA_Init+0x490>)
 8002298:	4293      	cmp	r3, r2
 800229a:	f000 8082 	beq.w	80023a2 <DMA_Init+0x3ba>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a76      	ldr	r2, [pc, #472]	@ (800247c <DMA_Init+0x494>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d07c      	beq.n	80023a2 <DMA_Init+0x3ba>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a74      	ldr	r2, [pc, #464]	@ (8002480 <DMA_Init+0x498>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d077      	beq.n	80023a2 <DMA_Init+0x3ba>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a73      	ldr	r2, [pc, #460]	@ (8002484 <DMA_Init+0x49c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d072      	beq.n	80023a2 <DMA_Init+0x3ba>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a71      	ldr	r2, [pc, #452]	@ (8002488 <DMA_Init+0x4a0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d06d      	beq.n	80023a2 <DMA_Init+0x3ba>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a70      	ldr	r2, [pc, #448]	@ (800248c <DMA_Init+0x4a4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d068      	beq.n	80023a2 <DMA_Init+0x3ba>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002490 <DMA_Init+0x4a8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d063      	beq.n	80023a2 <DMA_Init+0x3ba>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6d      	ldr	r2, [pc, #436]	@ (8002494 <DMA_Init+0x4ac>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d05e      	beq.n	80023a2 <DMA_Init+0x3ba>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6b      	ldr	r2, [pc, #428]	@ (8002498 <DMA_Init+0x4b0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d059      	beq.n	80023a2 <DMA_Init+0x3ba>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a6a      	ldr	r2, [pc, #424]	@ (800249c <DMA_Init+0x4b4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d054      	beq.n	80023a2 <DMA_Init+0x3ba>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a68      	ldr	r2, [pc, #416]	@ (80024a0 <DMA_Init+0x4b8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d04f      	beq.n	80023a2 <DMA_Init+0x3ba>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a67      	ldr	r2, [pc, #412]	@ (80024a4 <DMA_Init+0x4bc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d04a      	beq.n	80023a2 <DMA_Init+0x3ba>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a65      	ldr	r2, [pc, #404]	@ (80024a8 <DMA_Init+0x4c0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d045      	beq.n	80023a2 <DMA_Init+0x3ba>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a64      	ldr	r2, [pc, #400]	@ (80024ac <DMA_Init+0x4c4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d040      	beq.n	80023a2 <DMA_Init+0x3ba>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a62      	ldr	r2, [pc, #392]	@ (80024b0 <DMA_Init+0x4c8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d03b      	beq.n	80023a2 <DMA_Init+0x3ba>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a61      	ldr	r2, [pc, #388]	@ (80024b4 <DMA_Init+0x4cc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d036      	beq.n	80023a2 <DMA_Init+0x3ba>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a5f      	ldr	r2, [pc, #380]	@ (80024b8 <DMA_Init+0x4d0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d031      	beq.n	80023a2 <DMA_Init+0x3ba>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a5e      	ldr	r2, [pc, #376]	@ (80024bc <DMA_Init+0x4d4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d02c      	beq.n	80023a2 <DMA_Init+0x3ba>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a5c      	ldr	r2, [pc, #368]	@ (80024c0 <DMA_Init+0x4d8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d027      	beq.n	80023a2 <DMA_Init+0x3ba>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a5b      	ldr	r2, [pc, #364]	@ (80024c4 <DMA_Init+0x4dc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d022      	beq.n	80023a2 <DMA_Init+0x3ba>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a59      	ldr	r2, [pc, #356]	@ (80024c8 <DMA_Init+0x4e0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01d      	beq.n	80023a2 <DMA_Init+0x3ba>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a58      	ldr	r2, [pc, #352]	@ (80024cc <DMA_Init+0x4e4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d018      	beq.n	80023a2 <DMA_Init+0x3ba>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a56      	ldr	r2, [pc, #344]	@ (80024d0 <DMA_Init+0x4e8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <DMA_Init+0x3ba>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a55      	ldr	r2, [pc, #340]	@ (80024d4 <DMA_Init+0x4ec>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d00e      	beq.n	80023a2 <DMA_Init+0x3ba>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a53      	ldr	r2, [pc, #332]	@ (80024d8 <DMA_Init+0x4f0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d009      	beq.n	80023a2 <DMA_Init+0x3ba>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a52      	ldr	r2, [pc, #328]	@ (80024dc <DMA_Init+0x4f4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d004      	beq.n	80023a2 <DMA_Init+0x3ba>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a50      	ldr	r2, [pc, #320]	@ (80024e0 <DMA_Init+0x4f8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <DMA_Init+0x3be>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <DMA_Init+0x3c0>
 80023a6:	2300      	movs	r3, #0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00d      	beq.n	80023c8 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e008      	b.n	80023c8 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023be:	d103      	bne.n	80023c8 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023c6:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023ce:	4b45      	ldr	r3, [pc, #276]	@ (80024e4 <DMA_Init+0x4fc>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	68f9      	ldr	r1, [r7, #12]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a36      	ldr	r2, [pc, #216]	@ (80024c4 <DMA_Init+0x4dc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d022      	beq.n	8002434 <DMA_Init+0x44c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a35      	ldr	r2, [pc, #212]	@ (80024c8 <DMA_Init+0x4e0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d01d      	beq.n	8002434 <DMA_Init+0x44c>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a33      	ldr	r2, [pc, #204]	@ (80024cc <DMA_Init+0x4e4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d018      	beq.n	8002434 <DMA_Init+0x44c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a32      	ldr	r2, [pc, #200]	@ (80024d0 <DMA_Init+0x4e8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <DMA_Init+0x44c>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a30      	ldr	r2, [pc, #192]	@ (80024d4 <DMA_Init+0x4ec>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00e      	beq.n	8002434 <DMA_Init+0x44c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2f      	ldr	r2, [pc, #188]	@ (80024d8 <DMA_Init+0x4f0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d009      	beq.n	8002434 <DMA_Init+0x44c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2d      	ldr	r2, [pc, #180]	@ (80024dc <DMA_Init+0x4f4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d004      	beq.n	8002434 <DMA_Init+0x44c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2c      	ldr	r2, [pc, #176]	@ (80024e0 <DMA_Init+0x4f8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d101      	bne.n	8002438 <DMA_Init+0x450>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <DMA_Init+0x452>
 8002438:	2300      	movs	r3, #0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2200      	movs	r2, #0
 800244c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2200      	movs	r2, #0
 8002454:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40020050 	.word	0x40020050
 8002468:	50020050 	.word	0x50020050
 800246c:	400200d0 	.word	0x400200d0
 8002470:	500200d0 	.word	0x500200d0
 8002474:	40020150 	.word	0x40020150
 8002478:	50020150 	.word	0x50020150
 800247c:	400201d0 	.word	0x400201d0
 8002480:	500201d0 	.word	0x500201d0
 8002484:	40020250 	.word	0x40020250
 8002488:	50020250 	.word	0x50020250
 800248c:	400202d0 	.word	0x400202d0
 8002490:	500202d0 	.word	0x500202d0
 8002494:	40020350 	.word	0x40020350
 8002498:	50020350 	.word	0x50020350
 800249c:	400203d0 	.word	0x400203d0
 80024a0:	500203d0 	.word	0x500203d0
 80024a4:	40020450 	.word	0x40020450
 80024a8:	50020450 	.word	0x50020450
 80024ac:	400204d0 	.word	0x400204d0
 80024b0:	500204d0 	.word	0x500204d0
 80024b4:	40020550 	.word	0x40020550
 80024b8:	50020550 	.word	0x50020550
 80024bc:	400205d0 	.word	0x400205d0
 80024c0:	500205d0 	.word	0x500205d0
 80024c4:	40020650 	.word	0x40020650
 80024c8:	50020650 	.word	0x50020650
 80024cc:	400206d0 	.word	0x400206d0
 80024d0:	500206d0 	.word	0x500206d0
 80024d4:	40020750 	.word	0x40020750
 80024d8:	50020750 	.word	0x50020750
 80024dc:	400207d0 	.word	0x400207d0
 80024e0:	500207d0 	.word	0x500207d0
 80024e4:	3cc03180 	.word	0x3cc03180

080024e8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	@ 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80024fa:	e1ba      	b.n	8002872 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 81aa 	beq.w	800286c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a55      	ldr	r2, [pc, #340]	@ (8002670 <HAL_GPIO_Init+0x188>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d15d      	bne.n	80025dc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002526:	2201      	movs	r2, #1
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	4013      	ands	r3, r2
 8002534:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	4313      	orrs	r3, r2
 8002548:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002550:	4a48      	ldr	r2, [pc, #288]	@ (8002674 <HAL_GPIO_Init+0x18c>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002558:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800255a:	4a46      	ldr	r2, [pc, #280]	@ (8002674 <HAL_GPIO_Init+0x18c>)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	3208      	adds	r2, #8
 800256e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002572:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	4013      	ands	r3, r2
 8002588:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220b      	movs	r2, #11
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	4313      	orrs	r3, r2
 800259c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	3208      	adds	r2, #8
 80025a6:	69f9      	ldr	r1, [r7, #28]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2202      	movs	r2, #2
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e067      	b.n	80026ac <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x104>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b12      	cmp	r3, #18
 80025ea:	d145      	bne.n	8002678 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	4013      	ands	r3, r2
 800260e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f003 020f 	and.w	r2, r3, #15
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	4313      	orrs	r3, r2
 8002628:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	08da      	lsrs	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3208      	adds	r2, #8
 8002632:	69f9      	ldr	r1, [r7, #28]
 8002634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	4013      	ands	r3, r2
 800264e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0203 	and.w	r2, r3, #3
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	4313      	orrs	r3, r2
 8002664:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e01e      	b.n	80026ac <HAL_GPIO_Init+0x1c4>
 800266e:	bf00      	nop
 8002670:	46020000 	.word	0x46020000
 8002674:	0800bfc0 	.word	0x0800bfc0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	4013      	ands	r3, r2
 800268e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d00b      	beq.n	80026cc <HAL_GPIO_Init+0x1e4>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d007      	beq.n	80026cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c0:	2b11      	cmp	r3, #17
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	d130      	bne.n	800272e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002702:	2201      	movs	r2, #1
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	4013      	ands	r3, r2
 8002710:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 0201 	and.w	r2, r3, #1
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	4313      	orrs	r3, r2
 8002726:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d017      	beq.n	8002766 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	4013      	ands	r3, r2
 800274c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	4313      	orrs	r3, r2
 800275e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d07c      	beq.n	800286c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002772:	4a47      	ldr	r2, [pc, #284]	@ (8002890 <HAL_GPIO_Init+0x3a8>)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	3318      	adds	r3, #24
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	220f      	movs	r2, #15
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	4013      	ands	r3, r2
 8002794:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0a9a      	lsrs	r2, r3, #10
 800279a:	4b3e      	ldr	r3, [pc, #248]	@ (8002894 <HAL_GPIO_Init+0x3ac>)
 800279c:	4013      	ands	r3, r2
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	f002 0203 	and.w	r2, r2, #3
 80027a4:	00d2      	lsls	r2, r2, #3
 80027a6:	4093      	lsls	r3, r2
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80027ae:	4938      	ldr	r1, [pc, #224]	@ (8002890 <HAL_GPIO_Init+0x3a8>)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3318      	adds	r3, #24
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80027bc:	4b34      	ldr	r3, [pc, #208]	@ (8002890 <HAL_GPIO_Init+0x3a8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80027e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <HAL_GPIO_Init+0x3a8>)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80027e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002890 <HAL_GPIO_Init+0x3a8>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800280a:	4a21      	ldr	r2, [pc, #132]	@ (8002890 <HAL_GPIO_Init+0x3a8>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002810:	4b1f      	ldr	r3, [pc, #124]	@ (8002890 <HAL_GPIO_Init+0x3a8>)
 8002812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002816:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	4013      	ands	r3, r2
 8002820:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002836:	4a16      	ldr	r2, [pc, #88]	@ (8002890 <HAL_GPIO_Init+0x3a8>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800283e:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <HAL_GPIO_Init+0x3a8>)
 8002840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002844:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	43db      	mvns	r3, r3
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	4013      	ands	r3, r2
 800284e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002864:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <HAL_GPIO_Init+0x3a8>)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f ae3d 	bne.w	80024fc <HAL_GPIO_Init+0x14>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	3724      	adds	r7, #36	@ 0x24
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	46022000 	.word	0x46022000
 8002894:	002f7f7f 	.word	0x002f7f7f

08002898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
 80028a4:	4613      	mov	r3, r2
 80028a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028a8:	787b      	ldrb	r3, [r7, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80028b4:	e002      	b.n	80028bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	43d9      	mvns	r1, r3
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	400b      	ands	r3, r1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e08d      	b.n	8002a2a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe f9aa 	bl	8000c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2224      	movs	r2, #36	@ 0x24
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800294c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800295c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d107      	bne.n	8002976 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	e006      	b.n	8002984 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002982:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d108      	bne.n	800299e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	e007      	b.n	80029ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69d9      	ldr	r1, [r3, #28]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1a      	ldr	r2, [r3, #32]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	817b      	strh	r3, [r7, #10]
 8002a44:	4613      	mov	r3, r2
 8002a46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	f040 80da 	bne.w	8002c0a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_I2C_Master_Transmit+0x30>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e0d3      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fd4e 	bl	800150c <HAL_GetTick>
 8002a70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2319      	movs	r3, #25
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f8f0 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0be      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2221      	movs	r2, #33	@ 0x21
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	893a      	ldrh	r2, [r7, #8]
 8002aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2bff      	cmp	r3, #255	@ 0xff
 8002abe:	d90e      	bls.n	8002ade <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	22ff      	movs	r2, #255	@ 0xff
 8002ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	8979      	ldrh	r1, [r7, #10]
 8002ace:	4b51      	ldr	r3, [pc, #324]	@ (8002c14 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa88 	bl	8002fec <I2C_TransferConfig>
 8002adc:	e06c      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	8979      	ldrh	r1, [r7, #10]
 8002af0:	4b48      	ldr	r3, [pc, #288]	@ (8002c14 <HAL_I2C_Master_Transmit+0x1e0>)
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fa77 	bl	8002fec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002afe:	e05b      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	6a39      	ldr	r1, [r7, #32]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f906 	bl	8002d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e07b      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d034      	beq.n	8002bb8 <HAL_I2C_Master_Transmit+0x184>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d130      	bne.n	8002bb8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2180      	movs	r1, #128	@ 0x80
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f87f 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e04d      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2bff      	cmp	r3, #255	@ 0xff
 8002b78:	d90e      	bls.n	8002b98 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	22ff      	movs	r2, #255	@ 0xff
 8002b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	8979      	ldrh	r1, [r7, #10]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fa2b 	bl	8002fec <I2C_TransferConfig>
 8002b96:	e00f      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	2300      	movs	r3, #0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fa1a 	bl	8002fec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d19e      	bne.n	8002b00 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	6a39      	ldr	r1, [r7, #32]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f8ec 	bl	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e01a      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <HAL_I2C_Master_Transmit+0x1e4>)
 8002bea:	400b      	ands	r3, r1
 8002bec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	80002000 	.word	0x80002000
 8002c18:	fe00e800 	.word	0xfe00e800

08002c1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d103      	bne.n	8002c3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d007      	beq.n	8002c58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	619a      	str	r2, [r3, #24]
  }
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c74:	e03b      	b.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	6839      	ldr	r1, [r7, #0]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f8d6 	bl	8002e2c <I2C_IsErrorOccurred>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e041      	b.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d02d      	beq.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7fe fc3b 	bl	800150c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d122      	bne.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d113      	bne.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00f      	b.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699a      	ldr	r2, [r3, #24]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d0b4      	beq.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d22:	e033      	b.n	8002d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f87f 	bl	8002e2c <I2C_IsErrorOccurred>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e031      	b.n	8002d9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d025      	beq.n	8002d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d40:	f7fe fbe4 	bl	800150c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d302      	bcc.n	8002d56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11a      	bne.n	8002d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d013      	beq.n	8002d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e007      	b.n	8002d9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d1c4      	bne.n	8002d24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002db0:	e02f      	b.n	8002e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f838 	bl	8002e2c <I2C_IsErrorOccurred>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e02d      	b.n	8002e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7fe fba1 	bl	800150c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d11a      	bne.n	8002e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d013      	beq.n	8002e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	f043 0220 	orr.w	r2, r3, #32
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e007      	b.n	8002e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d1c8      	bne.n	8002db2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	@ 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d068      	beq.n	8002f2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e60:	e049      	b.n	8002ef6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d045      	beq.n	8002ef6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e6a:	f7fe fb4f 	bl	800150c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <I2C_IsErrorOccurred+0x54>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d13a      	bne.n	8002ef6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ea2:	d121      	bne.n	8002ee8 <I2C_IsErrorOccurred+0xbc>
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eaa:	d01d      	beq.n	8002ee8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	d01a      	beq.n	8002ee8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ec0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ec2:	f7fe fb23 	bl	800150c <HAL_GetTick>
 8002ec6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec8:	e00e      	b.n	8002ee8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eca:	f7fe fb1f 	bl	800150c <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b19      	cmp	r3, #25
 8002ed6:	d907      	bls.n	8002ee8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	f043 0320 	orr.w	r3, r3, #32
 8002ede:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002ee6:	e006      	b.n	8002ef6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d1e9      	bne.n	8002eca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d003      	beq.n	8002f0c <I2C_IsErrorOccurred+0xe0>
 8002f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0aa      	beq.n	8002e62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d103      	bne.n	8002f1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	f043 0308 	orr.w	r3, r3, #8
 8002f64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	f043 0302 	orr.w	r3, r3, #2
 8002f86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01c      	beq.n	8002fda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff fe3b 	bl	8002c1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <I2C_IsErrorOccurred+0x1bc>)
 8002fb2:	400b      	ands	r3, r1
 8002fb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002fda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3728      	adds	r7, #40	@ 0x28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	fe00e800 	.word	0xfe00e800

08002fec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	817b      	strh	r3, [r7, #10]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ffe:	897b      	ldrh	r3, [r7, #10]
 8003000:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003004:	7a7b      	ldrb	r3, [r7, #9]
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800300c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	4313      	orrs	r3, r2
 8003016:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800301a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	0d5b      	lsrs	r3, r3, #21
 8003026:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800302a:	4b08      	ldr	r3, [pc, #32]	@ (800304c <I2C_TransferConfig+0x60>)
 800302c:	430b      	orrs	r3, r1
 800302e:	43db      	mvns	r3, r3
 8003030:	ea02 0103 	and.w	r1, r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800303e:	bf00      	nop
 8003040:	371c      	adds	r7, #28
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	03ff63ff 	.word	0x03ff63ff

08003050 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b20      	cmp	r3, #32
 8003064:	d138      	bne.n	80030d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003070:	2302      	movs	r3, #2
 8003072:	e032      	b.n	80030da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2224      	movs	r2, #36	@ 0x24
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e000      	b.n	80030da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
  }
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d139      	bne.n	8003170 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003106:	2302      	movs	r3, #2
 8003108:	e033      	b.n	8003172 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2224      	movs	r2, #36	@ 0x24
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0201 	bic.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003138:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	e007      	b.n	80031ae <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800319e:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 0204 	bic.w	r2, r3, #4
 80031a6:	4905      	ldr	r1, [pc, #20]	@ (80031bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
  }

  return status;
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40030400 	.word	0x40030400

080031c0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80031c4:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <HAL_ICACHE_Enable+0x1c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a04      	ldr	r2, [pc, #16]	@ (80031dc <HAL_ICACHE_Enable+0x1c>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40030400 	.word	0x40030400

080031e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e108      	b.n	8003404 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7fd ff89 	bl	8001124 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2203      	movs	r2, #3
 8003216:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4a7b      	ldr	r2, [pc, #492]	@ (800340c <HAL_PCD_Init+0x22c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d102      	bne.n	8003228 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f005 fb32 	bl	8008896 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7c1a      	ldrb	r2, [r3, #16]
 800323a:	f88d 2000 	strb.w	r2, [sp]
 800323e:	3304      	adds	r3, #4
 8003240:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003242:	f005 fa47 	bl	80086d4 <USB_CoreInit>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0d5      	b.n	8003404 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f005 fb2a 	bl	80088b8 <USB_SetCurrentMode>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2202      	movs	r2, #2
 800326e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0c6      	b.n	8003404 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
 800327a:	e04a      	b.n	8003312 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	3315      	adds	r3, #21
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003290:	7bfa      	ldrb	r2, [r7, #15]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3314      	adds	r3, #20
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032a4:	7bfa      	ldrb	r2, [r7, #15]
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	b298      	uxth	r0, r3
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	332e      	adds	r3, #46	@ 0x2e
 80032b8:	4602      	mov	r2, r0
 80032ba:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3318      	adds	r3, #24
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	331c      	adds	r3, #28
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	3320      	adds	r3, #32
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	3324      	adds	r3, #36	@ 0x24
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	3301      	adds	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	791b      	ldrb	r3, [r3, #4]
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	429a      	cmp	r2, r3
 800331a:	d3af      	bcc.n	800327c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e044      	b.n	80033ac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800334a:	7bfa      	ldrb	r2, [r7, #15]
 800334c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	3301      	adds	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	791b      	ldrb	r3, [r3, #4]
 80033b0:	7bfa      	ldrb	r2, [r7, #15]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d3b5      	bcc.n	8003322 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7c1a      	ldrb	r2, [r3, #16]
 80033be:	f88d 2000 	strb.w	r2, [sp]
 80033c2:	3304      	adds	r3, #4
 80033c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c6:	f005 fac3 	bl	8008950 <USB_DevInit>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e013      	b.n	8003404 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	7b1b      	ldrb	r3, [r3, #12]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d102      	bne.n	80033f8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f001 f96a 	bl	80046cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f006 faee 	bl	80099de <USB_DevDisconnect>

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	42040000 	.word	0x42040000

08003410 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_PCD_Start+0x1c>
 8003428:	2302      	movs	r3, #2
 800342a:	e01c      	b.n	8003466 <HAL_PCD_Start+0x56>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7b5b      	ldrb	r3, [r3, #13]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f005 fa11 	bl	8008874 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f006 faa0 	bl	800999c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800346e:	b590      	push	{r4, r7, lr}
 8003470:	b08d      	sub	sp, #52	@ 0x34
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f006 fb5e 	bl	8009b46 <USB_GetMode>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 84b9 	bne.w	8003e04 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f006 fac2 	bl	8009a20 <USB_ReadInterrupts>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 84af 	beq.w	8003e02 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f006 faaf 	bl	8009a20 <USB_ReadInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d107      	bne.n	80034dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f002 0202 	and.w	r2, r2, #2
 80034da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f006 fa9d 	bl	8009a20 <USB_ReadInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d161      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0210 	bic.w	r2, r2, #16
 80034fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 020f 	and.w	r2, r3, #15
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	0c5b      	lsrs	r3, r3, #17
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	2b02      	cmp	r3, #2
 800352a:	d124      	bne.n	8003576 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d035      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003546:	b29b      	uxth	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	6a38      	ldr	r0, [r7, #32]
 800354c:	f006 f8d4 	bl	80096f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800355c:	441a      	add	r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800356e:	441a      	add	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	615a      	str	r2, [r3, #20]
 8003574:	e016      	b.n	80035a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	0c5b      	lsrs	r3, r3, #17
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	2b06      	cmp	r3, #6
 8003580:	d110      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003588:	2208      	movs	r2, #8
 800358a:	4619      	mov	r1, r3
 800358c:	6a38      	ldr	r0, [r7, #32]
 800358e:	f006 f8b3 	bl	80096f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800359e:	441a      	add	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0210 	orr.w	r2, r2, #16
 80035b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f006 fa31 	bl	8009a20 <USB_ReadInterrupts>
 80035be:	4603      	mov	r3, r0
 80035c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035c8:	f040 80a7 	bne.w	800371a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f006 fa36 	bl	8009a46 <USB_ReadDevAllOutEpInterrupt>
 80035da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80035dc:	e099      	b.n	8003712 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 808e 	beq.w	8003706 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f006 fa5a 	bl	8009aae <USB_ReadDevOutEPInterrupt>
 80035fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003612:	461a      	mov	r2, r3
 8003614:	2301      	movs	r3, #1
 8003616:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003618:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fed0 	bl	80043c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00c      	beq.n	8003644 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003636:	461a      	mov	r2, r3
 8003638:	2308      	movs	r3, #8
 800363a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800363c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 ffa6 	bl	8004590 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800365a:	461a      	mov	r2, r3
 800365c:	2310      	movs	r3, #16
 800365e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d030      	beq.n	80036cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003672:	2b80      	cmp	r3, #128	@ 0x80
 8003674:	d109      	bne.n	800368a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003684:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003688:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800368a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	3304      	adds	r3, #4
 800369e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	78db      	ldrb	r3, [r3, #3]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d108      	bne.n	80036ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2200      	movs	r2, #0
 80036ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f006 fd95 	bl	800a1e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c6:	461a      	mov	r2, r3
 80036c8:	2302      	movs	r3, #2
 80036ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036e2:	461a      	mov	r2, r3
 80036e4:	2320      	movs	r3, #32
 80036e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036fe:	461a      	mov	r2, r3
 8003700:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003704:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	3301      	adds	r3, #1
 800370a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	f47f af62 	bne.w	80035de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f006 f97e 	bl	8009a20 <USB_ReadInterrupts>
 8003724:	4603      	mov	r3, r0
 8003726:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800372a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800372e:	f040 80db 	bne.w	80038e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f006 f99f 	bl	8009a7a <USB_ReadDevAllInEpInterrupt>
 800373c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003742:	e0cd      	b.n	80038e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80c2 	beq.w	80038d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f006 f9c5 	bl	8009aea <USB_ReadDevInEPInterrupt>
 8003760:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d057      	beq.n	800381c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	2201      	movs	r2, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	43db      	mvns	r3, r3
 8003786:	69f9      	ldr	r1, [r7, #28]
 8003788:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800378c:	4013      	ands	r3, r2
 800378e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800379c:	461a      	mov	r2, r3
 800379e:	2301      	movs	r3, #1
 80037a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	799b      	ldrb	r3, [r3, #6]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d132      	bne.n	8003810 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	3320      	adds	r3, #32
 80037ba:	6819      	ldr	r1, [r3, #0]
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4403      	add	r3, r0
 80037ca:	331c      	adds	r3, #28
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4419      	add	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4403      	add	r3, r0
 80037de:	3320      	adds	r3, #32
 80037e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d113      	bne.n	8003810 <HAL_PCD_IRQHandler+0x3a2>
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	3324      	adds	r3, #36	@ 0x24
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d108      	bne.n	8003810 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003808:	461a      	mov	r2, r3
 800380a:	2101      	movs	r1, #1
 800380c:	f006 f9cc 	bl	8009ba8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003812:	b2db      	uxtb	r3, r3
 8003814:	4619      	mov	r1, r3
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f006 fc68 	bl	800a0ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003832:	461a      	mov	r2, r3
 8003834:	2308      	movs	r3, #8
 8003836:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800384e:	461a      	mov	r2, r3
 8003850:	2310      	movs	r3, #16
 8003852:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800386a:	461a      	mov	r2, r3
 800386c:	2340      	movs	r3, #64	@ 0x40
 800386e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d023      	beq.n	80038c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800387a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800387c:	6a38      	ldr	r0, [r7, #32]
 800387e:	f005 f9b3 	bl	8008be8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	3310      	adds	r3, #16
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	3304      	adds	r3, #4
 8003894:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	78db      	ldrb	r3, [r3, #3]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d108      	bne.n	80038b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	4619      	mov	r1, r3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f006 fcac 	bl	800a208 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038bc:	461a      	mov	r2, r3
 80038be:	2302      	movs	r3, #2
 80038c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80038cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fcea 	bl	80042a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	3301      	adds	r3, #1
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80038da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80038e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f47f af2e 	bne.w	8003744 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f006 f897 	bl	8009a20 <USB_ReadInterrupts>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038fc:	d122      	bne.n	8003944 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003918:	2b01      	cmp	r3, #1
 800391a:	d108      	bne.n	800392e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003924:	2100      	movs	r1, #0
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f006 fe2c 	bl	800a584 <HAL_PCDEx_LPM_Callback>
 800392c:	e002      	b.n	8003934 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f006 fc3c 	bl	800a1ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f006 f869 	bl	8009a20 <USB_ReadInterrupts>
 800394e:	4603      	mov	r3, r0
 8003950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003958:	d112      	bne.n	8003980 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d102      	bne.n	8003970 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f006 fc04 	bl	800a178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800397e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f006 f84b 	bl	8009a20 <USB_ReadInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003994:	d121      	bne.n	80039da <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80039a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d111      	bne.n	80039d4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80039ca:	2101      	movs	r1, #1
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f006 fdd9 	bl	800a584 <HAL_PCDEx_LPM_Callback>
 80039d2:	e002      	b.n	80039da <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f006 fbcf 	bl	800a178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f006 f81e 	bl	8009a20 <USB_ReadInterrupts>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ee:	f040 80b7 	bne.w	8003b60 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f005 f8eb 	bl	8008be8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a16:	e046      	b.n	8003aa6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a24:	461a      	mov	r2, r3
 8003a26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a70:	0151      	lsls	r1, r2, #5
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	440a      	add	r2, r1
 8003a76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	791b      	ldrb	r3, [r3, #4]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d3b2      	bcc.n	8003a18 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ac0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ac4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7bdb      	ldrb	r3, [r3, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ade:	f043 030b 	orr.w	r3, r3, #11
 8003ae2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003af4:	f043 030b 	orr.w	r3, r3, #11
 8003af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003afa:	e015      	b.n	8003b28 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b0e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003b12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b22:	f043 030b 	orr.w	r3, r3, #11
 8003b26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b36:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003b3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f006 f82c 	bl	8009ba8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f005 ff5b 	bl	8009a20 <USB_ReadInterrupts>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b74:	d123      	bne.n	8003bbe <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f005 fff1 	bl	8009b62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f005 f8a8 	bl	8008cda <USB_GetDevSpeed>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681c      	ldr	r4, [r3, #0]
 8003b96:	f002 f839 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
 8003b9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f004 fdc4 	bl	8008730 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f006 fac7 	bl	800a13c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f005 ff2c 	bl	8009a20 <USB_ReadInterrupts>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d10a      	bne.n	8003be8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f006 faa4 	bl	800a120 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f002 0208 	and.w	r2, r2, #8
 8003be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f005 ff17 	bl	8009a20 <USB_ReadInterrupts>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf8:	2b80      	cmp	r3, #128	@ 0x80
 8003bfa:	d123      	bne.n	8003c44 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c08:	2301      	movs	r3, #1
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0c:	e014      	b.n	8003c38 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fb0a 	bl	8004246 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	3301      	adds	r3, #1
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	791b      	ldrb	r3, [r3, #4]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d3e4      	bcc.n	8003c0e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f005 fee9 	bl	8009a20 <USB_ReadInterrupts>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c58:	d13c      	bne.n	8003cd4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c5e:	e02b      	b.n	8003cb8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	3318      	adds	r3, #24
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d115      	bne.n	8003cb2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da12      	bge.n	8003cb2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c90:	4613      	mov	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3317      	adds	r3, #23
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	4619      	mov	r1, r3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 faca 	bl	8004246 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	791b      	ldrb	r3, [r3, #4]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d3cd      	bcc.n	8003c60 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f005 fea1 	bl	8009a20 <USB_ReadInterrupts>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ce4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ce8:	d156      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cea:	2301      	movs	r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cee:	e045      	b.n	8003d7c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d12e      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	da2b      	bge.n	8003d76 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	0c1a      	lsrs	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003d28:	4053      	eors	r3, r2
 8003d2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d121      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d72:	6053      	str	r3, [r2, #4]
            break;
 8003d74:	e008      	b.n	8003d88 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	3301      	adds	r3, #1
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	791b      	ldrb	r3, [r3, #4]
 8003d80:	461a      	mov	r2, r3
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d3b3      	bcc.n	8003cf0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f005 fe3f 	bl	8009a20 <USB_ReadInterrupts>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dac:	d10a      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f006 fa3c 	bl	800a22c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f005 fe29 	bl	8009a20 <USB_ReadInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d115      	bne.n	8003e04 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f006 fa2c 	bl	800a248 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	e000      	b.n	8003e04 <HAL_PCD_IRQHandler+0x996>
      return;
 8003e02:	bf00      	nop
    }
  }
}
 8003e04:	3734      	adds	r7, #52	@ 0x34
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd90      	pop	{r4, r7, pc}

08003e0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_PCD_SetAddress+0x1a>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e012      	b.n	8003e4a <HAL_PCD_SetAddress+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f005 fd88 	bl	8009950 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	4608      	mov	r0, r1
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4603      	mov	r3, r0
 8003e62:	70fb      	strb	r3, [r7, #3]
 8003e64:	460b      	mov	r3, r1
 8003e66:	803b      	strh	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da0f      	bge.n	8003e98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3310      	adds	r3, #16
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	705a      	strb	r2, [r3, #1]
 8003e96:	e00f      	b.n	8003eb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	f003 020f 	and.w	r2, r3, #15
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	3304      	adds	r3, #4
 8003eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003ec4:	883b      	ldrh	r3, [r7, #0]
 8003ec6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	78ba      	ldrb	r2, [r7, #2]
 8003ed2:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	785b      	ldrb	r3, [r3, #1]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ee6:	78bb      	ldrb	r3, [r7, #2]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d102      	bne.n	8003ef2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_PCD_EP_Open+0xae>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e00e      	b.n	8003f1e <HAL_PCD_EP_Open+0xcc>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f004 ff08 	bl	8008d24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003f1c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	da0f      	bge.n	8003f5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	f003 020f 	and.w	r2, r3, #15
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	3310      	adds	r3, #16
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3304      	adds	r3, #4
 8003f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	705a      	strb	r2, [r3, #1]
 8003f58:	e00f      	b.n	8003f7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4413      	add	r3, r2
 8003f70:	3304      	adds	r3, #4
 8003f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_PCD_EP_Close+0x6e>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e00e      	b.n	8003fb2 <HAL_PCD_EP_Close+0x8c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68f9      	ldr	r1, [r7, #12]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f004 ff46 	bl	8008e34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b086      	sub	sp, #24
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fca:	7afb      	ldrb	r3, [r7, #11]
 8003fcc:	f003 020f 	and.w	r2, r3, #15
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffc:	7afb      	ldrb	r3, [r7, #11]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	b2da      	uxtb	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	799b      	ldrb	r3, [r3, #6]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d102      	bne.n	8004016 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	799b      	ldrb	r3, [r3, #6]
 800401e:	461a      	mov	r2, r3
 8004020:	6979      	ldr	r1, [r7, #20]
 8004022:	f004 ffe3 	bl	8008fec <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 020f 	and.w	r2, r3, #15
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	460b      	mov	r3, r1
 800406e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004070:	7afb      	ldrb	r3, [r7, #11]
 8004072:	f003 020f 	and.w	r2, r3, #15
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	3310      	adds	r3, #16
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	3304      	adds	r3, #4
 8004086:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2200      	movs	r2, #0
 8004098:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2201      	movs	r2, #1
 800409e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040a0:	7afb      	ldrb	r3, [r7, #11]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	799b      	ldrb	r3, [r3, #6]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d102      	bne.n	80040ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	799b      	ldrb	r3, [r3, #6]
 80040c2:	461a      	mov	r2, r3
 80040c4:	6979      	ldr	r1, [r7, #20]
 80040c6:	f004 ff91 	bl	8008fec <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	7912      	ldrb	r2, [r2, #4]
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e04f      	b.n	8004192 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	da0f      	bge.n	800411a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	f003 020f 	and.w	r2, r3, #15
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	3310      	adds	r3, #16
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	3304      	adds	r3, #4
 8004110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	705a      	strb	r2, [r3, #1]
 8004118:	e00d      	b.n	8004136 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	4413      	add	r3, r2
 800412c:	3304      	adds	r3, #4
 800412e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	b2da      	uxtb	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_PCD_EP_SetStall+0x82>
 8004152:	2302      	movs	r3, #2
 8004154:	e01d      	b.n	8004192 <HAL_PCD_EP_SetStall+0xbe>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	4618      	mov	r0, r3
 8004166:	f005 fb1f 	bl	80097a8 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	2b00      	cmp	r3, #0
 8004172:	d109      	bne.n	8004188 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	7999      	ldrb	r1, [r3, #6]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004182:	461a      	mov	r2, r3
 8004184:	f005 fd10 	bl	8009ba8 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	7912      	ldrb	r2, [r2, #4]
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e042      	b.n	800423e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da0f      	bge.n	80041e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	f003 020f 	and.w	r2, r3, #15
 80041c6:	4613      	mov	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	3310      	adds	r3, #16
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	3304      	adds	r3, #4
 80041d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	705a      	strb	r2, [r3, #1]
 80041de:	e00f      	b.n	8004200 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	f003 020f 	and.w	r2, r3, #15
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	3304      	adds	r3, #4
 80041f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_PCD_EP_ClrStall+0x86>
 800421c:	2302      	movs	r3, #2
 800421e:	e00e      	b.n	800423e <HAL_PCD_EP_ClrStall+0xa4>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68f9      	ldr	r1, [r7, #12]
 800422e:	4618      	mov	r0, r3
 8004230:	f005 fb28 	bl	8009884 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004256:	2b00      	cmp	r3, #0
 8004258:	da0c      	bge.n	8004274 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	f003 020f 	and.w	r2, r3, #15
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	3310      	adds	r3, #16
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	3304      	adds	r3, #4
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	e00c      	b.n	800428e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	f003 020f 	and.w	r2, r3, #15
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	3304      	adds	r3, #4
 800428c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68f9      	ldr	r1, [r7, #12]
 8004294:	4618      	mov	r0, r3
 8004296:	f005 f947 	bl	8009528 <USB_EPStopXfer>
 800429a:	4603      	mov	r3, r0
 800429c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800429e:	7afb      	ldrb	r3, [r7, #11]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	@ 0x28
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	4613      	mov	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	3310      	adds	r3, #16
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4413      	add	r3, r2
 80042cc:	3304      	adds	r3, #4
 80042ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d901      	bls.n	80042e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e06b      	b.n	80043b8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d902      	bls.n	80042fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	3303      	adds	r3, #3
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004304:	e02a      	b.n	800435c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	429a      	cmp	r2, r3
 800431a:	d902      	bls.n	8004322 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	3303      	adds	r3, #3
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68d9      	ldr	r1, [r3, #12]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	b2da      	uxtb	r2, r3
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	4603      	mov	r3, r0
 800433e:	6978      	ldr	r0, [r7, #20]
 8004340:	f005 f99c 	bl	800967c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	441a      	add	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	441a      	add	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	429a      	cmp	r2, r3
 8004370:	d809      	bhi.n	8004386 <PCD_WriteEmptyTxFifo+0xde>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800437a:	429a      	cmp	r2, r3
 800437c:	d203      	bcs.n	8004386 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1bf      	bne.n	8004306 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	429a      	cmp	r2, r3
 8004390:	d811      	bhi.n	80043b6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	2201      	movs	r2, #1
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	6939      	ldr	r1, [r7, #16]
 80043ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043b2:	4013      	ands	r3, r2
 80043b4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	333c      	adds	r3, #60	@ 0x3c
 80043d8:	3304      	adds	r3, #4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	799b      	ldrb	r3, [r3, #6]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d17b      	bne.n	80044ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d015      	beq.n	800442c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4a61      	ldr	r2, [pc, #388]	@ (8004588 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	f240 80b9 	bls.w	800457c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80b3 	beq.w	800457c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004422:	461a      	mov	r2, r3
 8004424:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004428:	6093      	str	r3, [r2, #8]
 800442a:	e0a7      	b.n	800457c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004442:	461a      	mov	r2, r3
 8004444:	2320      	movs	r3, #32
 8004446:	6093      	str	r3, [r2, #8]
 8004448:	e098      	b.n	800457c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 8093 	bne.w	800457c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	4a4b      	ldr	r2, [pc, #300]	@ (8004588 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d90f      	bls.n	800447e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004474:	461a      	mov	r2, r3
 8004476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800447a:	6093      	str	r3, [r2, #8]
 800447c:	e07e      	b.n	800457c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	4413      	add	r3, r2
 8004490:	3304      	adds	r3, #4
 8004492:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1a      	ldr	r2, [r3, #32]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	0159      	lsls	r1, r3, #5
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	440b      	add	r3, r1
 80044a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044aa:	1ad2      	subs	r2, r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d114      	bne.n	80044e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044c8:	461a      	mov	r2, r3
 80044ca:	2101      	movs	r1, #1
 80044cc:	f005 fb6c 	bl	8009ba8 <USB_EP0_OutStart>
 80044d0:	e006      	b.n	80044e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	441a      	add	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f005 fde5 	bl	800a0b6 <HAL_PCD_DataOutStageCallback>
 80044ec:	e046      	b.n	800457c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	4a26      	ldr	r2, [pc, #152]	@ (800458c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d124      	bne.n	8004540 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450c:	461a      	mov	r2, r3
 800450e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004512:	6093      	str	r3, [r2, #8]
 8004514:	e032      	b.n	800457c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800452c:	461a      	mov	r2, r3
 800452e:	2320      	movs	r3, #32
 8004530:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	4619      	mov	r1, r3
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f005 fdbc 	bl	800a0b6 <HAL_PCD_DataOutStageCallback>
 800453e:	e01d      	b.n	800457c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d114      	bne.n	8004570 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	4613      	mov	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d108      	bne.n	8004570 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004568:	461a      	mov	r2, r3
 800456a:	2100      	movs	r1, #0
 800456c:	f005 fb1c 	bl	8009ba8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f005 fd9d 	bl	800a0b6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	4f54300a 	.word	0x4f54300a
 800458c:	4f54310a 	.word	0x4f54310a

08004590 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	333c      	adds	r3, #60	@ 0x3c
 80045a8:	3304      	adds	r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4a15      	ldr	r2, [pc, #84]	@ (8004618 <PCD_EP_OutSetupPacket_int+0x88>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d90e      	bls.n	80045e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045dc:	461a      	mov	r2, r3
 80045de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f005 fd54 	bl	800a092 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004618 <PCD_EP_OutSetupPacket_int+0x88>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d90c      	bls.n	800460c <PCD_EP_OutSetupPacket_int+0x7c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	799b      	ldrb	r3, [r3, #6]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d108      	bne.n	800460c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004604:	461a      	mov	r2, r3
 8004606:	2101      	movs	r1, #1
 8004608:	f005 face 	bl	8009ba8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	4f54300a 	.word	0x4f54300a

0800461c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	70fb      	strb	r3, [r7, #3]
 8004628:	4613      	mov	r3, r2
 800462a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d107      	bne.n	800464a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800463a:	883b      	ldrh	r3, [r7, #0]
 800463c:	0419      	lsls	r1, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	430a      	orrs	r2, r1
 8004646:	629a      	str	r2, [r3, #40]	@ 0x28
 8004648:	e028      	b.n	800469c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	4413      	add	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004658:	2300      	movs	r3, #0
 800465a:	73fb      	strb	r3, [r7, #15]
 800465c:	e00d      	b.n	800467a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	3340      	adds	r3, #64	@ 0x40
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4413      	add	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	3301      	adds	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	3b01      	subs	r3, #1
 8004680:	429a      	cmp	r2, r3
 8004682:	d3ec      	bcc.n	800465e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004684:	883b      	ldrh	r3, [r7, #0]
 8004686:	0418      	lsls	r0, r3, #16
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6819      	ldr	r1, [r3, #0]
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	3b01      	subs	r3, #1
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	4302      	orrs	r2, r0
 8004694:	3340      	adds	r3, #64	@ 0x40
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	887a      	ldrh	r2, [r7, #2]
 80046bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046fe:	f043 0303 	orr.w	r3, r3, #3
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800471c:	4b39      	ldr	r3, [pc, #228]	@ (8004804 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800471e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004720:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004724:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	429a      	cmp	r2, r3
 800472c:	d10b      	bne.n	8004746 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004734:	d905      	bls.n	8004742 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004736:	4b33      	ldr	r3, [pc, #204]	@ (8004804 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	4a32      	ldr	r2, [pc, #200]	@ (8004804 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800473c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004740:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e057      	b.n	80047f6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800474c:	d90a      	bls.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800474e:	4b2d      	ldr	r3, [pc, #180]	@ (8004804 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4313      	orrs	r3, r2
 800475a:	4a2a      	ldr	r2, [pc, #168]	@ (8004804 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800475c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004760:	60d3      	str	r3, [r2, #12]
 8004762:	e007      	b.n	8004774 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004764:	4b27      	ldr	r3, [pc, #156]	@ (8004804 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800476c:	4925      	ldr	r1, [pc, #148]	@ (8004804 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4313      	orrs	r3, r2
 8004772:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004774:	4b24      	ldr	r3, [pc, #144]	@ (8004808 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a24      	ldr	r2, [pc, #144]	@ (800480c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	099b      	lsrs	r3, r3, #6
 8004780:	2232      	movs	r2, #50	@ 0x32
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	4a21      	ldr	r2, [pc, #132]	@ (800480c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	099b      	lsrs	r3, r3, #6
 800478e:	3301      	adds	r3, #1
 8004790:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004792:	e002      	b.n	800479a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3b01      	subs	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800479a:	4b1a      	ldr	r3, [pc, #104]	@ (8004804 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <HAL_PWREx_ControlVoltageScaling+0x98>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f3      	bne.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01b      	beq.n	80047ea <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80047b2:	4b15      	ldr	r3, [pc, #84]	@ (8004808 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a15      	ldr	r2, [pc, #84]	@ (800480c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	099b      	lsrs	r3, r3, #6
 80047be:	2232      	movs	r2, #50	@ 0x32
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	4a11      	ldr	r2, [pc, #68]	@ (800480c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	3301      	adds	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80047d0:	e002      	b.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80047d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <HAL_PWREx_ControlVoltageScaling+0xd6>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f3      	bne.n	80047d2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e000      	b.n	80047f6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	46020800 	.word	0x46020800
 8004808:	2000001c 	.word	0x2000001c
 800480c:	10624dd3 	.word	0x10624dd3

08004810 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004814:	4b04      	ldr	r3, [pc, #16]	@ (8004828 <HAL_PWREx_GetVoltageRange+0x18>)
 8004816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004818:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	46020800 	.word	0x46020800

0800482c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004830:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	4a04      	ldr	r2, [pc, #16]	@ (8004848 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800483a:	6113      	str	r3, [r2, #16]
}
 800483c:	bf00      	nop
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	46020800 	.word	0x46020800

0800484c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004850:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	4a04      	ldr	r2, [pc, #16]	@ (8004868 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004856:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800485a:	6113      	str	r3, [r2, #16]
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	46020800 	.word	0x46020800

0800486c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08e      	sub	sp, #56	@ 0x38
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004874:	2300      	movs	r3, #0
 8004876:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	f000 bec8 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004886:	4b99      	ldr	r3, [pc, #612]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004890:	4b96      	ldr	r3, [pc, #600]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 816c 	beq.w	8004b80 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80048a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <HAL_RCC_OscConfig+0x52>
 80048ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	f040 80de 	bne.w	8004a72 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	f040 80da 	bne.w	8004a72 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f000 bea5 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048d0:	4b86      	ldr	r3, [pc, #536]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d004      	beq.n	80048e6 <HAL_RCC_OscConfig+0x7a>
 80048dc:	4b83      	ldr	r3, [pc, #524]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80048e4:	e005      	b.n	80048f2 <HAL_RCC_OscConfig+0x86>
 80048e6:	4b81      	ldr	r3, [pc, #516]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 80048e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d255      	bcs.n	80049a2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	4618      	mov	r0, r3
 8004902:	f001 f99d 	bl	8005c40 <RCC_SetFlashLatencyFromMSIRange>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f000 be82 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004912:	4b76      	ldr	r3, [pc, #472]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	4a75      	ldr	r2, [pc, #468]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004918:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800491c:	6093      	str	r3, [r2, #8]
 800491e:	4b73      	ldr	r3, [pc, #460]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	4970      	ldr	r1, [pc, #448]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004938:	d309      	bcc.n	800494e <HAL_RCC_OscConfig+0xe2>
 800493a:	4b6c      	ldr	r3, [pc, #432]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f023 021f 	bic.w	r2, r3, #31
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	4969      	ldr	r1, [pc, #420]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004948:	4313      	orrs	r3, r2
 800494a:	60cb      	str	r3, [r1, #12]
 800494c:	e07e      	b.n	8004a4c <HAL_RCC_OscConfig+0x1e0>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	da0a      	bge.n	800496c <HAL_RCC_OscConfig+0x100>
 8004956:	4b65      	ldr	r3, [pc, #404]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	015b      	lsls	r3, r3, #5
 8004964:	4961      	ldr	r1, [pc, #388]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004966:	4313      	orrs	r3, r2
 8004968:	60cb      	str	r3, [r1, #12]
 800496a:	e06f      	b.n	8004a4c <HAL_RCC_OscConfig+0x1e0>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004974:	d30a      	bcc.n	800498c <HAL_RCC_OscConfig+0x120>
 8004976:	4b5d      	ldr	r3, [pc, #372]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	029b      	lsls	r3, r3, #10
 8004984:	4959      	ldr	r1, [pc, #356]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004986:	4313      	orrs	r3, r2
 8004988:	60cb      	str	r3, [r1, #12]
 800498a:	e05f      	b.n	8004a4c <HAL_RCC_OscConfig+0x1e0>
 800498c:	4b57      	ldr	r3, [pc, #348]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	03db      	lsls	r3, r3, #15
 800499a:	4954      	ldr	r1, [pc, #336]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 800499c:	4313      	orrs	r3, r2
 800499e:	60cb      	str	r3, [r1, #12]
 80049a0:	e054      	b.n	8004a4c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80049a2:	4b52      	ldr	r3, [pc, #328]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	4a51      	ldr	r2, [pc, #324]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 80049a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049ac:	6093      	str	r3, [r2, #8]
 80049ae:	4b4f      	ldr	r3, [pc, #316]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ba:	494c      	ldr	r1, [pc, #304]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80049c8:	d309      	bcc.n	80049de <HAL_RCC_OscConfig+0x172>
 80049ca:	4b48      	ldr	r3, [pc, #288]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f023 021f 	bic.w	r2, r3, #31
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4945      	ldr	r1, [pc, #276]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	60cb      	str	r3, [r1, #12]
 80049dc:	e028      	b.n	8004a30 <HAL_RCC_OscConfig+0x1c4>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da0a      	bge.n	80049fc <HAL_RCC_OscConfig+0x190>
 80049e6:	4b41      	ldr	r3, [pc, #260]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	015b      	lsls	r3, r3, #5
 80049f4:	493d      	ldr	r1, [pc, #244]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60cb      	str	r3, [r1, #12]
 80049fa:	e019      	b.n	8004a30 <HAL_RCC_OscConfig+0x1c4>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a04:	d30a      	bcc.n	8004a1c <HAL_RCC_OscConfig+0x1b0>
 8004a06:	4b39      	ldr	r3, [pc, #228]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	029b      	lsls	r3, r3, #10
 8004a14:	4935      	ldr	r1, [pc, #212]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60cb      	str	r3, [r1, #12]
 8004a1a:	e009      	b.n	8004a30 <HAL_RCC_OscConfig+0x1c4>
 8004a1c:	4b33      	ldr	r3, [pc, #204]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	03db      	lsls	r3, r3, #15
 8004a2a:	4930      	ldr	r1, [pc, #192]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f001 f900 	bl	8005c40 <RCC_SetFlashLatencyFromMSIRange>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f000 bde5 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004a4c:	f001 f8de 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a50:	4b27      	ldr	r3, [pc, #156]	@ (8004af0 <HAL_RCC_OscConfig+0x284>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fc fccf 	bl	80013f8 <HAL_InitTick>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 808a 	beq.w	8004b7e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a6e:	f000 bdd2 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d066      	beq.n	8004b48 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a86:	f7fc fd41 	bl	800150c <HAL_GetTick>
 8004a8a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004a8c:	e009      	b.n	8004aa2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a8e:	f7fc fd3d 	bl	800150c <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d902      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	f000 bdba 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004aa2:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0ef      	beq.n	8004a8e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004aae:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004ab4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ab8:	6093      	str	r3, [r2, #8]
 8004aba:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	4909      	ldr	r1, [pc, #36]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004ad4:	d30e      	bcc.n	8004af4 <HAL_RCC_OscConfig+0x288>
 8004ad6:	4b05      	ldr	r3, [pc, #20]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f023 021f 	bic.w	r2, r3, #31
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	4902      	ldr	r1, [pc, #8]	@ (8004aec <HAL_RCC_OscConfig+0x280>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60cb      	str	r3, [r1, #12]
 8004ae8:	e04a      	b.n	8004b80 <HAL_RCC_OscConfig+0x314>
 8004aea:	bf00      	nop
 8004aec:	46020c00 	.word	0x46020c00
 8004af0:	20000020 	.word	0x20000020
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	da0a      	bge.n	8004b12 <HAL_RCC_OscConfig+0x2a6>
 8004afc:	4b98      	ldr	r3, [pc, #608]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	015b      	lsls	r3, r3, #5
 8004b0a:	4995      	ldr	r1, [pc, #596]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60cb      	str	r3, [r1, #12]
 8004b10:	e036      	b.n	8004b80 <HAL_RCC_OscConfig+0x314>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1a:	d30a      	bcc.n	8004b32 <HAL_RCC_OscConfig+0x2c6>
 8004b1c:	4b90      	ldr	r3, [pc, #576]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	029b      	lsls	r3, r3, #10
 8004b2a:	498d      	ldr	r1, [pc, #564]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60cb      	str	r3, [r1, #12]
 8004b30:	e026      	b.n	8004b80 <HAL_RCC_OscConfig+0x314>
 8004b32:	4b8b      	ldr	r3, [pc, #556]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	03db      	lsls	r3, r3, #15
 8004b40:	4987      	ldr	r1, [pc, #540]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60cb      	str	r3, [r1, #12]
 8004b46:	e01b      	b.n	8004b80 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004b48:	4b85      	ldr	r3, [pc, #532]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a84      	ldr	r2, [pc, #528]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b54:	f7fc fcda 	bl	800150c <HAL_GetTick>
 8004b58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004b5a:	e009      	b.n	8004b70 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b5c:	f7fc fcd6 	bl	800150c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d902      	bls.n	8004b70 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	f000 bd53 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004b70:	4b7b      	ldr	r3, [pc, #492]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ef      	bne.n	8004b5c <HAL_RCC_OscConfig+0x2f0>
 8004b7c:	e000      	b.n	8004b80 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004b7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 808b 	beq.w	8004ca4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d005      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x334>
 8004b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b96:	2b0c      	cmp	r3, #12
 8004b98:	d109      	bne.n	8004bae <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d106      	bne.n	8004bae <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d17d      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f000 bd34 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb6:	d106      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x35a>
 8004bb8:	4b69      	ldr	r3, [pc, #420]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a68      	ldr	r2, [pc, #416]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e041      	b.n	8004c4a <HAL_RCC_OscConfig+0x3de>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bce:	d112      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x38a>
 8004bd0:	4b63      	ldr	r3, [pc, #396]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a62      	ldr	r2, [pc, #392]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004bd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b60      	ldr	r3, [pc, #384]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a5f      	ldr	r2, [pc, #380]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004be2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4b5d      	ldr	r3, [pc, #372]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a5c      	ldr	r2, [pc, #368]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	e029      	b.n	8004c4a <HAL_RCC_OscConfig+0x3de>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004bfe:	d112      	bne.n	8004c26 <HAL_RCC_OscConfig+0x3ba>
 8004c00:	4b57      	ldr	r3, [pc, #348]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a56      	ldr	r2, [pc, #344]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b54      	ldr	r3, [pc, #336]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a53      	ldr	r2, [pc, #332]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	4b51      	ldr	r3, [pc, #324]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a50      	ldr	r2, [pc, #320]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	e011      	b.n	8004c4a <HAL_RCC_OscConfig+0x3de>
 8004c26:	4b4e      	ldr	r3, [pc, #312]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a4d      	ldr	r2, [pc, #308]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	4b4b      	ldr	r3, [pc, #300]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a4a      	ldr	r2, [pc, #296]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	4b48      	ldr	r3, [pc, #288]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a47      	ldr	r2, [pc, #284]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004c48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d014      	beq.n	8004c7c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004c52:	f7fc fc5b 	bl	800150c <HAL_GetTick>
 8004c56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c58:	e009      	b.n	8004c6e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c5a:	f7fc fc57 	bl	800150c <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b64      	cmp	r3, #100	@ 0x64
 8004c66:	d902      	bls.n	8004c6e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	f000 bcd4 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0ef      	beq.n	8004c5a <HAL_RCC_OscConfig+0x3ee>
 8004c7a:	e013      	b.n	8004ca4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004c7c:	f7fc fc46 	bl	800150c <HAL_GetTick>
 8004c80:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c82:	e009      	b.n	8004c98 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c84:	f7fc fc42 	bl	800150c <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	@ 0x64
 8004c90:	d902      	bls.n	8004c98 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	f000 bcbf 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c98:	4b31      	ldr	r3, [pc, #196]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ef      	bne.n	8004c84 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d05f      	beq.n	8004d70 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d005      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x456>
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	2b0c      	cmp	r3, #12
 8004cba:	d114      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d111      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d102      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f000 bca3 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004cd0:	4b23      	ldr	r3, [pc, #140]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	041b      	lsls	r3, r3, #16
 8004cde:	4920      	ldr	r1, [pc, #128]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ce4:	e044      	b.n	8004d70 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d024      	beq.n	8004d38 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004cee:	4b1c      	ldr	r3, [pc, #112]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004cfa:	f7fc fc07 	bl	800150c <HAL_GetTick>
 8004cfe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d00:	e009      	b.n	8004d16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d02:	f7fc fc03 	bl	800150c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d902      	bls.n	8004d16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	f000 bc80 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d16:	4b12      	ldr	r3, [pc, #72]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0ef      	beq.n	8004d02 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004d22:	4b0f      	ldr	r3, [pc, #60]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	490b      	ldr	r1, [pc, #44]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	610b      	str	r3, [r1, #16]
 8004d36:	e01b      	b.n	8004d70 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004d38:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a08      	ldr	r2, [pc, #32]	@ (8004d60 <HAL_RCC_OscConfig+0x4f4>)
 8004d3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d42:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d44:	f7fc fbe2 	bl	800150c <HAL_GetTick>
 8004d48:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d4a:	e00b      	b.n	8004d64 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d4c:	f7fc fbde 	bl	800150c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d904      	bls.n	8004d64 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	f000 bc5b 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
 8004d60:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d64:	4baf      	ldr	r3, [pc, #700]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ed      	bne.n	8004d4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80c8 	beq.w	8004f0e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d84:	4ba7      	ldr	r3, [pc, #668]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d111      	bne.n	8004db6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	4ba4      	ldr	r3, [pc, #656]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d98:	4aa2      	ldr	r2, [pc, #648]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004da2:	4ba0      	ldr	r3, [pc, #640]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004db6:	4b9c      	ldr	r3, [pc, #624]	@ (8005028 <HAL_RCC_OscConfig+0x7bc>)
 8004db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d119      	bne.n	8004df6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004dc2:	4b99      	ldr	r3, [pc, #612]	@ (8005028 <HAL_RCC_OscConfig+0x7bc>)
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc6:	4a98      	ldr	r2, [pc, #608]	@ (8005028 <HAL_RCC_OscConfig+0x7bc>)
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dce:	f7fc fb9d 	bl	800150c <HAL_GetTick>
 8004dd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004dd4:	e009      	b.n	8004dea <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd6:	f7fc fb99 	bl	800150c <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d902      	bls.n	8004dea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	f000 bc16 	b.w	8005616 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004dea:	4b8f      	ldr	r3, [pc, #572]	@ (8005028 <HAL_RCC_OscConfig+0x7bc>)
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0ef      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d05f      	beq.n	8004ebe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004dfe:	4b89      	ldr	r3, [pc, #548]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e04:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d037      	beq.n	8004e84 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d006      	beq.n	8004e2c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e3f4      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01b      	beq.n	8004e6e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004e36:	4b7b      	ldr	r3, [pc, #492]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e3c:	4a79      	ldr	r2, [pc, #484]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004e3e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004e42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004e46:	f7fc fb61 	bl	800150c <HAL_GetTick>
 8004e4a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e4e:	f7fc fb5d 	bl	800150c <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e3da      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e60:	4b70      	ldr	r3, [pc, #448]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1ef      	bne.n	8004e4e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	4969      	ldr	r1, [pc, #420]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004e84:	4b67      	ldr	r3, [pc, #412]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e8a:	4a66      	ldr	r2, [pc, #408]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004e8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004e94:	f7fc fb3a 	bl	800150c <HAL_GetTick>
 8004e98:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9c:	f7fc fb36 	bl	800150c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b05      	cmp	r3, #5
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e3b3      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004eae:	4b5d      	ldr	r3, [pc, #372]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0ef      	beq.n	8004e9c <HAL_RCC_OscConfig+0x630>
 8004ebc:	e01b      	b.n	8004ef6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004ebe:	4b59      	ldr	r3, [pc, #356]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ec4:	4a57      	ldr	r2, [pc, #348]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004ec6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004eca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004ece:	f7fc fb1d 	bl	800150c <HAL_GetTick>
 8004ed2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed6:	f7fc fb19 	bl	800150c <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b05      	cmp	r3, #5
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e396      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1ef      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ef6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d107      	bne.n	8004f0e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efe:	4b49      	ldr	r3, [pc, #292]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f04:	4a47      	ldr	r2, [pc, #284]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004f06:	f023 0304 	bic.w	r3, r3, #4
 8004f0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8111 	beq.w	800513e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f22:	4b40      	ldr	r3, [pc, #256]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d111      	bne.n	8004f54 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f30:	4b3c      	ldr	r3, [pc, #240]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f36:	4a3b      	ldr	r2, [pc, #236]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004f38:	f043 0304 	orr.w	r3, r3, #4
 8004f3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004f40:	4b38      	ldr	r3, [pc, #224]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f54:	4b34      	ldr	r3, [pc, #208]	@ (8005028 <HAL_RCC_OscConfig+0x7bc>)
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d118      	bne.n	8004f92 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004f60:	4b31      	ldr	r3, [pc, #196]	@ (8005028 <HAL_RCC_OscConfig+0x7bc>)
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	4a30      	ldr	r2, [pc, #192]	@ (8005028 <HAL_RCC_OscConfig+0x7bc>)
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6c:	f7fc face 	bl	800150c <HAL_GetTick>
 8004f70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f74:	f7fc faca 	bl	800150c <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e347      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f86:	4b28      	ldr	r3, [pc, #160]	@ (8005028 <HAL_RCC_OscConfig+0x7bc>)
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01f      	beq.n	8004fde <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d010      	beq.n	8004fcc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004faa:	4b1e      	ldr	r3, [pc, #120]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004fb2:	f043 0304 	orr.w	r3, r3, #4
 8004fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fba:	4b1a      	ldr	r3, [pc, #104]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fc0:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004fca:	e018      	b.n	8004ffe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fcc:	4b15      	ldr	r3, [pc, #84]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fd2:	4a14      	ldr	r2, [pc, #80]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004fdc:	e00f      	b.n	8004ffe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fde:	4b11      	ldr	r3, [pc, #68]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004fe6:	f023 0301 	bic.w	r3, r3, #1
 8004fea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004fee:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8005024 <HAL_RCC_OscConfig+0x7b8>)
 8004ff6:	f023 0304 	bic.w	r3, r3, #4
 8004ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d057      	beq.n	80050b6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005006:	f7fc fa81 	bl	800150c <HAL_GetTick>
 800500a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800500c:	e00e      	b.n	800502c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fc fa7d 	bl	800150c <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d905      	bls.n	800502c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e2f8      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
 8005024:	46020c00 	.word	0x46020c00
 8005028:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800502c:	4b9c      	ldr	r3, [pc, #624]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 800502e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0e9      	beq.n	800500e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01b      	beq.n	800507e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005046:	4b96      	ldr	r3, [pc, #600]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800504c:	4a94      	ldr	r2, [pc, #592]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 800504e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005052:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005056:	e00a      	b.n	800506e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005058:	f7fc fa58 	bl	800150c <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e2d3      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800506e:	4b8c      	ldr	r3, [pc, #560]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0ed      	beq.n	8005058 <HAL_RCC_OscConfig+0x7ec>
 800507c:	e053      	b.n	8005126 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800507e:	4b88      	ldr	r3, [pc, #544]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005084:	4a86      	ldr	r2, [pc, #536]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800508a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f7fc fa3c 	bl	800150c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e2b7      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80050a6:	4b7e      	ldr	r3, [pc, #504]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 80050a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1ed      	bne.n	8005090 <HAL_RCC_OscConfig+0x824>
 80050b4:	e037      	b.n	8005126 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80050b6:	f7fc fa29 	bl	800150c <HAL_GetTick>
 80050ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fc fa25 	bl	800150c <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e2a0      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050d4:	4b72      	ldr	r3, [pc, #456]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 80050d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1ed      	bne.n	80050be <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80050e2:	4b6f      	ldr	r3, [pc, #444]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 80050e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01a      	beq.n	8005126 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80050f0:	4b6b      	ldr	r3, [pc, #428]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 80050f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050f6:	4a6a      	ldr	r2, [pc, #424]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 80050f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005100:	e00a      	b.n	8005118 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fc fa03 	bl	800150c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005110:	4293      	cmp	r3, r2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e27e      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005118:	4b61      	ldr	r3, [pc, #388]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 800511a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800511e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1ed      	bne.n	8005102 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005126:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800512a:	2b01      	cmp	r3, #1
 800512c:	d107      	bne.n	800513e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512e:	4b5c      	ldr	r3, [pc, #368]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005134:	4a5a      	ldr	r2, [pc, #360]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005136:	f023 0304 	bic.w	r3, r3, #4
 800513a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d036      	beq.n	80051b8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d019      	beq.n	8005186 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005152:	4b53      	ldr	r3, [pc, #332]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a52      	ldr	r2, [pc, #328]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005158:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800515c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800515e:	f7fc f9d5 	bl	800150c <HAL_GetTick>
 8005162:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005166:	f7fc f9d1 	bl	800150c <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e24e      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005178:	4b49      	ldr	r3, [pc, #292]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x8fa>
 8005184:	e018      	b.n	80051b8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005186:	4b46      	ldr	r3, [pc, #280]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a45      	ldr	r2, [pc, #276]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 800518c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005190:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005192:	f7fc f9bb 	bl	800150c <HAL_GetTick>
 8005196:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800519a:	f7fc f9b7 	bl	800150c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e234      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80051ac:	4b3c      	ldr	r3, [pc, #240]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f0      	bne.n	800519a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d036      	beq.n	8005232 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d019      	beq.n	8005200 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80051cc:	4b34      	ldr	r3, [pc, #208]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a33      	ldr	r2, [pc, #204]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 80051d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051d8:	f7fc f998 	bl	800150c <HAL_GetTick>
 80051dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80051e0:	f7fc f994 	bl	800150c <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e211      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80051f2:	4b2b      	ldr	r3, [pc, #172]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x974>
 80051fe:	e018      	b.n	8005232 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005200:	4b27      	ldr	r3, [pc, #156]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a26      	ldr	r2, [pc, #152]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800520a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800520c:	f7fc f97e 	bl	800150c <HAL_GetTick>
 8005210:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005214:	f7fc f97a 	bl	800150c <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e1f7      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005226:	4b1e      	ldr	r3, [pc, #120]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d07f      	beq.n	800533e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005242:	2b00      	cmp	r3, #0
 8005244:	d062      	beq.n	800530c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005246:	4b16      	ldr	r3, [pc, #88]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	4a15      	ldr	r2, [pc, #84]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 800524c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005250:	6093      	str	r3, [r2, #8]
 8005252:	4b13      	ldr	r3, [pc, #76]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525e:	4910      	ldr	r1, [pc, #64]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005260:	4313      	orrs	r3, r2
 8005262:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005268:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800526c:	d309      	bcc.n	8005282 <HAL_RCC_OscConfig+0xa16>
 800526e:	4b0c      	ldr	r3, [pc, #48]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f023 021f 	bic.w	r2, r3, #31
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4909      	ldr	r1, [pc, #36]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 800527c:	4313      	orrs	r3, r2
 800527e:	60cb      	str	r3, [r1, #12]
 8005280:	e02a      	b.n	80052d8 <HAL_RCC_OscConfig+0xa6c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	da0c      	bge.n	80052a4 <HAL_RCC_OscConfig+0xa38>
 800528a:	4b05      	ldr	r3, [pc, #20]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	015b      	lsls	r3, r3, #5
 8005298:	4901      	ldr	r1, [pc, #4]	@ (80052a0 <HAL_RCC_OscConfig+0xa34>)
 800529a:	4313      	orrs	r3, r2
 800529c:	60cb      	str	r3, [r1, #12]
 800529e:	e01b      	b.n	80052d8 <HAL_RCC_OscConfig+0xa6c>
 80052a0:	46020c00 	.word	0x46020c00
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ac:	d30a      	bcc.n	80052c4 <HAL_RCC_OscConfig+0xa58>
 80052ae:	4ba1      	ldr	r3, [pc, #644]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	029b      	lsls	r3, r3, #10
 80052bc:	499d      	ldr	r1, [pc, #628]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	60cb      	str	r3, [r1, #12]
 80052c2:	e009      	b.n	80052d8 <HAL_RCC_OscConfig+0xa6c>
 80052c4:	4b9b      	ldr	r3, [pc, #620]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	03db      	lsls	r3, r3, #15
 80052d2:	4998      	ldr	r1, [pc, #608]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80052d8:	4b96      	ldr	r3, [pc, #600]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a95      	ldr	r2, [pc, #596]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80052de:	f043 0310 	orr.w	r3, r3, #16
 80052e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052e4:	f7fc f912 	bl	800150c <HAL_GetTick>
 80052e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80052ec:	f7fc f90e 	bl	800150c <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e18b      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80052fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0xa80>
 800530a:	e018      	b.n	800533e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800530c:	4b89      	ldr	r3, [pc, #548]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a88      	ldr	r2, [pc, #544]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005312:	f023 0310 	bic.w	r3, r3, #16
 8005316:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005318:	f7fc f8f8 	bl	800150c <HAL_GetTick>
 800531c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005320:	f7fc f8f4 	bl	800150c <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e171      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005332:	4b80      	ldr	r3, [pc, #512]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8166 	beq.w	8005614 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005348:	2300      	movs	r3, #0
 800534a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800534e:	4b79      	ldr	r3, [pc, #484]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	2b0c      	cmp	r3, #12
 8005358:	f000 80f2 	beq.w	8005540 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005360:	2b02      	cmp	r3, #2
 8005362:	f040 80c5 	bne.w	80054f0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005366:	4b73      	ldr	r3, [pc, #460]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a72      	ldr	r2, [pc, #456]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 800536c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005370:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005372:	f7fc f8cb 	bl	800150c <HAL_GetTick>
 8005376:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537a:	f7fc f8c7 	bl	800150c <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e144      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800538c:	4b69      	ldr	r3, [pc, #420]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005398:	4b66      	ldr	r3, [pc, #408]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 800539a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d111      	bne.n	80053ca <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	4b63      	ldr	r3, [pc, #396]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80053a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ac:	4a61      	ldr	r2, [pc, #388]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80053ae:	f043 0304 	orr.w	r3, r3, #4
 80053b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80053b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80053b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80053ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005538 <HAL_RCC_OscConfig+0xccc>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053d6:	d102      	bne.n	80053de <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80053de:	4b56      	ldr	r3, [pc, #344]	@ (8005538 <HAL_RCC_OscConfig+0xccc>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4a55      	ldr	r2, [pc, #340]	@ (8005538 <HAL_RCC_OscConfig+0xccc>)
 80053e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053e8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80053ea:	4b52      	ldr	r3, [pc, #328]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80053fe:	3a01      	subs	r2, #1
 8005400:	0212      	lsls	r2, r2, #8
 8005402:	4311      	orrs	r1, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005408:	430a      	orrs	r2, r1
 800540a:	494a      	ldr	r1, [pc, #296]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 800540c:	4313      	orrs	r3, r2
 800540e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005410:	4b48      	ldr	r3, [pc, #288]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005414:	4b49      	ldr	r3, [pc, #292]	@ (800553c <HAL_RCC_OscConfig+0xcd0>)
 8005416:	4013      	ands	r3, r2
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800541c:	3a01      	subs	r2, #1
 800541e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005426:	3a01      	subs	r2, #1
 8005428:	0252      	lsls	r2, r2, #9
 800542a:	b292      	uxth	r2, r2
 800542c:	4311      	orrs	r1, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005432:	3a01      	subs	r2, #1
 8005434:	0412      	lsls	r2, r2, #16
 8005436:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800543a:	4311      	orrs	r1, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005440:	3a01      	subs	r2, #1
 8005442:	0612      	lsls	r2, r2, #24
 8005444:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005448:	430a      	orrs	r2, r1
 800544a:	493a      	ldr	r1, [pc, #232]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 800544c:	4313      	orrs	r3, r2
 800544e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005450:	4b38      	ldr	r3, [pc, #224]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	4a37      	ldr	r2, [pc, #220]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005456:	f023 0310 	bic.w	r3, r3, #16
 800545a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005460:	4a34      	ldr	r2, [pc, #208]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005466:	4b33      	ldr	r3, [pc, #204]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	4a32      	ldr	r2, [pc, #200]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 800546c:	f043 0310 	orr.w	r3, r3, #16
 8005470:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005472:	4b30      	ldr	r3, [pc, #192]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005476:	f023 020c 	bic.w	r2, r3, #12
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547e:	492d      	ldr	r1, [pc, #180]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005480:	4313      	orrs	r3, r2
 8005482:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005484:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005488:	2b01      	cmp	r3, #1
 800548a:	d105      	bne.n	8005498 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800548c:	4b2a      	ldr	r3, [pc, #168]	@ (8005538 <HAL_RCC_OscConfig+0xccc>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4a29      	ldr	r2, [pc, #164]	@ (8005538 <HAL_RCC_OscConfig+0xccc>)
 8005492:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005496:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005498:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80054a0:	4b24      	ldr	r3, [pc, #144]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80054a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054a6:	4a23      	ldr	r2, [pc, #140]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80054a8:	f023 0304 	bic.w	r3, r3, #4
 80054ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80054b0:	4b20      	ldr	r3, [pc, #128]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80054b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80054bc:	f7fc f826 	bl	800150c <HAL_GetTick>
 80054c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c4:	f7fc f822 	bl	800150c <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e09f      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80054d6:	4b17      	ldr	r3, [pc, #92]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f0      	beq.n	80054c4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80054e2:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80054e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e6:	4a13      	ldr	r2, [pc, #76]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80054e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80054ee:	e091      	b.n	8005614 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80054f0:	4b10      	ldr	r3, [pc, #64]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a0f      	ldr	r2, [pc, #60]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 80054f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80054fc:	f7fc f806 	bl	800150c <HAL_GetTick>
 8005500:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005504:	f7fc f802 	bl	800150c <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e07f      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005516:	4b07      	ldr	r3, [pc, #28]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005522:	4b04      	ldr	r3, [pc, #16]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005526:	4a03      	ldr	r2, [pc, #12]	@ (8005534 <HAL_RCC_OscConfig+0xcc8>)
 8005528:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800552c:	f023 0303 	bic.w	r3, r3, #3
 8005530:	6293      	str	r3, [r2, #40]	@ 0x28
 8005532:	e06f      	b.n	8005614 <HAL_RCC_OscConfig+0xda8>
 8005534:	46020c00 	.word	0x46020c00
 8005538:	46020800 	.word	0x46020800
 800553c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005540:	4b37      	ldr	r3, [pc, #220]	@ (8005620 <HAL_RCC_OscConfig+0xdb4>)
 8005542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005544:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005546:	4b36      	ldr	r3, [pc, #216]	@ (8005620 <HAL_RCC_OscConfig+0xdb4>)
 8005548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005550:	2b01      	cmp	r3, #1
 8005552:	d039      	beq.n	80055c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f003 0203 	and.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555e:	429a      	cmp	r2, r3
 8005560:	d132      	bne.n	80055c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d129      	bne.n	80055c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800557e:	429a      	cmp	r2, r3
 8005580:	d122      	bne.n	80055c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800558c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800558e:	429a      	cmp	r2, r3
 8005590:	d11a      	bne.n	80055c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	0a5b      	lsrs	r3, r3, #9
 8005596:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800559e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d111      	bne.n	80055c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d108      	bne.n	80055c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	0e1b      	lsrs	r3, r3, #24
 80055ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e024      	b.n	8005616 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80055cc:	4b14      	ldr	r3, [pc, #80]	@ (8005620 <HAL_RCC_OscConfig+0xdb4>)
 80055ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d0:	08db      	lsrs	r3, r3, #3
 80055d2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80055da:	429a      	cmp	r2, r3
 80055dc:	d01a      	beq.n	8005614 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80055de:	4b10      	ldr	r3, [pc, #64]	@ (8005620 <HAL_RCC_OscConfig+0xdb4>)
 80055e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e2:	4a0f      	ldr	r2, [pc, #60]	@ (8005620 <HAL_RCC_OscConfig+0xdb4>)
 80055e4:	f023 0310 	bic.w	r3, r3, #16
 80055e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ea:	f7fb ff8f 	bl	800150c <HAL_GetTick>
 80055ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80055f0:	bf00      	nop
 80055f2:	f7fb ff8b 	bl	800150c <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d0f9      	beq.n	80055f2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005602:	4a07      	ldr	r2, [pc, #28]	@ (8005620 <HAL_RCC_OscConfig+0xdb4>)
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005608:	4b05      	ldr	r3, [pc, #20]	@ (8005620 <HAL_RCC_OscConfig+0xdb4>)
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	4a04      	ldr	r2, [pc, #16]	@ (8005620 <HAL_RCC_OscConfig+0xdb4>)
 800560e:	f043 0310 	orr.w	r3, r3, #16
 8005612:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3738      	adds	r7, #56	@ 0x38
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	46020c00 	.word	0x46020c00

08005624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e1d9      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005638:	4b9b      	ldr	r3, [pc, #620]	@ (80058a8 <HAL_RCC_ClockConfig+0x284>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d910      	bls.n	8005668 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005646:	4b98      	ldr	r3, [pc, #608]	@ (80058a8 <HAL_RCC_ClockConfig+0x284>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 020f 	bic.w	r2, r3, #15
 800564e:	4996      	ldr	r1, [pc, #600]	@ (80058a8 <HAL_RCC_ClockConfig+0x284>)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	4313      	orrs	r3, r2
 8005654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005656:	4b94      	ldr	r3, [pc, #592]	@ (80058a8 <HAL_RCC_ClockConfig+0x284>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d001      	beq.n	8005668 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e1c1      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	d010      	beq.n	8005696 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	4b8c      	ldr	r3, [pc, #560]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005680:	429a      	cmp	r2, r3
 8005682:	d908      	bls.n	8005696 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005684:	4b89      	ldr	r3, [pc, #548]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005688:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	4986      	ldr	r1, [pc, #536]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 8005692:	4313      	orrs	r3, r2
 8005694:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d012      	beq.n	80056c8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	4b81      	ldr	r3, [pc, #516]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d909      	bls.n	80056c8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80056b4:	4b7d      	ldr	r3, [pc, #500]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	497a      	ldr	r1, [pc, #488]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d010      	beq.n	80056f6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	4b74      	ldr	r3, [pc, #464]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d908      	bls.n	80056f6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80056e4:	4b71      	ldr	r3, [pc, #452]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	496e      	ldr	r1, [pc, #440]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d010      	beq.n	8005724 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	4b69      	ldr	r3, [pc, #420]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	429a      	cmp	r2, r3
 8005710:	d908      	bls.n	8005724 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005712:	4b66      	ldr	r3, [pc, #408]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 020f 	bic.w	r2, r3, #15
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	4963      	ldr	r1, [pc, #396]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 8005720:	4313      	orrs	r3, r2
 8005722:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80d2 	beq.w	80058d6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005732:	2300      	movs	r3, #0
 8005734:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d143      	bne.n	80057c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800573e:	4b5b      	ldr	r3, [pc, #364]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 8005740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d110      	bne.n	800576e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800574c:	4b57      	ldr	r3, [pc, #348]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 800574e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005752:	4a56      	ldr	r2, [pc, #344]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 8005754:	f043 0304 	orr.w	r3, r3, #4
 8005758:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800575c:	4b53      	ldr	r3, [pc, #332]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 800575e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	60bb      	str	r3, [r7, #8]
 8005768:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800576a:	2301      	movs	r3, #1
 800576c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800576e:	f7fb fecd 	bl	800150c <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005774:	4b4e      	ldr	r3, [pc, #312]	@ (80058b0 <HAL_RCC_ClockConfig+0x28c>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00f      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005780:	e008      	b.n	8005794 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005782:	f7fb fec3 	bl	800150c <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e12b      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005794:	4b46      	ldr	r3, [pc, #280]	@ (80058b0 <HAL_RCC_ClockConfig+0x28c>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f0      	beq.n	8005782 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80057a6:	4b41      	ldr	r3, [pc, #260]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80057a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ac:	4a3f      	ldr	r2, [pc, #252]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80057ae:	f023 0304 	bic.w	r3, r3, #4
 80057b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80057b6:	4b3d      	ldr	r3, [pc, #244]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d121      	bne.n	8005806 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e112      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d107      	bne.n	80057de <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ce:	4b37      	ldr	r3, [pc, #220]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d115      	bne.n	8005806 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e106      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d107      	bne.n	80057f6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80057e6:	4b31      	ldr	r3, [pc, #196]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e0fa      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057f6:	4b2d      	ldr	r3, [pc, #180]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e0f2      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005806:	4b29      	ldr	r3, [pc, #164]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f023 0203 	bic.w	r2, r3, #3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4926      	ldr	r1, [pc, #152]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 8005814:	4313      	orrs	r3, r2
 8005816:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005818:	f7fb fe78 	bl	800150c <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d112      	bne.n	800584c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005826:	e00a      	b.n	800583e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005828:	f7fb fe70 	bl	800150c <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e0d6      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800583e:	4b1b      	ldr	r3, [pc, #108]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b0c      	cmp	r3, #12
 8005848:	d1ee      	bne.n	8005828 <HAL_RCC_ClockConfig+0x204>
 800584a:	e044      	b.n	80058d6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d112      	bne.n	800587a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005854:	e00a      	b.n	800586c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005856:	f7fb fe59 	bl	800150c <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005864:	4293      	cmp	r3, r2
 8005866:	d901      	bls.n	800586c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e0bf      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800586c:	4b0f      	ldr	r3, [pc, #60]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f003 030c 	and.w	r3, r3, #12
 8005874:	2b08      	cmp	r3, #8
 8005876:	d1ee      	bne.n	8005856 <HAL_RCC_ClockConfig+0x232>
 8005878:	e02d      	b.n	80058d6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d123      	bne.n	80058ca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005882:	e00a      	b.n	800589a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005884:	f7fb fe42 	bl	800150c <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005892:	4293      	cmp	r3, r2
 8005894:	d901      	bls.n	800589a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e0a8      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800589a:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <HAL_RCC_ClockConfig+0x288>)
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1ee      	bne.n	8005884 <HAL_RCC_ClockConfig+0x260>
 80058a6:	e016      	b.n	80058d6 <HAL_RCC_ClockConfig+0x2b2>
 80058a8:	40022000 	.word	0x40022000
 80058ac:	46020c00 	.word	0x46020c00
 80058b0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b4:	f7fb fe2a 	bl	800150c <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e090      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058ca:	4b4a      	ldr	r3, [pc, #296]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	f003 030c 	and.w	r3, r3, #12
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d1ee      	bne.n	80058b4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d010      	beq.n	8005904 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	4b43      	ldr	r3, [pc, #268]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d208      	bcs.n	8005904 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80058f2:	4b40      	ldr	r3, [pc, #256]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 020f 	bic.w	r2, r3, #15
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	493d      	ldr	r1, [pc, #244]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 8005900:	4313      	orrs	r3, r2
 8005902:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005904:	4b3c      	ldr	r3, [pc, #240]	@ (80059f8 <HAL_RCC_ClockConfig+0x3d4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d210      	bcs.n	8005934 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005912:	4b39      	ldr	r3, [pc, #228]	@ (80059f8 <HAL_RCC_ClockConfig+0x3d4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f023 020f 	bic.w	r2, r3, #15
 800591a:	4937      	ldr	r1, [pc, #220]	@ (80059f8 <HAL_RCC_ClockConfig+0x3d4>)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005922:	4b35      	ldr	r3, [pc, #212]	@ (80059f8 <HAL_RCC_ClockConfig+0x3d4>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e05b      	b.n	80059ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d010      	beq.n	8005962 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	4b2b      	ldr	r3, [pc, #172]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800594c:	429a      	cmp	r2, r3
 800594e:	d208      	bcs.n	8005962 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005950:	4b28      	ldr	r3, [pc, #160]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4925      	ldr	r1, [pc, #148]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 800595e:	4313      	orrs	r3, r2
 8005960:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d012      	beq.n	8005994 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	4b20      	ldr	r3, [pc, #128]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	091b      	lsrs	r3, r3, #4
 8005978:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800597c:	429a      	cmp	r2, r3
 800597e:	d209      	bcs.n	8005994 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005980:	4b1c      	ldr	r3, [pc, #112]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	4919      	ldr	r1, [pc, #100]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 8005990:	4313      	orrs	r3, r2
 8005992:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b00      	cmp	r3, #0
 800599e:	d010      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	4b13      	ldr	r3, [pc, #76]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d208      	bcs.n	80059c2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80059b0:	4b10      	ldr	r3, [pc, #64]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	490d      	ldr	r1, [pc, #52]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80059c2:	f000 f821 	bl	8005a08 <HAL_RCC_GetSysClockFreq>
 80059c6:	4602      	mov	r2, r0
 80059c8:	4b0a      	ldr	r3, [pc, #40]	@ (80059f4 <HAL_RCC_ClockConfig+0x3d0>)
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	490a      	ldr	r1, [pc, #40]	@ (80059fc <HAL_RCC_ClockConfig+0x3d8>)
 80059d2:	5ccb      	ldrb	r3, [r1, r3]
 80059d4:	fa22 f303 	lsr.w	r3, r2, r3
 80059d8:	4a09      	ldr	r2, [pc, #36]	@ (8005a00 <HAL_RCC_ClockConfig+0x3dc>)
 80059da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059dc:	4b09      	ldr	r3, [pc, #36]	@ (8005a04 <HAL_RCC_ClockConfig+0x3e0>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fb fd09 	bl	80013f8 <HAL_InitTick>
 80059e6:	4603      	mov	r3, r0
 80059e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	46020c00 	.word	0x46020c00
 80059f8:	40022000 	.word	0x40022000
 80059fc:	0800bf70 	.word	0x0800bf70
 8005a00:	2000001c 	.word	0x2000001c
 8005a04:	20000020 	.word	0x20000020

08005a08 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b08b      	sub	sp, #44	@ 0x2c
 8005a0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a16:	4b78      	ldr	r3, [pc, #480]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f003 030c 	and.w	r3, r3, #12
 8005a1e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a20:	4b75      	ldr	r3, [pc, #468]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0x34>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b0c      	cmp	r3, #12
 8005a34:	d121      	bne.n	8005a7a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d11e      	bne.n	8005a7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005a3c:	4b6e      	ldr	r3, [pc, #440]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d107      	bne.n	8005a58 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005a48:	4b6b      	ldr	r3, [pc, #428]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a4e:	0b1b      	lsrs	r3, r3, #12
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a56:	e005      	b.n	8005a64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005a58:	4b67      	ldr	r3, [pc, #412]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	0f1b      	lsrs	r3, r3, #28
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a64:	4a65      	ldr	r2, [pc, #404]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d110      	bne.n	8005a96 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a78:	e00d      	b.n	8005a96 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d102      	bne.n	8005a8c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a86:	4b5e      	ldr	r3, [pc, #376]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005a88:	623b      	str	r3, [r7, #32]
 8005a8a:	e004      	b.n	8005a96 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d101      	bne.n	8005a96 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a92:	4b5b      	ldr	r3, [pc, #364]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005a94:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b0c      	cmp	r3, #12
 8005a9a:	f040 80a5 	bne.w	8005be8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005a9e:	4b56      	ldr	r3, [pc, #344]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005aa8:	4b53      	ldr	r3, [pc, #332]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	0a1b      	lsrs	r3, r3, #8
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005ab6:	4b50      	ldr	r3, [pc, #320]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aba:	091b      	lsrs	r3, r3, #4
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac6:	08db      	lsrs	r3, r3, #3
 8005ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d003      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0xe4>
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d022      	beq.n	8005b30 <HAL_RCC_GetSysClockFreq+0x128>
 8005aea:	e043      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005c04 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afe:	4b3e      	ldr	r3, [pc, #248]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b12:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005c08 <HAL_RCC_GetSysClockFreq+0x200>
 8005b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b2e:	e046      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005c04 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b42:	4b2d      	ldr	r3, [pc, #180]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b52:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b56:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005c08 <HAL_RCC_GetSysClockFreq+0x200>
 8005b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b72:	e024      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	ee07 3a90 	vmov	s15, r3
 8005b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b94:	ee07 3a90 	vmov	s15, r3
 8005b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b9c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005ba0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005c08 <HAL_RCC_GetSysClockFreq+0x200>
 8005ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bbc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc2:	0e1b      	lsrs	r3, r3, #24
 8005bc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bc8:	3301      	adds	r3, #1
 8005bca:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be2:	ee17 3a90 	vmov	r3, s15
 8005be6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005be8:	6a3b      	ldr	r3, [r7, #32]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	372c      	adds	r7, #44	@ 0x2c
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	46020c00 	.word	0x46020c00
 8005bfc:	0800bf80 	.word	0x0800bf80
 8005c00:	00f42400 	.word	0x00f42400
 8005c04:	4b742400 	.word	0x4b742400
 8005c08:	46000000 	.word	0x46000000

08005c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005c10:	f7ff fefa 	bl	8005a08 <HAL_RCC_GetSysClockFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b07      	ldr	r3, [pc, #28]	@ (8005c34 <HAL_RCC_GetHCLKFreq+0x28>)
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	4906      	ldr	r1, [pc, #24]	@ (8005c38 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005c20:	5ccb      	ldrb	r3, [r1, r3]
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	4a05      	ldr	r2, [pc, #20]	@ (8005c3c <HAL_RCC_GetHCLKFreq+0x30>)
 8005c28:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005c2a:	4b04      	ldr	r3, [pc, #16]	@ (8005c3c <HAL_RCC_GetHCLKFreq+0x30>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	46020c00 	.word	0x46020c00
 8005c38:	0800bf70 	.word	0x0800bf70
 8005c3c:	2000001c 	.word	0x2000001c

08005c40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c48:	4b3e      	ldr	r3, [pc, #248]	@ (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c56:	f7fe fddb 	bl	8004810 <HAL_PWREx_GetVoltageRange>
 8005c5a:	6178      	str	r0, [r7, #20]
 8005c5c:	e019      	b.n	8005c92 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c5e:	4b39      	ldr	r3, [pc, #228]	@ (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c64:	4a37      	ldr	r2, [pc, #220]	@ (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c66:	f043 0304 	orr.w	r3, r3, #4
 8005c6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005c6e:	4b35      	ldr	r3, [pc, #212]	@ (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c7c:	f7fe fdc8 	bl	8004810 <HAL_PWREx_GetVoltageRange>
 8005c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c82:	4b30      	ldr	r3, [pc, #192]	@ (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c88:	4a2e      	ldr	r2, [pc, #184]	@ (8005d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c8a:	f023 0304 	bic.w	r3, r3, #4
 8005c8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c98:	d003      	beq.n	8005ca2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ca0:	d109      	bne.n	8005cb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ca8:	d202      	bcs.n	8005cb0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005caa:	2301      	movs	r3, #1
 8005cac:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005cae:	e033      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005cb4:	e030      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cbc:	d208      	bcs.n	8005cd0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cc4:	d102      	bne.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	e025      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e035      	b.n	8005d3c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cd6:	d90f      	bls.n	8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ce4:	d902      	bls.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	e015      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005cec:	2301      	movs	r3, #1
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	e012      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	e00f      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cfe:	d109      	bne.n	8005d14 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d06:	d102      	bne.n	8005d0e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005d08:	2301      	movs	r3, #1
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	e004      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005d0e:	2302      	movs	r3, #2
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	e001      	b.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005d14:	2301      	movs	r3, #1
 8005d16:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d18:	4b0b      	ldr	r3, [pc, #44]	@ (8005d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f023 020f 	bic.w	r2, r3, #15
 8005d20:	4909      	ldr	r1, [pc, #36]	@ (8005d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005d28:	4b07      	ldr	r3, [pc, #28]	@ (8005d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d001      	beq.n	8005d3a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	46020c00 	.word	0x46020c00
 8005d48:	40022000 	.word	0x40022000

08005d4c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d50:	b0b8      	sub	sp, #224	@ 0xe0
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f002 0401 	and.w	r4, r2, #1
 8005d70:	2500      	movs	r5, #0
 8005d72:	ea54 0305 	orrs.w	r3, r4, r5
 8005d76:	d00b      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005d78:	4bca      	ldr	r3, [pc, #808]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d7e:	f023 0103 	bic.w	r1, r3, #3
 8005d82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d88:	4ac6      	ldr	r2, [pc, #792]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f002 0802 	and.w	r8, r2, #2
 8005d9c:	f04f 0900 	mov.w	r9, #0
 8005da0:	ea58 0309 	orrs.w	r3, r8, r9
 8005da4:	d00b      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005da6:	4bbf      	ldr	r3, [pc, #764]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005dac:	f023 010c 	bic.w	r1, r3, #12
 8005db0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db6:	4abb      	ldr	r2, [pc, #748]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005db8:	430b      	orrs	r3, r1
 8005dba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f002 0a04 	and.w	sl, r2, #4
 8005dca:	f04f 0b00 	mov.w	fp, #0
 8005dce:	ea5a 030b 	orrs.w	r3, sl, fp
 8005dd2:	d00b      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005dd4:	4bb3      	ldr	r3, [pc, #716]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005dda:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005dde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de4:	4aaf      	ldr	r2, [pc, #700]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005de6:	430b      	orrs	r3, r1
 8005de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f002 0308 	and.w	r3, r2, #8
 8005df8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	d00b      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005e0c:	4ba5      	ldr	r3, [pc, #660]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005e16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1c:	4aa1      	ldr	r2, [pc, #644]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e1e:	430b      	orrs	r3, r1
 8005e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f002 0310 	and.w	r3, r2, #16
 8005e30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e34:	2300      	movs	r3, #0
 8005e36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4313      	orrs	r3, r2
 8005e42:	d00b      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005e44:	4b97      	ldr	r3, [pc, #604]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e54:	4a93      	ldr	r2, [pc, #588]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e56:	430b      	orrs	r3, r1
 8005e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f002 0320 	and.w	r3, r2, #32
 8005e68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005e7c:	4b89      	ldr	r3, [pc, #548]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e82:	f023 0107 	bic.w	r1, r3, #7
 8005e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e8c:	4a85      	ldr	r2, [pc, #532]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005eaa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005eb4:	4b7b      	ldr	r3, [pc, #492]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eba:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005ebe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ec2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ec4:	4a77      	ldr	r2, [pc, #476]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ecc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005edc:	2300      	movs	r3, #0
 8005ede:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ee2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	d00b      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005eec:	4b6d      	ldr	r3, [pc, #436]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ef2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ef6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005efc:	4a69      	ldr	r2, [pc, #420]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005efe:	430b      	orrs	r3, r1
 8005f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f14:	2300      	movs	r3, #0
 8005f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4313      	orrs	r3, r2
 8005f22:	d00b      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005f24:	4b5f      	ldr	r3, [pc, #380]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f34:	4a5b      	ldr	r2, [pc, #364]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f36:	430b      	orrs	r3, r1
 8005f38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005f48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005f56:	460b      	mov	r3, r1
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005f5c:	4b51      	ldr	r3, [pc, #324]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f62:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005f66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f6c:	4a4d      	ldr	r2, [pc, #308]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f6e:	430b      	orrs	r3, r1
 8005f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f84:	2300      	movs	r3, #0
 8005f86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f8a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4313      	orrs	r3, r2
 8005f92:	d00b      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005f94:	4b43      	ldr	r3, [pc, #268]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f9a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005f9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fa4:	4a3f      	ldr	r2, [pc, #252]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005fb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fc2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005fcc:	4b35      	ldr	r3, [pc, #212]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fd2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005fd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fdc:	4a31      	ldr	r2, [pc, #196]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fde:	430b      	orrs	r3, r1
 8005fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005fe4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005ff0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ff6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	d00c      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006000:	4b28      	ldr	r3, [pc, #160]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006006:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800600a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800600e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006012:	4a24      	ldr	r2, [pc, #144]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006014:	430b      	orrs	r3, r1
 8006016:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800601a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006026:	673b      	str	r3, [r7, #112]	@ 0x70
 8006028:	2300      	movs	r3, #0
 800602a:	677b      	str	r3, [r7, #116]	@ 0x74
 800602c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006030:	460b      	mov	r3, r1
 8006032:	4313      	orrs	r3, r2
 8006034:	d04f      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006036:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603e:	2b80      	cmp	r3, #128	@ 0x80
 8006040:	d02d      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006042:	2b80      	cmp	r3, #128	@ 0x80
 8006044:	d827      	bhi.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006046:	2b60      	cmp	r3, #96	@ 0x60
 8006048:	d02e      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800604a:	2b60      	cmp	r3, #96	@ 0x60
 800604c:	d823      	bhi.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800604e:	2b40      	cmp	r3, #64	@ 0x40
 8006050:	d006      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006052:	2b40      	cmp	r3, #64	@ 0x40
 8006054:	d81f      	bhi.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800605a:	2b20      	cmp	r3, #32
 800605c:	d011      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800605e:	e01a      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006060:	4b10      	ldr	r3, [pc, #64]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006064:	4a0f      	ldr	r2, [pc, #60]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800606a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800606c:	e01d      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800606e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006072:	3308      	adds	r3, #8
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fc0d 	bl	8006894 <RCCEx_PLL2_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006080:	e013      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006082:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006086:	332c      	adds	r3, #44	@ 0x2c
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fc9b 	bl	80069c4 <RCCEx_PLL3_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006094:	e009      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800609c:	e005      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800609e:	bf00      	nop
 80060a0:	e003      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80060a2:	bf00      	nop
 80060a4:	46020c00 	.word	0x46020c00
        break;
 80060a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060aa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10d      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80060b2:	4bb6      	ldr	r3, [pc, #728]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80060b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060b8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80060bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c4:	4ab1      	ldr	r2, [pc, #708]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80060c6:	430b      	orrs	r3, r1
 80060c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80060cc:	e003      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80060d2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80060e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060e4:	2300      	movs	r3, #0
 80060e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80060ec:	460b      	mov	r3, r1
 80060ee:	4313      	orrs	r3, r2
 80060f0:	d053      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80060f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060fe:	d033      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006104:	d82c      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800610a:	d02f      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800610c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006110:	d826      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006116:	d008      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800611c:	d820      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006126:	d011      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006128:	e01a      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800612a:	4b98      	ldr	r3, [pc, #608]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800612c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612e:	4a97      	ldr	r2, [pc, #604]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006134:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006136:	e01a      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006138:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800613c:	3308      	adds	r3, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fba8 	bl	8006894 <RCCEx_PLL2_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800614a:	e010      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800614c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006150:	332c      	adds	r3, #44	@ 0x2c
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fc36 	bl	80069c4 <RCCEx_PLL3_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800615e:	e006      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006166:	e002      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006168:	bf00      	nop
 800616a:	e000      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800616c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10d      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006176:	4b85      	ldr	r3, [pc, #532]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006178:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800617c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006180:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006184:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006188:	4a80      	ldr	r2, [pc, #512]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800618a:	430b      	orrs	r3, r1
 800618c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006190:	e003      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006192:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006196:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800619a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80061a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80061a8:	2300      	movs	r3, #0
 80061aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80061ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80061b0:	460b      	mov	r3, r1
 80061b2:	4313      	orrs	r3, r2
 80061b4:	d046      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80061b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061be:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80061c2:	d028      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061c4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80061c8:	d821      	bhi.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80061ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ce:	d022      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061d4:	d81b      	bhi.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80061d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061da:	d01c      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061e0:	d815      	bhi.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80061e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061e6:	d008      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80061e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ec:	d80f      	bhi.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d011      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061f6:	d00e      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061f8:	e009      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061fe:	3308      	adds	r3, #8
 8006200:	4618      	mov	r0, r3
 8006202:	f000 fb47 	bl	8006894 <RCCEx_PLL2_Config>
 8006206:	4603      	mov	r3, r0
 8006208:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800620c:	e004      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8006216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006218:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10d      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006220:	4b5a      	ldr	r3, [pc, #360]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006226:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800622a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800622e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006232:	4a56      	ldr	r2, [pc, #344]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006234:	430b      	orrs	r3, r1
 8006236:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800623a:	e003      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006240:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006250:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006252:	2300      	movs	r3, #0
 8006254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006256:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800625a:	460b      	mov	r3, r1
 800625c:	4313      	orrs	r3, r2
 800625e:	d03f      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006268:	2b04      	cmp	r3, #4
 800626a:	d81e      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800626c:	a201      	add	r2, pc, #4	@ (adr r2, 8006274 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	080062b3 	.word	0x080062b3
 8006278:	08006289 	.word	0x08006289
 800627c:	08006297 	.word	0x08006297
 8006280:	080062b3 	.word	0x080062b3
 8006284:	080062b3 	.word	0x080062b3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006288:	4b40      	ldr	r3, [pc, #256]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628c:	4a3f      	ldr	r2, [pc, #252]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800628e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006292:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006294:	e00e      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800629a:	332c      	adds	r3, #44	@ 0x2c
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fb91 	bl	80069c4 <RCCEx_PLL3_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80062a8:	e004      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80062b0:	e000      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80062b2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80062b4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10d      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80062bc:	4b33      	ldr	r3, [pc, #204]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062c2:	f023 0107 	bic.w	r1, r3, #7
 80062c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ce:	4a2f      	ldr	r2, [pc, #188]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062d0:	430b      	orrs	r3, r1
 80062d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80062d6:	e003      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062dc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80062e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80062ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80062ee:	2300      	movs	r3, #0
 80062f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80062f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80062f6:	460b      	mov	r3, r1
 80062f8:	4313      	orrs	r3, r2
 80062fa:	d04d      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80062fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006304:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006308:	d028      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x610>
 800630a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800630e:	d821      	bhi.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006310:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006314:	d024      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006316:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800631a:	d81b      	bhi.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800631c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006320:	d00e      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006322:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006326:	d815      	bhi.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01b      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800632c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006330:	d110      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006332:	4b16      	ldr	r3, [pc, #88]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006336:	4a15      	ldr	r2, [pc, #84]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800633c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800633e:	e012      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006344:	332c      	adds	r3, #44	@ 0x2c
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fb3c 	bl	80069c4 <RCCEx_PLL3_Config>
 800634c:	4603      	mov	r3, r0
 800634e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006352:	e008      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800635a:	e004      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800635c:	bf00      	nop
 800635e:	e002      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006360:	bf00      	nop
 8006362:	e000      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006364:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006366:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800636a:	2b00      	cmp	r3, #0
 800636c:	d110      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800636e:	4b07      	ldr	r3, [pc, #28]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006374:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006378:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800637c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006380:	4a02      	ldr	r2, [pc, #8]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006382:	430b      	orrs	r3, r1
 8006384:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006388:	e006      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800638a:	bf00      	nop
 800638c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006390:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006394:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80063a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063a6:	2300      	movs	r3, #0
 80063a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80063ae:	460b      	mov	r3, r1
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f000 80b5 	beq.w	8006520 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063b6:	2300      	movs	r3, #0
 80063b8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063bc:	4b9d      	ldr	r3, [pc, #628]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d113      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ca:	4b9a      	ldr	r3, [pc, #616]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063d0:	4a98      	ldr	r2, [pc, #608]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063d2:	f043 0304 	orr.w	r3, r3, #4
 80063d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80063da:	4b96      	ldr	r3, [pc, #600]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80063f2:	4b91      	ldr	r3, [pc, #580]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	4a90      	ldr	r2, [pc, #576]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063fe:	f7fb f885 	bl	800150c <HAL_GetTick>
 8006402:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006406:	e00b      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006408:	f7fb f880 	bl	800150c <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d903      	bls.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800641e:	e005      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006420:	4b85      	ldr	r3, [pc, #532]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0ed      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800642c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006430:	2b00      	cmp	r3, #0
 8006432:	d165      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006434:	4b7f      	ldr	r3, [pc, #508]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800643a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800643e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006446:	2b00      	cmp	r3, #0
 8006448:	d023      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800644a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800644e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006456:	4293      	cmp	r3, r2
 8006458:	d01b      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800645a:	4b76      	ldr	r3, [pc, #472]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800645c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006464:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006468:	4b72      	ldr	r3, [pc, #456]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800646a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800646e:	4a71      	ldr	r2, [pc, #452]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006474:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006478:	4b6e      	ldr	r3, [pc, #440]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800647a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800647e:	4a6d      	ldr	r2, [pc, #436]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006484:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006488:	4a6a      	ldr	r2, [pc, #424]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800648a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800648e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d019      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649e:	f7fb f835 	bl	800150c <HAL_GetTick>
 80064a2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064a6:	e00d      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a8:	f7fb f830 	bl	800150c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064b2:	1ad2      	subs	r2, r2, r3
 80064b4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d903      	bls.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80064c2:	e006      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064c4:	4b5b      	ldr	r3, [pc, #364]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0ea      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80064d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10d      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80064da:	4b56      	ldr	r3, [pc, #344]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80064ec:	4a51      	ldr	r2, [pc, #324]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064ee:	430b      	orrs	r3, r1
 80064f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80064f4:	e008      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064f6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064fa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80064fe:	e003      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006504:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006508:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800650c:	2b01      	cmp	r3, #1
 800650e:	d107      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006510:	4b48      	ldr	r3, [pc, #288]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006516:	4a47      	ldr	r2, [pc, #284]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006518:	f023 0304 	bic.w	r3, r3, #4
 800651c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800652c:	643b      	str	r3, [r7, #64]	@ 0x40
 800652e:	2300      	movs	r3, #0
 8006530:	647b      	str	r3, [r7, #68]	@ 0x44
 8006532:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006536:	460b      	mov	r3, r1
 8006538:	4313      	orrs	r3, r2
 800653a:	d042      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800653c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006540:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006544:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006548:	d022      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800654a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800654e:	d81b      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006550:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006554:	d011      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006556:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800655a:	d815      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d019      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006560:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006564:	d110      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006566:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800656a:	3308      	adds	r3, #8
 800656c:	4618      	mov	r0, r3
 800656e:	f000 f991 	bl	8006894 <RCCEx_PLL2_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006578:	e00d      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800657a:	4b2e      	ldr	r3, [pc, #184]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800657c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657e:	4a2d      	ldr	r2, [pc, #180]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006584:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006586:	e006      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800658e:	e002      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006594:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006596:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10d      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800659e:	4b25      	ldr	r3, [pc, #148]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065a4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80065a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065b0:	4a20      	ldr	r2, [pc, #128]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065b2:	430b      	orrs	r3, r1
 80065b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065b8:	e003      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80065be:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80065ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065d0:	2300      	movs	r3, #0
 80065d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80065d8:	460b      	mov	r3, r1
 80065da:	4313      	orrs	r3, r2
 80065dc:	d032      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80065de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ea:	d00b      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80065ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f0:	d804      	bhi.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065fa:	d007      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006602:	e004      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006604:	bf00      	nop
 8006606:	e002      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006608:	bf00      	nop
 800660a:	e000      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800660c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800660e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006612:	2b00      	cmp	r3, #0
 8006614:	d112      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006616:	4b07      	ldr	r3, [pc, #28]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006618:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800661c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006624:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006628:	4a02      	ldr	r2, [pc, #8]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800662a:	430b      	orrs	r3, r1
 800662c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006630:	e008      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006632:	bf00      	nop
 8006634:	46020c00 	.word	0x46020c00
 8006638:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006640:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006650:	633b      	str	r3, [r7, #48]	@ 0x30
 8006652:	2300      	movs	r3, #0
 8006654:	637b      	str	r3, [r7, #52]	@ 0x34
 8006656:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	d019      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006664:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006668:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800666c:	d105      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800666e:	4b88      	ldr	r3, [pc, #544]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006672:	4a87      	ldr	r2, [pc, #540]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006678:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800667a:	4b85      	ldr	r3, [pc, #532]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800667c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006680:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006688:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800668c:	4a80      	ldr	r2, [pc, #512]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800668e:	430b      	orrs	r3, r1
 8006690:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006694:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066a2:	2300      	movs	r3, #0
 80066a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066a6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066aa:	460b      	mov	r3, r1
 80066ac:	4313      	orrs	r3, r2
 80066ae:	d00c      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80066b0:	4b77      	ldr	r3, [pc, #476]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066c2:	4973      	ldr	r1, [pc, #460]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80066ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80066d6:	623b      	str	r3, [r7, #32]
 80066d8:	2300      	movs	r3, #0
 80066da:	627b      	str	r3, [r7, #36]	@ 0x24
 80066dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066e0:	460b      	mov	r3, r1
 80066e2:	4313      	orrs	r3, r2
 80066e4:	d00c      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80066e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066f8:	4965      	ldr	r1, [pc, #404]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	2300      	movs	r3, #0
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006716:	460b      	mov	r3, r1
 8006718:	4313      	orrs	r3, r2
 800671a:	d00c      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800671c:	4b5c      	ldr	r3, [pc, #368]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800671e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006722:	f023 0218 	bic.w	r2, r3, #24
 8006726:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800672a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800672e:	4958      	ldr	r1, [pc, #352]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006736:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800674c:	460b      	mov	r3, r1
 800674e:	4313      	orrs	r3, r2
 8006750:	d032      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006752:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006756:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800675a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800675e:	d105      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006760:	4b4b      	ldr	r3, [pc, #300]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006764:	4a4a      	ldr	r2, [pc, #296]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800676a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800676c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006770:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006774:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006778:	d108      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800677a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800677e:	3308      	adds	r3, #8
 8006780:	4618      	mov	r0, r3
 8006782:	f000 f887 	bl	8006894 <RCCEx_PLL2_Config>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 800678c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10d      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006794:	4b3e      	ldr	r3, [pc, #248]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006796:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800679a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800679e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067a6:	493a      	ldr	r1, [pc, #232]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80067ae:	e003      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067b4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80067b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067ce:	460b      	mov	r3, r1
 80067d0:	4313      	orrs	r3, r2
 80067d2:	d03a      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80067d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067e0:	d00e      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80067e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067e6:	d815      	bhi.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d017      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80067ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067f0:	d110      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f2:	4b27      	ldr	r3, [pc, #156]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f6:	4a26      	ldr	r2, [pc, #152]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067fc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80067fe:	e00e      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006800:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006804:	3308      	adds	r3, #8
 8006806:	4618      	mov	r0, r3
 8006808:	f000 f844 	bl	8006894 <RCCEx_PLL2_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006812:	e004      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800681a:	e000      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800681c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800681e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10d      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006826:	4b1a      	ldr	r3, [pc, #104]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800682c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006838:	4915      	ldr	r1, [pc, #84]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800683a:	4313      	orrs	r3, r2
 800683c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006840:	e003      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006842:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006846:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800684a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	2300      	movs	r3, #0
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006860:	460b      	mov	r3, r1
 8006862:	4313      	orrs	r3, r2
 8006864:	d00c      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006866:	4b0a      	ldr	r3, [pc, #40]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800686c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006874:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006878:	4905      	ldr	r1, [pc, #20]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800687a:	4313      	orrs	r3, r2
 800687c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006880:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006884:	4618      	mov	r0, r3
 8006886:	37e0      	adds	r7, #224	@ 0xe0
 8006888:	46bd      	mov	sp, r7
 800688a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800688e:	bf00      	nop
 8006890:	46020c00 	.word	0x46020c00

08006894 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800689c:	4b47      	ldr	r3, [pc, #284]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a46      	ldr	r2, [pc, #280]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 80068a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068a8:	f7fa fe30 	bl	800150c <HAL_GetTick>
 80068ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068ae:	e008      	b.n	80068c2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068b0:	f7fa fe2c 	bl	800150c <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e077      	b.n	80069b2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068c2:	4b3e      	ldr	r3, [pc, #248]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f0      	bne.n	80068b0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80068ce:	4b3b      	ldr	r3, [pc, #236]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 80068d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6811      	ldr	r1, [r2, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6852      	ldr	r2, [r2, #4]
 80068e2:	3a01      	subs	r2, #1
 80068e4:	0212      	lsls	r2, r2, #8
 80068e6:	430a      	orrs	r2, r1
 80068e8:	4934      	ldr	r1, [pc, #208]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80068ee:	4b33      	ldr	r3, [pc, #204]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 80068f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068f2:	4b33      	ldr	r3, [pc, #204]	@ (80069c0 <RCCEx_PLL2_Config+0x12c>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6892      	ldr	r2, [r2, #8]
 80068fa:	3a01      	subs	r2, #1
 80068fc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	68d2      	ldr	r2, [r2, #12]
 8006904:	3a01      	subs	r2, #1
 8006906:	0252      	lsls	r2, r2, #9
 8006908:	b292      	uxth	r2, r2
 800690a:	4311      	orrs	r1, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6912      	ldr	r2, [r2, #16]
 8006910:	3a01      	subs	r2, #1
 8006912:	0412      	lsls	r2, r2, #16
 8006914:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006918:	4311      	orrs	r1, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6952      	ldr	r2, [r2, #20]
 800691e:	3a01      	subs	r2, #1
 8006920:	0612      	lsls	r2, r2, #24
 8006922:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006926:	430a      	orrs	r2, r1
 8006928:	4924      	ldr	r1, [pc, #144]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 800692a:	4313      	orrs	r3, r2
 800692c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800692e:	4b23      	ldr	r3, [pc, #140]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 8006930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006932:	f023 020c 	bic.w	r2, r3, #12
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	4920      	ldr	r1, [pc, #128]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 800693c:	4313      	orrs	r3, r2
 800693e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006940:	4b1e      	ldr	r3, [pc, #120]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 8006942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	491c      	ldr	r1, [pc, #112]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 800694a:	4313      	orrs	r3, r2
 800694c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800694e:	4b1b      	ldr	r3, [pc, #108]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	4a1a      	ldr	r2, [pc, #104]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 8006954:	f023 0310 	bic.w	r3, r3, #16
 8006958:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800695a:	4b18      	ldr	r3, [pc, #96]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 800695c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006962:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	69d2      	ldr	r2, [r2, #28]
 800696a:	00d2      	lsls	r2, r2, #3
 800696c:	4913      	ldr	r1, [pc, #76]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 800696e:	4313      	orrs	r3, r2
 8006970:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006972:	4b12      	ldr	r3, [pc, #72]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 8006974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006976:	4a11      	ldr	r2, [pc, #68]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 8006978:	f043 0310 	orr.w	r3, r3, #16
 800697c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800697e:	4b0f      	ldr	r3, [pc, #60]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a0e      	ldr	r2, [pc, #56]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 8006984:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006988:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800698a:	f7fa fdbf 	bl	800150c <HAL_GetTick>
 800698e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006990:	e008      	b.n	80069a4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006992:	f7fa fdbb 	bl	800150c <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e006      	b.n	80069b2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069a4:	4b05      	ldr	r3, [pc, #20]	@ (80069bc <RCCEx_PLL2_Config+0x128>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f0      	beq.n	8006992 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0

}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	46020c00 	.word	0x46020c00
 80069c0:	80800000 	.word	0x80800000

080069c4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80069cc:	4b47      	ldr	r3, [pc, #284]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a46      	ldr	r2, [pc, #280]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 80069d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069d8:	f7fa fd98 	bl	800150c <HAL_GetTick>
 80069dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069de:	e008      	b.n	80069f2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80069e0:	f7fa fd94 	bl	800150c <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e077      	b.n	8006ae2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069f2:	4b3e      	ldr	r3, [pc, #248]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f0      	bne.n	80069e0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80069fe:	4b3b      	ldr	r3, [pc, #236]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6811      	ldr	r1, [r2, #0]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6852      	ldr	r2, [r2, #4]
 8006a12:	3a01      	subs	r2, #1
 8006a14:	0212      	lsls	r2, r2, #8
 8006a16:	430a      	orrs	r2, r1
 8006a18:	4934      	ldr	r1, [pc, #208]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	630b      	str	r3, [r1, #48]	@ 0x30
 8006a1e:	4b33      	ldr	r3, [pc, #204]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a22:	4b33      	ldr	r3, [pc, #204]	@ (8006af0 <RCCEx_PLL3_Config+0x12c>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6892      	ldr	r2, [r2, #8]
 8006a2a:	3a01      	subs	r2, #1
 8006a2c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	68d2      	ldr	r2, [r2, #12]
 8006a34:	3a01      	subs	r2, #1
 8006a36:	0252      	lsls	r2, r2, #9
 8006a38:	b292      	uxth	r2, r2
 8006a3a:	4311      	orrs	r1, r2
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6912      	ldr	r2, [r2, #16]
 8006a40:	3a01      	subs	r2, #1
 8006a42:	0412      	lsls	r2, r2, #16
 8006a44:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006a48:	4311      	orrs	r1, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6952      	ldr	r2, [r2, #20]
 8006a4e:	3a01      	subs	r2, #1
 8006a50:	0612      	lsls	r2, r2, #24
 8006a52:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006a56:	430a      	orrs	r2, r1
 8006a58:	4924      	ldr	r1, [pc, #144]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006a5e:	4b23      	ldr	r3, [pc, #140]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a62:	f023 020c 	bic.w	r2, r3, #12
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	4920      	ldr	r1, [pc, #128]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006a70:	4b1e      	ldr	r3, [pc, #120]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	491c      	ldr	r1, [pc, #112]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a82:	4a1a      	ldr	r2, [pc, #104]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a84:	f023 0310 	bic.w	r3, r3, #16
 8006a88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a8a:	4b18      	ldr	r3, [pc, #96]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a92:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	69d2      	ldr	r2, [r2, #28]
 8006a9a:	00d2      	lsls	r2, r2, #3
 8006a9c:	4913      	ldr	r1, [pc, #76]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006aa2:	4b12      	ldr	r3, [pc, #72]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa6:	4a11      	ldr	r2, [pc, #68]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006aa8:	f043 0310 	orr.w	r3, r3, #16
 8006aac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006aae:	4b0f      	ldr	r3, [pc, #60]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006aba:	f7fa fd27 	bl	800150c <HAL_GetTick>
 8006abe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ac0:	e008      	b.n	8006ad4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ac2:	f7fa fd23 	bl	800150c <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e006      	b.n	8006ae2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ad4:	4b05      	ldr	r3, [pc, #20]	@ (8006aec <RCCEx_PLL3_Config+0x128>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0f0      	beq.n	8006ac2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	46020c00 	.word	0x46020c00
 8006af0:	80800000 	.word	0x80800000

08006af4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e0fb      	b.n	8006cfe <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a7f      	ldr	r2, [pc, #508]	@ (8006d08 <HAL_SPI_Init+0x214>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d004      	beq.n	8006b1a <HAL_SPI_Init+0x26>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a7d      	ldr	r2, [pc, #500]	@ (8006d0c <HAL_SPI_Init+0x218>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	e000      	b.n	8006b1c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8006b1a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a78      	ldr	r2, [pc, #480]	@ (8006d08 <HAL_SPI_Init+0x214>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d004      	beq.n	8006b36 <HAL_SPI_Init+0x42>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a76      	ldr	r2, [pc, #472]	@ (8006d0c <HAL_SPI_Init+0x218>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d105      	bne.n	8006b42 <HAL_SPI_Init+0x4e>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	2b0f      	cmp	r3, #15
 8006b3c:	d901      	bls.n	8006b42 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e0dd      	b.n	8006cfe <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fbce 	bl	80072e4 <SPI_GetPacketSize>
 8006b48:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a6e      	ldr	r2, [pc, #440]	@ (8006d08 <HAL_SPI_Init+0x214>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d004      	beq.n	8006b5e <HAL_SPI_Init+0x6a>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a6c      	ldr	r2, [pc, #432]	@ (8006d0c <HAL_SPI_Init+0x218>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d102      	bne.n	8006b64 <HAL_SPI_Init+0x70>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d816      	bhi.n	8006b92 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b68:	4a69      	ldr	r2, [pc, #420]	@ (8006d10 <HAL_SPI_Init+0x21c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00e      	beq.n	8006b8c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a68      	ldr	r2, [pc, #416]	@ (8006d14 <HAL_SPI_Init+0x220>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d009      	beq.n	8006b8c <HAL_SPI_Init+0x98>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a66      	ldr	r2, [pc, #408]	@ (8006d18 <HAL_SPI_Init+0x224>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d004      	beq.n	8006b8c <HAL_SPI_Init+0x98>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a65      	ldr	r2, [pc, #404]	@ (8006d1c <HAL_SPI_Init+0x228>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d104      	bne.n	8006b96 <HAL_SPI_Init+0xa2>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b10      	cmp	r3, #16
 8006b90:	d901      	bls.n	8006b96 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e0b3      	b.n	8006cfe <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7fa f920 	bl	8000df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0201 	bic.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006bd2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bdc:	d119      	bne.n	8006c12 <HAL_SPI_Init+0x11e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be6:	d103      	bne.n	8006bf0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10c      	bne.n	8006c12 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006bfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c00:	d107      	bne.n	8006c12 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00f      	beq.n	8006c3e <HAL_SPI_Init+0x14a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	2b06      	cmp	r3, #6
 8006c24:	d90b      	bls.n	8006c3e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	e007      	b.n	8006c4e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69da      	ldr	r2, [r3, #28]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c56:	431a      	orrs	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c60:	ea42 0103 	orr.w	r1, r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cba:	ea42 0103 	orr.w	r1, r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	46002000 	.word	0x46002000
 8006d0c:	56002000 	.word	0x56002000
 8006d10:	40013000 	.word	0x40013000
 8006d14:	50013000 	.word	0x50013000
 8006d18:	40003800 	.word	0x40003800
 8006d1c:	50003800 	.word	0x50003800

08006d20 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3320      	adds	r3, #32
 8006d36:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a90      	ldr	r2, [pc, #576]	@ (8006f80 <HAL_SPI_Transmit+0x260>)
 8006d3e:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d40:	f7fa fbe4 	bl	800150c <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d001      	beq.n	8006d56 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8006d52:	2302      	movs	r3, #2
 8006d54:	e1f4      	b.n	8007140 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <HAL_SPI_Transmit+0x42>
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e1ec      	b.n	8007140 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_SPI_Transmit+0x54>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e1e5      	b.n	8007140 <HAL_SPI_Transmit+0x420>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	88fa      	ldrh	r2, [r7, #6]
 8006d96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	88fa      	ldrh	r2, [r7, #6]
 8006d9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006dcc:	d108      	bne.n	8006de0 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e009      	b.n	8006df4 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006df2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	0c1b      	lsrs	r3, r3, #16
 8006dfc:	041b      	lsls	r3, r3, #16
 8006dfe:	88f9      	ldrh	r1, [r7, #6]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	6812      	ldr	r2, [r2, #0]
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10c      	bne.n	8006e40 <HAL_SPI_Transmit+0x120>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e2e:	d107      	bne.n	8006e40 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b0f      	cmp	r3, #15
 8006e46:	d95b      	bls.n	8006f00 <HAL_SPI_Transmit+0x1e0>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a4d      	ldr	r2, [pc, #308]	@ (8006f84 <HAL_SPI_Transmit+0x264>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d04f      	beq.n	8006ef2 <HAL_SPI_Transmit+0x1d2>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a4c      	ldr	r2, [pc, #304]	@ (8006f88 <HAL_SPI_Transmit+0x268>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d04a      	beq.n	8006ef2 <HAL_SPI_Transmit+0x1d2>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a4a      	ldr	r2, [pc, #296]	@ (8006f8c <HAL_SPI_Transmit+0x26c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d045      	beq.n	8006ef2 <HAL_SPI_Transmit+0x1d2>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a49      	ldr	r2, [pc, #292]	@ (8006f90 <HAL_SPI_Transmit+0x270>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d147      	bne.n	8006f00 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006e70:	e03f      	b.n	8006ef2 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d114      	bne.n	8006eaa <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6812      	ldr	r2, [r2, #0]
 8006e8a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e90:	1d1a      	adds	r2, r3, #4
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006ea8:	e023      	b.n	8006ef2 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eaa:	f7fa fb2f 	bl	800150c <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d803      	bhi.n	8006ec2 <HAL_SPI_Transmit+0x1a2>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec0:	d102      	bne.n	8006ec8 <HAL_SPI_Transmit+0x1a8>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d114      	bne.n	8006ef2 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 f93d 	bl	8007148 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ed4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e126      	b.n	8007140 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1b9      	bne.n	8006e72 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006efe:	e0f9      	b.n	80070f4 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	2b07      	cmp	r3, #7
 8006f06:	f240 80ee 	bls.w	80070e6 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006f0a:	e067      	b.n	8006fdc <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d13c      	bne.n	8006f94 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d918      	bls.n	8006f58 <HAL_SPI_Transmit+0x238>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d014      	beq.n	8006f58 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f3e:	1d1a      	adds	r2, r3, #4
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	3b02      	subs	r3, #2
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006f56:	e041      	b.n	8006fdc <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f5c:	881a      	ldrh	r2, [r3, #0]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f66:	1c9a      	adds	r2, r3, #2
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006f7e:	e02d      	b.n	8006fdc <HAL_SPI_Transmit+0x2bc>
 8006f80:	46002000 	.word	0x46002000
 8006f84:	40013000 	.word	0x40013000
 8006f88:	50013000 	.word	0x50013000
 8006f8c:	40003800 	.word	0x40003800
 8006f90:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f94:	f7fa faba 	bl	800150c <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d803      	bhi.n	8006fac <HAL_SPI_Transmit+0x28c>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006faa:	d102      	bne.n	8006fb2 <HAL_SPI_Transmit+0x292>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d114      	bne.n	8006fdc <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 f8c8 	bl	8007148 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e0b1      	b.n	8007140 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d191      	bne.n	8006f0c <HAL_SPI_Transmit+0x1ec>
 8006fe8:	e084      	b.n	80070f4 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d152      	bne.n	800709e <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b03      	cmp	r3, #3
 8007002:	d918      	bls.n	8007036 <HAL_SPI_Transmit+0x316>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007008:	2b40      	cmp	r3, #64	@ 0x40
 800700a:	d914      	bls.n	8007036 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6812      	ldr	r2, [r2, #0]
 8007016:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800701c:	1d1a      	adds	r2, r3, #4
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b04      	subs	r3, #4
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007034:	e057      	b.n	80070e6 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800703c:	b29b      	uxth	r3, r3
 800703e:	2b01      	cmp	r3, #1
 8007040:	d917      	bls.n	8007072 <HAL_SPI_Transmit+0x352>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007046:	2b00      	cmp	r3, #0
 8007048:	d013      	beq.n	8007072 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800704e:	881a      	ldrh	r2, [r3, #0]
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007058:	1c9a      	adds	r2, r3, #2
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b02      	subs	r3, #2
 8007068:	b29a      	uxth	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007070:	e039      	b.n	80070e6 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3320      	adds	r3, #32
 800707c:	7812      	ldrb	r2, [r2, #0]
 800707e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800709c:	e023      	b.n	80070e6 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800709e:	f7fa fa35 	bl	800150c <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d803      	bhi.n	80070b6 <HAL_SPI_Transmit+0x396>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d102      	bne.n	80070bc <HAL_SPI_Transmit+0x39c>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d114      	bne.n	80070e6 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f843 	bl	8007148 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e02c      	b.n	8007140 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f47f af7b 	bne.w	8006fea <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	2108      	movs	r1, #8
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f8c2 	bl	8007288 <SPI_WaitOnFlagUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007110:	f043 0220 	orr.w	r2, r3, #32
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 f814 	bl	8007148 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800713e:	2300      	movs	r3, #0
  }
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0208 	orr.w	r2, r2, #8
 8007166:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0210 	orr.w	r2, r2, #16
 8007176:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0201 	bic.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80071aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	d014      	beq.n	80071e2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00f      	beq.n	80071e2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0220 	orr.w	r2, r2, #32
 80071e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d014      	beq.n	8007218 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00f      	beq.n	8007218 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071fe:	f043 0204 	orr.w	r2, r3, #4
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007216:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00f      	beq.n	8007242 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007228:	f043 0201 	orr.w	r2, r3, #1
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	699a      	ldr	r2, [r3, #24]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007240:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00f      	beq.n	800726c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007252:	f043 0208 	orr.w	r2, r3, #8
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800726a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800727c:	bf00      	nop
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	4613      	mov	r3, r2
 8007296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007298:	e010      	b.n	80072bc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800729a:	f7fa f937 	bl	800150c <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d803      	bhi.n	80072b2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b0:	d102      	bne.n	80072b8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e00f      	b.n	80072dc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695a      	ldr	r2, [r3, #20]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4013      	ands	r3, r2
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	bf0c      	ite	eq
 80072cc:	2301      	moveq	r3, #1
 80072ce:	2300      	movne	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	461a      	mov	r2, r3
 80072d4:	79fb      	ldrb	r3, [r7, #7]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d0df      	beq.n	800729a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f0:	095b      	lsrs	r3, r3, #5
 80072f2:	3301      	adds	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	3301      	adds	r3, #1
 80072fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	3307      	adds	r3, #7
 8007302:	08db      	lsrs	r3, r3, #3
 8007304:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	fb02 f303 	mul.w	r3, r2, r3
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b01      	cmp	r3, #1
 800732e:	d12e      	bne.n	800738e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800733a:	2302      	movs	r3, #2
 800733c:	e028      	b.n	8007390 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0201 	bic.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800736a:	ea42 0103 	orr.w	r1, r2, r3
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	e000      	b.n	8007390 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
  }
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e049      	b.n	8007442 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7f9 fe0a 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f000 faac 	bl	8007938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e049      	b.n	80074f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f841 	bl	80074f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3304      	adds	r3, #4
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f000 fa55 	bl	8007938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007526:	2302      	movs	r3, #2
 8007528:	e0ff      	b.n	800772a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b14      	cmp	r3, #20
 8007536:	f200 80f0 	bhi.w	800771a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800753a:	a201      	add	r2, pc, #4	@ (adr r2, 8007540 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800753c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007540:	08007595 	.word	0x08007595
 8007544:	0800771b 	.word	0x0800771b
 8007548:	0800771b 	.word	0x0800771b
 800754c:	0800771b 	.word	0x0800771b
 8007550:	080075d5 	.word	0x080075d5
 8007554:	0800771b 	.word	0x0800771b
 8007558:	0800771b 	.word	0x0800771b
 800755c:	0800771b 	.word	0x0800771b
 8007560:	08007617 	.word	0x08007617
 8007564:	0800771b 	.word	0x0800771b
 8007568:	0800771b 	.word	0x0800771b
 800756c:	0800771b 	.word	0x0800771b
 8007570:	08007657 	.word	0x08007657
 8007574:	0800771b 	.word	0x0800771b
 8007578:	0800771b 	.word	0x0800771b
 800757c:	0800771b 	.word	0x0800771b
 8007580:	08007699 	.word	0x08007699
 8007584:	0800771b 	.word	0x0800771b
 8007588:	0800771b 	.word	0x0800771b
 800758c:	0800771b 	.word	0x0800771b
 8007590:	080076d9 	.word	0x080076d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	4618      	mov	r0, r3
 800759c:	f000 facc 	bl	8007b38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699a      	ldr	r2, [r3, #24]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0208 	orr.w	r2, r2, #8
 80075ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699a      	ldr	r2, [r3, #24]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0204 	bic.w	r2, r2, #4
 80075be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6999      	ldr	r1, [r3, #24]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	691a      	ldr	r2, [r3, #16]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	619a      	str	r2, [r3, #24]
      break;
 80075d2:	e0a5      	b.n	8007720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fb6e 	bl	8007cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6999      	ldr	r1, [r3, #24]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	021a      	lsls	r2, r3, #8
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	619a      	str	r2, [r3, #24]
      break;
 8007614:	e084      	b.n	8007720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68b9      	ldr	r1, [r7, #8]
 800761c:	4618      	mov	r0, r3
 800761e:	f000 fbfd 	bl	8007e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69da      	ldr	r2, [r3, #28]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0208 	orr.w	r2, r2, #8
 8007630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69da      	ldr	r2, [r3, #28]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0204 	bic.w	r2, r2, #4
 8007640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69d9      	ldr	r1, [r3, #28]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	691a      	ldr	r2, [r3, #16]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	61da      	str	r2, [r3, #28]
      break;
 8007654:	e064      	b.n	8007720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68b9      	ldr	r1, [r7, #8]
 800765c:	4618      	mov	r0, r3
 800765e:	f000 fc8b 	bl	8007f78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69da      	ldr	r2, [r3, #28]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69da      	ldr	r2, [r3, #28]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69d9      	ldr	r1, [r3, #28]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	021a      	lsls	r2, r3, #8
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	61da      	str	r2, [r3, #28]
      break;
 8007696:	e043      	b.n	8007720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fd1a 	bl	80080d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0208 	orr.w	r2, r2, #8
 80076b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0204 	bic.w	r2, r2, #4
 80076c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	691a      	ldr	r2, [r3, #16]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80076d6:	e023      	b.n	8007720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fd7c 	bl	80081dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007702:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	021a      	lsls	r2, r3, #8
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007718:	e002      	b.n	8007720 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	75fb      	strb	r3, [r7, #23]
      break;
 800771e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007728:	7dfb      	ldrb	r3, [r7, #23]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop

08007734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <HAL_TIM_ConfigClockSource+0x1c>
 800774c:	2302      	movs	r3, #2
 800774e:	e0e6      	b.n	800791e <HAL_TIM_ConfigClockSource+0x1ea>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800776e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800777a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a67      	ldr	r2, [pc, #412]	@ (8007928 <HAL_TIM_ConfigClockSource+0x1f4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	f000 80b1 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x1be>
 8007790:	4a65      	ldr	r2, [pc, #404]	@ (8007928 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	f200 80b6 	bhi.w	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 8007798:	4a64      	ldr	r2, [pc, #400]	@ (800792c <HAL_TIM_ConfigClockSource+0x1f8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	f000 80a9 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x1be>
 80077a0:	4a62      	ldr	r2, [pc, #392]	@ (800792c <HAL_TIM_ConfigClockSource+0x1f8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	f200 80ae 	bhi.w	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 80077a8:	4a61      	ldr	r2, [pc, #388]	@ (8007930 <HAL_TIM_ConfigClockSource+0x1fc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	f000 80a1 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x1be>
 80077b0:	4a5f      	ldr	r2, [pc, #380]	@ (8007930 <HAL_TIM_ConfigClockSource+0x1fc>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	f200 80a6 	bhi.w	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 80077b8:	4a5e      	ldr	r2, [pc, #376]	@ (8007934 <HAL_TIM_ConfigClockSource+0x200>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	f000 8099 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x1be>
 80077c0:	4a5c      	ldr	r2, [pc, #368]	@ (8007934 <HAL_TIM_ConfigClockSource+0x200>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	f200 809e 	bhi.w	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 80077c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80077cc:	f000 8091 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x1be>
 80077d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80077d4:	f200 8096 	bhi.w	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 80077d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077dc:	f000 8089 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x1be>
 80077e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077e4:	f200 808e 	bhi.w	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 80077e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ec:	d03e      	beq.n	800786c <HAL_TIM_ConfigClockSource+0x138>
 80077ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077f2:	f200 8087 	bhi.w	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 80077f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077fa:	f000 8086 	beq.w	800790a <HAL_TIM_ConfigClockSource+0x1d6>
 80077fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007802:	d87f      	bhi.n	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 8007804:	2b70      	cmp	r3, #112	@ 0x70
 8007806:	d01a      	beq.n	800783e <HAL_TIM_ConfigClockSource+0x10a>
 8007808:	2b70      	cmp	r3, #112	@ 0x70
 800780a:	d87b      	bhi.n	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 800780c:	2b60      	cmp	r3, #96	@ 0x60
 800780e:	d050      	beq.n	80078b2 <HAL_TIM_ConfigClockSource+0x17e>
 8007810:	2b60      	cmp	r3, #96	@ 0x60
 8007812:	d877      	bhi.n	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 8007814:	2b50      	cmp	r3, #80	@ 0x50
 8007816:	d03c      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15e>
 8007818:	2b50      	cmp	r3, #80	@ 0x50
 800781a:	d873      	bhi.n	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 800781c:	2b40      	cmp	r3, #64	@ 0x40
 800781e:	d058      	beq.n	80078d2 <HAL_TIM_ConfigClockSource+0x19e>
 8007820:	2b40      	cmp	r3, #64	@ 0x40
 8007822:	d86f      	bhi.n	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 8007824:	2b30      	cmp	r3, #48	@ 0x30
 8007826:	d064      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0x1be>
 8007828:	2b30      	cmp	r3, #48	@ 0x30
 800782a:	d86b      	bhi.n	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 800782c:	2b20      	cmp	r3, #32
 800782e:	d060      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0x1be>
 8007830:	2b20      	cmp	r3, #32
 8007832:	d867      	bhi.n	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d05c      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0x1be>
 8007838:	2b10      	cmp	r3, #16
 800783a:	d05a      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0x1be>
 800783c:	e062      	b.n	8007904 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800784e:	f000 fdc5 	bl	80083dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	609a      	str	r2, [r3, #8]
      break;
 800786a:	e04f      	b.n	800790c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800787c:	f000 fdae 	bl	80083dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689a      	ldr	r2, [r3, #8]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800788e:	609a      	str	r2, [r3, #8]
      break;
 8007890:	e03c      	b.n	800790c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800789e:	461a      	mov	r2, r3
 80078a0:	f000 fd20 	bl	80082e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2150      	movs	r1, #80	@ 0x50
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 fd79 	bl	80083a2 <TIM_ITRx_SetConfig>
      break;
 80078b0:	e02c      	b.n	800790c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078be:	461a      	mov	r2, r3
 80078c0:	f000 fd3f 	bl	8008342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2160      	movs	r1, #96	@ 0x60
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fd69 	bl	80083a2 <TIM_ITRx_SetConfig>
      break;
 80078d0:	e01c      	b.n	800790c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078de:	461a      	mov	r2, r3
 80078e0:	f000 fd00 	bl	80082e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2140      	movs	r1, #64	@ 0x40
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 fd59 	bl	80083a2 <TIM_ITRx_SetConfig>
      break;
 80078f0:	e00c      	b.n	800790c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4619      	mov	r1, r3
 80078fc:	4610      	mov	r0, r2
 80078fe:	f000 fd50 	bl	80083a2 <TIM_ITRx_SetConfig>
      break;
 8007902:	e003      	b.n	800790c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	73fb      	strb	r3, [r7, #15]
      break;
 8007908:	e000      	b.n	800790c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800790a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	00100070 	.word	0x00100070
 800792c:	00100040 	.word	0x00100040
 8007930:	00100030 	.word	0x00100030
 8007934:	00100020 	.word	0x00100020

08007938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a6b      	ldr	r2, [pc, #428]	@ (8007af8 <TIM_Base_SetConfig+0x1c0>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d02b      	beq.n	80079a8 <TIM_Base_SetConfig+0x70>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a6a      	ldr	r2, [pc, #424]	@ (8007afc <TIM_Base_SetConfig+0x1c4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d027      	beq.n	80079a8 <TIM_Base_SetConfig+0x70>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800795e:	d023      	beq.n	80079a8 <TIM_Base_SetConfig+0x70>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007966:	d01f      	beq.n	80079a8 <TIM_Base_SetConfig+0x70>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a65      	ldr	r2, [pc, #404]	@ (8007b00 <TIM_Base_SetConfig+0x1c8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d01b      	beq.n	80079a8 <TIM_Base_SetConfig+0x70>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a64      	ldr	r2, [pc, #400]	@ (8007b04 <TIM_Base_SetConfig+0x1cc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d017      	beq.n	80079a8 <TIM_Base_SetConfig+0x70>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a63      	ldr	r2, [pc, #396]	@ (8007b08 <TIM_Base_SetConfig+0x1d0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d013      	beq.n	80079a8 <TIM_Base_SetConfig+0x70>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a62      	ldr	r2, [pc, #392]	@ (8007b0c <TIM_Base_SetConfig+0x1d4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00f      	beq.n	80079a8 <TIM_Base_SetConfig+0x70>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a61      	ldr	r2, [pc, #388]	@ (8007b10 <TIM_Base_SetConfig+0x1d8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00b      	beq.n	80079a8 <TIM_Base_SetConfig+0x70>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a60      	ldr	r2, [pc, #384]	@ (8007b14 <TIM_Base_SetConfig+0x1dc>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d007      	beq.n	80079a8 <TIM_Base_SetConfig+0x70>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a5f      	ldr	r2, [pc, #380]	@ (8007b18 <TIM_Base_SetConfig+0x1e0>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d003      	beq.n	80079a8 <TIM_Base_SetConfig+0x70>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a5e      	ldr	r2, [pc, #376]	@ (8007b1c <TIM_Base_SetConfig+0x1e4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d108      	bne.n	80079ba <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a4e      	ldr	r2, [pc, #312]	@ (8007af8 <TIM_Base_SetConfig+0x1c0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d043      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a4d      	ldr	r2, [pc, #308]	@ (8007afc <TIM_Base_SetConfig+0x1c4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d03f      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d0:	d03b      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079d8:	d037      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a48      	ldr	r2, [pc, #288]	@ (8007b00 <TIM_Base_SetConfig+0x1c8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d033      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a47      	ldr	r2, [pc, #284]	@ (8007b04 <TIM_Base_SetConfig+0x1cc>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d02f      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a46      	ldr	r2, [pc, #280]	@ (8007b08 <TIM_Base_SetConfig+0x1d0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d02b      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a45      	ldr	r2, [pc, #276]	@ (8007b0c <TIM_Base_SetConfig+0x1d4>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d027      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a44      	ldr	r2, [pc, #272]	@ (8007b10 <TIM_Base_SetConfig+0x1d8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d023      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a43      	ldr	r2, [pc, #268]	@ (8007b14 <TIM_Base_SetConfig+0x1dc>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d01f      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a42      	ldr	r2, [pc, #264]	@ (8007b18 <TIM_Base_SetConfig+0x1e0>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d01b      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a41      	ldr	r2, [pc, #260]	@ (8007b1c <TIM_Base_SetConfig+0x1e4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d017      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a40      	ldr	r2, [pc, #256]	@ (8007b20 <TIM_Base_SetConfig+0x1e8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d013      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a3f      	ldr	r2, [pc, #252]	@ (8007b24 <TIM_Base_SetConfig+0x1ec>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d00f      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a3e      	ldr	r2, [pc, #248]	@ (8007b28 <TIM_Base_SetConfig+0x1f0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00b      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a3d      	ldr	r2, [pc, #244]	@ (8007b2c <TIM_Base_SetConfig+0x1f4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d007      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8007b30 <TIM_Base_SetConfig+0x1f8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_Base_SetConfig+0x112>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a3b      	ldr	r2, [pc, #236]	@ (8007b34 <TIM_Base_SetConfig+0x1fc>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d108      	bne.n	8007a5c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8007af8 <TIM_Base_SetConfig+0x1c0>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d023      	beq.n	8007aca <TIM_Base_SetConfig+0x192>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a1d      	ldr	r2, [pc, #116]	@ (8007afc <TIM_Base_SetConfig+0x1c4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01f      	beq.n	8007aca <TIM_Base_SetConfig+0x192>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a22      	ldr	r2, [pc, #136]	@ (8007b18 <TIM_Base_SetConfig+0x1e0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d01b      	beq.n	8007aca <TIM_Base_SetConfig+0x192>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a21      	ldr	r2, [pc, #132]	@ (8007b1c <TIM_Base_SetConfig+0x1e4>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d017      	beq.n	8007aca <TIM_Base_SetConfig+0x192>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a20      	ldr	r2, [pc, #128]	@ (8007b20 <TIM_Base_SetConfig+0x1e8>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <TIM_Base_SetConfig+0x192>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8007b24 <TIM_Base_SetConfig+0x1ec>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00f      	beq.n	8007aca <TIM_Base_SetConfig+0x192>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a1e      	ldr	r2, [pc, #120]	@ (8007b28 <TIM_Base_SetConfig+0x1f0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <TIM_Base_SetConfig+0x192>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8007b2c <TIM_Base_SetConfig+0x1f4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_Base_SetConfig+0x192>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a1c      	ldr	r2, [pc, #112]	@ (8007b30 <TIM_Base_SetConfig+0x1f8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_Base_SetConfig+0x192>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b34 <TIM_Base_SetConfig+0x1fc>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d103      	bne.n	8007ad2 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	691a      	ldr	r2, [r3, #16]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f043 0204 	orr.w	r2, r3, #4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	601a      	str	r2, [r3, #0]
}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	40012c00 	.word	0x40012c00
 8007afc:	50012c00 	.word	0x50012c00
 8007b00:	40000400 	.word	0x40000400
 8007b04:	50000400 	.word	0x50000400
 8007b08:	40000800 	.word	0x40000800
 8007b0c:	50000800 	.word	0x50000800
 8007b10:	40000c00 	.word	0x40000c00
 8007b14:	50000c00 	.word	0x50000c00
 8007b18:	40013400 	.word	0x40013400
 8007b1c:	50013400 	.word	0x50013400
 8007b20:	40014000 	.word	0x40014000
 8007b24:	50014000 	.word	0x50014000
 8007b28:	40014400 	.word	0x40014400
 8007b2c:	50014400 	.word	0x50014400
 8007b30:	40014800 	.word	0x40014800
 8007b34:	50014800 	.word	0x50014800

08007b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	f023 0201 	bic.w	r2, r3, #1
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0303 	bic.w	r3, r3, #3
 8007b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f023 0302 	bic.w	r3, r3, #2
 8007b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a40      	ldr	r2, [pc, #256]	@ (8007c94 <TIM_OC1_SetConfig+0x15c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d023      	beq.n	8007be0 <TIM_OC1_SetConfig+0xa8>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8007c98 <TIM_OC1_SetConfig+0x160>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d01f      	beq.n	8007be0 <TIM_OC1_SetConfig+0xa8>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8007c9c <TIM_OC1_SetConfig+0x164>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d01b      	beq.n	8007be0 <TIM_OC1_SetConfig+0xa8>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a3d      	ldr	r2, [pc, #244]	@ (8007ca0 <TIM_OC1_SetConfig+0x168>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d017      	beq.n	8007be0 <TIM_OC1_SetConfig+0xa8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a3c      	ldr	r2, [pc, #240]	@ (8007ca4 <TIM_OC1_SetConfig+0x16c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d013      	beq.n	8007be0 <TIM_OC1_SetConfig+0xa8>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a3b      	ldr	r2, [pc, #236]	@ (8007ca8 <TIM_OC1_SetConfig+0x170>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00f      	beq.n	8007be0 <TIM_OC1_SetConfig+0xa8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a3a      	ldr	r2, [pc, #232]	@ (8007cac <TIM_OC1_SetConfig+0x174>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00b      	beq.n	8007be0 <TIM_OC1_SetConfig+0xa8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a39      	ldr	r2, [pc, #228]	@ (8007cb0 <TIM_OC1_SetConfig+0x178>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d007      	beq.n	8007be0 <TIM_OC1_SetConfig+0xa8>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a38      	ldr	r2, [pc, #224]	@ (8007cb4 <TIM_OC1_SetConfig+0x17c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d003      	beq.n	8007be0 <TIM_OC1_SetConfig+0xa8>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a37      	ldr	r2, [pc, #220]	@ (8007cb8 <TIM_OC1_SetConfig+0x180>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d10c      	bne.n	8007bfa <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f023 0308 	bic.w	r3, r3, #8
 8007be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f023 0304 	bic.w	r3, r3, #4
 8007bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a25      	ldr	r2, [pc, #148]	@ (8007c94 <TIM_OC1_SetConfig+0x15c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d023      	beq.n	8007c4a <TIM_OC1_SetConfig+0x112>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a24      	ldr	r2, [pc, #144]	@ (8007c98 <TIM_OC1_SetConfig+0x160>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d01f      	beq.n	8007c4a <TIM_OC1_SetConfig+0x112>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a23      	ldr	r2, [pc, #140]	@ (8007c9c <TIM_OC1_SetConfig+0x164>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d01b      	beq.n	8007c4a <TIM_OC1_SetConfig+0x112>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a22      	ldr	r2, [pc, #136]	@ (8007ca0 <TIM_OC1_SetConfig+0x168>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d017      	beq.n	8007c4a <TIM_OC1_SetConfig+0x112>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a21      	ldr	r2, [pc, #132]	@ (8007ca4 <TIM_OC1_SetConfig+0x16c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d013      	beq.n	8007c4a <TIM_OC1_SetConfig+0x112>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a20      	ldr	r2, [pc, #128]	@ (8007ca8 <TIM_OC1_SetConfig+0x170>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00f      	beq.n	8007c4a <TIM_OC1_SetConfig+0x112>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8007cac <TIM_OC1_SetConfig+0x174>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00b      	beq.n	8007c4a <TIM_OC1_SetConfig+0x112>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a1e      	ldr	r2, [pc, #120]	@ (8007cb0 <TIM_OC1_SetConfig+0x178>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d007      	beq.n	8007c4a <TIM_OC1_SetConfig+0x112>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cb4 <TIM_OC1_SetConfig+0x17c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d003      	beq.n	8007c4a <TIM_OC1_SetConfig+0x112>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a1c      	ldr	r2, [pc, #112]	@ (8007cb8 <TIM_OC1_SetConfig+0x180>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d111      	bne.n	8007c6e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	621a      	str	r2, [r3, #32]
}
 8007c88:	bf00      	nop
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	40012c00 	.word	0x40012c00
 8007c98:	50012c00 	.word	0x50012c00
 8007c9c:	40013400 	.word	0x40013400
 8007ca0:	50013400 	.word	0x50013400
 8007ca4:	40014000 	.word	0x40014000
 8007ca8:	50014000 	.word	0x50014000
 8007cac:	40014400 	.word	0x40014400
 8007cb0:	50014400 	.word	0x50014400
 8007cb4:	40014800 	.word	0x40014800
 8007cb8:	50014800 	.word	0x50014800

08007cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	f023 0210 	bic.w	r2, r3, #16
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	021b      	lsls	r3, r3, #8
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f023 0320 	bic.w	r3, r3, #32
 8007d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	011b      	lsls	r3, r3, #4
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a36      	ldr	r2, [pc, #216]	@ (8007df4 <TIM_OC2_SetConfig+0x138>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00b      	beq.n	8007d38 <TIM_OC2_SetConfig+0x7c>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a35      	ldr	r2, [pc, #212]	@ (8007df8 <TIM_OC2_SetConfig+0x13c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d007      	beq.n	8007d38 <TIM_OC2_SetConfig+0x7c>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a34      	ldr	r2, [pc, #208]	@ (8007dfc <TIM_OC2_SetConfig+0x140>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d003      	beq.n	8007d38 <TIM_OC2_SetConfig+0x7c>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a33      	ldr	r2, [pc, #204]	@ (8007e00 <TIM_OC2_SetConfig+0x144>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d10d      	bne.n	8007d54 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a27      	ldr	r2, [pc, #156]	@ (8007df4 <TIM_OC2_SetConfig+0x138>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d023      	beq.n	8007da4 <TIM_OC2_SetConfig+0xe8>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a26      	ldr	r2, [pc, #152]	@ (8007df8 <TIM_OC2_SetConfig+0x13c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d01f      	beq.n	8007da4 <TIM_OC2_SetConfig+0xe8>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a25      	ldr	r2, [pc, #148]	@ (8007dfc <TIM_OC2_SetConfig+0x140>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d01b      	beq.n	8007da4 <TIM_OC2_SetConfig+0xe8>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a24      	ldr	r2, [pc, #144]	@ (8007e00 <TIM_OC2_SetConfig+0x144>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d017      	beq.n	8007da4 <TIM_OC2_SetConfig+0xe8>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a23      	ldr	r2, [pc, #140]	@ (8007e04 <TIM_OC2_SetConfig+0x148>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d013      	beq.n	8007da4 <TIM_OC2_SetConfig+0xe8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a22      	ldr	r2, [pc, #136]	@ (8007e08 <TIM_OC2_SetConfig+0x14c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00f      	beq.n	8007da4 <TIM_OC2_SetConfig+0xe8>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a21      	ldr	r2, [pc, #132]	@ (8007e0c <TIM_OC2_SetConfig+0x150>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00b      	beq.n	8007da4 <TIM_OC2_SetConfig+0xe8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a20      	ldr	r2, [pc, #128]	@ (8007e10 <TIM_OC2_SetConfig+0x154>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d007      	beq.n	8007da4 <TIM_OC2_SetConfig+0xe8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a1f      	ldr	r2, [pc, #124]	@ (8007e14 <TIM_OC2_SetConfig+0x158>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d003      	beq.n	8007da4 <TIM_OC2_SetConfig+0xe8>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8007e18 <TIM_OC2_SetConfig+0x15c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d113      	bne.n	8007dcc <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007daa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007db2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40012c00 	.word	0x40012c00
 8007df8:	50012c00 	.word	0x50012c00
 8007dfc:	40013400 	.word	0x40013400
 8007e00:	50013400 	.word	0x50013400
 8007e04:	40014000 	.word	0x40014000
 8007e08:	50014000 	.word	0x50014000
 8007e0c:	40014400 	.word	0x40014400
 8007e10:	50014400 	.word	0x50014400
 8007e14:	40014800 	.word	0x40014800
 8007e18:	50014800 	.word	0x50014800

08007e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f023 0303 	bic.w	r3, r3, #3
 8007e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a35      	ldr	r2, [pc, #212]	@ (8007f50 <TIM_OC3_SetConfig+0x134>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00b      	beq.n	8007e96 <TIM_OC3_SetConfig+0x7a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a34      	ldr	r2, [pc, #208]	@ (8007f54 <TIM_OC3_SetConfig+0x138>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d007      	beq.n	8007e96 <TIM_OC3_SetConfig+0x7a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a33      	ldr	r2, [pc, #204]	@ (8007f58 <TIM_OC3_SetConfig+0x13c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d003      	beq.n	8007e96 <TIM_OC3_SetConfig+0x7a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a32      	ldr	r2, [pc, #200]	@ (8007f5c <TIM_OC3_SetConfig+0x140>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d10d      	bne.n	8007eb2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a26      	ldr	r2, [pc, #152]	@ (8007f50 <TIM_OC3_SetConfig+0x134>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d023      	beq.n	8007f02 <TIM_OC3_SetConfig+0xe6>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a25      	ldr	r2, [pc, #148]	@ (8007f54 <TIM_OC3_SetConfig+0x138>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d01f      	beq.n	8007f02 <TIM_OC3_SetConfig+0xe6>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a24      	ldr	r2, [pc, #144]	@ (8007f58 <TIM_OC3_SetConfig+0x13c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d01b      	beq.n	8007f02 <TIM_OC3_SetConfig+0xe6>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a23      	ldr	r2, [pc, #140]	@ (8007f5c <TIM_OC3_SetConfig+0x140>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d017      	beq.n	8007f02 <TIM_OC3_SetConfig+0xe6>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a22      	ldr	r2, [pc, #136]	@ (8007f60 <TIM_OC3_SetConfig+0x144>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d013      	beq.n	8007f02 <TIM_OC3_SetConfig+0xe6>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a21      	ldr	r2, [pc, #132]	@ (8007f64 <TIM_OC3_SetConfig+0x148>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00f      	beq.n	8007f02 <TIM_OC3_SetConfig+0xe6>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a20      	ldr	r2, [pc, #128]	@ (8007f68 <TIM_OC3_SetConfig+0x14c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00b      	beq.n	8007f02 <TIM_OC3_SetConfig+0xe6>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a1f      	ldr	r2, [pc, #124]	@ (8007f6c <TIM_OC3_SetConfig+0x150>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d007      	beq.n	8007f02 <TIM_OC3_SetConfig+0xe6>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8007f70 <TIM_OC3_SetConfig+0x154>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d003      	beq.n	8007f02 <TIM_OC3_SetConfig+0xe6>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a1d      	ldr	r2, [pc, #116]	@ (8007f74 <TIM_OC3_SetConfig+0x158>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d113      	bne.n	8007f2a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	011b      	lsls	r3, r3, #4
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	621a      	str	r2, [r3, #32]
}
 8007f44:	bf00      	nop
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	40012c00 	.word	0x40012c00
 8007f54:	50012c00 	.word	0x50012c00
 8007f58:	40013400 	.word	0x40013400
 8007f5c:	50013400 	.word	0x50013400
 8007f60:	40014000 	.word	0x40014000
 8007f64:	50014000 	.word	0x50014000
 8007f68:	40014400 	.word	0x40014400
 8007f6c:	50014400 	.word	0x50014400
 8007f70:	40014800 	.word	0x40014800
 8007f74:	50014800 	.word	0x50014800

08007f78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	021b      	lsls	r3, r3, #8
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	031b      	lsls	r3, r3, #12
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a36      	ldr	r2, [pc, #216]	@ (80080b0 <TIM_OC4_SetConfig+0x138>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00b      	beq.n	8007ff4 <TIM_OC4_SetConfig+0x7c>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a35      	ldr	r2, [pc, #212]	@ (80080b4 <TIM_OC4_SetConfig+0x13c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d007      	beq.n	8007ff4 <TIM_OC4_SetConfig+0x7c>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a34      	ldr	r2, [pc, #208]	@ (80080b8 <TIM_OC4_SetConfig+0x140>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_OC4_SetConfig+0x7c>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a33      	ldr	r2, [pc, #204]	@ (80080bc <TIM_OC4_SetConfig+0x144>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d10d      	bne.n	8008010 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	031b      	lsls	r3, r3, #12
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800800e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a27      	ldr	r2, [pc, #156]	@ (80080b0 <TIM_OC4_SetConfig+0x138>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d023      	beq.n	8008060 <TIM_OC4_SetConfig+0xe8>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a26      	ldr	r2, [pc, #152]	@ (80080b4 <TIM_OC4_SetConfig+0x13c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d01f      	beq.n	8008060 <TIM_OC4_SetConfig+0xe8>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a25      	ldr	r2, [pc, #148]	@ (80080b8 <TIM_OC4_SetConfig+0x140>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d01b      	beq.n	8008060 <TIM_OC4_SetConfig+0xe8>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a24      	ldr	r2, [pc, #144]	@ (80080bc <TIM_OC4_SetConfig+0x144>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d017      	beq.n	8008060 <TIM_OC4_SetConfig+0xe8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a23      	ldr	r2, [pc, #140]	@ (80080c0 <TIM_OC4_SetConfig+0x148>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d013      	beq.n	8008060 <TIM_OC4_SetConfig+0xe8>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a22      	ldr	r2, [pc, #136]	@ (80080c4 <TIM_OC4_SetConfig+0x14c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d00f      	beq.n	8008060 <TIM_OC4_SetConfig+0xe8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a21      	ldr	r2, [pc, #132]	@ (80080c8 <TIM_OC4_SetConfig+0x150>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00b      	beq.n	8008060 <TIM_OC4_SetConfig+0xe8>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a20      	ldr	r2, [pc, #128]	@ (80080cc <TIM_OC4_SetConfig+0x154>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d007      	beq.n	8008060 <TIM_OC4_SetConfig+0xe8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1f      	ldr	r2, [pc, #124]	@ (80080d0 <TIM_OC4_SetConfig+0x158>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d003      	beq.n	8008060 <TIM_OC4_SetConfig+0xe8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a1e      	ldr	r2, [pc, #120]	@ (80080d4 <TIM_OC4_SetConfig+0x15c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d113      	bne.n	8008088 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008066:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800806e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	019b      	lsls	r3, r3, #6
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	4313      	orrs	r3, r2
 800807a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	019b      	lsls	r3, r3, #6
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	4313      	orrs	r3, r2
 8008086:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	621a      	str	r2, [r3, #32]
}
 80080a2:	bf00      	nop
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	40012c00 	.word	0x40012c00
 80080b4:	50012c00 	.word	0x50012c00
 80080b8:	40013400 	.word	0x40013400
 80080bc:	50013400 	.word	0x50013400
 80080c0:	40014000 	.word	0x40014000
 80080c4:	50014000 	.word	0x50014000
 80080c8:	40014400 	.word	0x40014400
 80080cc:	50014400 	.word	0x50014400
 80080d0:	40014800 	.word	0x40014800
 80080d4:	50014800 	.word	0x50014800

080080d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800810a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800811c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	041b      	lsls	r3, r3, #16
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a21      	ldr	r2, [pc, #132]	@ (80081b4 <TIM_OC5_SetConfig+0xdc>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d023      	beq.n	800817a <TIM_OC5_SetConfig+0xa2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a20      	ldr	r2, [pc, #128]	@ (80081b8 <TIM_OC5_SetConfig+0xe0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d01f      	beq.n	800817a <TIM_OC5_SetConfig+0xa2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a1f      	ldr	r2, [pc, #124]	@ (80081bc <TIM_OC5_SetConfig+0xe4>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d01b      	beq.n	800817a <TIM_OC5_SetConfig+0xa2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a1e      	ldr	r2, [pc, #120]	@ (80081c0 <TIM_OC5_SetConfig+0xe8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d017      	beq.n	800817a <TIM_OC5_SetConfig+0xa2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a1d      	ldr	r2, [pc, #116]	@ (80081c4 <TIM_OC5_SetConfig+0xec>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d013      	beq.n	800817a <TIM_OC5_SetConfig+0xa2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a1c      	ldr	r2, [pc, #112]	@ (80081c8 <TIM_OC5_SetConfig+0xf0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00f      	beq.n	800817a <TIM_OC5_SetConfig+0xa2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a1b      	ldr	r2, [pc, #108]	@ (80081cc <TIM_OC5_SetConfig+0xf4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00b      	beq.n	800817a <TIM_OC5_SetConfig+0xa2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a1a      	ldr	r2, [pc, #104]	@ (80081d0 <TIM_OC5_SetConfig+0xf8>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d007      	beq.n	800817a <TIM_OC5_SetConfig+0xa2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a19      	ldr	r2, [pc, #100]	@ (80081d4 <TIM_OC5_SetConfig+0xfc>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d003      	beq.n	800817a <TIM_OC5_SetConfig+0xa2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a18      	ldr	r2, [pc, #96]	@ (80081d8 <TIM_OC5_SetConfig+0x100>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d109      	bne.n	800818e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008180:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	621a      	str	r2, [r3, #32]
}
 80081a8:	bf00      	nop
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	40012c00 	.word	0x40012c00
 80081b8:	50012c00 	.word	0x50012c00
 80081bc:	40013400 	.word	0x40013400
 80081c0:	50013400 	.word	0x50013400
 80081c4:	40014000 	.word	0x40014000
 80081c8:	50014000 	.word	0x50014000
 80081cc:	40014400 	.word	0x40014400
 80081d0:	50014400 	.word	0x50014400
 80081d4:	40014800 	.word	0x40014800
 80081d8:	50014800 	.word	0x50014800

080081dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800820a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800820e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	4313      	orrs	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	051b      	lsls	r3, r3, #20
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	4313      	orrs	r3, r2
 800822e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a22      	ldr	r2, [pc, #136]	@ (80082bc <TIM_OC6_SetConfig+0xe0>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d023      	beq.n	8008280 <TIM_OC6_SetConfig+0xa4>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a21      	ldr	r2, [pc, #132]	@ (80082c0 <TIM_OC6_SetConfig+0xe4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d01f      	beq.n	8008280 <TIM_OC6_SetConfig+0xa4>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a20      	ldr	r2, [pc, #128]	@ (80082c4 <TIM_OC6_SetConfig+0xe8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d01b      	beq.n	8008280 <TIM_OC6_SetConfig+0xa4>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a1f      	ldr	r2, [pc, #124]	@ (80082c8 <TIM_OC6_SetConfig+0xec>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d017      	beq.n	8008280 <TIM_OC6_SetConfig+0xa4>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a1e      	ldr	r2, [pc, #120]	@ (80082cc <TIM_OC6_SetConfig+0xf0>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d013      	beq.n	8008280 <TIM_OC6_SetConfig+0xa4>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a1d      	ldr	r2, [pc, #116]	@ (80082d0 <TIM_OC6_SetConfig+0xf4>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00f      	beq.n	8008280 <TIM_OC6_SetConfig+0xa4>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a1c      	ldr	r2, [pc, #112]	@ (80082d4 <TIM_OC6_SetConfig+0xf8>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d00b      	beq.n	8008280 <TIM_OC6_SetConfig+0xa4>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a1b      	ldr	r2, [pc, #108]	@ (80082d8 <TIM_OC6_SetConfig+0xfc>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d007      	beq.n	8008280 <TIM_OC6_SetConfig+0xa4>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a1a      	ldr	r2, [pc, #104]	@ (80082dc <TIM_OC6_SetConfig+0x100>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d003      	beq.n	8008280 <TIM_OC6_SetConfig+0xa4>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a19      	ldr	r2, [pc, #100]	@ (80082e0 <TIM_OC6_SetConfig+0x104>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d109      	bne.n	8008294 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008286:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	029b      	lsls	r3, r3, #10
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	621a      	str	r2, [r3, #32]
}
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	40012c00 	.word	0x40012c00
 80082c0:	50012c00 	.word	0x50012c00
 80082c4:	40013400 	.word	0x40013400
 80082c8:	50013400 	.word	0x50013400
 80082cc:	40014000 	.word	0x40014000
 80082d0:	50014000 	.word	0x50014000
 80082d4:	40014400 	.word	0x40014400
 80082d8:	50014400 	.word	0x50014400
 80082dc:	40014800 	.word	0x40014800
 80082e0:	50014800 	.word	0x50014800

080082e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	f023 0201 	bic.w	r2, r3, #1
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800830e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	4313      	orrs	r3, r2
 8008318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f023 030a 	bic.w	r3, r3, #10
 8008320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	621a      	str	r2, [r3, #32]
}
 8008336:	bf00      	nop
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008342:	b480      	push	{r7}
 8008344:	b087      	sub	sp, #28
 8008346:	af00      	add	r7, sp, #0
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6a1b      	ldr	r3, [r3, #32]
 8008358:	f023 0210 	bic.w	r2, r3, #16
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800836c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	031b      	lsls	r3, r3, #12
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4313      	orrs	r3, r2
 8008376:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800837e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	4313      	orrs	r3, r2
 8008388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	621a      	str	r2, [r3, #32]
}
 8008396:	bf00      	nop
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80083b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	f043 0307 	orr.w	r3, r3, #7
 80083c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	609a      	str	r2, [r3, #8]
}
 80083d0:	bf00      	nop
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	021a      	lsls	r2, r3, #8
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	431a      	orrs	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4313      	orrs	r3, r2
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	4313      	orrs	r3, r2
 8008408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	609a      	str	r2, [r3, #8]
}
 8008410:	bf00      	nop
 8008412:	371c      	adds	r7, #28
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008430:	2302      	movs	r3, #2
 8008432:	e097      	b.n	8008564 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a45      	ldr	r2, [pc, #276]	@ (8008570 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00e      	beq.n	800847c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a44      	ldr	r2, [pc, #272]	@ (8008574 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d009      	beq.n	800847c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a42      	ldr	r2, [pc, #264]	@ (8008578 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d004      	beq.n	800847c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a41      	ldr	r2, [pc, #260]	@ (800857c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d108      	bne.n	800848e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008482:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008498:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a2f      	ldr	r2, [pc, #188]	@ (8008570 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d040      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a2e      	ldr	r2, [pc, #184]	@ (8008574 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d03b      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c8:	d036      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084d2:	d031      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a29      	ldr	r2, [pc, #164]	@ (8008580 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d02c      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a28      	ldr	r2, [pc, #160]	@ (8008584 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d027      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a26      	ldr	r2, [pc, #152]	@ (8008588 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d022      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a25      	ldr	r2, [pc, #148]	@ (800858c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d01d      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a23      	ldr	r2, [pc, #140]	@ (8008590 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d018      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a22      	ldr	r2, [pc, #136]	@ (8008594 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d013      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a18      	ldr	r2, [pc, #96]	@ (8008578 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00e      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a17      	ldr	r2, [pc, #92]	@ (800857c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d009      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a1b      	ldr	r2, [pc, #108]	@ (8008598 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d004      	beq.n	8008538 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a1a      	ldr	r2, [pc, #104]	@ (800859c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d10c      	bne.n	8008552 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800853e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	4313      	orrs	r3, r2
 8008548:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	40012c00 	.word	0x40012c00
 8008574:	50012c00 	.word	0x50012c00
 8008578:	40013400 	.word	0x40013400
 800857c:	50013400 	.word	0x50013400
 8008580:	40000400 	.word	0x40000400
 8008584:	50000400 	.word	0x50000400
 8008588:	40000800 	.word	0x40000800
 800858c:	50000800 	.word	0x50000800
 8008590:	40000c00 	.word	0x40000c00
 8008594:	50000c00 	.word	0x50000c00
 8008598:	40014000 	.word	0x40014000
 800859c:	50014000 	.word	0x50014000

080085a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d101      	bne.n	80085bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085b8:	2302      	movs	r3, #2
 80085ba:	e07d      	b.n	80086b8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	4313      	orrs	r3, r2
 8008616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	041b      	lsls	r3, r3, #16
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	4313      	orrs	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a1e      	ldr	r2, [pc, #120]	@ (80086c4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00e      	beq.n	800866c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a1d      	ldr	r2, [pc, #116]	@ (80086c8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d009      	beq.n	800866c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a1b      	ldr	r2, [pc, #108]	@ (80086cc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d004      	beq.n	800866c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a1a      	ldr	r2, [pc, #104]	@ (80086d0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d11c      	bne.n	80086a6 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008676:	051b      	lsls	r3, r3, #20
 8008678:	4313      	orrs	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	40012c00 	.word	0x40012c00
 80086c8:	50012c00 	.word	0x50012c00
 80086cc:	40013400 	.word	0x40013400
 80086d0:	50013400 	.word	0x50013400

080086d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086d4:	b084      	sub	sp, #16
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	f107 001c 	add.w	r0, r7, #28
 80086e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f001 fab6 	bl	8009c64 <USB_CoreReset>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80086fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008708:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008710:	e005      	b.n	800871e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008716:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800872a:	b004      	add	sp, #16
 800872c:	4770      	bx	lr
	...

08008730 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	4613      	mov	r3, r2
 800873c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	2b02      	cmp	r3, #2
 8008742:	d165      	bne.n	8008810 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	4a41      	ldr	r2, [pc, #260]	@ (800884c <USB_SetTurnaroundTime+0x11c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d906      	bls.n	800875a <USB_SetTurnaroundTime+0x2a>
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	4a40      	ldr	r2, [pc, #256]	@ (8008850 <USB_SetTurnaroundTime+0x120>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d202      	bcs.n	800875a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008754:	230f      	movs	r3, #15
 8008756:	617b      	str	r3, [r7, #20]
 8008758:	e062      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	4a3c      	ldr	r2, [pc, #240]	@ (8008850 <USB_SetTurnaroundTime+0x120>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d306      	bcc.n	8008770 <USB_SetTurnaroundTime+0x40>
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	4a3b      	ldr	r2, [pc, #236]	@ (8008854 <USB_SetTurnaroundTime+0x124>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d202      	bcs.n	8008770 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800876a:	230e      	movs	r3, #14
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	e057      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4a38      	ldr	r2, [pc, #224]	@ (8008854 <USB_SetTurnaroundTime+0x124>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d306      	bcc.n	8008786 <USB_SetTurnaroundTime+0x56>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4a37      	ldr	r2, [pc, #220]	@ (8008858 <USB_SetTurnaroundTime+0x128>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d202      	bcs.n	8008786 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008780:	230d      	movs	r3, #13
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	e04c      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4a33      	ldr	r2, [pc, #204]	@ (8008858 <USB_SetTurnaroundTime+0x128>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d306      	bcc.n	800879c <USB_SetTurnaroundTime+0x6c>
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	4a32      	ldr	r2, [pc, #200]	@ (800885c <USB_SetTurnaroundTime+0x12c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d802      	bhi.n	800879c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008796:	230c      	movs	r3, #12
 8008798:	617b      	str	r3, [r7, #20]
 800879a:	e041      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	4a2f      	ldr	r2, [pc, #188]	@ (800885c <USB_SetTurnaroundTime+0x12c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d906      	bls.n	80087b2 <USB_SetTurnaroundTime+0x82>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4a2e      	ldr	r2, [pc, #184]	@ (8008860 <USB_SetTurnaroundTime+0x130>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d802      	bhi.n	80087b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80087ac:	230b      	movs	r3, #11
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e036      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	4a2a      	ldr	r2, [pc, #168]	@ (8008860 <USB_SetTurnaroundTime+0x130>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d906      	bls.n	80087c8 <USB_SetTurnaroundTime+0x98>
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4a29      	ldr	r2, [pc, #164]	@ (8008864 <USB_SetTurnaroundTime+0x134>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d802      	bhi.n	80087c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80087c2:	230a      	movs	r3, #10
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	e02b      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	4a26      	ldr	r2, [pc, #152]	@ (8008864 <USB_SetTurnaroundTime+0x134>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d906      	bls.n	80087de <USB_SetTurnaroundTime+0xae>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4a25      	ldr	r2, [pc, #148]	@ (8008868 <USB_SetTurnaroundTime+0x138>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d202      	bcs.n	80087de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80087d8:	2309      	movs	r3, #9
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	e020      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	4a21      	ldr	r2, [pc, #132]	@ (8008868 <USB_SetTurnaroundTime+0x138>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d306      	bcc.n	80087f4 <USB_SetTurnaroundTime+0xc4>
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	4a20      	ldr	r2, [pc, #128]	@ (800886c <USB_SetTurnaroundTime+0x13c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d802      	bhi.n	80087f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80087ee:	2308      	movs	r3, #8
 80087f0:	617b      	str	r3, [r7, #20]
 80087f2:	e015      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	4a1d      	ldr	r2, [pc, #116]	@ (800886c <USB_SetTurnaroundTime+0x13c>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d906      	bls.n	800880a <USB_SetTurnaroundTime+0xda>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008870 <USB_SetTurnaroundTime+0x140>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d202      	bcs.n	800880a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008804:	2307      	movs	r3, #7
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	e00a      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800880a:	2306      	movs	r3, #6
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	e007      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008816:	2309      	movs	r3, #9
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	e001      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800881c:	2309      	movs	r3, #9
 800881e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	029b      	lsls	r3, r3, #10
 8008834:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008838:	431a      	orrs	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	00d8acbf 	.word	0x00d8acbf
 8008850:	00e4e1c0 	.word	0x00e4e1c0
 8008854:	00f42400 	.word	0x00f42400
 8008858:	01067380 	.word	0x01067380
 800885c:	011a499f 	.word	0x011a499f
 8008860:	01312cff 	.word	0x01312cff
 8008864:	014ca43f 	.word	0x014ca43f
 8008868:	016e3600 	.word	0x016e3600
 800886c:	01a6ab1f 	.word	0x01a6ab1f
 8008870:	01e84800 	.word	0x01e84800

08008874 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f043 0201 	orr.w	r2, r3, #1
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f023 0201 	bic.w	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d115      	bne.n	8008906 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80088e6:	200a      	movs	r0, #10
 80088e8:	f7f8 fe1c 	bl	8001524 <HAL_Delay>
      ms += 10U;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	330a      	adds	r3, #10
 80088f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 f927 	bl	8009b46 <USB_GetMode>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d01e      	beq.n	800893c <USB_SetCurrentMode+0x84>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2bc7      	cmp	r3, #199	@ 0xc7
 8008902:	d9f0      	bls.n	80088e6 <USB_SetCurrentMode+0x2e>
 8008904:	e01a      	b.n	800893c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008906:	78fb      	ldrb	r3, [r7, #3]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d115      	bne.n	8008938 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008918:	200a      	movs	r0, #10
 800891a:	f7f8 fe03 	bl	8001524 <HAL_Delay>
      ms += 10U;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	330a      	adds	r3, #10
 8008922:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 f90e 	bl	8009b46 <USB_GetMode>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <USB_SetCurrentMode+0x84>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2bc7      	cmp	r3, #199	@ 0xc7
 8008934:	d9f0      	bls.n	8008918 <USB_SetCurrentMode+0x60>
 8008936:	e001      	b.n	800893c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e005      	b.n	8008948 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008940:	d101      	bne.n	8008946 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e000      	b.n	8008948 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008950:	b084      	sub	sp, #16
 8008952:	b580      	push	{r7, lr}
 8008954:	b086      	sub	sp, #24
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800895e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800896a:	2300      	movs	r3, #0
 800896c:	613b      	str	r3, [r7, #16]
 800896e:	e009      	b.n	8008984 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	3340      	adds	r3, #64	@ 0x40
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	2200      	movs	r2, #0
 800897c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	3301      	adds	r3, #1
 8008982:	613b      	str	r3, [r7, #16]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	2b0e      	cmp	r3, #14
 8008988:	d9f2      	bls.n	8008970 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800898a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800898e:	2b00      	cmp	r3, #0
 8008990:	d11c      	bne.n	80089cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089a0:	f043 0302 	orr.w	r3, r3, #2
 80089a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	e005      	b.n	80089d8 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089de:	461a      	mov	r2, r3
 80089e0:	2300      	movs	r3, #0
 80089e2:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089e4:	2103      	movs	r1, #3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f95e 	bl	8008ca8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089ec:	2110      	movs	r1, #16
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f8fa 	bl	8008be8 <USB_FlushTxFifo>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f924 	bl	8008c4c <USB_FlushRxFifo>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a14:	461a      	mov	r2, r3
 8008a16:	2300      	movs	r3, #0
 8008a18:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a20:	461a      	mov	r2, r3
 8008a22:	2300      	movs	r3, #0
 8008a24:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a32:	2300      	movs	r3, #0
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	e043      	b.n	8008ac0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a4e:	d118      	bne.n	8008a82 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10a      	bne.n	8008a6c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a62:	461a      	mov	r2, r3
 8008a64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	e013      	b.n	8008a94 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a78:	461a      	mov	r2, r3
 8008a7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	e008      	b.n	8008a94 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a8e:	461a      	mov	r2, r3
 8008a90:	2300      	movs	r3, #0
 8008a92:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008ab8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	3301      	adds	r3, #1
 8008abe:	613b      	str	r3, [r7, #16]
 8008ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d3b5      	bcc.n	8008a38 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008acc:	2300      	movs	r3, #0
 8008ace:	613b      	str	r3, [r7, #16]
 8008ad0:	e043      	b.n	8008b5a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ae8:	d118      	bne.n	8008b1c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008afc:	461a      	mov	r2, r3
 8008afe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	e013      	b.n	8008b2e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b12:	461a      	mov	r2, r3
 8008b14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	e008      	b.n	8008b2e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b28:	461a      	mov	r2, r3
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008b52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	3301      	adds	r3, #1
 8008b58:	613b      	str	r3, [r7, #16]
 8008b5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008b5e:	461a      	mov	r2, r3
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d3b5      	bcc.n	8008ad2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008b86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d105      	bne.n	8008b9c <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	f043 0210 	orr.w	r2, r3, #16
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699a      	ldr	r2, [r3, #24]
 8008ba0:	4b10      	ldr	r3, [pc, #64]	@ (8008be4 <USB_DevInit+0x294>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ba8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	f043 0208 	orr.w	r2, r3, #8
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008bbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d107      	bne.n	8008bd4 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bcc:	f043 0304 	orr.w	r3, r3, #4
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008be0:	b004      	add	sp, #16
 8008be2:	4770      	bx	lr
 8008be4:	803c3800 	.word	0x803c3800

08008be8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c02:	d901      	bls.n	8008c08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e01b      	b.n	8008c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	daf2      	bge.n	8008bf6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	019b      	lsls	r3, r3, #6
 8008c18:	f043 0220 	orr.w	r2, r3, #32
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3301      	adds	r3, #1
 8008c24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c2c:	d901      	bls.n	8008c32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e006      	b.n	8008c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	d0f0      	beq.n	8008c20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c64:	d901      	bls.n	8008c6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e018      	b.n	8008c9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	daf2      	bge.n	8008c58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2210      	movs	r2, #16
 8008c7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c88:	d901      	bls.n	8008c8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e006      	b.n	8008c9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f003 0310 	and.w	r3, r3, #16
 8008c96:	2b10      	cmp	r3, #16
 8008c98:	d0f0      	beq.n	8008c7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b087      	sub	sp, #28
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f003 0306 	and.w	r3, r3, #6
 8008cf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d102      	bne.n	8008d00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	75fb      	strb	r3, [r7, #23]
 8008cfe:	e00a      	b.n	8008d16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d002      	beq.n	8008d0c <USB_GetDevSpeed+0x32>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b06      	cmp	r3, #6
 8008d0a:	d102      	bne.n	8008d12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	75fb      	strb	r3, [r7, #23]
 8008d10:	e001      	b.n	8008d16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008d12:	230f      	movs	r3, #15
 8008d14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	371c      	adds	r7, #28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d13a      	bne.n	8008db6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d46:	69da      	ldr	r2, [r3, #28]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	f003 030f 	and.w	r3, r3, #15
 8008d50:	2101      	movs	r1, #1
 8008d52:	fa01 f303 	lsl.w	r3, r1, r3
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	68f9      	ldr	r1, [r7, #12]
 8008d5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d155      	bne.n	8008e24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	791b      	ldrb	r3, [r3, #4]
 8008d92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	059b      	lsls	r3, r3, #22
 8008d9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	0151      	lsls	r1, r2, #5
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	440a      	add	r2, r1
 8008da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	e036      	b.n	8008e24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dbc:	69da      	ldr	r2, [r3, #28]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dcc:	041b      	lsls	r3, r3, #16
 8008dce:	68f9      	ldr	r1, [r7, #12]
 8008dd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d11a      	bne.n	8008e24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	791b      	ldrb	r3, [r3, #4]
 8008e08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	0151      	lsls	r1, r2, #5
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	440a      	add	r2, r1
 8008e16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
	...

08008e34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	785b      	ldrb	r3, [r3, #1]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d161      	bne.n	8008f14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e66:	d11f      	bne.n	8008ea8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	0151      	lsls	r1, r2, #5
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	440a      	add	r2, r1
 8008e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	0151      	lsls	r1, r2, #5
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	440a      	add	r2, r1
 8008e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ea6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	f003 030f 	and.w	r3, r3, #15
 8008eb8:	2101      	movs	r1, #1
 8008eba:	fa01 f303 	lsl.w	r3, r1, r3
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	43db      	mvns	r3, r3
 8008ec2:	68f9      	ldr	r1, [r7, #12]
 8008ec4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ec8:	4013      	ands	r3, r2
 8008eca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ed2:	69da      	ldr	r2, [r3, #28]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	f003 030f 	and.w	r3, r3, #15
 8008edc:	2101      	movs	r1, #1
 8008ede:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	43db      	mvns	r3, r3
 8008ee6:	68f9      	ldr	r1, [r7, #12]
 8008ee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008eec:	4013      	ands	r3, r2
 8008eee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	0159      	lsls	r1, r3, #5
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	440b      	add	r3, r1
 8008f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4b35      	ldr	r3, [pc, #212]	@ (8008fe4 <USB_DeactivateEndpoint+0x1b0>)
 8008f0e:	4013      	ands	r3, r2
 8008f10:	600b      	str	r3, [r1, #0]
 8008f12:	e060      	b.n	8008fd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f2a:	d11f      	bne.n	8008f6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	0151      	lsls	r1, r2, #5
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	440a      	add	r2, r1
 8008f42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	0151      	lsls	r1, r2, #5
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	440a      	add	r2, r1
 8008f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f82:	041b      	lsls	r3, r3, #16
 8008f84:	43db      	mvns	r3, r3
 8008f86:	68f9      	ldr	r1, [r7, #12]
 8008f88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f96:	69da      	ldr	r2, [r3, #28]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	f003 030f 	and.w	r3, r3, #15
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa6:	041b      	lsls	r3, r3, #16
 8008fa8:	43db      	mvns	r3, r3
 8008faa:	68f9      	ldr	r1, [r7, #12]
 8008fac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	0159      	lsls	r1, r3, #5
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	440b      	add	r3, r1
 8008fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4b05      	ldr	r3, [pc, #20]	@ (8008fe8 <USB_DeactivateEndpoint+0x1b4>)
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	ec337800 	.word	0xec337800
 8008fe8:	eff37800 	.word	0xeff37800

08008fec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08a      	sub	sp, #40	@ 0x28
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	785b      	ldrb	r3, [r3, #1]
 8009008:	2b01      	cmp	r3, #1
 800900a:	f040 817f 	bne.w	800930c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d132      	bne.n	800907c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	0151      	lsls	r1, r2, #5
 8009028:	69fa      	ldr	r2, [r7, #28]
 800902a:	440a      	add	r2, r1
 800902c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009030:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009034:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	4413      	add	r3, r2
 8009042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	0151      	lsls	r1, r2, #5
 800904c:	69fa      	ldr	r2, [r7, #28]
 800904e:	440a      	add	r2, r1
 8009050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009054:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009058:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	0151      	lsls	r1, r2, #5
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	440a      	add	r2, r1
 8009070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009074:	0cdb      	lsrs	r3, r3, #19
 8009076:	04db      	lsls	r3, r3, #19
 8009078:	6113      	str	r3, [r2, #16]
 800907a:	e097      	b.n	80091ac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	0151      	lsls	r1, r2, #5
 800908e:	69fa      	ldr	r2, [r7, #28]
 8009090:	440a      	add	r2, r1
 8009092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009096:	0cdb      	lsrs	r3, r3, #19
 8009098:	04db      	lsls	r3, r3, #19
 800909a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	69ba      	ldr	r2, [r7, #24]
 80090ac:	0151      	lsls	r1, r2, #5
 80090ae:	69fa      	ldr	r2, [r7, #28]
 80090b0:	440a      	add	r2, r1
 80090b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80090ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80090be:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d11a      	bne.n	80090fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	691a      	ldr	r2, [r3, #16]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d903      	bls.n	80090da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	689a      	ldr	r2, [r3, #8]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	69fa      	ldr	r2, [r7, #28]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090f8:	6113      	str	r3, [r2, #16]
 80090fa:	e044      	b.n	8009186 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	4413      	add	r3, r2
 8009106:	1e5a      	subs	r2, r3, #1
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009110:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800911e:	691a      	ldr	r2, [r3, #16]
 8009120:	8afb      	ldrh	r3, [r7, #22]
 8009122:	04d9      	lsls	r1, r3, #19
 8009124:	4ba4      	ldr	r3, [pc, #656]	@ (80093b8 <USB_EPStartXfer+0x3cc>)
 8009126:	400b      	ands	r3, r1
 8009128:	69b9      	ldr	r1, [r7, #24]
 800912a:	0148      	lsls	r0, r1, #5
 800912c:	69f9      	ldr	r1, [r7, #28]
 800912e:	4401      	add	r1, r0
 8009130:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009134:	4313      	orrs	r3, r2
 8009136:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	791b      	ldrb	r3, [r3, #4]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d122      	bne.n	8009186 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	0151      	lsls	r1, r2, #5
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	440a      	add	r2, r1
 8009156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800915a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800915e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800916c:	691a      	ldr	r2, [r3, #16]
 800916e:	8afb      	ldrh	r3, [r7, #22]
 8009170:	075b      	lsls	r3, r3, #29
 8009172:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009176:	69b9      	ldr	r1, [r7, #24]
 8009178:	0148      	lsls	r0, r1, #5
 800917a:	69f9      	ldr	r1, [r7, #28]
 800917c:	4401      	add	r1, r0
 800917e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009182:	4313      	orrs	r3, r2
 8009184:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009192:	691a      	ldr	r2, [r3, #16]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800919c:	69b9      	ldr	r1, [r7, #24]
 800919e:	0148      	lsls	r0, r1, #5
 80091a0:	69f9      	ldr	r1, [r7, #28]
 80091a2:	4401      	add	r1, r0
 80091a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80091a8:	4313      	orrs	r3, r2
 80091aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80091ac:	79fb      	ldrb	r3, [r7, #7]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d14b      	bne.n	800924a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c6:	461a      	mov	r2, r3
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	791b      	ldrb	r3, [r3, #4]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d128      	bne.n	8009228 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d110      	bne.n	8009208 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	0151      	lsls	r1, r2, #5
 80091f8:	69fa      	ldr	r2, [r7, #28]
 80091fa:	440a      	add	r2, r1
 80091fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009200:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009204:	6013      	str	r3, [r2, #0]
 8009206:	e00f      	b.n	8009228 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	0151      	lsls	r1, r2, #5
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	440a      	add	r2, r1
 800921e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009226:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	0151      	lsls	r1, r2, #5
 800923a:	69fa      	ldr	r2, [r7, #28]
 800923c:	440a      	add	r2, r1
 800923e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009242:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	e166      	b.n	8009518 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	0151      	lsls	r1, r2, #5
 800925c:	69fa      	ldr	r2, [r7, #28]
 800925e:	440a      	add	r2, r1
 8009260:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009264:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009268:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	791b      	ldrb	r3, [r3, #4]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d015      	beq.n	800929e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 814e 	beq.w	8009518 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009282:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	f003 030f 	and.w	r3, r3, #15
 800928c:	2101      	movs	r1, #1
 800928e:	fa01 f303 	lsl.w	r3, r1, r3
 8009292:	69f9      	ldr	r1, [r7, #28]
 8009294:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009298:	4313      	orrs	r3, r2
 800929a:	634b      	str	r3, [r1, #52]	@ 0x34
 800929c:	e13c      	b.n	8009518 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d110      	bne.n	80092d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	0151      	lsls	r1, r2, #5
 80092c0:	69fa      	ldr	r2, [r7, #28]
 80092c2:	440a      	add	r2, r1
 80092c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	e00f      	b.n	80092f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	0151      	lsls	r1, r2, #5
 80092e2:	69fa      	ldr	r2, [r7, #28]
 80092e4:	440a      	add	r2, r1
 80092e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	68d9      	ldr	r1, [r3, #12]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	781a      	ldrb	r2, [r3, #0]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	b298      	uxth	r0, r3
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	4603      	mov	r3, r0
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 f9b9 	bl	800967c <USB_WritePacket>
 800930a:	e105      	b.n	8009518 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	0151      	lsls	r1, r2, #5
 800931e:	69fa      	ldr	r2, [r7, #28]
 8009320:	440a      	add	r2, r1
 8009322:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009326:	0cdb      	lsrs	r3, r3, #19
 8009328:	04db      	lsls	r3, r3, #19
 800932a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	440a      	add	r2, r1
 8009342:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009346:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800934a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800934e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d132      	bne.n	80093bc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	689a      	ldr	r2, [r3, #8]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	4413      	add	r3, r2
 8009376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800937a:	691a      	ldr	r2, [r3, #16]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009384:	69b9      	ldr	r1, [r7, #24]
 8009386:	0148      	lsls	r0, r1, #5
 8009388:	69f9      	ldr	r1, [r7, #28]
 800938a:	4401      	add	r1, r0
 800938c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009390:	4313      	orrs	r3, r2
 8009392:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	0151      	lsls	r1, r2, #5
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	440a      	add	r2, r1
 80093aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80093b2:	6113      	str	r3, [r2, #16]
 80093b4:	e062      	b.n	800947c <USB_EPStartXfer+0x490>
 80093b6:	bf00      	nop
 80093b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d123      	bne.n	800940c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d0:	691a      	ldr	r2, [r3, #16]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093da:	69b9      	ldr	r1, [r7, #24]
 80093dc:	0148      	lsls	r0, r1, #5
 80093de:	69f9      	ldr	r1, [r7, #28]
 80093e0:	4401      	add	r1, r0
 80093e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093e6:	4313      	orrs	r3, r2
 80093e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	0151      	lsls	r1, r2, #5
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	440a      	add	r2, r1
 8009400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009404:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009408:	6113      	str	r3, [r2, #16]
 800940a:	e037      	b.n	800947c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	691a      	ldr	r2, [r3, #16]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	4413      	add	r3, r2
 8009416:	1e5a      	subs	r2, r3, #1
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009420:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	8afa      	ldrh	r2, [r7, #22]
 8009428:	fb03 f202 	mul.w	r2, r3, r2
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	4413      	add	r3, r2
 8009438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800943c:	691a      	ldr	r2, [r3, #16]
 800943e:	8afb      	ldrh	r3, [r7, #22]
 8009440:	04d9      	lsls	r1, r3, #19
 8009442:	4b38      	ldr	r3, [pc, #224]	@ (8009524 <USB_EPStartXfer+0x538>)
 8009444:	400b      	ands	r3, r1
 8009446:	69b9      	ldr	r1, [r7, #24]
 8009448:	0148      	lsls	r0, r1, #5
 800944a:	69f9      	ldr	r1, [r7, #28]
 800944c:	4401      	add	r1, r0
 800944e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009452:	4313      	orrs	r3, r2
 8009454:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	4413      	add	r3, r2
 800945e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009462:	691a      	ldr	r2, [r3, #16]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	6a1b      	ldr	r3, [r3, #32]
 8009468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800946c:	69b9      	ldr	r1, [r7, #24]
 800946e:	0148      	lsls	r0, r1, #5
 8009470:	69f9      	ldr	r1, [r7, #28]
 8009472:	4401      	add	r1, r0
 8009474:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009478:	4313      	orrs	r3, r2
 800947a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d10d      	bne.n	800949e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d009      	beq.n	800949e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	68d9      	ldr	r1, [r3, #12]
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	015a      	lsls	r2, r3, #5
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	4413      	add	r3, r2
 8009496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800949a:	460a      	mov	r2, r1
 800949c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	791b      	ldrb	r3, [r3, #4]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d128      	bne.n	80094f8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d110      	bne.n	80094d8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	0151      	lsls	r1, r2, #5
 80094c8:	69fa      	ldr	r2, [r7, #28]
 80094ca:	440a      	add	r2, r1
 80094cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	e00f      	b.n	80094f8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	0151      	lsls	r1, r2, #5
 80094ea:	69fa      	ldr	r2, [r7, #28]
 80094ec:	440a      	add	r2, r1
 80094ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	0151      	lsls	r1, r2, #5
 800950a:	69fa      	ldr	r2, [r7, #28]
 800950c:	440a      	add	r2, r1
 800950e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009512:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009516:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3720      	adds	r7, #32
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	1ff80000 	.word	0x1ff80000

08009528 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009528:	b480      	push	{r7}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	785b      	ldrb	r3, [r3, #1]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d14a      	bne.n	80095dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	015a      	lsls	r2, r3, #5
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	4413      	add	r3, r2
 8009550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800955a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800955e:	f040 8086 	bne.w	800966e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	7812      	ldrb	r2, [r2, #0]
 8009576:	0151      	lsls	r1, r2, #5
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	440a      	add	r2, r1
 800957c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009580:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009584:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	7812      	ldrb	r2, [r2, #0]
 800959a:	0151      	lsls	r1, r2, #5
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	440a      	add	r2, r1
 80095a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3301      	adds	r3, #1
 80095ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d902      	bls.n	80095c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	75fb      	strb	r3, [r7, #23]
          break;
 80095be:	e056      	b.n	800966e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095d8:	d0e7      	beq.n	80095aa <USB_EPStopXfer+0x82>
 80095da:	e048      	b.n	800966e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	015a      	lsls	r2, r3, #5
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	4413      	add	r3, r2
 80095e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095f4:	d13b      	bne.n	800966e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	7812      	ldrb	r2, [r2, #0]
 800960a:	0151      	lsls	r1, r2, #5
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	440a      	add	r2, r1
 8009610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009614:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009618:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	7812      	ldrb	r2, [r2, #0]
 800962e:	0151      	lsls	r1, r2, #5
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	440a      	add	r2, r1
 8009634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009638:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800963c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3301      	adds	r3, #1
 8009642:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f242 7210 	movw	r2, #10000	@ 0x2710
 800964a:	4293      	cmp	r3, r2
 800964c:	d902      	bls.n	8009654 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	75fb      	strb	r3, [r7, #23]
          break;
 8009652:	e00c      	b.n	800966e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009668:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800966c:	d0e7      	beq.n	800963e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800966e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009670:	4618      	mov	r0, r3
 8009672:	371c      	adds	r7, #28
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800967c:	b480      	push	{r7}
 800967e:	b089      	sub	sp, #36	@ 0x24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4611      	mov	r1, r2
 8009688:	461a      	mov	r2, r3
 800968a:	460b      	mov	r3, r1
 800968c:	71fb      	strb	r3, [r7, #7]
 800968e:	4613      	mov	r3, r2
 8009690:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800969a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d123      	bne.n	80096ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80096a2:	88bb      	ldrh	r3, [r7, #4]
 80096a4:	3303      	adds	r3, #3
 80096a6:	089b      	lsrs	r3, r3, #2
 80096a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80096aa:	2300      	movs	r3, #0
 80096ac:	61bb      	str	r3, [r7, #24]
 80096ae:	e018      	b.n	80096e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80096b0:	79fb      	ldrb	r3, [r7, #7]
 80096b2:	031a      	lsls	r2, r3, #12
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096bc:	461a      	mov	r2, r3
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	3301      	adds	r3, #1
 80096c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	3301      	adds	r3, #1
 80096ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	3301      	adds	r3, #1
 80096d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	3301      	adds	r3, #1
 80096da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	3301      	adds	r3, #1
 80096e0:	61bb      	str	r3, [r7, #24]
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d3e2      	bcc.n	80096b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3724      	adds	r7, #36	@ 0x24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b08b      	sub	sp, #44	@ 0x2c
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	4613      	mov	r3, r2
 8009704:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800970e:	88fb      	ldrh	r3, [r7, #6]
 8009710:	089b      	lsrs	r3, r3, #2
 8009712:	b29b      	uxth	r3, r3
 8009714:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009716:	88fb      	ldrh	r3, [r7, #6]
 8009718:	f003 0303 	and.w	r3, r3, #3
 800971c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800971e:	2300      	movs	r3, #0
 8009720:	623b      	str	r3, [r7, #32]
 8009722:	e014      	b.n	800974e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009732:	3301      	adds	r3, #1
 8009734:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009738:	3301      	adds	r3, #1
 800973a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800973c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973e:	3301      	adds	r3, #1
 8009740:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009744:	3301      	adds	r3, #1
 8009746:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	3301      	adds	r3, #1
 800974c:	623b      	str	r3, [r7, #32]
 800974e:	6a3a      	ldr	r2, [r7, #32]
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	429a      	cmp	r2, r3
 8009754:	d3e6      	bcc.n	8009724 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009756:	8bfb      	ldrh	r3, [r7, #30]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d01e      	beq.n	800979a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009766:	461a      	mov	r2, r3
 8009768:	f107 0310 	add.w	r3, r7, #16
 800976c:	6812      	ldr	r2, [r2, #0]
 800976e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	b2db      	uxtb	r3, r3
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	fa22 f303 	lsr.w	r3, r2, r3
 800977c:	b2da      	uxtb	r2, r3
 800977e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009780:	701a      	strb	r2, [r3, #0]
      i++;
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	3301      	adds	r3, #1
 8009786:	623b      	str	r3, [r7, #32]
      pDest++;
 8009788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978a:	3301      	adds	r3, #1
 800978c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800978e:	8bfb      	ldrh	r3, [r7, #30]
 8009790:	3b01      	subs	r3, #1
 8009792:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009794:	8bfb      	ldrh	r3, [r7, #30]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1ea      	bne.n	8009770 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800979a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800979c:	4618      	mov	r0, r3
 800979e:	372c      	adds	r7, #44	@ 0x2c
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d12c      	bne.n	800981e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	db12      	blt.n	80097fc <USB_EPSetStall+0x54>
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00f      	beq.n	80097fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	0151      	lsls	r1, r2, #5
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	440a      	add	r2, r1
 80097f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	0151      	lsls	r1, r2, #5
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	440a      	add	r2, r1
 8009812:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009816:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	e02b      	b.n	8009876 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	4413      	add	r3, r2
 8009826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	db12      	blt.n	8009856 <USB_EPSetStall+0xae>
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00f      	beq.n	8009856 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	4413      	add	r3, r2
 800983e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	0151      	lsls	r1, r2, #5
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	440a      	add	r2, r1
 800984c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009850:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009854:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4413      	add	r3, r2
 800985e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	0151      	lsls	r1, r2, #5
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	440a      	add	r2, r1
 800986c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009874:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	785b      	ldrb	r3, [r3, #1]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d128      	bne.n	80098f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	0151      	lsls	r1, r2, #5
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	440a      	add	r2, r1
 80098b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80098be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	791b      	ldrb	r3, [r3, #4]
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d003      	beq.n	80098d0 <USB_EPClearStall+0x4c>
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	791b      	ldrb	r3, [r3, #4]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d138      	bne.n	8009942 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	0151      	lsls	r1, r2, #5
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	440a      	add	r2, r1
 80098e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	e027      	b.n	8009942 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	0151      	lsls	r1, r2, #5
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	440a      	add	r2, r1
 8009908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800990c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009910:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	791b      	ldrb	r3, [r3, #4]
 8009916:	2b03      	cmp	r3, #3
 8009918:	d003      	beq.n	8009922 <USB_EPClearStall+0x9e>
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	791b      	ldrb	r3, [r3, #4]
 800991e:	2b02      	cmp	r3, #2
 8009920:	d10f      	bne.n	8009942 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	015a      	lsls	r2, r3, #5
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	4413      	add	r3, r2
 800992a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	0151      	lsls	r1, r2, #5
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	440a      	add	r2, r1
 8009938:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800993c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009940:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800996e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009972:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	011b      	lsls	r3, r3, #4
 8009980:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009984:	68f9      	ldr	r1, [r7, #12]
 8009986:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800998a:	4313      	orrs	r3, r2
 800998c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80099b6:	f023 0303 	bic.w	r3, r3, #3
 80099ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099ca:	f023 0302 	bic.w	r3, r3, #2
 80099ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3714      	adds	r7, #20
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80099de:	b480      	push	{r7}
 80099e0:	b085      	sub	sp, #20
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80099f8:	f023 0303 	bic.w	r3, r3, #3
 80099fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a0c:	f043 0302 	orr.w	r3, r3, #2
 8009a10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	4013      	ands	r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a38:	68fb      	ldr	r3, [r7, #12]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b085      	sub	sp, #20
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	4013      	ands	r3, r2
 8009a68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	0c1b      	lsrs	r3, r3, #16
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b085      	sub	sp, #20
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	b29b      	uxth	r3, r3
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b085      	sub	sp, #20
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009abe:	78fb      	ldrb	r3, [r7, #3]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009adc:	68bb      	ldr	r3, [r7, #8]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b087      	sub	sp, #28
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	460b      	mov	r3, r1
 8009af4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009b0e:	78fb      	ldrb	r3, [r7, #3]
 8009b10:	f003 030f 	and.w	r3, r3, #15
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	fa22 f303 	lsr.w	r3, r2, r3
 8009b1a:	01db      	lsls	r3, r3, #7
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	4013      	ands	r3, r2
 8009b36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b38:	68bb      	ldr	r3, [r7, #8]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b083      	sub	sp, #12
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	f003 0301 	and.w	r3, r3, #1
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b085      	sub	sp, #20
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009b80:	f023 0307 	bic.w	r3, r3, #7
 8009b84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	333c      	adds	r3, #60	@ 0x3c
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	4a26      	ldr	r2, [pc, #152]	@ (8009c60 <USB_EP0_OutStart+0xb8>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d90a      	bls.n	8009be2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bdc:	d101      	bne.n	8009be2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	e037      	b.n	8009c52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009be8:	461a      	mov	r2, r3
 8009bea:	2300      	movs	r3, #0
 8009bec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c10:	f043 0318 	orr.w	r3, r3, #24
 8009c14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c24:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009c28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009c2a:	7afb      	ldrb	r3, [r7, #11]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d10f      	bne.n	8009c50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c36:	461a      	mov	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c4a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009c4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	4f54300a 	.word	0x4f54300a

08009c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3301      	adds	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c7c:	d901      	bls.n	8009c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e01b      	b.n	8009cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	daf2      	bge.n	8009c70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	f043 0201 	orr.w	r2, r3, #1
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ca6:	d901      	bls.n	8009cac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e006      	b.n	8009cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d0f0      	beq.n	8009c9a <USB_CoreReset+0x36>

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
	...

08009cc8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009ccc:	2200      	movs	r2, #0
 8009cce:	4912      	ldr	r1, [pc, #72]	@ (8009d18 <MX_USB_Device_Init+0x50>)
 8009cd0:	4812      	ldr	r0, [pc, #72]	@ (8009d1c <MX_USB_Device_Init+0x54>)
 8009cd2:	f000 ffb1 	bl	800ac38 <USBD_Init>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009cdc:	f7f6 ffac 	bl	8000c38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009ce0:	490f      	ldr	r1, [pc, #60]	@ (8009d20 <MX_USB_Device_Init+0x58>)
 8009ce2:	480e      	ldr	r0, [pc, #56]	@ (8009d1c <MX_USB_Device_Init+0x54>)
 8009ce4:	f000 ffd8 	bl	800ac98 <USBD_RegisterClass>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009cee:	f7f6 ffa3 	bl	8000c38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009cf2:	490c      	ldr	r1, [pc, #48]	@ (8009d24 <MX_USB_Device_Init+0x5c>)
 8009cf4:	4809      	ldr	r0, [pc, #36]	@ (8009d1c <MX_USB_Device_Init+0x54>)
 8009cf6:	f000 ff33 	bl	800ab60 <USBD_CDC_RegisterInterface>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009d00:	f7f6 ff9a 	bl	8000c38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009d04:	4805      	ldr	r0, [pc, #20]	@ (8009d1c <MX_USB_Device_Init+0x54>)
 8009d06:	f000 ffee 	bl	800ace6 <USBD_Start>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009d10:	f7f6 ff92 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009d14:	bf00      	nop
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	2000003c 	.word	0x2000003c
 8009d1c:	20000934 	.word	0x20000934
 8009d20:	2000009c 	.word	0x2000009c
 8009d24:	20000028 	.word	0x20000028

08009d28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	4905      	ldr	r1, [pc, #20]	@ (8009d44 <CDC_Init_FS+0x1c>)
 8009d30:	4805      	ldr	r0, [pc, #20]	@ (8009d48 <CDC_Init_FS+0x20>)
 8009d32:	f000 ff2a 	bl	800ab8a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d36:	4905      	ldr	r1, [pc, #20]	@ (8009d4c <CDC_Init_FS+0x24>)
 8009d38:	4803      	ldr	r0, [pc, #12]	@ (8009d48 <CDC_Init_FS+0x20>)
 8009d3a:	f000 ff3f 	bl	800abbc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	20001404 	.word	0x20001404
 8009d48:	20000934 	.word	0x20000934
 8009d4c:	20000c04 	.word	0x20000c04

08009d50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d50:	b480      	push	{r7}
 8009d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	6039      	str	r1, [r7, #0]
 8009d6a:	71fb      	strb	r3, [r7, #7]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009d70:	79fb      	ldrb	r3, [r7, #7]
 8009d72:	2b23      	cmp	r3, #35	@ 0x23
 8009d74:	d84a      	bhi.n	8009e0c <CDC_Control_FS+0xac>
 8009d76:	a201      	add	r2, pc, #4	@ (adr r2, 8009d7c <CDC_Control_FS+0x1c>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009e0d 	.word	0x08009e0d
 8009d80:	08009e0d 	.word	0x08009e0d
 8009d84:	08009e0d 	.word	0x08009e0d
 8009d88:	08009e0d 	.word	0x08009e0d
 8009d8c:	08009e0d 	.word	0x08009e0d
 8009d90:	08009e0d 	.word	0x08009e0d
 8009d94:	08009e0d 	.word	0x08009e0d
 8009d98:	08009e0d 	.word	0x08009e0d
 8009d9c:	08009e0d 	.word	0x08009e0d
 8009da0:	08009e0d 	.word	0x08009e0d
 8009da4:	08009e0d 	.word	0x08009e0d
 8009da8:	08009e0d 	.word	0x08009e0d
 8009dac:	08009e0d 	.word	0x08009e0d
 8009db0:	08009e0d 	.word	0x08009e0d
 8009db4:	08009e0d 	.word	0x08009e0d
 8009db8:	08009e0d 	.word	0x08009e0d
 8009dbc:	08009e0d 	.word	0x08009e0d
 8009dc0:	08009e0d 	.word	0x08009e0d
 8009dc4:	08009e0d 	.word	0x08009e0d
 8009dc8:	08009e0d 	.word	0x08009e0d
 8009dcc:	08009e0d 	.word	0x08009e0d
 8009dd0:	08009e0d 	.word	0x08009e0d
 8009dd4:	08009e0d 	.word	0x08009e0d
 8009dd8:	08009e0d 	.word	0x08009e0d
 8009ddc:	08009e0d 	.word	0x08009e0d
 8009de0:	08009e0d 	.word	0x08009e0d
 8009de4:	08009e0d 	.word	0x08009e0d
 8009de8:	08009e0d 	.word	0x08009e0d
 8009dec:	08009e0d 	.word	0x08009e0d
 8009df0:	08009e0d 	.word	0x08009e0d
 8009df4:	08009e0d 	.word	0x08009e0d
 8009df8:	08009e0d 	.word	0x08009e0d
 8009dfc:	08009e0d 	.word	0x08009e0d
 8009e00:	08009e0d 	.word	0x08009e0d
 8009e04:	08009e0d 	.word	0x08009e0d
 8009e08:	08009e0d 	.word	0x08009e0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e0c:	bf00      	nop
  }

  return (USBD_OK);
 8009e0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	4807      	ldr	r0, [pc, #28]	@ (8009e48 <CDC_Receive_FS+0x2c>)
 8009e2a:	f000 fec7 	bl	800abbc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009e2e:	4806      	ldr	r0, [pc, #24]	@ (8009e48 <CDC_Receive_FS+0x2c>)
 8009e30:	f000 fed8 	bl	800abe4 <USBD_CDC_ReceivePacket>

  test_cmd = (char)Buf[0];
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	781a      	ldrb	r2, [r3, #0]
 8009e38:	4b04      	ldr	r3, [pc, #16]	@ (8009e4c <CDC_Receive_FS+0x30>)
 8009e3a:	701a      	strb	r2, [r3, #0]
//	  data = get_register(&device_registers,addr);
//	  msg_tx = ((addr << 24)&0x7F000000) | (data&0x00FFFFFF);
//	  CDC_Transmit_FS((uint8_t*)&msg_tx,sizeof(msg_tx));
//  }

  return (USBD_OK);
 8009e3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20000934 	.word	0x20000934
 8009e4c:	2000092c 	.word	0x2000092c

08009e50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009e62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
	...

08009e74 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	6039      	str	r1, [r7, #0]
 8009e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	2212      	movs	r2, #18
 8009e84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009e86:	4b03      	ldr	r3, [pc, #12]	@ (8009e94 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	2000005c 	.word	0x2000005c

08009e98 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	6039      	str	r1, [r7, #0]
 8009ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2204      	movs	r2, #4
 8009ea8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009eaa:	4b03      	ldr	r3, [pc, #12]	@ (8009eb8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	20000070 	.word	0x20000070

08009ebc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	6039      	str	r1, [r7, #0]
 8009ec6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d105      	bne.n	8009eda <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	4907      	ldr	r1, [pc, #28]	@ (8009ef0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009ed2:	4808      	ldr	r0, [pc, #32]	@ (8009ef4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009ed4:	f001 ff10 	bl	800bcf8 <USBD_GetString>
 8009ed8:	e004      	b.n	8009ee4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	4904      	ldr	r1, [pc, #16]	@ (8009ef0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009ede:	4805      	ldr	r0, [pc, #20]	@ (8009ef4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009ee0:	f001 ff0a 	bl	800bcf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ee4:	4b02      	ldr	r3, [pc, #8]	@ (8009ef0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20001c04 	.word	0x20001c04
 8009ef4:	0800bf28 	.word	0x0800bf28

08009ef8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	6039      	str	r1, [r7, #0]
 8009f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	4904      	ldr	r1, [pc, #16]	@ (8009f18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009f08:	4804      	ldr	r0, [pc, #16]	@ (8009f1c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009f0a:	f001 fef5 	bl	800bcf8 <USBD_GetString>
  return USBD_StrDesc;
 8009f0e:	4b02      	ldr	r3, [pc, #8]	@ (8009f18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	20001c04 	.word	0x20001c04
 8009f1c:	0800bf40 	.word	0x0800bf40

08009f20 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	6039      	str	r1, [r7, #0]
 8009f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	221a      	movs	r2, #26
 8009f30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f32:	f000 f843 	bl	8009fbc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009f36:	4b02      	ldr	r3, [pc, #8]	@ (8009f40 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	20000074 	.word	0x20000074

08009f44 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	6039      	str	r1, [r7, #0]
 8009f4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d105      	bne.n	8009f62 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	4907      	ldr	r1, [pc, #28]	@ (8009f78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009f5a:	4808      	ldr	r0, [pc, #32]	@ (8009f7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009f5c:	f001 fecc 	bl	800bcf8 <USBD_GetString>
 8009f60:	e004      	b.n	8009f6c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	4904      	ldr	r1, [pc, #16]	@ (8009f78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009f66:	4805      	ldr	r0, [pc, #20]	@ (8009f7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009f68:	f001 fec6 	bl	800bcf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f6c:	4b02      	ldr	r3, [pc, #8]	@ (8009f78 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20001c04 	.word	0x20001c04
 8009f7c:	0800bf54 	.word	0x0800bf54

08009f80 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	6039      	str	r1, [r7, #0]
 8009f8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f8c:	79fb      	ldrb	r3, [r7, #7]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d105      	bne.n	8009f9e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	4907      	ldr	r1, [pc, #28]	@ (8009fb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009f96:	4808      	ldr	r0, [pc, #32]	@ (8009fb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009f98:	f001 feae 	bl	800bcf8 <USBD_GetString>
 8009f9c:	e004      	b.n	8009fa8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	4904      	ldr	r1, [pc, #16]	@ (8009fb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009fa2:	4805      	ldr	r0, [pc, #20]	@ (8009fb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009fa4:	f001 fea8 	bl	800bcf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fa8:	4b02      	ldr	r3, [pc, #8]	@ (8009fb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20001c04 	.word	0x20001c04
 8009fb8:	0800bf60 	.word	0x0800bf60

08009fbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009fc2:	4b0f      	ldr	r3, [pc, #60]	@ (800a000 <Get_SerialNum+0x44>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009fc8:	4b0e      	ldr	r3, [pc, #56]	@ (800a004 <Get_SerialNum+0x48>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009fce:	4b0e      	ldr	r3, [pc, #56]	@ (800a008 <Get_SerialNum+0x4c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4413      	add	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d009      	beq.n	8009ff6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009fe2:	2208      	movs	r2, #8
 8009fe4:	4909      	ldr	r1, [pc, #36]	@ (800a00c <Get_SerialNum+0x50>)
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 f814 	bl	800a014 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009fec:	2204      	movs	r2, #4
 8009fee:	4908      	ldr	r1, [pc, #32]	@ (800a010 <Get_SerialNum+0x54>)
 8009ff0:	68b8      	ldr	r0, [r7, #8]
 8009ff2:	f000 f80f 	bl	800a014 <IntToUnicode>
  }
}
 8009ff6:	bf00      	nop
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	0bfa0700 	.word	0x0bfa0700
 800a004:	0bfa0704 	.word	0x0bfa0704
 800a008:	0bfa0708 	.word	0x0bfa0708
 800a00c:	20000076 	.word	0x20000076
 800a010:	20000086 	.word	0x20000086

0800a014 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4613      	mov	r3, r2
 800a020:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a026:	2300      	movs	r3, #0
 800a028:	75fb      	strb	r3, [r7, #23]
 800a02a:	e027      	b.n	800a07c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	0f1b      	lsrs	r3, r3, #28
 800a030:	2b09      	cmp	r3, #9
 800a032:	d80b      	bhi.n	800a04c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	0f1b      	lsrs	r3, r3, #28
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	005b      	lsls	r3, r3, #1
 800a03e:	4619      	mov	r1, r3
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	440b      	add	r3, r1
 800a044:	3230      	adds	r2, #48	@ 0x30
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	e00a      	b.n	800a062 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	0f1b      	lsrs	r3, r3, #28
 800a050:	b2da      	uxtb	r2, r3
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	4619      	mov	r1, r3
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	440b      	add	r3, r1
 800a05c:	3237      	adds	r2, #55	@ 0x37
 800a05e:	b2d2      	uxtb	r2, r2
 800a060:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	011b      	lsls	r3, r3, #4
 800a066:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	3301      	adds	r3, #1
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	4413      	add	r3, r2
 800a072:	2200      	movs	r2, #0
 800a074:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	3301      	adds	r3, #1
 800a07a:	75fb      	strb	r3, [r7, #23]
 800a07c:	7dfa      	ldrb	r2, [r7, #23]
 800a07e:	79fb      	ldrb	r3, [r7, #7]
 800a080:	429a      	cmp	r2, r3
 800a082:	d3d3      	bcc.n	800a02c <IntToUnicode+0x18>
  }
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	371c      	adds	r7, #28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	f000 fe67 	bl	800ad7c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b082      	sub	sp, #8
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a0c8:	78fa      	ldrb	r2, [r7, #3]
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	00db      	lsls	r3, r3, #3
 800a0d0:	4413      	add	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	440b      	add	r3, r1
 800a0d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	78fb      	ldrb	r3, [r7, #3]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	f000 fea1 	bl	800ae26 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a0fe:	78fa      	ldrb	r2, [r7, #3]
 800a100:	6879      	ldr	r1, [r7, #4]
 800a102:	4613      	mov	r3, r2
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	4413      	add	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	440b      	add	r3, r1
 800a10c:	3320      	adds	r3, #32
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	4619      	mov	r1, r3
 800a114:	f000 feea 	bl	800aeec <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a118:	bf00      	nop
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 ffee 	bl	800b110 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a144:	2301      	movs	r3, #1
 800a146:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	79db      	ldrb	r3, [r3, #7]
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d001      	beq.n	800a154 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a150:	f7f6 fd72 	bl	8000c38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a15a:	7bfa      	ldrb	r2, [r7, #15]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 ff9b 	bl	800b09a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 ff54 	bl	800b018 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a170:	bf00      	nop
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a186:	4618      	mov	r0, r3
 800a188:	f000 ff97 	bl	800b0ba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	7adb      	ldrb	r3, [r3, #11]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d005      	beq.n	800a1a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a194:	4b04      	ldr	r3, [pc, #16]	@ (800a1a8 <HAL_PCD_SuspendCallback+0x30>)
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	4a03      	ldr	r2, [pc, #12]	@ (800a1a8 <HAL_PCD_SuspendCallback+0x30>)
 800a19a:	f043 0306 	orr.w	r3, r3, #6
 800a19e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	e000ed00 	.word	0xe000ed00

0800a1ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	7adb      	ldrb	r3, [r3, #11]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d007      	beq.n	800a1cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1bc:	4b08      	ldr	r3, [pc, #32]	@ (800a1e0 <HAL_PCD_ResumeCallback+0x34>)
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	4a07      	ldr	r2, [pc, #28]	@ (800a1e0 <HAL_PCD_ResumeCallback+0x34>)
 800a1c2:	f023 0306 	bic.w	r3, r3, #6
 800a1c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a1c8:	f000 fa2a 	bl	800a620 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 ff86 	bl	800b0e4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a1d8:	bf00      	nop
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	e000ed00 	.word	0xe000ed00

0800a1e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1f6:	78fa      	ldrb	r2, [r7, #3]
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 ffaf 	bl	800b15e <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	460b      	mov	r3, r1
 800a212:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a21a:	78fa      	ldrb	r2, [r7, #3]
 800a21c:	4611      	mov	r1, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 ff90 	bl	800b144 <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 800a224:	bf00      	nop
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 ff9c 	bl	800b178 <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 800a240:	bf00      	nop
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a256:	4618      	mov	r0, r3
 800a258:	f000 ff99 	bl	800b18e <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 800a25c:	bf00      	nop
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a26c:	4a24      	ldr	r2, [pc, #144]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a22      	ldr	r2, [pc, #136]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a278:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a27c:	f7fa fad6 	bl	800482c <HAL_PWREx_EnableVddUSB>
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    Error_Handler( );
  }
#else
  hpcd_USB_FS.Instance = USB_OTG_FS;
 800a280:	4b1f      	ldr	r3, [pc, #124]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a282:	4a20      	ldr	r2, [pc, #128]	@ (800a304 <USBD_LL_Init+0xa0>)
 800a284:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 6;
 800a286:	4b1e      	ldr	r3, [pc, #120]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a288:	2206      	movs	r2, #6
 800a28a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a28c:	4b1c      	ldr	r3, [pc, #112]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a28e:	2202      	movs	r2, #2
 800a290:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a292:	4b1b      	ldr	r3, [pc, #108]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a294:	2200      	movs	r2, #0
 800a296:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a298:	4b19      	ldr	r3, [pc, #100]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a29e:	4b18      	ldr	r3, [pc, #96]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a2a4:	4b16      	ldr	r3, [pc, #88]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_FS.Init.use_dedicated_ep1 = DISABLE;
 800a2aa:	4b15      	ldr	r3, [pc, #84]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	73da      	strb	r2, [r3, #15]
  hpcd_USB_FS.Init.vbus_sensing_enable = DISABLE;
 800a2b0:	4b13      	ldr	r3, [pc, #76]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a2b6:	4812      	ldr	r0, [pc, #72]	@ (800a300 <USBD_LL_Init+0x9c>)
 800a2b8:	f7f8 ff92 	bl	80031e0 <HAL_PCD_Init>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <USBD_LL_Init+0x62>
  {
    Error_Handler();
 800a2c2:	f7f6 fcb9 	bl	8000c38 <Error_Handler>
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , 0, 0xC0);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , 0, 0x110);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , 0, 0x100);
#else
  HAL_PCDEx_SetRxFiFo((PCD_HandleTypeDef*)pdev->pData, 0x80);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a2cc:	2180      	movs	r1, #128	@ 0x80
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fa f9eb 	bl	80046aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 0, 0x40);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a2da:	2240      	movs	r2, #64	@ 0x40
 800a2dc:	2100      	movs	r1, #0
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fa f99c 	bl	800461c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 1, 0x80);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a2ea:	2280      	movs	r2, #128	@ 0x80
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fa f994 	bl	800461c <HAL_PCDEx_SetTxFiFo>
#endif
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20001e04 	.word	0x20001e04
 800a304:	42040000 	.word	0x42040000

0800a308 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a31e:	4618      	mov	r0, r3
 800a320:	f7f9 f876 	bl	8003410 <HAL_PCD_Start>
 800a324:	4603      	mov	r3, r0
 800a326:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a328:	7bfb      	ldrb	r3, [r7, #15]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 f97e 	bl	800a62c <USBD_Get_USB_Status>
 800a330:	4603      	mov	r3, r0
 800a332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a334:	7bbb      	ldrb	r3, [r7, #14]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	4608      	mov	r0, r1
 800a348:	4611      	mov	r1, r2
 800a34a:	461a      	mov	r2, r3
 800a34c:	4603      	mov	r3, r0
 800a34e:	70fb      	strb	r3, [r7, #3]
 800a350:	460b      	mov	r3, r1
 800a352:	70bb      	strb	r3, [r7, #2]
 800a354:	4613      	mov	r3, r2
 800a356:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a366:	78bb      	ldrb	r3, [r7, #2]
 800a368:	883a      	ldrh	r2, [r7, #0]
 800a36a:	78f9      	ldrb	r1, [r7, #3]
 800a36c:	f7f9 fd71 	bl	8003e52 <HAL_PCD_EP_Open>
 800a370:	4603      	mov	r3, r0
 800a372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	4618      	mov	r0, r3
 800a378:	f000 f958 	bl	800a62c <USBD_Get_USB_Status>
 800a37c:	4603      	mov	r3, r0
 800a37e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a380:	7bbb      	ldrb	r3, [r7, #14]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	460b      	mov	r3, r1
 800a394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3a4:	78fa      	ldrb	r2, [r7, #3]
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7f9 fdbc 	bl	8003f26 <HAL_PCD_EP_Close>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 f939 	bl	800a62c <USBD_Get_USB_Status>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3e2:	78fa      	ldrb	r2, [r7, #3]
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7f9 fe74 	bl	80040d4 <HAL_PCD_EP_SetStall>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 f91a 	bl	800a62c <USBD_Get_USB_Status>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	460b      	mov	r3, r1
 800a410:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a420:	78fa      	ldrb	r2, [r7, #3]
 800a422:	4611      	mov	r1, r2
 800a424:	4618      	mov	r0, r3
 800a426:	f7f9 feb8 	bl	800419a <HAL_PCD_EP_ClrStall>
 800a42a:	4603      	mov	r3, r0
 800a42c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
 800a430:	4618      	mov	r0, r3
 800a432:	f000 f8fb 	bl	800a62c <USBD_Get_USB_Status>
 800a436:	4603      	mov	r3, r0
 800a438:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a456:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	da0b      	bge.n	800a478 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a466:	68f9      	ldr	r1, [r7, #12]
 800a468:	4613      	mov	r3, r2
 800a46a:	00db      	lsls	r3, r3, #3
 800a46c:	4413      	add	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	440b      	add	r3, r1
 800a472:	3316      	adds	r3, #22
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	e00b      	b.n	800a490 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a47e:	68f9      	ldr	r1, [r7, #12]
 800a480:	4613      	mov	r3, r2
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	4413      	add	r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	440b      	add	r3, r1
 800a48a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a48e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a490:	4618      	mov	r0, r3
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4b6:	78fa      	ldrb	r2, [r7, #3]
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7f9 fca5 	bl	8003e0a <HAL_PCD_SetAddress>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 f8b0 	bl	800a62c <USBD_Get_USB_Status>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b086      	sub	sp, #24
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a4f8:	7af9      	ldrb	r1, [r7, #11]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	f7f9 fdaf 	bl	8004060 <HAL_PCD_EP_Transmit>
 800a502:	4603      	mov	r3, r0
 800a504:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a506:	7dfb      	ldrb	r3, [r7, #23]
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 f88f 	bl	800a62c <USBD_Get_USB_Status>
 800a50e:	4603      	mov	r3, r0
 800a510:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a512:	7dbb      	ldrb	r3, [r7, #22]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	607a      	str	r2, [r7, #4]
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	460b      	mov	r3, r1
 800a52a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a53a:	7af9      	ldrb	r1, [r7, #11]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	f7f9 fd3b 	bl	8003fba <HAL_PCD_EP_Receive>
 800a544:	4603      	mov	r3, r0
 800a546:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a548:	7dfb      	ldrb	r3, [r7, #23]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 f86e 	bl	800a62c <USBD_Get_USB_Status>
 800a550:	4603      	mov	r3, r0
 800a552:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a554:	7dbb      	ldrb	r3, [r7, #22]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	460b      	mov	r3, r1
 800a568:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a570:	78fa      	ldrb	r2, [r7, #3]
 800a572:	4611      	mov	r1, r2
 800a574:	4618      	mov	r0, r3
 800a576:	f7f9 fd5b 	bl	8004030 <HAL_PCD_EP_GetRxCount>
 800a57a:	4603      	mov	r3, r0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a590:	78fb      	ldrb	r3, [r7, #3]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d002      	beq.n	800a59c <HAL_PCDEx_LPM_Callback+0x18>
 800a596:	2b01      	cmp	r3, #1
 800a598:	d013      	beq.n	800a5c2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a59a:	e023      	b.n	800a5e4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	7adb      	ldrb	r3, [r3, #11]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d007      	beq.n	800a5b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a5a4:	f000 f83c 	bl	800a620 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5a8:	4b10      	ldr	r3, [pc, #64]	@ (800a5ec <HAL_PCDEx_LPM_Callback+0x68>)
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	4a0f      	ldr	r2, [pc, #60]	@ (800a5ec <HAL_PCDEx_LPM_Callback+0x68>)
 800a5ae:	f023 0306 	bic.w	r3, r3, #6
 800a5b2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 fd92 	bl	800b0e4 <USBD_LL_Resume>
    break;
 800a5c0:	e010      	b.n	800a5e4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 fd76 	bl	800b0ba <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	7adb      	ldrb	r3, [r3, #11]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d005      	beq.n	800a5e2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5d6:	4b05      	ldr	r3, [pc, #20]	@ (800a5ec <HAL_PCDEx_LPM_Callback+0x68>)
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	4a04      	ldr	r2, [pc, #16]	@ (800a5ec <HAL_PCDEx_LPM_Callback+0x68>)
 800a5dc:	f043 0306 	orr.w	r3, r3, #6
 800a5e0:	6113      	str	r3, [r2, #16]
    break;
 800a5e2:	bf00      	nop
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	e000ed00 	.word	0xe000ed00

0800a5f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5f8:	4b03      	ldr	r3, [pc, #12]	@ (800a608 <USBD_static_malloc+0x18>)
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	200022e8 	.word	0x200022e8

0800a60c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]

}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a624:	f7f5 ff52 	bl	80004cc <SystemClock_Config>
}
 800a628:	bf00      	nop
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	4603      	mov	r3, r0
 800a634:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a63a:	79fb      	ldrb	r3, [r7, #7]
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d817      	bhi.n	800a670 <USBD_Get_USB_Status+0x44>
 800a640:	a201      	add	r2, pc, #4	@ (adr r2, 800a648 <USBD_Get_USB_Status+0x1c>)
 800a642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a646:	bf00      	nop
 800a648:	0800a659 	.word	0x0800a659
 800a64c:	0800a65f 	.word	0x0800a65f
 800a650:	0800a665 	.word	0x0800a665
 800a654:	0800a66b 	.word	0x0800a66b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]
    break;
 800a65c:	e00b      	b.n	800a676 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a65e:	2303      	movs	r3, #3
 800a660:	73fb      	strb	r3, [r7, #15]
    break;
 800a662:	e008      	b.n	800a676 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a664:	2301      	movs	r3, #1
 800a666:	73fb      	strb	r3, [r7, #15]
    break;
 800a668:	e005      	b.n	800a676 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a66a:	2303      	movs	r3, #3
 800a66c:	73fb      	strb	r3, [r7, #15]
    break;
 800a66e:	e002      	b.n	800a676 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a670:	2303      	movs	r3, #3
 800a672:	73fb      	strb	r3, [r7, #15]
    break;
 800a674:	bf00      	nop
  }
  return usb_status;
 800a676:	7bfb      	ldrb	r3, [r7, #15]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	460b      	mov	r3, r1
 800a68e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a690:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a694:	f7ff ffac 	bl	800a5f0 <USBD_static_malloc>
 800a698:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d105      	bne.n	800a6ac <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	e066      	b.n	800a77a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	7c1b      	ldrb	r3, [r3, #16]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d119      	bne.n	800a6f0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a6bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	2181      	movs	r1, #129	@ 0x81
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff fe3a 	bl	800a33e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a6d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6d4:	2202      	movs	r2, #2
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff fe30 	bl	800a33e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2210      	movs	r2, #16
 800a6ea:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a6ee:	e016      	b.n	800a71e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a6f0:	2340      	movs	r3, #64	@ 0x40
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	2181      	movs	r1, #129	@ 0x81
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff fe21 	bl	800a33e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a702:	2340      	movs	r3, #64	@ 0x40
 800a704:	2202      	movs	r2, #2
 800a706:	2101      	movs	r1, #1
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7ff fe18 	bl	800a33e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2210      	movs	r2, #16
 800a71a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a71e:	2308      	movs	r3, #8
 800a720:	2203      	movs	r2, #3
 800a722:	2182      	movs	r1, #130	@ 0x82
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7ff fe0a 	bl	800a33e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7c1b      	ldrb	r3, [r3, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d109      	bne.n	800a768 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a75a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a75e:	2101      	movs	r1, #1
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff fedb 	bl	800a51c <USBD_LL_PrepareReceive>
 800a766:	e007      	b.n	800a778 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a76e:	2340      	movs	r3, #64	@ 0x40
 800a770:	2101      	movs	r1, #1
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fed2 	bl	800a51c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	460b      	mov	r3, r1
 800a78c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a78e:	2181      	movs	r1, #129	@ 0x81
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7ff fdfa 	bl	800a38a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a79c:	2101      	movs	r1, #1
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7ff fdf3 	bl	800a38a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a7ac:	2182      	movs	r1, #130	@ 0x82
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff fdeb 	bl	800a38a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00e      	beq.n	800a7ec <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff ff14 	bl	800a60c <USBD_static_free>
    pdev->pClassData = NULL;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a808:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a80a:	2300      	movs	r3, #0
 800a80c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a80e:	2300      	movs	r3, #0
 800a810:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d03a      	beq.n	800a898 <USBD_CDC_Setup+0xa0>
 800a822:	2b20      	cmp	r3, #32
 800a824:	f040 8097 	bne.w	800a956 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	88db      	ldrh	r3, [r3, #6]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d029      	beq.n	800a884 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	b25b      	sxtb	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	da11      	bge.n	800a85e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a846:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	88d2      	ldrh	r2, [r2, #6]
 800a84c:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a84e:	6939      	ldr	r1, [r7, #16]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	88db      	ldrh	r3, [r3, #6]
 800a854:	461a      	mov	r2, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f001 faae 	bl	800bdb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a85c:	e082      	b.n	800a964 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	785a      	ldrb	r2, [r3, #1]
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	88db      	ldrh	r3, [r3, #6]
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a874:	6939      	ldr	r1, [r7, #16]
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	88db      	ldrh	r3, [r3, #6]
 800a87a:	461a      	mov	r2, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f001 fac7 	bl	800be10 <USBD_CtlPrepareRx>
      break;
 800a882:	e06f      	b.n	800a964 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	7850      	ldrb	r0, [r2, #1]
 800a890:	2200      	movs	r2, #0
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	4798      	blx	r3
      break;
 800a896:	e065      	b.n	800a964 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	785b      	ldrb	r3, [r3, #1]
 800a89c:	2b0b      	cmp	r3, #11
 800a89e:	d84f      	bhi.n	800a940 <USBD_CDC_Setup+0x148>
 800a8a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a8 <USBD_CDC_Setup+0xb0>)
 800a8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a6:	bf00      	nop
 800a8a8:	0800a8d9 	.word	0x0800a8d9
 800a8ac:	0800a94f 	.word	0x0800a94f
 800a8b0:	0800a941 	.word	0x0800a941
 800a8b4:	0800a941 	.word	0x0800a941
 800a8b8:	0800a941 	.word	0x0800a941
 800a8bc:	0800a941 	.word	0x0800a941
 800a8c0:	0800a941 	.word	0x0800a941
 800a8c4:	0800a941 	.word	0x0800a941
 800a8c8:	0800a941 	.word	0x0800a941
 800a8cc:	0800a941 	.word	0x0800a941
 800a8d0:	0800a901 	.word	0x0800a901
 800a8d4:	0800a929 	.word	0x0800a929
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8de:	2b03      	cmp	r3, #3
 800a8e0:	d107      	bne.n	800a8f2 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a8e2:	f107 030c 	add.w	r3, r7, #12
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f001 fa64 	bl	800bdb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8f0:	e030      	b.n	800a954 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a8f2:	6839      	ldr	r1, [r7, #0]
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f001 f9ee 	bl	800bcd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a8fe:	e029      	b.n	800a954 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a906:	2b03      	cmp	r3, #3
 800a908:	d107      	bne.n	800a91a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a90a:	f107 030f 	add.w	r3, r7, #15
 800a90e:	2201      	movs	r2, #1
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f001 fa50 	bl	800bdb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a918:	e01c      	b.n	800a954 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a91a:	6839      	ldr	r1, [r7, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f001 f9da 	bl	800bcd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a922:	2303      	movs	r3, #3
 800a924:	75fb      	strb	r3, [r7, #23]
          break;
 800a926:	e015      	b.n	800a954 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a92e:	2b03      	cmp	r3, #3
 800a930:	d00f      	beq.n	800a952 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f001 f9ce 	bl	800bcd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a93a:	2303      	movs	r3, #3
 800a93c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a93e:	e008      	b.n	800a952 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f001 f9c7 	bl	800bcd6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a948:	2303      	movs	r3, #3
 800a94a:	75fb      	strb	r3, [r7, #23]
          break;
 800a94c:	e002      	b.n	800a954 <USBD_CDC_Setup+0x15c>
          break;
 800a94e:	bf00      	nop
 800a950:	e008      	b.n	800a964 <USBD_CDC_Setup+0x16c>
          break;
 800a952:	bf00      	nop
      }
      break;
 800a954:	e006      	b.n	800a964 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f001 f9bc 	bl	800bcd6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a95e:	2303      	movs	r3, #3
 800a960:	75fb      	strb	r3, [r7, #23]
      break;
 800a962:	bf00      	nop
  }

  return (uint8_t)ret;
 800a964:	7dfb      	ldrb	r3, [r7, #23]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3718      	adds	r7, #24
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop

0800a970 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a982:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a98e:	2303      	movs	r3, #3
 800a990:	e04f      	b.n	800aa32 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a998:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a99a:	78fa      	ldrb	r2, [r7, #3]
 800a99c:	6879      	ldr	r1, [r7, #4]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	440b      	add	r3, r1
 800a9a8:	3318      	adds	r3, #24
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d029      	beq.n	800aa04 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a9b0:	78fa      	ldrb	r2, [r7, #3]
 800a9b2:	6879      	ldr	r1, [r7, #4]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	440b      	add	r3, r1
 800a9be:	3318      	adds	r3, #24
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	78f9      	ldrb	r1, [r7, #3]
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	00db      	lsls	r3, r3, #3
 800a9ca:	440b      	add	r3, r1
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4403      	add	r3, r0
 800a9d0:	331c      	adds	r3, #28
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a9d8:	fb01 f303 	mul.w	r3, r1, r3
 800a9dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d110      	bne.n	800aa04 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a9e2:	78fa      	ldrb	r2, [r7, #3]
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	440b      	add	r3, r1
 800a9f0:	3318      	adds	r3, #24
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a9f6:	78f9      	ldrb	r1, [r7, #3]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7ff fd6c 	bl	800a4da <USBD_LL_Transmit>
 800aa02:	e015      	b.n	800aa30 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00b      	beq.n	800aa30 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800aa2c:	78fa      	ldrb	r2, [r7, #3]
 800aa2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e015      	b.n	800aa88 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa5c:	78fb      	ldrb	r3, [r7, #3]
 800aa5e:	4619      	mov	r1, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f7ff fd7c 	bl	800a55e <USBD_LL_GetRxDataSize>
 800aa66:	4602      	mov	r2, r0
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aa82:	4611      	mov	r1, r2
 800aa84:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa9e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d014      	beq.n	800aad4 <USBD_CDC_EP0_RxReady+0x44>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800aab0:	2bff      	cmp	r3, #255	@ 0xff
 800aab2:	d00f      	beq.n	800aad4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800aac2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aaca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	22ff      	movs	r2, #255	@ 0xff
 800aad0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2243      	movs	r2, #67	@ 0x43
 800aaec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800aaee:	4b03      	ldr	r3, [pc, #12]	@ (800aafc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	20000118 	.word	0x20000118

0800ab00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2243      	movs	r2, #67	@ 0x43
 800ab0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ab0e:	4b03      	ldr	r3, [pc, #12]	@ (800ab1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	200000d4 	.word	0x200000d4

0800ab20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2243      	movs	r2, #67	@ 0x43
 800ab2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ab2e:	4b03      	ldr	r3, [pc, #12]	@ (800ab3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	2000015c 	.word	0x2000015c

0800ab40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	220a      	movs	r2, #10
 800ab4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ab4e:	4b03      	ldr	r3, [pc, #12]	@ (800ab5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	20000090 	.word	0x20000090

0800ab60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e004      	b.n	800ab7e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b087      	sub	sp, #28
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab9c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	371c      	adds	r7, #28
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800abcc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800abf2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800abfe:	2303      	movs	r3, #3
 800ac00:	e016      	b.n	800ac30 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	7c1b      	ldrb	r3, [r3, #16]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d109      	bne.n	800ac1e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac14:	2101      	movs	r1, #1
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7ff fc80 	bl	800a51c <USBD_LL_PrepareReceive>
 800ac1c:	e007      	b.n	800ac2e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac24:	2340      	movs	r3, #64	@ 0x40
 800ac26:	2101      	movs	r1, #1
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff fc77 	bl	800a51c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	4613      	mov	r3, r2
 800ac44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d101      	bne.n	800ac50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e01f      	b.n	800ac90 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	79fa      	ldrb	r2, [r7, #7]
 800ac82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f7ff faed 	bl	800a264 <USBD_LL_Init>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d101      	bne.n	800acb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800acac:	2303      	movs	r3, #3
 800acae:	e016      	b.n	800acde <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00b      	beq.n	800acdc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800accc:	f107 020e 	add.w	r2, r7, #14
 800acd0:	4610      	mov	r0, r2
 800acd2:	4798      	blx	r3
 800acd4:	4602      	mov	r2, r0
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff fb0a 	bl	800a308 <USBD_LL_Start>
 800acf4:	4603      	mov	r3, r0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b083      	sub	sp, #12
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ad20:	2303      	movs	r3, #3
 800ad22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d009      	beq.n	800ad42 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	78fa      	ldrb	r2, [r7, #3]
 800ad38:	4611      	mov	r1, r2
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	4798      	blx	r3
 800ad3e:	4603      	mov	r3, r0
 800ad40:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	460b      	mov	r3, r1
 800ad56:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d007      	beq.n	800ad72 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	78fa      	ldrb	r2, [r7, #3]
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	4798      	blx	r3
  }

  return USBD_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 ff67 	bl	800bc62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ada2:	461a      	mov	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800adb0:	f003 031f 	and.w	r3, r3, #31
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d01a      	beq.n	800adee <USBD_LL_SetupStage+0x72>
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d822      	bhi.n	800ae02 <USBD_LL_SetupStage+0x86>
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <USBD_LL_SetupStage+0x4a>
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d00a      	beq.n	800adda <USBD_LL_SetupStage+0x5e>
 800adc4:	e01d      	b.n	800ae02 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800adcc:	4619      	mov	r1, r3
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fa18 	bl	800b204 <USBD_StdDevReq>
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]
      break;
 800add8:	e020      	b.n	800ae1c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fa7c 	bl	800b2e0 <USBD_StdItfReq>
 800ade8:	4603      	mov	r3, r0
 800adea:	73fb      	strb	r3, [r7, #15]
      break;
 800adec:	e016      	b.n	800ae1c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800adf4:	4619      	mov	r1, r3
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 faba 	bl	800b370 <USBD_StdEPReq>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ae00:	e00c      	b.n	800ae1c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ae08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff fad9 	bl	800a3c8 <USBD_LL_StallEP>
 800ae16:	4603      	mov	r3, r0
 800ae18:	73fb      	strb	r3, [r7, #15]
      break;
 800ae1a:	bf00      	nop
  }

  return ret;
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b086      	sub	sp, #24
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	460b      	mov	r3, r1
 800ae30:	607a      	str	r2, [r7, #4]
 800ae32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ae34:	7afb      	ldrb	r3, [r7, #11]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d137      	bne.n	800aeaa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ae40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d14a      	bne.n	800aee2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	689a      	ldr	r2, [r3, #8]
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d913      	bls.n	800ae80 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	689a      	ldr	r2, [r3, #8]
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	1ad2      	subs	r2, r2, r3
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	68da      	ldr	r2, [r3, #12]
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	bf28      	it	cs
 800ae72:	4613      	movcs	r3, r2
 800ae74:	461a      	mov	r2, r3
 800ae76:	6879      	ldr	r1, [r7, #4]
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f000 ffe6 	bl	800be4a <USBD_CtlContinueRx>
 800ae7e:	e030      	b.n	800aee2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00a      	beq.n	800aea2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d105      	bne.n	800aea2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 ffe2 	bl	800be6c <USBD_CtlSendStatus>
 800aea8:	e01b      	b.n	800aee2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d013      	beq.n	800aede <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d10e      	bne.n	800aede <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	7afa      	ldrb	r2, [r7, #11]
 800aeca:	4611      	mov	r1, r2
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	4798      	blx	r3
 800aed0:	4603      	mov	r3, r0
 800aed2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800aed4:	7dfb      	ldrb	r3, [r7, #23]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800aeda:	7dfb      	ldrb	r3, [r7, #23]
 800aedc:	e002      	b.n	800aee4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aede:	2303      	movs	r3, #3
 800aee0:	e000      	b.n	800aee4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	460b      	mov	r3, r1
 800aef6:	607a      	str	r2, [r7, #4]
 800aef8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aefa:	7afb      	ldrb	r3, [r7, #11]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d16a      	bne.n	800afd6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	3314      	adds	r3, #20
 800af04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d155      	bne.n	800afbc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	689a      	ldr	r2, [r3, #8]
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d914      	bls.n	800af46 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	1ad2      	subs	r2, r2, r3
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	461a      	mov	r2, r3
 800af30:	6879      	ldr	r1, [r7, #4]
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f000 ff5b 	bl	800bdee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af38:	2300      	movs	r3, #0
 800af3a:	2200      	movs	r2, #0
 800af3c:	2100      	movs	r1, #0
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f7ff faec 	bl	800a51c <USBD_LL_PrepareReceive>
 800af44:	e03a      	b.n	800afbc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	68da      	ldr	r2, [r3, #12]
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d11c      	bne.n	800af8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d316      	bcc.n	800af8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800af68:	429a      	cmp	r2, r3
 800af6a:	d20f      	bcs.n	800af8c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800af6c:	2200      	movs	r2, #0
 800af6e:	2100      	movs	r1, #0
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f000 ff3c 	bl	800bdee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af7e:	2300      	movs	r3, #0
 800af80:	2200      	movs	r2, #0
 800af82:	2100      	movs	r1, #0
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7ff fac9 	bl	800a51c <USBD_LL_PrepareReceive>
 800af8a:	e017      	b.n	800afbc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00a      	beq.n	800afae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800af9e:	2b03      	cmp	r3, #3
 800afa0:	d105      	bne.n	800afae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800afae:	2180      	movs	r1, #128	@ 0x80
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f7ff fa09 	bl	800a3c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f000 ff6b 	bl	800be92 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d123      	bne.n	800b00e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7ff fe99 	bl	800acfe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800afd4:	e01b      	b.n	800b00e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d013      	beq.n	800b00a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800afe8:	2b03      	cmp	r3, #3
 800afea:	d10e      	bne.n	800b00a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aff2:	695b      	ldr	r3, [r3, #20]
 800aff4:	7afa      	ldrb	r2, [r7, #11]
 800aff6:	4611      	mov	r1, r2
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	4798      	blx	r3
 800affc:	4603      	mov	r3, r0
 800affe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b000:	7dfb      	ldrb	r3, [r7, #23]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d003      	beq.n	800b00e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b006:	7dfb      	ldrb	r3, [r7, #23]
 800b008:	e002      	b.n	800b010 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e000      	b.n	800b010 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3718      	adds	r7, #24
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b044:	2b00      	cmp	r3, #0
 800b046:	d009      	beq.n	800b05c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	6852      	ldr	r2, [r2, #4]
 800b054:	b2d2      	uxtb	r2, r2
 800b056:	4611      	mov	r1, r2
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b05c:	2340      	movs	r3, #64	@ 0x40
 800b05e:	2200      	movs	r2, #0
 800b060:	2100      	movs	r1, #0
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7ff f96b 	bl	800a33e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2240      	movs	r2, #64	@ 0x40
 800b074:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b078:	2340      	movs	r3, #64	@ 0x40
 800b07a:	2200      	movs	r2, #0
 800b07c:	2180      	movs	r1, #128	@ 0x80
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7ff f95d 	bl	800a33e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2240      	movs	r2, #64	@ 0x40
 800b08e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b083      	sub	sp, #12
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	78fa      	ldrb	r2, [r7, #3]
 800b0aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b083      	sub	sp, #12
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2204      	movs	r2, #4
 800b0d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d105      	bne.n	800b102 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d10b      	bne.n	800b13a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b128:	69db      	ldr	r3, [r3, #28]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d005      	beq.n	800b13a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b134:	69db      	ldr	r3, [r3, #28]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	460b      	mov	r3, r1
 800b168:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b082      	sub	sp, #8
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2201      	movs	r2, #1
 800b19a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d009      	beq.n	800b1bc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	6852      	ldr	r2, [r2, #4]
 800b1b4:	b2d2      	uxtb	r2, r2
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	4798      	blx	r3
  }

  return USBD_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b087      	sub	sp, #28
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b1e4:	8a3b      	ldrh	r3, [r7, #16]
 800b1e6:	021b      	lsls	r3, r3, #8
 800b1e8:	b21a      	sxth	r2, r3
 800b1ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	b21b      	sxth	r3, r3
 800b1f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b1f4:	89fb      	ldrh	r3, [r7, #14]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	371c      	adds	r7, #28
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
	...

0800b204 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b21a:	2b40      	cmp	r3, #64	@ 0x40
 800b21c:	d005      	beq.n	800b22a <USBD_StdDevReq+0x26>
 800b21e:	2b40      	cmp	r3, #64	@ 0x40
 800b220:	d853      	bhi.n	800b2ca <USBD_StdDevReq+0xc6>
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00b      	beq.n	800b23e <USBD_StdDevReq+0x3a>
 800b226:	2b20      	cmp	r3, #32
 800b228:	d14f      	bne.n	800b2ca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	6839      	ldr	r1, [r7, #0]
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	4798      	blx	r3
 800b238:	4603      	mov	r3, r0
 800b23a:	73fb      	strb	r3, [r7, #15]
    break;
 800b23c:	e04a      	b.n	800b2d4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	785b      	ldrb	r3, [r3, #1]
 800b242:	2b09      	cmp	r3, #9
 800b244:	d83b      	bhi.n	800b2be <USBD_StdDevReq+0xba>
 800b246:	a201      	add	r2, pc, #4	@ (adr r2, 800b24c <USBD_StdDevReq+0x48>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b2a1 	.word	0x0800b2a1
 800b250:	0800b2b5 	.word	0x0800b2b5
 800b254:	0800b2bf 	.word	0x0800b2bf
 800b258:	0800b2ab 	.word	0x0800b2ab
 800b25c:	0800b2bf 	.word	0x0800b2bf
 800b260:	0800b27f 	.word	0x0800b27f
 800b264:	0800b275 	.word	0x0800b275
 800b268:	0800b2bf 	.word	0x0800b2bf
 800b26c:	0800b297 	.word	0x0800b297
 800b270:	0800b289 	.word	0x0800b289
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f9da 	bl	800b630 <USBD_GetDescriptor>
      break;
 800b27c:	e024      	b.n	800b2c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fb69 	bl	800b958 <USBD_SetAddress>
      break;
 800b286:	e01f      	b.n	800b2c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fba8 	bl	800b9e0 <USBD_SetConfig>
 800b290:	4603      	mov	r3, r0
 800b292:	73fb      	strb	r3, [r7, #15]
      break;
 800b294:	e018      	b.n	800b2c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fc45 	bl	800bb28 <USBD_GetConfig>
      break;
 800b29e:	e013      	b.n	800b2c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fc75 	bl	800bb92 <USBD_GetStatus>
      break;
 800b2a8:	e00e      	b.n	800b2c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 fca3 	bl	800bbf8 <USBD_SetFeature>
      break;
 800b2b2:	e009      	b.n	800b2c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fcb2 	bl	800bc20 <USBD_ClrFeature>
      break;
 800b2bc:	e004      	b.n	800b2c8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fd08 	bl	800bcd6 <USBD_CtlError>
      break;
 800b2c6:	bf00      	nop
    }
    break;
 800b2c8:	e004      	b.n	800b2d4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fd02 	bl	800bcd6 <USBD_CtlError>
    break;
 800b2d2:	bf00      	nop
  }

  return ret;
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop

0800b2e0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b2f6:	2b40      	cmp	r3, #64	@ 0x40
 800b2f8:	d005      	beq.n	800b306 <USBD_StdItfReq+0x26>
 800b2fa:	2b40      	cmp	r3, #64	@ 0x40
 800b2fc:	d82e      	bhi.n	800b35c <USBD_StdItfReq+0x7c>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <USBD_StdItfReq+0x26>
 800b302:	2b20      	cmp	r3, #32
 800b304:	d12a      	bne.n	800b35c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b30c:	3b01      	subs	r3, #1
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d81d      	bhi.n	800b34e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	889b      	ldrh	r3, [r3, #4]
 800b316:	b2db      	uxtb	r3, r3
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d813      	bhi.n	800b344 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	6839      	ldr	r1, [r7, #0]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	4798      	blx	r3
 800b32a:	4603      	mov	r3, r0
 800b32c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	88db      	ldrh	r3, [r3, #6]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d110      	bne.n	800b358 <USBD_StdItfReq+0x78>
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10d      	bne.n	800b358 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fd95 	bl	800be6c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b342:	e009      	b.n	800b358 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800b344:	6839      	ldr	r1, [r7, #0]
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fcc5 	bl	800bcd6 <USBD_CtlError>
      break;
 800b34c:	e004      	b.n	800b358 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fcc0 	bl	800bcd6 <USBD_CtlError>
      break;
 800b356:	e000      	b.n	800b35a <USBD_StdItfReq+0x7a>
      break;
 800b358:	bf00      	nop
    }
    break;
 800b35a:	e004      	b.n	800b366 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fcb9 	bl	800bcd6 <USBD_CtlError>
    break;
 800b364:	bf00      	nop
  }

  return ret;
 800b366:	7bfb      	ldrb	r3, [r7, #15]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	889b      	ldrh	r3, [r3, #4]
 800b382:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b38c:	2b40      	cmp	r3, #64	@ 0x40
 800b38e:	d007      	beq.n	800b3a0 <USBD_StdEPReq+0x30>
 800b390:	2b40      	cmp	r3, #64	@ 0x40
 800b392:	f200 8142 	bhi.w	800b61a <USBD_StdEPReq+0x2aa>
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00c      	beq.n	800b3b4 <USBD_StdEPReq+0x44>
 800b39a:	2b20      	cmp	r3, #32
 800b39c:	f040 813d 	bne.w	800b61a <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	4798      	blx	r3
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b2:	e137      	b.n	800b624 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	785b      	ldrb	r3, [r3, #1]
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	d007      	beq.n	800b3cc <USBD_StdEPReq+0x5c>
 800b3bc:	2b03      	cmp	r3, #3
 800b3be:	f300 8126 	bgt.w	800b60e <USBD_StdEPReq+0x29e>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d07d      	beq.n	800b4c2 <USBD_StdEPReq+0x152>
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d03b      	beq.n	800b442 <USBD_StdEPReq+0xd2>
 800b3ca:	e120      	b.n	800b60e <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d002      	beq.n	800b3dc <USBD_StdEPReq+0x6c>
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d016      	beq.n	800b408 <USBD_StdEPReq+0x98>
 800b3da:	e02c      	b.n	800b436 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3dc:	7bbb      	ldrb	r3, [r7, #14]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00d      	beq.n	800b3fe <USBD_StdEPReq+0x8e>
 800b3e2:	7bbb      	ldrb	r3, [r7, #14]
 800b3e4:	2b80      	cmp	r3, #128	@ 0x80
 800b3e6:	d00a      	beq.n	800b3fe <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3e8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7fe ffeb 	bl	800a3c8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3f2:	2180      	movs	r1, #128	@ 0x80
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f7fe ffe7 	bl	800a3c8 <USBD_LL_StallEP>
 800b3fa:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b3fc:	e020      	b.n	800b440 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fc68 	bl	800bcd6 <USBD_CtlError>
        break;
 800b406:	e01b      	b.n	800b440 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	885b      	ldrh	r3, [r3, #2]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10e      	bne.n	800b42e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b410:	7bbb      	ldrb	r3, [r7, #14]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00b      	beq.n	800b42e <USBD_StdEPReq+0xbe>
 800b416:	7bbb      	ldrb	r3, [r7, #14]
 800b418:	2b80      	cmp	r3, #128	@ 0x80
 800b41a:	d008      	beq.n	800b42e <USBD_StdEPReq+0xbe>
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	88db      	ldrh	r3, [r3, #6]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d104      	bne.n	800b42e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b424:	7bbb      	ldrb	r3, [r7, #14]
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7fe ffcd 	bl	800a3c8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fd1c 	bl	800be6c <USBD_CtlSendStatus>

        break;
 800b434:	e004      	b.n	800b440 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fc4c 	bl	800bcd6 <USBD_CtlError>
        break;
 800b43e:	bf00      	nop
      }
      break;
 800b440:	e0ea      	b.n	800b618 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d002      	beq.n	800b452 <USBD_StdEPReq+0xe2>
 800b44c:	2b03      	cmp	r3, #3
 800b44e:	d016      	beq.n	800b47e <USBD_StdEPReq+0x10e>
 800b450:	e030      	b.n	800b4b4 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b452:	7bbb      	ldrb	r3, [r7, #14]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00d      	beq.n	800b474 <USBD_StdEPReq+0x104>
 800b458:	7bbb      	ldrb	r3, [r7, #14]
 800b45a:	2b80      	cmp	r3, #128	@ 0x80
 800b45c:	d00a      	beq.n	800b474 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7fe ffb0 	bl	800a3c8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b468:	2180      	movs	r1, #128	@ 0x80
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7fe ffac 	bl	800a3c8 <USBD_LL_StallEP>
 800b470:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b472:	e025      	b.n	800b4c0 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800b474:	6839      	ldr	r1, [r7, #0]
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 fc2d 	bl	800bcd6 <USBD_CtlError>
        break;
 800b47c:	e020      	b.n	800b4c0 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	885b      	ldrh	r3, [r3, #2]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d11b      	bne.n	800b4be <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b486:	7bbb      	ldrb	r3, [r7, #14]
 800b488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d004      	beq.n	800b49a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b490:	7bbb      	ldrb	r3, [r7, #14]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7fe ffb6 	bl	800a406 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fce6 	bl	800be6c <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	4798      	blx	r3
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b4b2:	e004      	b.n	800b4be <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fc0d 	bl	800bcd6 <USBD_CtlError>
        break;
 800b4bc:	e000      	b.n	800b4c0 <USBD_StdEPReq+0x150>
        break;
 800b4be:	bf00      	nop
      }
      break;
 800b4c0:	e0aa      	b.n	800b618 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d002      	beq.n	800b4d2 <USBD_StdEPReq+0x162>
 800b4cc:	2b03      	cmp	r3, #3
 800b4ce:	d032      	beq.n	800b536 <USBD_StdEPReq+0x1c6>
 800b4d0:	e097      	b.n	800b602 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4d2:	7bbb      	ldrb	r3, [r7, #14]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d007      	beq.n	800b4e8 <USBD_StdEPReq+0x178>
 800b4d8:	7bbb      	ldrb	r3, [r7, #14]
 800b4da:	2b80      	cmp	r3, #128	@ 0x80
 800b4dc:	d004      	beq.n	800b4e8 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fbf8 	bl	800bcd6 <USBD_CtlError>
          break;
 800b4e6:	e091      	b.n	800b60c <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	da0b      	bge.n	800b508 <USBD_StdEPReq+0x198>
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	3310      	adds	r3, #16
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	4413      	add	r3, r2
 800b504:	3304      	adds	r3, #4
 800b506:	e00b      	b.n	800b520 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b508:	7bbb      	ldrb	r3, [r7, #14]
 800b50a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b50e:	4613      	mov	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4413      	add	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	4413      	add	r3, r2
 800b51e:	3304      	adds	r3, #4
 800b520:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	2200      	movs	r2, #0
 800b526:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	2202      	movs	r2, #2
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fc42 	bl	800bdb8 <USBD_CtlSendData>
        break;
 800b534:	e06a      	b.n	800b60c <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b536:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	da11      	bge.n	800b562 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	f003 020f 	and.w	r2, r3, #15
 800b544:	6879      	ldr	r1, [r7, #4]
 800b546:	4613      	mov	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	440b      	add	r3, r1
 800b550:	3324      	adds	r3, #36	@ 0x24
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d117      	bne.n	800b588 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fbbb 	bl	800bcd6 <USBD_CtlError>
            break;
 800b560:	e054      	b.n	800b60c <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b562:	7bbb      	ldrb	r3, [r7, #14]
 800b564:	f003 020f 	and.w	r2, r3, #15
 800b568:	6879      	ldr	r1, [r7, #4]
 800b56a:	4613      	mov	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	440b      	add	r3, r1
 800b574:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b578:	881b      	ldrh	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d104      	bne.n	800b588 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800b57e:	6839      	ldr	r1, [r7, #0]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fba8 	bl	800bcd6 <USBD_CtlError>
            break;
 800b586:	e041      	b.n	800b60c <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	da0b      	bge.n	800b5a8 <USBD_StdEPReq+0x238>
 800b590:	7bbb      	ldrb	r3, [r7, #14]
 800b592:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b596:	4613      	mov	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	3310      	adds	r3, #16
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	e00b      	b.n	800b5c0 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b5a8:	7bbb      	ldrb	r3, [r7, #14]
 800b5aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4413      	add	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	4413      	add	r3, r2
 800b5be:	3304      	adds	r3, #4
 800b5c0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b5c2:	7bbb      	ldrb	r3, [r7, #14]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <USBD_StdEPReq+0x25e>
 800b5c8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ca:	2b80      	cmp	r3, #128	@ 0x80
 800b5cc:	d103      	bne.n	800b5d6 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	e00e      	b.n	800b5f4 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7fe ff32 	bl	800a444 <USBD_LL_IsStallEP>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	601a      	str	r2, [r3, #0]
 800b5ec:	e002      	b.n	800b5f4 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fbdc 	bl	800bdb8 <USBD_CtlSendData>
          break;
 800b600:	e004      	b.n	800b60c <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fb66 	bl	800bcd6 <USBD_CtlError>
        break;
 800b60a:	bf00      	nop
      }
      break;
 800b60c:	e004      	b.n	800b618 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800b60e:	6839      	ldr	r1, [r7, #0]
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fb60 	bl	800bcd6 <USBD_CtlError>
      break;
 800b616:	bf00      	nop
    }
    break;
 800b618:	e004      	b.n	800b624 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 fb5a 	bl	800bcd6 <USBD_CtlError>
    break;
 800b622:	bf00      	nop
  }

  return ret;
 800b624:	7bfb      	ldrb	r3, [r7, #15]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
	...

0800b630 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b63a:	2300      	movs	r3, #0
 800b63c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b63e:	2300      	movs	r3, #0
 800b640:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b642:	2300      	movs	r3, #0
 800b644:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	885b      	ldrh	r3, [r3, #2]
 800b64a:	0a1b      	lsrs	r3, r3, #8
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	3b01      	subs	r3, #1
 800b650:	2b0e      	cmp	r3, #14
 800b652:	f200 8152 	bhi.w	800b8fa <USBD_GetDescriptor+0x2ca>
 800b656:	a201      	add	r2, pc, #4	@ (adr r2, 800b65c <USBD_GetDescriptor+0x2c>)
 800b658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b65c:	0800b6cd 	.word	0x0800b6cd
 800b660:	0800b6e5 	.word	0x0800b6e5
 800b664:	0800b725 	.word	0x0800b725
 800b668:	0800b8fb 	.word	0x0800b8fb
 800b66c:	0800b8fb 	.word	0x0800b8fb
 800b670:	0800b89b 	.word	0x0800b89b
 800b674:	0800b8c7 	.word	0x0800b8c7
 800b678:	0800b8fb 	.word	0x0800b8fb
 800b67c:	0800b8fb 	.word	0x0800b8fb
 800b680:	0800b8fb 	.word	0x0800b8fb
 800b684:	0800b8fb 	.word	0x0800b8fb
 800b688:	0800b8fb 	.word	0x0800b8fb
 800b68c:	0800b8fb 	.word	0x0800b8fb
 800b690:	0800b8fb 	.word	0x0800b8fb
 800b694:	0800b699 	.word	0x0800b699
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b69e:	69db      	ldr	r3, [r3, #28]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00b      	beq.n	800b6bc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6aa:	69db      	ldr	r3, [r3, #28]
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	7c12      	ldrb	r2, [r2, #16]
 800b6b0:	f107 0108 	add.w	r1, r7, #8
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	4798      	blx	r3
 800b6b8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b6ba:	e126      	b.n	800b90a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fb09 	bl	800bcd6 <USBD_CtlError>
      err++;
 800b6c4:	7afb      	ldrb	r3, [r7, #11]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	72fb      	strb	r3, [r7, #11]
    break;
 800b6ca:	e11e      	b.n	800b90a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	7c12      	ldrb	r2, [r2, #16]
 800b6d8:	f107 0108 	add.w	r1, r7, #8
 800b6dc:	4610      	mov	r0, r2
 800b6de:	4798      	blx	r3
 800b6e0:	60f8      	str	r0, [r7, #12]
    break;
 800b6e2:	e112      	b.n	800b90a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	7c1b      	ldrb	r3, [r3, #16]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10d      	bne.n	800b708 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f4:	f107 0208 	add.w	r2, r7, #8
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	4798      	blx	r3
 800b6fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	3301      	adds	r3, #1
 800b702:	2202      	movs	r2, #2
 800b704:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b706:	e100      	b.n	800b90a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b710:	f107 0208 	add.w	r2, r7, #8
 800b714:	4610      	mov	r0, r2
 800b716:	4798      	blx	r3
 800b718:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3301      	adds	r3, #1
 800b71e:	2202      	movs	r2, #2
 800b720:	701a      	strb	r2, [r3, #0]
    break;
 800b722:	e0f2      	b.n	800b90a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	885b      	ldrh	r3, [r3, #2]
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b05      	cmp	r3, #5
 800b72c:	f200 80ac 	bhi.w	800b888 <USBD_GetDescriptor+0x258>
 800b730:	a201      	add	r2, pc, #4	@ (adr r2, 800b738 <USBD_GetDescriptor+0x108>)
 800b732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b736:	bf00      	nop
 800b738:	0800b751 	.word	0x0800b751
 800b73c:	0800b785 	.word	0x0800b785
 800b740:	0800b7b9 	.word	0x0800b7b9
 800b744:	0800b7ed 	.word	0x0800b7ed
 800b748:	0800b821 	.word	0x0800b821
 800b74c:	0800b855 	.word	0x0800b855
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00b      	beq.n	800b774 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	7c12      	ldrb	r2, [r2, #16]
 800b768:	f107 0108 	add.w	r1, r7, #8
 800b76c:	4610      	mov	r0, r2
 800b76e:	4798      	blx	r3
 800b770:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b772:	e091      	b.n	800b898 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 faad 	bl	800bcd6 <USBD_CtlError>
        err++;
 800b77c:	7afb      	ldrb	r3, [r7, #11]
 800b77e:	3301      	adds	r3, #1
 800b780:	72fb      	strb	r3, [r7, #11]
      break;
 800b782:	e089      	b.n	800b898 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00b      	beq.n	800b7a8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	7c12      	ldrb	r2, [r2, #16]
 800b79c:	f107 0108 	add.w	r1, r7, #8
 800b7a0:	4610      	mov	r0, r2
 800b7a2:	4798      	blx	r3
 800b7a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7a6:	e077      	b.n	800b898 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b7a8:	6839      	ldr	r1, [r7, #0]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fa93 	bl	800bcd6 <USBD_CtlError>
        err++;
 800b7b0:	7afb      	ldrb	r3, [r7, #11]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	72fb      	strb	r3, [r7, #11]
      break;
 800b7b6:	e06f      	b.n	800b898 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00b      	beq.n	800b7dc <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	7c12      	ldrb	r2, [r2, #16]
 800b7d0:	f107 0108 	add.w	r1, r7, #8
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	4798      	blx	r3
 800b7d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7da:	e05d      	b.n	800b898 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fa79 	bl	800bcd6 <USBD_CtlError>
        err++;
 800b7e4:	7afb      	ldrb	r3, [r7, #11]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	72fb      	strb	r3, [r7, #11]
      break;
 800b7ea:	e055      	b.n	800b898 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00b      	beq.n	800b810 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	7c12      	ldrb	r2, [r2, #16]
 800b804:	f107 0108 	add.w	r1, r7, #8
 800b808:	4610      	mov	r0, r2
 800b80a:	4798      	blx	r3
 800b80c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b80e:	e043      	b.n	800b898 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fa5f 	bl	800bcd6 <USBD_CtlError>
        err++;
 800b818:	7afb      	ldrb	r3, [r7, #11]
 800b81a:	3301      	adds	r3, #1
 800b81c:	72fb      	strb	r3, [r7, #11]
      break;
 800b81e:	e03b      	b.n	800b898 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b826:	695b      	ldr	r3, [r3, #20]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00b      	beq.n	800b844 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b832:	695b      	ldr	r3, [r3, #20]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	7c12      	ldrb	r2, [r2, #16]
 800b838:	f107 0108 	add.w	r1, r7, #8
 800b83c:	4610      	mov	r0, r2
 800b83e:	4798      	blx	r3
 800b840:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b842:	e029      	b.n	800b898 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b844:	6839      	ldr	r1, [r7, #0]
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 fa45 	bl	800bcd6 <USBD_CtlError>
        err++;
 800b84c:	7afb      	ldrb	r3, [r7, #11]
 800b84e:	3301      	adds	r3, #1
 800b850:	72fb      	strb	r3, [r7, #11]
      break;
 800b852:	e021      	b.n	800b898 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00b      	beq.n	800b878 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	7c12      	ldrb	r2, [r2, #16]
 800b86c:	f107 0108 	add.w	r1, r7, #8
 800b870:	4610      	mov	r0, r2
 800b872:	4798      	blx	r3
 800b874:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b876:	e00f      	b.n	800b898 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fa2b 	bl	800bcd6 <USBD_CtlError>
        err++;
 800b880:	7afb      	ldrb	r3, [r7, #11]
 800b882:	3301      	adds	r3, #1
 800b884:	72fb      	strb	r3, [r7, #11]
      break;
 800b886:	e007      	b.n	800b898 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fa23 	bl	800bcd6 <USBD_CtlError>
      err++;
 800b890:	7afb      	ldrb	r3, [r7, #11]
 800b892:	3301      	adds	r3, #1
 800b894:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b896:	bf00      	nop
    }
    break;
 800b898:	e037      	b.n	800b90a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	7c1b      	ldrb	r3, [r3, #16]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d109      	bne.n	800b8b6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8aa:	f107 0208 	add.w	r2, r7, #8
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	4798      	blx	r3
 800b8b2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b8b4:	e029      	b.n	800b90a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fa0c 	bl	800bcd6 <USBD_CtlError>
      err++;
 800b8be:	7afb      	ldrb	r3, [r7, #11]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	72fb      	strb	r3, [r7, #11]
    break;
 800b8c4:	e021      	b.n	800b90a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	7c1b      	ldrb	r3, [r3, #16]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10d      	bne.n	800b8ea <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8d6:	f107 0208 	add.w	r2, r7, #8
 800b8da:	4610      	mov	r0, r2
 800b8dc:	4798      	blx	r3
 800b8de:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	2207      	movs	r2, #7
 800b8e6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b8e8:	e00f      	b.n	800b90a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b8ea:	6839      	ldr	r1, [r7, #0]
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 f9f2 	bl	800bcd6 <USBD_CtlError>
      err++;
 800b8f2:	7afb      	ldrb	r3, [r7, #11]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	72fb      	strb	r3, [r7, #11]
    break;
 800b8f8:	e007      	b.n	800b90a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f9ea 	bl	800bcd6 <USBD_CtlError>
    err++;
 800b902:	7afb      	ldrb	r3, [r7, #11]
 800b904:	3301      	adds	r3, #1
 800b906:	72fb      	strb	r3, [r7, #11]
    break;
 800b908:	bf00      	nop
  }

  if (err != 0U)
 800b90a:	7afb      	ldrb	r3, [r7, #11]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d11e      	bne.n	800b94e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	88db      	ldrh	r3, [r3, #6]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d016      	beq.n	800b946 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800b918:	893b      	ldrh	r3, [r7, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00e      	beq.n	800b93c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	88da      	ldrh	r2, [r3, #6]
 800b922:	893b      	ldrh	r3, [r7, #8]
 800b924:	4293      	cmp	r3, r2
 800b926:	bf28      	it	cs
 800b928:	4613      	movcs	r3, r2
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b92e:	893b      	ldrh	r3, [r7, #8]
 800b930:	461a      	mov	r2, r3
 800b932:	68f9      	ldr	r1, [r7, #12]
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fa3f 	bl	800bdb8 <USBD_CtlSendData>
 800b93a:	e009      	b.n	800b950 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b93c:	6839      	ldr	r1, [r7, #0]
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 f9c9 	bl	800bcd6 <USBD_CtlError>
 800b944:	e004      	b.n	800b950 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fa90 	bl	800be6c <USBD_CtlSendStatus>
 800b94c:	e000      	b.n	800b950 <USBD_GetDescriptor+0x320>
    return;
 800b94e:	bf00      	nop
    }
  }
}
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop

0800b958 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	889b      	ldrh	r3, [r3, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d130      	bne.n	800b9cc <USBD_SetAddress+0x74>
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	88db      	ldrh	r3, [r3, #6]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d12c      	bne.n	800b9cc <USBD_SetAddress+0x74>
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	885b      	ldrh	r3, [r3, #2]
 800b976:	2b7f      	cmp	r3, #127	@ 0x7f
 800b978:	d828      	bhi.n	800b9cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	885b      	ldrh	r3, [r3, #2]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b984:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d104      	bne.n	800b99a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b990:	6839      	ldr	r1, [r7, #0]
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f99f 	bl	800bcd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b998:	e01d      	b.n	800b9d6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	7bfa      	ldrb	r2, [r7, #15]
 800b99e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7fe fd78 	bl	800a49c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fa5d 	bl	800be6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d004      	beq.n	800b9c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9c0:	e009      	b.n	800b9d6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ca:	e004      	b.n	800b9d6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f981 	bl	800bcd6 <USBD_CtlError>
  }
}
 800b9d4:	bf00      	nop
 800b9d6:	bf00      	nop
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
	...

0800b9e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	885b      	ldrh	r3, [r3, #2]
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	4b4b      	ldr	r3, [pc, #300]	@ (800bb24 <USBD_SetConfig+0x144>)
 800b9f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b9f8:	4b4a      	ldr	r3, [pc, #296]	@ (800bb24 <USBD_SetConfig+0x144>)
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d905      	bls.n	800ba0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f967 	bl	800bcd6 <USBD_CtlError>
    return USBD_FAIL;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	e087      	b.n	800bb1c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba12:	2b02      	cmp	r3, #2
 800ba14:	d002      	beq.n	800ba1c <USBD_SetConfig+0x3c>
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d025      	beq.n	800ba66 <USBD_SetConfig+0x86>
 800ba1a:	e071      	b.n	800bb00 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ba1c:	4b41      	ldr	r3, [pc, #260]	@ (800bb24 <USBD_SetConfig+0x144>)
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d01c      	beq.n	800ba5e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ba24:	4b3f      	ldr	r3, [pc, #252]	@ (800bb24 <USBD_SetConfig+0x144>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba2e:	4b3d      	ldr	r3, [pc, #244]	@ (800bb24 <USBD_SetConfig+0x144>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7ff f96d 	bl	800ad14 <USBD_SetClassConfig>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d004      	beq.n	800ba4e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 f945 	bl	800bcd6 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ba4c:	e065      	b.n	800bb1a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fa0c 	bl	800be6c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2203      	movs	r2, #3
 800ba58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800ba5c:	e05d      	b.n	800bb1a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fa04 	bl	800be6c <USBD_CtlSendStatus>
    break;
 800ba64:	e059      	b.n	800bb1a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ba66:	4b2f      	ldr	r3, [pc, #188]	@ (800bb24 <USBD_SetConfig+0x144>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d112      	bne.n	800ba94 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2202      	movs	r2, #2
 800ba72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 800ba76:	4b2b      	ldr	r3, [pc, #172]	@ (800bb24 <USBD_SetConfig+0x144>)
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba80:	4b28      	ldr	r3, [pc, #160]	@ (800bb24 <USBD_SetConfig+0x144>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	4619      	mov	r1, r3
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7ff f960 	bl	800ad4c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f9ed 	bl	800be6c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ba92:	e042      	b.n	800bb1a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ba94:	4b23      	ldr	r3, [pc, #140]	@ (800bb24 <USBD_SetConfig+0x144>)
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d02a      	beq.n	800baf8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	4619      	mov	r1, r3
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff f94e 	bl	800ad4c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800bab0:	4b1c      	ldr	r3, [pc, #112]	@ (800bb24 <USBD_SetConfig+0x144>)
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	461a      	mov	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800baba:	4b1a      	ldr	r3, [pc, #104]	@ (800bb24 <USBD_SetConfig+0x144>)
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	4619      	mov	r1, r3
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f7ff f927 	bl	800ad14 <USBD_SetClassConfig>
 800bac6:	4603      	mov	r3, r0
 800bac8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800baca:	7bfb      	ldrb	r3, [r7, #15]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00f      	beq.n	800baf0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f8ff 	bl	800bcd6 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	b2db      	uxtb	r3, r3
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff f933 	bl	800ad4c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2202      	movs	r2, #2
 800baea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800baee:	e014      	b.n	800bb1a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 f9bb 	bl	800be6c <USBD_CtlSendStatus>
    break;
 800baf6:	e010      	b.n	800bb1a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 f9b7 	bl	800be6c <USBD_CtlSendStatus>
    break;
 800bafe:	e00c      	b.n	800bb1a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f8e7 	bl	800bcd6 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb08:	4b06      	ldr	r3, [pc, #24]	@ (800bb24 <USBD_SetConfig+0x144>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7ff f91c 	bl	800ad4c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800bb14:	2303      	movs	r3, #3
 800bb16:	73fb      	strb	r3, [r7, #15]
    break;
 800bb18:	bf00      	nop
  }

  return ret;
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	20002508 	.word	0x20002508

0800bb28 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	88db      	ldrh	r3, [r3, #6]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d004      	beq.n	800bb44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 f8ca 	bl	800bcd6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800bb42:	e022      	b.n	800bb8a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	dc02      	bgt.n	800bb54 <USBD_GetConfig+0x2c>
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	dc03      	bgt.n	800bb5a <USBD_GetConfig+0x32>
 800bb52:	e015      	b.n	800bb80 <USBD_GetConfig+0x58>
 800bb54:	2b03      	cmp	r3, #3
 800bb56:	d00b      	beq.n	800bb70 <USBD_GetConfig+0x48>
 800bb58:	e012      	b.n	800bb80 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	3308      	adds	r3, #8
 800bb64:	2201      	movs	r2, #1
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f925 	bl	800bdb8 <USBD_CtlSendData>
      break;
 800bb6e:	e00c      	b.n	800bb8a <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	3304      	adds	r3, #4
 800bb74:	2201      	movs	r2, #1
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f91d 	bl	800bdb8 <USBD_CtlSendData>
      break;
 800bb7e:	e004      	b.n	800bb8a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f8a7 	bl	800bcd6 <USBD_CtlError>
      break;
 800bb88:	bf00      	nop
}
 800bb8a:	bf00      	nop
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b082      	sub	sp, #8
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bba2:	3b01      	subs	r3, #1
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d81e      	bhi.n	800bbe6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	88db      	ldrh	r3, [r3, #6]
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	d004      	beq.n	800bbba <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f88f 	bl	800bcd6 <USBD_CtlError>
      break;
 800bbb8:	e01a      	b.n	800bbf0 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d005      	beq.n	800bbd6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	f043 0202 	orr.w	r2, r3, #2
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	330c      	adds	r3, #12
 800bbda:	2202      	movs	r2, #2
 800bbdc:	4619      	mov	r1, r3
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f8ea 	bl	800bdb8 <USBD_CtlSendData>
    break;
 800bbe4:	e004      	b.n	800bbf0 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f874 	bl	800bcd6 <USBD_CtlError>
    break;
 800bbee:	bf00      	nop
  }
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	885b      	ldrh	r3, [r3, #2]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d106      	bne.n	800bc18 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f92a 	bl	800be6c <USBD_CtlSendStatus>
  }
}
 800bc18:	bf00      	nop
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc30:	3b01      	subs	r3, #1
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d80b      	bhi.n	800bc4e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	885b      	ldrh	r3, [r3, #2]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d10c      	bne.n	800bc58 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f910 	bl	800be6c <USBD_CtlSendStatus>
      }
      break;
 800bc4c:	e004      	b.n	800bc58 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bc4e:	6839      	ldr	r1, [r7, #0]
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 f840 	bl	800bcd6 <USBD_CtlError>
      break;
 800bc56:	e000      	b.n	800bc5a <USBD_ClrFeature+0x3a>
      break;
 800bc58:	bf00      	nop
  }
}
 800bc5a:	bf00      	nop
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b084      	sub	sp, #16
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	781a      	ldrb	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	781a      	ldrb	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	3301      	adds	r3, #1
 800bc8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f7ff fa9a 	bl	800b1c6 <SWAPBYTE>
 800bc92:	4603      	mov	r3, r0
 800bc94:	461a      	mov	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	3301      	adds	r3, #1
 800bca4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f7ff fa8d 	bl	800b1c6 <SWAPBYTE>
 800bcac:	4603      	mov	r3, r0
 800bcae:	461a      	mov	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f7ff fa80 	bl	800b1c6 <SWAPBYTE>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	461a      	mov	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	80da      	strh	r2, [r3, #6]
}
 800bcce:	bf00      	nop
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b082      	sub	sp, #8
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bce0:	2180      	movs	r1, #128	@ 0x80
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7fe fb70 	bl	800a3c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bce8:	2100      	movs	r1, #0
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7fe fb6c 	bl	800a3c8 <USBD_LL_StallEP>
}
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd04:	2300      	movs	r3, #0
 800bd06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d036      	beq.n	800bd7c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bd12:	6938      	ldr	r0, [r7, #16]
 800bd14:	f000 f836 	bl	800bd84 <USBD_GetLen>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	7812      	ldrb	r2, [r2, #0]
 800bd30:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	3301      	adds	r3, #1
 800bd36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bd38:	7dfb      	ldrb	r3, [r7, #23]
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	2203      	movs	r2, #3
 800bd40:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd42:	7dfb      	ldrb	r3, [r7, #23]
 800bd44:	3301      	adds	r3, #1
 800bd46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bd48:	e013      	b.n	800bd72 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	4413      	add	r3, r2
 800bd50:	693a      	ldr	r2, [r7, #16]
 800bd52:	7812      	ldrb	r2, [r2, #0]
 800bd54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	613b      	str	r3, [r7, #16]
    idx++;
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bd62:	7dfb      	ldrb	r3, [r7, #23]
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	4413      	add	r3, r2
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
    idx++;
 800bd6c:	7dfb      	ldrb	r3, [r7, #23]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1e7      	bne.n	800bd4a <USBD_GetString+0x52>
 800bd7a:	e000      	b.n	800bd7e <USBD_GetString+0x86>
    return;
 800bd7c:	bf00      	nop
  }
}
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bd94:	e005      	b.n	800bda2 <USBD_GetLen+0x1e>
  {
    len++;
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1f5      	bne.n	800bd96 <USBD_GetLen+0x12>
  }

  return len;
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2202      	movs	r2, #2
 800bdc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	2100      	movs	r1, #0
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f7fe fb7b 	bl	800a4da <USBD_LL_Transmit>

  return USBD_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b084      	sub	sp, #16
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	60f8      	str	r0, [r7, #12]
 800bdf6:	60b9      	str	r1, [r7, #8]
 800bdf8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	2100      	movs	r1, #0
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f7fe fb6a 	bl	800a4da <USBD_LL_Transmit>

  return USBD_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2203      	movs	r2, #3
 800be20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  pdev->ep_out[0].rem_length = len;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	2100      	movs	r1, #0
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7fe fb6e 	bl	800a51c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	af00      	add	r7, sp, #0
 800be50:	60f8      	str	r0, [r7, #12]
 800be52:	60b9      	str	r1, [r7, #8]
 800be54:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	68ba      	ldr	r2, [r7, #8]
 800be5a:	2100      	movs	r1, #0
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f7fe fb5d 	bl	800a51c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2204      	movs	r2, #4
 800be78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be7c:	2300      	movs	r3, #0
 800be7e:	2200      	movs	r2, #0
 800be80:	2100      	movs	r1, #0
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7fe fb29 	bl	800a4da <USBD_LL_Transmit>

  return USBD_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b082      	sub	sp, #8
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2205      	movs	r2, #5
 800be9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bea2:	2300      	movs	r3, #0
 800bea4:	2200      	movs	r2, #0
 800bea6:	2100      	movs	r1, #0
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7fe fb37 	bl	800a51c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <memset>:
 800beb8:	4402      	add	r2, r0
 800beba:	4603      	mov	r3, r0
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d100      	bne.n	800bec2 <memset+0xa>
 800bec0:	4770      	bx	lr
 800bec2:	f803 1b01 	strb.w	r1, [r3], #1
 800bec6:	e7f9      	b.n	800bebc <memset+0x4>

0800bec8 <__libc_init_array>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	4d0d      	ldr	r5, [pc, #52]	@ (800bf00 <__libc_init_array+0x38>)
 800becc:	2600      	movs	r6, #0
 800bece:	4c0d      	ldr	r4, [pc, #52]	@ (800bf04 <__libc_init_array+0x3c>)
 800bed0:	1b64      	subs	r4, r4, r5
 800bed2:	10a4      	asrs	r4, r4, #2
 800bed4:	42a6      	cmp	r6, r4
 800bed6:	d109      	bne.n	800beec <__libc_init_array+0x24>
 800bed8:	4d0b      	ldr	r5, [pc, #44]	@ (800bf08 <__libc_init_array+0x40>)
 800beda:	2600      	movs	r6, #0
 800bedc:	4c0b      	ldr	r4, [pc, #44]	@ (800bf0c <__libc_init_array+0x44>)
 800bede:	f000 f817 	bl	800bf10 <_init>
 800bee2:	1b64      	subs	r4, r4, r5
 800bee4:	10a4      	asrs	r4, r4, #2
 800bee6:	42a6      	cmp	r6, r4
 800bee8:	d105      	bne.n	800bef6 <__libc_init_array+0x2e>
 800beea:	bd70      	pop	{r4, r5, r6, pc}
 800beec:	f855 3b04 	ldr.w	r3, [r5], #4
 800bef0:	3601      	adds	r6, #1
 800bef2:	4798      	blx	r3
 800bef4:	e7ee      	b.n	800bed4 <__libc_init_array+0xc>
 800bef6:	f855 3b04 	ldr.w	r3, [r5], #4
 800befa:	3601      	adds	r6, #1
 800befc:	4798      	blx	r3
 800befe:	e7f2      	b.n	800bee6 <__libc_init_array+0x1e>
 800bf00:	0800c040 	.word	0x0800c040
 800bf04:	0800c040 	.word	0x0800c040
 800bf08:	0800c040 	.word	0x0800c040
 800bf0c:	0800c044 	.word	0x0800c044

0800bf10 <_init>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	bf00      	nop
 800bf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf16:	bc08      	pop	{r3}
 800bf18:	469e      	mov	lr, r3
 800bf1a:	4770      	bx	lr

0800bf1c <_fini>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	bf00      	nop
 800bf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf22:	bc08      	pop	{r3}
 800bf24:	469e      	mov	lr, r3
 800bf26:	4770      	bx	lr
