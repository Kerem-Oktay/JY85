
DeviceProcessor03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc58  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800be90  0800be90  0000ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800bfa8  0800bfa8  0000cfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800bfac  0800bfac  0000cfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000197  20000000  0800bfb0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002765  20000198  0800c147  0000d198  2**2
                  ALLOC
  7 ._user_heap_stack 00000603  200028fd  0800c147  0000d8fd  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000d197  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020e58  00000000  00000000  0000d1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000047d9  00000000  00000000  0002e025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ca0  00000000  00000000  00032800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000015fd  00000000  00000000  000344a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000370c3  00000000  00000000  00035a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00027300  00000000  00000000  0006cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014b33e  00000000  00000000  00093e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001df19e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007988  00000000  00000000  001df1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001e6b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000198 	.word	0x20000198
 8000254:	00000000 	.word	0x00000000
 8000258:	0800be78 	.word	0x0800be78

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000019c 	.word	0x2000019c
 8000274:	0800be78 	.word	0x0800be78

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	f5ad 6dfd 	sub.w	sp, sp, #2024	@ 0x7e8
 800027e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef funcResult1;
	HAL_StatusTypeDef funcResult2;
	uint16_t dmaValCheck1[500];
	uint16_t dmaValCheck2[500];
	for(int i = 0; i < 500; i++){
 8000280:	2300      	movs	r3, #0
 8000282:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
 8000286:	e00f      	b.n	80002a8 <main+0x30>
		dmaValCheck1[i] = i;
 8000288:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 800028c:	b299      	uxth	r1, r3
 800028e:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8000292:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8000296:	f8d7 27dc 	ldr.w	r2, [r7, #2012]	@ 0x7dc
 800029a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 500; i++){
 800029e:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 80002a2:	3301      	adds	r3, #1
 80002a4:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
 80002a8:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 80002ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80002b0:	dbea      	blt.n	8000288 <main+0x10>
	}
	for(int i = 0; i < 500; i++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
 80002b8:	e00f      	b.n	80002da <main+0x62>
		dmaValCheck2[i] = i;
 80002ba:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	@ 0x7d8
 80002be:	b299      	uxth	r1, r3
 80002c0:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 80002c4:	f2a3 73dc 	subw	r3, r3, #2012	@ 0x7dc
 80002c8:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	@ 0x7d8
 80002cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 500; i++){
 80002d0:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	@ 0x7d8
 80002d4:	3301      	adds	r3, #1
 80002d6:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
 80002da:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	@ 0x7d8
 80002de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80002e2:	dbea      	blt.n	80002ba <main+0x42>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 ffec 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f860 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 fb34 	bl	8000958 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80002f0:	f000 f8c0 	bl	8000474 <MX_GPDMA1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80002f4:	f000 fafe 	bl	80008f4 <MX_USB_OTG_FS_PCD_Init>
  MX_ICACHE_Init();
 80002f8:	f000 f958 	bl	80005ac <MX_ICACHE_Init>
  MX_TIM8_Init();
 80002fc:	f000 fa4a 	bl	8000794 <MX_TIM8_Init>
  MX_I2C2_Init();
 8000300:	f000 f8d8 	bl	80004b4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000304:	f000 f914 	bl	8000530 <MX_I2C3_Init>
  MX_SPI2_Init();
 8000308:	f000 f9d4 	bl	80006b4 <MX_SPI2_Init>
  MX_SPI1_Init();
 800030c:	f000 f962 	bl	80005d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 8000310:	f009 fb74 	bl	80099fc <MX_USB_Device_Init>
  HAL_Delay(2000);
 8000314:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000318:	f001 f898 	bl	800144c <HAL_Delay>
//  run_device();
  TIM8->ARR = 32-1;
 800031c:	4b1d      	ldr	r3, [pc, #116]	@ (8000394 <main+0x11c>)
 800031e:	221f      	movs	r2, #31
 8000320:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM8->CCR1 = TIM8->ARR/2;
 8000322:	4b1c      	ldr	r3, [pc, #112]	@ (8000394 <main+0x11c>)
 8000324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000326:	4a1b      	ldr	r2, [pc, #108]	@ (8000394 <main+0x11c>)
 8000328:	085b      	lsrs	r3, r3, #1
 800032a:	6353      	str	r3, [r2, #52]	@ 0x34
  TIM8->CCR2 = TIM8->ARR/2;
 800032c:	4b19      	ldr	r3, [pc, #100]	@ (8000394 <main+0x11c>)
 800032e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000330:	4a18      	ldr	r2, [pc, #96]	@ (8000394 <main+0x11c>)
 8000332:	085b      	lsrs	r3, r3, #1
 8000334:	6393      	str	r3, [r2, #56]	@ 0x38
  TIM8->DIER = TIM_DIER_UDE;
 8000336:	4b17      	ldr	r3, [pc, #92]	@ (8000394 <main+0x11c>)
 8000338:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800033c:	60da      	str	r2, [r3, #12]
//  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_SPI_Transmit(&hspi2, SPI_TX_Buffer2, 10, 1000);
 800033e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000342:	220a      	movs	r2, #10
 8000344:	4914      	ldr	r1, [pc, #80]	@ (8000398 <main+0x120>)
 8000346:	4815      	ldr	r0, [pc, #84]	@ (800039c <main+0x124>)
 8000348:	f006 fb84 	bl	8006a54 <HAL_SPI_Transmit>
  HAL_Delay(200);
 800034c:	20c8      	movs	r0, #200	@ 0xc8
 800034e:	f001 f87d 	bl	800144c <HAL_Delay>
  funcResult1 = HAL_I2C_Master_Transmit(&hi2c3,0x2F<<1,I2C_TX_Buffer1,2,1000);
 8000352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000356:	9300      	str	r3, [sp, #0]
 8000358:	2302      	movs	r3, #2
 800035a:	4a11      	ldr	r2, [pc, #68]	@ (80003a0 <main+0x128>)
 800035c:	215e      	movs	r1, #94	@ 0x5e
 800035e:	4811      	ldr	r0, [pc, #68]	@ (80003a4 <main+0x12c>)
 8000360:	f002 fa02 	bl	8002768 <HAL_I2C_Master_Transmit>
 8000364:	4603      	mov	r3, r0
 8000366:	f887 37d7 	strb.w	r3, [r7, #2007]	@ 0x7d7
  HAL_Delay(200);
 800036a:	20c8      	movs	r0, #200	@ 0xc8
 800036c:	f001 f86e 	bl	800144c <HAL_Delay>
  funcResult2 = HAL_I2C_Master_Transmit(&hi2c3,0x2E<<1,I2C_TX_Buffer2,2,1000);
 8000370:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2302      	movs	r3, #2
 8000378:	4a0b      	ldr	r2, [pc, #44]	@ (80003a8 <main+0x130>)
 800037a:	215c      	movs	r1, #92	@ 0x5c
 800037c:	4809      	ldr	r0, [pc, #36]	@ (80003a4 <main+0x12c>)
 800037e:	f002 f9f3 	bl	8002768 <HAL_I2C_Master_Transmit>
 8000382:	4603      	mov	r3, r0
 8000384:	f887 37d6 	strb.w	r3, [r7, #2006]	@ 0x7d6
  HAL_Delay(200);
 8000388:	20c8      	movs	r0, #200	@ 0xc8
 800038a:	f001 f85f 	bl	800144c <HAL_Delay>
  while (1)
 800038e:	bf00      	nop
 8000390:	e7fd      	b.n	800038e <main+0x116>
 8000392:	bf00      	nop
 8000394:	40013400 	.word	0x40013400
 8000398:	20000008 	.word	0x20000008
 800039c:	200002ec 	.word	0x200002ec
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20000208 	.word	0x20000208
 80003a8:	20000004 	.word	0x20000004

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b09e      	sub	sp, #120	@ 0x78
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	2260      	movs	r2, #96	@ 0x60
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f00b fd30 	bl	800be20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	463b      	mov	r3, r7
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]
 80003ce:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003d0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80003d4:	f004 f838 	bl	8004448 <HAL_PWREx_ControlVoltageScaling>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80003de:	f000 fb9b 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI
 80003e2:	2370      	movs	r3, #112	@ 0x70
 80003e4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003ec:	2301      	movs	r3, #1
 80003ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80003f0:	2310      	movs	r3, #16
 80003f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 80003f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80003fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 80003fe:	2310      	movs	r3, #16
 8000400:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000402:	2302      	movs	r3, #2
 8000404:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000406:	2301      	movs	r3, #1
 8000408:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800040a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800040e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000410:	2303      	movs	r3, #3
 8000412:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000414:	230a      	movs	r3, #10
 8000416:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000418:	2302      	movs	r3, #2
 800041a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800041c:	2302      	movs	r3, #2
 800041e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000420:	2301      	movs	r3, #1
 8000422:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000424:	230c      	movs	r3, #12
 8000426:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	4618      	mov	r0, r3
 8000432:	f004 f8b5 	bl	80045a0 <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800043c:	f000 fb6c 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000440:	231f      	movs	r3, #31
 8000442:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000444:	2303      	movs	r3, #3
 8000446:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000458:	463b      	mov	r3, r7
 800045a:	2104      	movs	r1, #4
 800045c:	4618      	mov	r0, r3
 800045e:	f004 ff7b 	bl	8005358 <HAL_RCC_ClockConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000468:	f000 fb56 	bl	8000b18 <Error_Handler>
  }
}
 800046c:	bf00      	nop
 800046e:	3778      	adds	r7, #120	@ 0x78
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800047a:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <MX_GPDMA1_Init+0x3c>)
 800047c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000480:	4a0b      	ldr	r2, [pc, #44]	@ (80004b0 <MX_GPDMA1_Init+0x3c>)
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800048a:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_GPDMA1_Init+0x3c>)
 800048c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 8000498:	2200      	movs	r2, #0
 800049a:	2100      	movs	r1, #0
 800049c:	2054      	movs	r0, #84	@ 0x54
 800049e:	f001 f8b1 	bl	8001604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80004a2:	2054      	movs	r0, #84	@ 0x54
 80004a4:	f001 f8c8 	bl	8001638 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	46020c00 	.word	0x46020c00

080004b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <MX_I2C2_Init+0x74>)
 80004ba:	4a1c      	ldr	r2, [pc, #112]	@ (800052c <MX_I2C2_Init+0x78>)
 80004bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80004be:	4b1a      	ldr	r3, [pc, #104]	@ (8000528 <MX_I2C2_Init+0x74>)
 80004c0:	f640 6214 	movw	r2, #3604	@ 0xe14
 80004c4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80004c6:	4b18      	ldr	r3, [pc, #96]	@ (8000528 <MX_I2C2_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004cc:	4b16      	ldr	r3, [pc, #88]	@ (8000528 <MX_I2C2_Init+0x74>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d2:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <MX_I2C2_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80004d8:	4b13      	ldr	r3, [pc, #76]	@ (8000528 <MX_I2C2_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004de:	4b12      	ldr	r3, [pc, #72]	@ (8000528 <MX_I2C2_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e4:	4b10      	ldr	r3, [pc, #64]	@ (8000528 <MX_I2C2_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <MX_I2C2_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004f0:	480d      	ldr	r0, [pc, #52]	@ (8000528 <MX_I2C2_Init+0x74>)
 80004f2:	f002 f89d 	bl	8002630 <HAL_I2C_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80004fc:	f000 fb0c 	bl	8000b18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000500:	2100      	movs	r1, #0
 8000502:	4809      	ldr	r0, [pc, #36]	@ (8000528 <MX_I2C2_Init+0x74>)
 8000504:	f002 fc3e 	bl	8002d84 <HAL_I2CEx_ConfigAnalogFilter>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800050e:	f000 fb03 	bl	8000b18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000512:	2100      	movs	r1, #0
 8000514:	4804      	ldr	r0, [pc, #16]	@ (8000528 <MX_I2C2_Init+0x74>)
 8000516:	f002 fc80 	bl	8002e1a <HAL_I2CEx_ConfigDigitalFilter>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000520:	f000 fafa 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200001b4 	.word	0x200001b4
 800052c:	40005800 	.word	0x40005800

08000530 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000534:	4b1b      	ldr	r3, [pc, #108]	@ (80005a4 <MX_I2C3_Init+0x74>)
 8000536:	4a1c      	ldr	r2, [pc, #112]	@ (80005a8 <MX_I2C3_Init+0x78>)
 8000538:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800053a:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <MX_I2C3_Init+0x74>)
 800053c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000540:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000542:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <MX_I2C3_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <MX_I2C3_Init+0x74>)
 800054a:	2201      	movs	r2, #1
 800054c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800054e:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <MX_I2C3_Init+0x74>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000554:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <MX_I2C3_Init+0x74>)
 8000556:	2200      	movs	r2, #0
 8000558:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <MX_I2C3_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <MX_I2C3_Init+0x74>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <MX_I2C3_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800056c:	480d      	ldr	r0, [pc, #52]	@ (80005a4 <MX_I2C3_Init+0x74>)
 800056e:	f002 f85f 	bl	8002630 <HAL_I2C_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000578:	f000 face 	bl	8000b18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800057c:	2100      	movs	r1, #0
 800057e:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <MX_I2C3_Init+0x74>)
 8000580:	f002 fc00 	bl	8002d84 <HAL_I2CEx_ConfigAnalogFilter>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800058a:	f000 fac5 	bl	8000b18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800058e:	2100      	movs	r1, #0
 8000590:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <MX_I2C3_Init+0x74>)
 8000592:	f002 fc42 	bl	8002e1a <HAL_I2CEx_ConfigDigitalFilter>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800059c:	f000 fabc 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000208 	.word	0x20000208
 80005a8:	46002800 	.word	0x46002800

080005ac <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80005b0:	2000      	movs	r0, #0
 80005b2:	f002 fc7f 	bl	8002eb4 <HAL_ICACHE_ConfigAssociativityMode>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80005bc:	f000 faac 	bl	8000b18 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80005c0:	f002 fc98 	bl	8002ef4 <HAL_ICACHE_Enable>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80005ca:	f000 faa5 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005e4:	4b31      	ldr	r3, [pc, #196]	@ (80006ac <MX_SPI1_Init+0xd8>)
 80005e6:	4a32      	ldr	r2, [pc, #200]	@ (80006b0 <MX_SPI1_Init+0xdc>)
 80005e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ea:	4b30      	ldr	r3, [pc, #192]	@ (80006ac <MX_SPI1_Init+0xd8>)
 80005ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005f2:	4b2e      	ldr	r3, [pc, #184]	@ (80006ac <MX_SPI1_Init+0xd8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f8:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <MX_SPI1_Init+0xd8>)
 80005fa:	2207      	movs	r2, #7
 80005fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005fe:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000600:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000604:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000606:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800060c:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <MX_SPI1_Init+0xd8>)
 800060e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000612:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000614:	4b25      	ldr	r3, [pc, #148]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800061a:	4b24      	ldr	r3, [pc, #144]	@ (80006ac <MX_SPI1_Init+0xd8>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000628:	2200      	movs	r2, #0
 800062a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <MX_SPI1_Init+0xd8>)
 800062e:	2207      	movs	r2, #7
 8000630:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000632:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000634:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000638:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800063a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <MX_SPI1_Init+0xd8>)
 800063c:	2200      	movs	r2, #0
 800063e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000640:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000642:	2200      	movs	r2, #0
 8000644:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000648:	2200      	movs	r2, #0
 800064a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <MX_SPI1_Init+0xd8>)
 800064e:	2200      	movs	r2, #0
 8000650:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000654:	2200      	movs	r2, #0
 8000656:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <MX_SPI1_Init+0xd8>)
 800065a:	2200      	movs	r2, #0
 800065c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000660:	2200      	movs	r2, #0
 8000662:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000666:	2200      	movs	r2, #0
 8000668:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <MX_SPI1_Init+0xd8>)
 800066c:	2200      	movs	r2, #0
 800066e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000670:	480e      	ldr	r0, [pc, #56]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000672:	f006 f8d9 	bl	8006828 <HAL_SPI_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 800067c:	f000 fa4c 	bl	8000b18 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000684:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	@ (80006ac <MX_SPI1_Init+0xd8>)
 8000694:	f006 fcdb 	bl	800704e <HAL_SPIEx_SetConfigAutonomousMode>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 800069e:	f000 fa3b 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000025c 	.word	0x2000025c
 80006b0:	40013000 	.word	0x40013000

080006b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006c4:	4b31      	ldr	r3, [pc, #196]	@ (800078c <MX_SPI2_Init+0xd8>)
 80006c6:	4a32      	ldr	r2, [pc, #200]	@ (8000790 <MX_SPI2_Init+0xdc>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b30      	ldr	r3, [pc, #192]	@ (800078c <MX_SPI2_Init+0xd8>)
 80006cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b2e      	ldr	r3, [pc, #184]	@ (800078c <MX_SPI2_Init+0xd8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d8:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <MX_SPI2_Init+0xd8>)
 80006da:	2207      	movs	r2, #7
 80006dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006de:	4b2b      	ldr	r3, [pc, #172]	@ (800078c <MX_SPI2_Init+0xd8>)
 80006e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80006e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e6:	4b29      	ldr	r3, [pc, #164]	@ (800078c <MX_SPI2_Init+0xd8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006ec:	4b27      	ldr	r3, [pc, #156]	@ (800078c <MX_SPI2_Init+0xd8>)
 80006ee:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80006f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <MX_SPI2_Init+0xd8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fa:	4b24      	ldr	r3, [pc, #144]	@ (800078c <MX_SPI2_Init+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000700:	4b22      	ldr	r3, [pc, #136]	@ (800078c <MX_SPI2_Init+0xd8>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <MX_SPI2_Init+0xd8>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_SPI2_Init+0xd8>)
 800070e:	2207      	movs	r2, #7
 8000710:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000712:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <MX_SPI2_Init+0xd8>)
 8000714:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000718:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_SPI2_Init+0xd8>)
 800071c:	2200      	movs	r2, #0
 800071e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_SPI2_Init+0xd8>)
 8000722:	2200      	movs	r2, #0
 8000724:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_SPI2_Init+0xd8>)
 8000728:	2200      	movs	r2, #0
 800072a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_SPI2_Init+0xd8>)
 800072e:	2200      	movs	r2, #0
 8000730:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_SPI2_Init+0xd8>)
 8000734:	2200      	movs	r2, #0
 8000736:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_SPI2_Init+0xd8>)
 800073a:	2200      	movs	r2, #0
 800073c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_SPI2_Init+0xd8>)
 8000740:	2200      	movs	r2, #0
 8000742:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_SPI2_Init+0xd8>)
 8000746:	2200      	movs	r2, #0
 8000748:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_SPI2_Init+0xd8>)
 800074c:	2200      	movs	r2, #0
 800074e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000750:	480e      	ldr	r0, [pc, #56]	@ (800078c <MX_SPI2_Init+0xd8>)
 8000752:	f006 f869 	bl	8006828 <HAL_SPI_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 800075c:	f000 f9dc 	bl	8000b18 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000764:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	@ (800078c <MX_SPI2_Init+0xd8>)
 8000774:	f006 fc6b 	bl	800704e <HAL_SPIEx_SetConfigAutonomousMode>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 800077e:	f000 f9cb 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200002ec 	.word	0x200002ec
 8000790:	40003800 	.word	0x40003800

08000794 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	@ 0x70
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2234      	movs	r2, #52	@ 0x34
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f00b fb26 	bl	800be20 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007d4:	4b45      	ldr	r3, [pc, #276]	@ (80008ec <MX_TIM8_Init+0x158>)
 80007d6:	4a46      	ldr	r2, [pc, #280]	@ (80008f0 <MX_TIM8_Init+0x15c>)
 80007d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80007da:	4b44      	ldr	r3, [pc, #272]	@ (80008ec <MX_TIM8_Init+0x158>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b42      	ldr	r3, [pc, #264]	@ (80008ec <MX_TIM8_Init+0x158>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80007e6:	4b41      	ldr	r3, [pc, #260]	@ (80008ec <MX_TIM8_Init+0x158>)
 80007e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b3f      	ldr	r3, [pc, #252]	@ (80008ec <MX_TIM8_Init+0x158>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007f4:	4b3d      	ldr	r3, [pc, #244]	@ (80008ec <MX_TIM8_Init+0x158>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007fa:	4b3c      	ldr	r3, [pc, #240]	@ (80008ec <MX_TIM8_Init+0x158>)
 80007fc:	2280      	movs	r2, #128	@ 0x80
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000800:	483a      	ldr	r0, [pc, #232]	@ (80008ec <MX_TIM8_Init+0x158>)
 8000802:	f006 fc65 	bl	80070d0 <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800080c:	f000 f984 	bl	8000b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000816:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800081a:	4619      	mov	r1, r3
 800081c:	4833      	ldr	r0, [pc, #204]	@ (80008ec <MX_TIM8_Init+0x158>)
 800081e:	f006 fe23 	bl	8007468 <HAL_TIM_ConfigClockSource>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000828:	f000 f976 	bl	8000b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800082c:	482f      	ldr	r0, [pc, #188]	@ (80008ec <MX_TIM8_Init+0x158>)
 800082e:	f006 fca6 	bl	800717e <HAL_TIM_PWM_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000838:	f000 f96e 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000848:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800084c:	4619      	mov	r1, r3
 800084e:	4827      	ldr	r0, [pc, #156]	@ (80008ec <MX_TIM8_Init+0x158>)
 8000850:	f007 fc7e 	bl	8008150 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800085a:	f000 f95d 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085e:	2360      	movs	r3, #96	@ 0x60
 8000860:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000866:	2300      	movs	r3, #0
 8000868:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800086a:	2300      	movs	r3, #0
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800087a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800087e:	2204      	movs	r2, #4
 8000880:	4619      	mov	r1, r3
 8000882:	481a      	ldr	r0, [pc, #104]	@ (80008ec <MX_TIM8_Init+0x158>)
 8000884:	f006 fcdc 	bl	8007240 <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800088e:	f000 f943 	bl	8000b18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	4807      	ldr	r0, [pc, #28]	@ (80008ec <MX_TIM8_Init+0x158>)
 80008d0:	f007 fd00 	bl	80082d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80008da:	f000 f91d 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80008de:	4803      	ldr	r0, [pc, #12]	@ (80008ec <MX_TIM8_Init+0x158>)
 80008e0:	f000 fb56 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 80008e4:	bf00      	nop
 80008e6:	3770      	adds	r7, #112	@ 0x70
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000037c 	.word	0x2000037c
 80008f0:	40013400 	.word	0x40013400

080008f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fa:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000900:	2206      	movs	r2, #6
 8000902:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000906:	2202      	movs	r2, #2
 8000908:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090c:	2202      	movs	r2, #2
 800090e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000912:	2200      	movs	r2, #0
 8000914:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000918:	2200      	movs	r2, #0
 800091a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091e:	2200      	movs	r2, #0
 8000920:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092a:	2200      	movs	r2, #0
 800092c:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000936:	2200      	movs	r2, #0
 8000938:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093c:	f002 faea 	bl	8002f14 <HAL_PCD_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000946:	f000 f8e7 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000440 	.word	0x20000440
 8000954:	42040000 	.word	0x42040000

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	@ 0x30
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096e:	4b65      	ldr	r3, [pc, #404]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 8000970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000974:	4a63      	ldr	r2, [pc, #396]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800097e:	4b61      	ldr	r3, [pc, #388]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098c:	4b5d      	ldr	r3, [pc, #372]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 800098e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000992:	4a5c      	ldr	r2, [pc, #368]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800099c:	4b59      	ldr	r3, [pc, #356]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 800099e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a2:	f003 0320 	and.w	r3, r3, #32
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b56      	ldr	r3, [pc, #344]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 80009ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b0:	4a54      	ldr	r2, [pc, #336]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ba:	4b52      	ldr	r3, [pc, #328]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 80009bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b4e      	ldr	r3, [pc, #312]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 80009ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ce:	4a4d      	ldr	r2, [pc, #308]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 80009da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e6:	4b47      	ldr	r3, [pc, #284]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 80009e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ec:	4a45      	ldr	r2, [pc, #276]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 80009ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009f6:	4b43      	ldr	r3, [pc, #268]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 80009f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b3f      	ldr	r3, [pc, #252]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 8000a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a0a:	4a3e      	ldr	r2, [pc, #248]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a14:	4b3b      	ldr	r3, [pc, #236]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 8000a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b38      	ldr	r3, [pc, #224]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 8000a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a28:	4a36      	ldr	r2, [pc, #216]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a32:	4b34      	ldr	r3, [pc, #208]	@ (8000b04 <MX_GPIO_Init+0x1ac>)
 8000a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 8000a40:	2200      	movs	r2, #0
 8000a42:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a46:	4830      	ldr	r0, [pc, #192]	@ (8000b08 <MX_GPIO_Init+0x1b0>)
 8000a48:	f001 fdda 	bl	8002600 <HAL_GPIO_WritePin>
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000a52:	482e      	ldr	r0, [pc, #184]	@ (8000b0c <MX_GPIO_Init+0x1b4>)
 8000a54:	f001 fdd4 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADCV1_D13_Pin ADCV1_D12_Pin ADCV1_D11_Pin ADCV1_D10_Pin
                           ADCV1_D09_Pin ADCV1_D08_Pin ADCV1_D07_Pin ADCV1_D06_Pin
                           ADCV1_D05_Pin ADCV1_D04_Pin ADCV1_D03_Pin ADCV1_D02_Pin
                           ADCV1_D01_Pin ADCV1_D00_Pin ADCV1_D15_Pin ADCV1_D14_Pin */
  GPIO_InitStruct.Pin = ADCV1_D13_Pin|ADCV1_D12_Pin|ADCV1_D11_Pin|ADCV1_D10_Pin
 8000a58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a5c:	61fb      	str	r3, [r7, #28]
                          |ADCV1_D09_Pin|ADCV1_D08_Pin|ADCV1_D07_Pin|ADCV1_D06_Pin
                          |ADCV1_D05_Pin|ADCV1_D04_Pin|ADCV1_D03_Pin|ADCV1_D02_Pin
                          |ADCV1_D01_Pin|ADCV1_D00_Pin|ADCV1_D15_Pin|ADCV1_D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4828      	ldr	r0, [pc, #160]	@ (8000b10 <MX_GPIO_Init+0x1b8>)
 8000a6e:	f001 fbef 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D00_Pin ADCV2_D01_Pin ADCV2_D02_Pin ADCV2_D03_Pin
                           ADCV2_D04_Pin ADCV2_D05_Pin ADCV2_D06_Pin ADCV2_D07_Pin
                           ADCV2_D08_Pin ADCV2_D09_Pin ADCV2_D10_Pin ADCV2_D11_Pin */
  GPIO_InitStruct.Pin = ADCV2_D00_Pin|ADCV2_D01_Pin|ADCV2_D02_Pin|ADCV2_D03_Pin
 8000a72:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000a76:	61fb      	str	r3, [r7, #28]
                          |ADCV2_D04_Pin|ADCV2_D05_Pin|ADCV2_D06_Pin|ADCV2_D07_Pin
                          |ADCV2_D08_Pin|ADCV2_D09_Pin|ADCV2_D10_Pin|ADCV2_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4823      	ldr	r0, [pc, #140]	@ (8000b14 <MX_GPIO_Init+0x1bc>)
 8000a88:	f001 fbe2 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D12_Pin ADCV2_D13_Pin ADCV2_D14_Pin ADCV2_D15_Pin */
  GPIO_InitStruct.Pin = ADCV2_D12_Pin|ADCV2_D13_Pin|ADCV2_D14_Pin|ADCV2_D15_Pin;
 8000a8c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a96:	2302      	movs	r3, #2
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481c      	ldr	r0, [pc, #112]	@ (8000b14 <MX_GPIO_Init+0x1bc>)
 8000aa2:	f001 fbd5 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_01_Pin SWNT_CTRL_02_Pin SWNT_CTRL_03_Pin SWNT_CTRL_04_Pin
                           SWNT_CTRL_05_Pin SWNT_CTRL_06_Pin SWNT_CTRL_07_Pin SWNT_CTRL_08_Pin
                           SWNT_CTRL_09_Pin SWNT_CTRL_10_Pin SWNT_CTRL_11_Pin SWNT_CTRL_12_Pin
                           SWNT_CTRL_13_Pin SWNT_CTRL_14_Pin SWNT_CTRL_15_Pin SWNT_CTRL_16_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 8000aa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000aaa:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4812      	ldr	r0, [pc, #72]	@ (8000b08 <MX_GPIO_Init+0x1b0>)
 8000ac0:	f001 fbc6 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_20_Pin SWNT_CTRL_21_Pin SWNT_CTRL_17_Pin SWNT_CTRL_18_Pin
                           SWNT_CTRL_19_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 8000ac4:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000ac8:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_19_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	480b      	ldr	r0, [pc, #44]	@ (8000b0c <MX_GPIO_Init+0x1b4>)
 8000ade:	f001 fbb7 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV1_OTR_Pin ADCV2_OTR_Pin */
  GPIO_InitStruct.Pin = ADCV1_OTR_Pin|ADCV2_OTR_Pin;
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_GPIO_Init+0x1b4>)
 8000af6:	f001 fbab 	bl	8002250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	@ 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	46020c00 	.word	0x46020c00
 8000b08:	42021800 	.word	0x42021800
 8000b0c:	42020c00 	.word	0x42020c00
 8000b10:	42021000 	.word	0x42021000
 8000b14:	42021400 	.word	0x42021400

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <Error_Handler+0x8>

08000b24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <HAL_MspInit+0x34>)
 8000b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b30:	4a09      	ldr	r2, [pc, #36]	@ (8000b58 <HAL_MspInit+0x34>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <HAL_MspInit+0x34>)
 8000b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000b48:	f003 fd0a 	bl	8004560 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8000b4c:	f003 fd18 	bl	8004580 <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	46020c00 	.word	0x46020c00

08000b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0bc      	sub	sp, #240	@ 0xf0
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	22c0      	movs	r2, #192	@ 0xc0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f00b f94f 	bl	800be20 <memset>
  if(hi2c->Instance==I2C2)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a4d      	ldr	r2, [pc, #308]	@ (8000cbc <HAL_I2C_MspInit+0x160>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d148      	bne.n	8000c1e <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b8c:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_MSIK;
 8000b98:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba0:	f107 0318 	add.w	r3, r7, #24
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 ff6b 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000bb0:	f7ff ffb2 	bl	8000b18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b42      	ldr	r3, [pc, #264]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bba:	4a41      	ldr	r2, [pc, #260]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_DAC2_CURR_POT_SCL_Pin|I2C_DAC2_CURR_POT_SDA_Pin;
 8000bd2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bda:	2312      	movs	r3, #18
 8000bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bec:	2304      	movs	r3, #4
 8000bee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4832      	ldr	r0, [pc, #200]	@ (8000cc4 <HAL_I2C_MspInit+0x168>)
 8000bfa:	f001 fb29 	bl	8002250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bfe:	4b30      	ldr	r3, [pc, #192]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c04:	4a2e      	ldr	r2, [pc, #184]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000c06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c0a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000c1c:	e04a      	b.n	8000cb4 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C3)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a29      	ldr	r2, [pc, #164]	@ (8000cc8 <HAL_I2C_MspInit+0x16c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d145      	bne.n	8000cb4 <HAL_I2C_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_MSIK;
 8000c34:	23c0      	movs	r3, #192	@ 0xc0
 8000c36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f004 ff1e 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8000c4a:	f7ff ff65 	bl	8000b18 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c54:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c5e:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_DAC1_POT_SCL_Pin|I2C_DAC1_POT_SDA_Pin;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c72:	2312      	movs	r3, #18
 8000c74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c84:	2304      	movs	r3, #4
 8000c86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480e      	ldr	r0, [pc, #56]	@ (8000ccc <HAL_I2C_MspInit+0x170>)
 8000c92:	f001 fadd 	bl	8002250 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c96:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000c98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000c9c:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ca2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_I2C_MspInit+0x164>)
 8000ca8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
}
 8000cb4:	bf00      	nop
 8000cb6:	37f0      	adds	r7, #240	@ 0xf0
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40005800 	.word	0x40005800
 8000cc0:	46020c00 	.word	0x46020c00
 8000cc4:	42020400 	.word	0x42020400
 8000cc8:	46002800 	.word	0x46002800
 8000ccc:	42020800 	.word	0x42020800

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0be      	sub	sp, #248	@ 0xf8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce8:	f107 0320 	add.w	r3, r7, #32
 8000cec:	22c0      	movs	r2, #192	@ 0xc0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f00b f895 	bl	800be20 <memset>
  if(hspi->Instance==SPI1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a6a      	ldr	r2, [pc, #424]	@ (8000ea4 <HAL_SPI_MspInit+0x1d4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d147      	bne.n	8000d90 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000d00:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_MSIK;
 8000d0c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000d10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 feb1 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000d24:	f7ff fef8 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d28:	4b5f      	ldr	r3, [pc, #380]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000d2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000d30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d34:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d38:	4b5b      	ldr	r3, [pc, #364]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000d3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d42:	61fb      	str	r3, [r7, #28]
 8000d44:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b58      	ldr	r3, [pc, #352]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d4c:	4a56      	ldr	r2, [pc, #344]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d56:	4b54      	ldr	r3, [pc, #336]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
 8000d62:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_DAC2_SCK_Pin|SPI_DAC2_NSS_Pin|SPI_DAC2_MISO_Pin|SPI_DAC2_MOSI_Pin;
 8000d64:	23d2      	movs	r3, #210	@ 0xd2
 8000d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4848      	ldr	r0, [pc, #288]	@ (8000eac <HAL_SPI_MspInit+0x1dc>)
 8000d8a:	f001 fa61 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d8e:	e084      	b.n	8000e9a <HAL_SPI_MspInit+0x1ca>
  else if(hspi->Instance==SPI2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a46      	ldr	r2, [pc, #280]	@ (8000eb0 <HAL_SPI_MspInit+0x1e0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d17f      	bne.n	8000e9a <HAL_SPI_MspInit+0x1ca>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000d9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d9e:	f04f 0300 	mov.w	r3, #0
 8000da2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_MSIK;
 8000da6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000daa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dae:	f107 0320 	add.w	r3, r7, #32
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 fe64 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 8000dbe:	f7ff feab 	bl	8000b18 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dc2:	4b39      	ldr	r3, [pc, #228]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dc8:	4a37      	ldr	r2, [pc, #220]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000dca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000dd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de0:	4b31      	ldr	r3, [pc, #196]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de6:	4a30      	ldr	r2, [pc, #192]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000df0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e04:	4a28      	ldr	r2, [pc, #160]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ea8 <HAL_SPI_MspInit+0x1d8>)
 8000e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e14:	f003 0308 	and.w	r3, r3, #8
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI_DAC1_MISO_Pin;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e34:	2305      	movs	r3, #5
 8000e36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	481c      	ldr	r0, [pc, #112]	@ (8000eb4 <HAL_SPI_MspInit+0x1e4>)
 8000e42:	f001 fa05 	bl	8002250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_NSS_Pin|SPI_DAC1_MOSI_Pin;
 8000e46:	2311      	movs	r3, #17
 8000e48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e64:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4813      	ldr	r0, [pc, #76]	@ (8000eb8 <HAL_SPI_MspInit+0x1e8>)
 8000e6c:	f001 f9f0 	bl	8002250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_SCK_Pin;
 8000e70:	2308      	movs	r3, #8
 8000e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4808      	ldr	r0, [pc, #32]	@ (8000eb8 <HAL_SPI_MspInit+0x1e8>)
 8000e96:	f001 f9db 	bl	8002250 <HAL_GPIO_Init>
}
 8000e9a:	bf00      	nop
 8000e9c:	37f8      	adds	r7, #248	@ 0xf8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40013000 	.word	0x40013000
 8000ea8:	46020c00 	.word	0x46020c00
 8000eac:	42020000 	.word	0x42020000
 8000eb0:	40003800 	.word	0x40003800
 8000eb4:	42020800 	.word	0x42020800
 8000eb8:	42020c00 	.word	0x42020c00

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8000f80 <HAL_TIM_Base_MspInit+0xc4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d153      	bne.n	8000f76 <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ece:	4b2d      	ldr	r3, [pc, #180]	@ (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000ed0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000ed6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eda:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000ede:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000ee0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* GPDMA1_REQUEST_TIM8_UP Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8000eec:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000eee:	4a27      	ldr	r2, [pc, #156]	@ (8000f8c <HAL_TIM_Base_MspInit+0xd0>)
 8000ef0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_TIM8_UP;
 8000ef2:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000ef4:	2235      	movs	r2, #53	@ 0x35
 8000ef6:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000ef8:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000efe:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f04:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f0e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f12:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f1c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f20:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f28:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8000f48:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f4a:	f000 fc37 	bl	80017bc <HAL_DMA_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_TIM_Base_MspInit+0x9c>
    {
      Error_Handler();
 8000f54:	f7ff fde0 	bl	8000b18 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel12);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f5c:	621a      	str	r2, [r3, #32]
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000f64:	2110      	movs	r1, #16
 8000f66:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000f68:	f000 feb5 	bl	8001cd6 <HAL_DMA_ConfigChannelAttributes>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_TIM_Base_MspInit+0xba>
    {
      Error_Handler();
 8000f72:	f7ff fdd1 	bl	8000b18 <Error_Handler>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40013400 	.word	0x40013400
 8000f84:	46020c00 	.word	0x46020c00
 8000f88:	200003c8 	.word	0x200003c8
 8000f8c:	40020650 	.word	0x40020650

08000f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <HAL_TIM_MspPostInit+0x68>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d11e      	bne.n	8000ff0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb8:	4a10      	ldr	r2, [pc, #64]	@ (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ADC_CLK_DVC_Pin;
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_CLK_DVC_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <HAL_TIM_MspPostInit+0x70>)
 8000fec:	f001 f930 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40013400 	.word	0x40013400
 8000ffc:	46020c00 	.word	0x46020c00
 8001000:	42020800 	.word	0x42020800

08001004 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0bc      	sub	sp, #240	@ 0xf0
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	22c0      	movs	r2, #192	@ 0xc0
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f00a fefb 	bl	800be20 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a3c      	ldr	r2, [pc, #240]	@ (8001120 <HAL_PCD_MspInit+0x11c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d171      	bne.n	8001118 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001034:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	4618      	mov	r0, r3
 800104c:	f004 fd18 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001056:	f7ff fd5f 	bl	8000b18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b32      	ldr	r3, [pc, #200]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 800105c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001060:	4a30      	ldr	r2, [pc, #192]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800106a:	4b2e      	ldr	r3, [pc, #184]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 800106c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001078:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800107c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001092:	230a      	movs	r3, #10
 8001094:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800109c:	4619      	mov	r1, r3
 800109e:	4822      	ldr	r0, [pc, #136]	@ (8001128 <HAL_PCD_MspInit+0x124>)
 80010a0:	f001 f8d6 	bl	8002250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 80010a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 80010b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 80010c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d119      	bne.n	8001104 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 80010d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010d6:	4a13      	ldr	r2, [pc, #76]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80010e0:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 80010e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80010ee:	f003 fa37 	bl	8004560 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 80010f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <HAL_PCD_MspInit+0x120>)
 80010fa:	f023 0304 	bic.w	r3, r3, #4
 80010fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001102:	e001      	b.n	8001108 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001104:	f003 fa2c 	bl	8004560 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2049      	movs	r0, #73	@ 0x49
 800110e:	f000 fa79 	bl	8001604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001112:	2049      	movs	r0, #73	@ 0x49
 8001114:	f000 fa90 	bl	8001638 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001118:	bf00      	nop
 800111a:	37f0      	adds	r7, #240	@ 0xf0
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	42040000 	.word	0x42040000
 8001124:	46020c00 	.word	0x46020c00
 8001128:	42020000 	.word	0x42020000

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <NMI_Handler+0x4>

08001134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <MemManage_Handler+0x4>

08001144 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <UsageFault_Handler+0x4>

08001154 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001182:	f000 f943 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
//  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <OTG_FS_IRQHandler+0x10>)
 8001192:	f002 f806 	bl	80031a2 <HAL_PCD_IRQHandler>
  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200021f8 	.word	0x200021f8

080011a0 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <GPDMA1_Channel12_IRQHandler+0x10>)
 80011a6:	f000 fc35 	bl	8001a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200003c8 	.word	0x200003c8

080011b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <SystemInit+0x68>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011be:	4a17      	ldr	r2, [pc, #92]	@ (800121c <SystemInit+0x68>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <SystemInit+0x6c>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <SystemInit+0x6c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <SystemInit+0x6c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <SystemInit+0x6c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <SystemInit+0x6c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001220 <SystemInit+0x6c>)
 80011e6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80011ea:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80011ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <SystemInit+0x6c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <SystemInit+0x6c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a09      	ldr	r2, [pc, #36]	@ (8001220 <SystemInit+0x6c>)
 80011fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001200:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <SystemInit+0x6c>)
 8001204:	2200      	movs	r2, #0
 8001206:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <SystemInit+0x68>)
 800120a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800120e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00
 8001220:	46020c00 	.word	0x46020c00

08001224 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001224:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800125c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001228:	f7ff ffc4 	bl	80011b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800122c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800122e:	e003      	b.n	8001238 <LoopCopyDataInit>

08001230 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001232:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001234:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001236:	3104      	adds	r1, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001238:	480a      	ldr	r0, [pc, #40]	@ (8001264 <LoopForever+0xa>)
	ldr	r3, =_edata
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <LoopForever+0xe>)
	adds	r2, r0, r1
 800123c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800123e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001240:	d3f6      	bcc.n	8001230 <CopyDataInit>
	ldr	r2, =_sbss
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001244:	e002      	b.n	800124c <LoopFillZerobss>

08001246 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001246:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001248:	f842 3b04 	str.w	r3, [r2], #4

0800124c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <LoopForever+0x16>)
	cmp	r2, r3
 800124e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001250:	d3f9      	bcc.n	8001246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001252:	f00a fded 	bl	800be30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001256:	f7ff f80f 	bl	8000278 <main>

0800125a <LoopForever>:

LoopForever:
    b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800125c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001260:	0800bfb0 	.word	0x0800bfb0
	ldr	r0, =_sdata
 8001264:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001268:	20000197 	.word	0x20000197
	ldr	r2, =_sbss
 800126c:	20000198 	.word	0x20000198
	ldr	r3, = _ebss
 8001270:	200028fd 	.word	0x200028fd

08001274 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_IRQHandler>

08001276 <get_register>:
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
		RegMap->RegisterArray[i].RegData = 0xdeadbeef;
	}
}

uint32_t get_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr){
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
	return (REG_DATA_MASK & RegMap->RegisterArray[reg_addr].RegData);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <set_register>:

void set_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr, uint32_t data){
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	RegMap->RegisterArray[reg_addr].RegData = (REG_DATA_MASK & data);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <HAL_Init+0x50>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a11      	ldr	r2, [pc, #68]	@ (8001310 <HAL_Init+0x50>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 f98c 	bl	80015ee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80012d6:	f004 fa31 	bl	800573c <HAL_RCC_GetSysClockFreq>
 80012da:	4602      	mov	r2, r0
 80012dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <HAL_Init+0x54>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	490c      	ldr	r1, [pc, #48]	@ (8001318 <HAL_Init+0x58>)
 80012e6:	5ccb      	ldrb	r3, [r1, r3]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	4a0b      	ldr	r2, [pc, #44]	@ (800131c <HAL_Init+0x5c>)
 80012ee:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80012f0:	2004      	movs	r0, #4
 80012f2:	f000 f9d1 	bl	8001698 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f6:	200f      	movs	r0, #15
 80012f8:	f000 f812 	bl	8001320 <HAL_InitTick>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e002      	b.n	800130c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001306:	f7ff fc0d 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40022000 	.word	0x40022000
 8001314:	46020c00 	.word	0x46020c00
 8001318:	0800bed8 	.word	0x0800bed8
 800131c:	20000014 	.word	0x20000014

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800132c:	4b33      	ldr	r3, [pc, #204]	@ (80013fc <HAL_InitTick+0xdc>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e05c      	b.n	80013f2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001338:	4b31      	ldr	r3, [pc, #196]	@ (8001400 <HAL_InitTick+0xe0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b04      	cmp	r3, #4
 8001342:	d10c      	bne.n	800135e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001344:	4b2f      	ldr	r3, [pc, #188]	@ (8001404 <HAL_InitTick+0xe4>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <HAL_InitTick+0xdc>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e037      	b.n	80013ce <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800135e:	f000 f9f3 	bl	8001748 <HAL_SYSTICK_GetCLKSourceConfig>
 8001362:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d023      	beq.n	80013b2 <HAL_InitTick+0x92>
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d82d      	bhi.n	80013cc <HAL_InitTick+0xac>
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_InitTick+0x5e>
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d00d      	beq.n	8001398 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800137c:	e026      	b.n	80013cc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800137e:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <HAL_InitTick+0xe4>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <HAL_InitTick+0xdc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800138c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001390:	fbb2 f3f3 	udiv	r3, r2, r3
 8001394:	60fb      	str	r3, [r7, #12]
        break;
 8001396:	e01a      	b.n	80013ce <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <HAL_InitTick+0xdc>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80013a6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	60fb      	str	r3, [r7, #12]
        break;
 80013b0:	e00d      	b.n	80013ce <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_InitTick+0xdc>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80013c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c8:	60fb      	str	r3, [r7, #12]
        break;
 80013ca:	e000      	b.n	80013ce <HAL_InitTick+0xae>
        break;
 80013cc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f940 	bl	8001654 <HAL_SYSTICK_Config>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e009      	b.n	80013f2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013de:	2200      	movs	r2, #0
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	f04f 30ff 	mov.w	r0, #4294967295
 80013e6:	f000 f90d 	bl	8001604 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80013ea:	4a07      	ldr	r2, [pc, #28]	@ (8001408 <HAL_InitTick+0xe8>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000001c 	.word	0x2000001c
 8001400:	e000e010 	.word	0xe000e010
 8001404:	20000014 	.word	0x20000014
 8001408:	20000018 	.word	0x20000018

0800140c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_IncTick+0x20>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_IncTick+0x24>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <HAL_IncTick+0x24>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2000001c 	.word	0x2000001c
 8001430:	20000d24 	.word	0x20000d24

08001434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return uwTick;
 8001438:	4b03      	ldr	r3, [pc, #12]	@ (8001448 <HAL_GetTick+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000d24 	.word	0x20000d24

0800144c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff ffee 	bl	8001434 <HAL_GetTick>
 8001458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001464:	d005      	beq.n	8001472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_Delay+0x44>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001472:	bf00      	nop
 8001474:	f7ff ffde 	bl	8001434 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	d8f7      	bhi.n	8001474 <HAL_Delay+0x28>
  {
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000001c 	.word	0x2000001c

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	@ (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	@ (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	@ (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	@ 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	@ 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff4c 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001612:	f7ff ff63 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001616:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	6978      	ldr	r0, [r7, #20]
 800161e:	f7ff ffb3 	bl	8001588 <NVIC_EncodePriority>
 8001622:	4602      	mov	r2, r0
 8001624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff82 	bl	8001534 <__NVIC_SetPriority>
}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff56 	bl	80014f8 <__NVIC_EnableIRQ>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001664:	d301      	bcc.n	800166a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001666:	2301      	movs	r3, #1
 8001668:	e00d      	b.n	8001686 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <HAL_SYSTICK_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_SYSTICK_Config+0x40>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_SYSTICK_Config+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a05      	ldr	r2, [pc, #20]	@ (8001694 <HAL_SYSTICK_Config+0x40>)
 800167e:	f043 0303 	orr.w	r3, r3, #3
 8001682:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d844      	bhi.n	8001730 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80016a6:	a201      	add	r2, pc, #4	@ (adr r2, 80016ac <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	080016cf 	.word	0x080016cf
 80016b0:	080016ed 	.word	0x080016ed
 80016b4:	0800170f 	.word	0x0800170f
 80016b8:	08001731 	.word	0x08001731
 80016bc:	080016c1 	.word	0x080016c1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80016c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001740 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	6013      	str	r3, [r2, #0]
      break;
 80016cc:	e031      	b.n	8001732 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001740 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e0:	4a18      	ldr	r2, [pc, #96]	@ (8001744 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016e2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80016ea:	e022      	b.n	8001732 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80016ec:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a13      	ldr	r2, [pc, #76]	@ (8001740 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016f2:	f023 0304 	bic.w	r3, r3, #4
 80016f6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fe:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001702:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001704:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800170c:	e011      	b.n	8001732 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800170e:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a0b      	ldr	r2, [pc, #44]	@ (8001740 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001720:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001724:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001726:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800172a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800172e:	e000      	b.n	8001732 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001730:	bf00      	nop
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010
 8001744:	46020c00 	.word	0x46020c00

08001748 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800174e:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800175a:	2304      	movs	r3, #4
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	e021      	b.n	80017a4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001760:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001766:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800176a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001772:	d011      	beq.n	8001798 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800177a:	d810      	bhi.n	800179e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001788:	d003      	beq.n	8001792 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800178a:	e008      	b.n	800179e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
        break;
 8001790:	e008      	b.n	80017a4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001792:	2301      	movs	r3, #1
 8001794:	607b      	str	r3, [r7, #4]
        break;
 8001796:	e005      	b.n	80017a4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001798:	2302      	movs	r3, #2
 800179a:	607b      	str	r3, [r7, #4]
        break;
 800179c:	e002      	b.n	80017a4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
        break;
 80017a2:	bf00      	nop
    }
  }
  return systick_source;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010
 80017b8:	46020c00 	.word	0x46020c00

080017bc <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff fe36 	bl	8001434 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0db      	b.n	800198c <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001994 <HAL_DMA_Init+0x1d8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	f000 809f 	beq.w	800191e <HAL_DMA_Init+0x162>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a6c      	ldr	r2, [pc, #432]	@ (8001998 <HAL_DMA_Init+0x1dc>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	f000 8099 	beq.w	800191e <HAL_DMA_Init+0x162>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a6a      	ldr	r2, [pc, #424]	@ (800199c <HAL_DMA_Init+0x1e0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	f000 8093 	beq.w	800191e <HAL_DMA_Init+0x162>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a68      	ldr	r2, [pc, #416]	@ (80019a0 <HAL_DMA_Init+0x1e4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	f000 808d 	beq.w	800191e <HAL_DMA_Init+0x162>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a66      	ldr	r2, [pc, #408]	@ (80019a4 <HAL_DMA_Init+0x1e8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	f000 8087 	beq.w	800191e <HAL_DMA_Init+0x162>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a64      	ldr	r2, [pc, #400]	@ (80019a8 <HAL_DMA_Init+0x1ec>)
 8001816:	4293      	cmp	r3, r2
 8001818:	f000 8081 	beq.w	800191e <HAL_DMA_Init+0x162>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a62      	ldr	r2, [pc, #392]	@ (80019ac <HAL_DMA_Init+0x1f0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d07b      	beq.n	800191e <HAL_DMA_Init+0x162>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a61      	ldr	r2, [pc, #388]	@ (80019b0 <HAL_DMA_Init+0x1f4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d076      	beq.n	800191e <HAL_DMA_Init+0x162>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a5f      	ldr	r2, [pc, #380]	@ (80019b4 <HAL_DMA_Init+0x1f8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d071      	beq.n	800191e <HAL_DMA_Init+0x162>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a5e      	ldr	r2, [pc, #376]	@ (80019b8 <HAL_DMA_Init+0x1fc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d06c      	beq.n	800191e <HAL_DMA_Init+0x162>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a5c      	ldr	r2, [pc, #368]	@ (80019bc <HAL_DMA_Init+0x200>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d067      	beq.n	800191e <HAL_DMA_Init+0x162>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a5b      	ldr	r2, [pc, #364]	@ (80019c0 <HAL_DMA_Init+0x204>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d062      	beq.n	800191e <HAL_DMA_Init+0x162>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a59      	ldr	r2, [pc, #356]	@ (80019c4 <HAL_DMA_Init+0x208>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d05d      	beq.n	800191e <HAL_DMA_Init+0x162>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a58      	ldr	r2, [pc, #352]	@ (80019c8 <HAL_DMA_Init+0x20c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d058      	beq.n	800191e <HAL_DMA_Init+0x162>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a56      	ldr	r2, [pc, #344]	@ (80019cc <HAL_DMA_Init+0x210>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d053      	beq.n	800191e <HAL_DMA_Init+0x162>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a55      	ldr	r2, [pc, #340]	@ (80019d0 <HAL_DMA_Init+0x214>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d04e      	beq.n	800191e <HAL_DMA_Init+0x162>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a53      	ldr	r2, [pc, #332]	@ (80019d4 <HAL_DMA_Init+0x218>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d049      	beq.n	800191e <HAL_DMA_Init+0x162>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a52      	ldr	r2, [pc, #328]	@ (80019d8 <HAL_DMA_Init+0x21c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d044      	beq.n	800191e <HAL_DMA_Init+0x162>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a50      	ldr	r2, [pc, #320]	@ (80019dc <HAL_DMA_Init+0x220>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d03f      	beq.n	800191e <HAL_DMA_Init+0x162>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a4f      	ldr	r2, [pc, #316]	@ (80019e0 <HAL_DMA_Init+0x224>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d03a      	beq.n	800191e <HAL_DMA_Init+0x162>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a4d      	ldr	r2, [pc, #308]	@ (80019e4 <HAL_DMA_Init+0x228>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d035      	beq.n	800191e <HAL_DMA_Init+0x162>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a4c      	ldr	r2, [pc, #304]	@ (80019e8 <HAL_DMA_Init+0x22c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d030      	beq.n	800191e <HAL_DMA_Init+0x162>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a4a      	ldr	r2, [pc, #296]	@ (80019ec <HAL_DMA_Init+0x230>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d02b      	beq.n	800191e <HAL_DMA_Init+0x162>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a49      	ldr	r2, [pc, #292]	@ (80019f0 <HAL_DMA_Init+0x234>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d026      	beq.n	800191e <HAL_DMA_Init+0x162>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a47      	ldr	r2, [pc, #284]	@ (80019f4 <HAL_DMA_Init+0x238>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d021      	beq.n	800191e <HAL_DMA_Init+0x162>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a46      	ldr	r2, [pc, #280]	@ (80019f8 <HAL_DMA_Init+0x23c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d01c      	beq.n	800191e <HAL_DMA_Init+0x162>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a44      	ldr	r2, [pc, #272]	@ (80019fc <HAL_DMA_Init+0x240>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d017      	beq.n	800191e <HAL_DMA_Init+0x162>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a43      	ldr	r2, [pc, #268]	@ (8001a00 <HAL_DMA_Init+0x244>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d012      	beq.n	800191e <HAL_DMA_Init+0x162>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a41      	ldr	r2, [pc, #260]	@ (8001a04 <HAL_DMA_Init+0x248>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_DMA_Init+0x162>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a40      	ldr	r2, [pc, #256]	@ (8001a08 <HAL_DMA_Init+0x24c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d008      	beq.n	800191e <HAL_DMA_Init+0x162>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3e      	ldr	r2, [pc, #248]	@ (8001a0c <HAL_DMA_Init+0x250>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d003      	beq.n	800191e <HAL_DMA_Init+0x162>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a10 <HAL_DMA_Init+0x254>)
 800191c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2202      	movs	r2, #2
 800192a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 0206 	orr.w	r2, r2, #6
 800193c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800193e:	e00f      	b.n	8001960 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001940:	f7ff fd78 	bl	8001434 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b05      	cmp	r3, #5
 800194c:	d908      	bls.n	8001960 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2210      	movs	r2, #16
 8001952:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2203      	movs	r2, #3
 8001958:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e015      	b.n	800198c <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1e8      	bne.n	8001940 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f9ee 	bl	8001d50 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40020050 	.word	0x40020050
 8001998:	50020050 	.word	0x50020050
 800199c:	400200d0 	.word	0x400200d0
 80019a0:	500200d0 	.word	0x500200d0
 80019a4:	40020150 	.word	0x40020150
 80019a8:	50020150 	.word	0x50020150
 80019ac:	400201d0 	.word	0x400201d0
 80019b0:	500201d0 	.word	0x500201d0
 80019b4:	40020250 	.word	0x40020250
 80019b8:	50020250 	.word	0x50020250
 80019bc:	400202d0 	.word	0x400202d0
 80019c0:	500202d0 	.word	0x500202d0
 80019c4:	40020350 	.word	0x40020350
 80019c8:	50020350 	.word	0x50020350
 80019cc:	400203d0 	.word	0x400203d0
 80019d0:	500203d0 	.word	0x500203d0
 80019d4:	40020450 	.word	0x40020450
 80019d8:	50020450 	.word	0x50020450
 80019dc:	400204d0 	.word	0x400204d0
 80019e0:	500204d0 	.word	0x500204d0
 80019e4:	40020550 	.word	0x40020550
 80019e8:	50020550 	.word	0x50020550
 80019ec:	400205d0 	.word	0x400205d0
 80019f0:	500205d0 	.word	0x500205d0
 80019f4:	40020650 	.word	0x40020650
 80019f8:	50020650 	.word	0x50020650
 80019fc:	400206d0 	.word	0x400206d0
 8001a00:	500206d0 	.word	0x500206d0
 8001a04:	40020750 	.word	0x40020750
 8001a08:	50020750 	.word	0x50020750
 8001a0c:	400207d0 	.word	0x400207d0
 8001a10:	500207d0 	.word	0x500207d0

08001a14 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001a24:	f023 030f 	bic.w	r3, r3, #15
 8001a28:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a32:	3b50      	subs	r3, #80	@ 0x50
 8001a34:	09db      	lsrs	r3, r3, #7
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 813b 	beq.w	8001cca <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d011      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00a      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a78:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d011      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aaa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab0:	f043 0202 	orr.w	r2, r3, #2
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d011      	beq.n	8001aea <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00a      	beq.n	8001aea <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001adc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae2:	f043 0204 	orr.w	r2, r3, #4
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d011      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00a      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b0e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b14:	f043 0208 	orr.w	r2, r3, #8
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d013      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00c      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b40:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d04c      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d045      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b76:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d12e      	bne.n	8001be2 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b92:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0202 	orr.w	r2, r2, #2
 8001ba2:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d07a      	beq.n	8001cce <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
        }

        return;
 8001be0:	e075      	b.n	8001cce <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2205      	movs	r2, #5
 8001be6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d039      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d032      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d012      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d116      	bne.n	8001c5a <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d111      	bne.n	8001c5a <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c42:	2201      	movs	r2, #1
 8001c44:	731a      	strb	r2, [r3, #12]
 8001c46:	e008      	b.n	8001c5a <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001c62:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d025      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0202 	orr.w	r2, r2, #2
 8001c92:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cac:	2201      	movs	r2, #1
 8001cae:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d007      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
 8001cc8:	e002      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001cca:	bf00      	nop
 8001ccc:	e000      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001cce:	bf00      	nop
    }
  }
}
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e02b      	b.n	8001d42 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001cf2:	f023 030f 	bic.w	r3, r3, #15
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d00:	3b50      	subs	r3, #80	@ 0x50
 8001d02:	09db      	lsrs	r3, r3, #7
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	2201      	movs	r2, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f003 0311 	and.w	r3, r3, #17
 8001d20:	2b11      	cmp	r3, #17
 8001d22:	d106      	bne.n	8001d32 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	e006      	b.n	8001d40 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a53      	ldr	r2, [pc, #332]	@ (8001edc <DMA_Init+0x18c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	f000 80a0 	beq.w	8001ed6 <DMA_Init+0x186>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a51      	ldr	r2, [pc, #324]	@ (8001ee0 <DMA_Init+0x190>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	f000 809a 	beq.w	8001ed6 <DMA_Init+0x186>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee4 <DMA_Init+0x194>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	f000 8094 	beq.w	8001ed6 <DMA_Init+0x186>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee8 <DMA_Init+0x198>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	f000 808e 	beq.w	8001ed6 <DMA_Init+0x186>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a4b      	ldr	r2, [pc, #300]	@ (8001eec <DMA_Init+0x19c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	f000 8088 	beq.w	8001ed6 <DMA_Init+0x186>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a49      	ldr	r2, [pc, #292]	@ (8001ef0 <DMA_Init+0x1a0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	f000 8082 	beq.w	8001ed6 <DMA_Init+0x186>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a47      	ldr	r2, [pc, #284]	@ (8001ef4 <DMA_Init+0x1a4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d07c      	beq.n	8001ed6 <DMA_Init+0x186>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a45      	ldr	r2, [pc, #276]	@ (8001ef8 <DMA_Init+0x1a8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d077      	beq.n	8001ed6 <DMA_Init+0x186>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a44      	ldr	r2, [pc, #272]	@ (8001efc <DMA_Init+0x1ac>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d072      	beq.n	8001ed6 <DMA_Init+0x186>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a42      	ldr	r2, [pc, #264]	@ (8001f00 <DMA_Init+0x1b0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d06d      	beq.n	8001ed6 <DMA_Init+0x186>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a41      	ldr	r2, [pc, #260]	@ (8001f04 <DMA_Init+0x1b4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d068      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a3f      	ldr	r2, [pc, #252]	@ (8001f08 <DMA_Init+0x1b8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d063      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a3e      	ldr	r2, [pc, #248]	@ (8001f0c <DMA_Init+0x1bc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d05e      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f10 <DMA_Init+0x1c0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d059      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3b      	ldr	r2, [pc, #236]	@ (8001f14 <DMA_Init+0x1c4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d054      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a39      	ldr	r2, [pc, #228]	@ (8001f18 <DMA_Init+0x1c8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d04f      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a38      	ldr	r2, [pc, #224]	@ (8001f1c <DMA_Init+0x1cc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04a      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a36      	ldr	r2, [pc, #216]	@ (8001f20 <DMA_Init+0x1d0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d045      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a35      	ldr	r2, [pc, #212]	@ (8001f24 <DMA_Init+0x1d4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d040      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a33      	ldr	r2, [pc, #204]	@ (8001f28 <DMA_Init+0x1d8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d03b      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <DMA_Init+0x1dc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d036      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a30      	ldr	r2, [pc, #192]	@ (8001f30 <DMA_Init+0x1e0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d031      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a2f      	ldr	r2, [pc, #188]	@ (8001f34 <DMA_Init+0x1e4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d02c      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2d      	ldr	r2, [pc, #180]	@ (8001f38 <DMA_Init+0x1e8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d027      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <DMA_Init+0x1ec>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2a      	ldr	r2, [pc, #168]	@ (8001f40 <DMA_Init+0x1f0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01d      	beq.n	8001ed6 <DMA_Init+0x186>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a29      	ldr	r2, [pc, #164]	@ (8001f44 <DMA_Init+0x1f4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d018      	beq.n	8001ed6 <DMA_Init+0x186>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a27      	ldr	r2, [pc, #156]	@ (8001f48 <DMA_Init+0x1f8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <DMA_Init+0x186>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a26      	ldr	r2, [pc, #152]	@ (8001f4c <DMA_Init+0x1fc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00e      	beq.n	8001ed6 <DMA_Init+0x186>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a24      	ldr	r2, [pc, #144]	@ (8001f50 <DMA_Init+0x200>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d009      	beq.n	8001ed6 <DMA_Init+0x186>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a23      	ldr	r2, [pc, #140]	@ (8001f54 <DMA_Init+0x204>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d004      	beq.n	8001ed6 <DMA_Init+0x186>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a21      	ldr	r2, [pc, #132]	@ (8001f58 <DMA_Init+0x208>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d142      	bne.n	8001f5c <DMA_Init+0x20c>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e041      	b.n	8001f5e <DMA_Init+0x20e>
 8001eda:	bf00      	nop
 8001edc:	40020050 	.word	0x40020050
 8001ee0:	50020050 	.word	0x50020050
 8001ee4:	400200d0 	.word	0x400200d0
 8001ee8:	500200d0 	.word	0x500200d0
 8001eec:	40020150 	.word	0x40020150
 8001ef0:	50020150 	.word	0x50020150
 8001ef4:	400201d0 	.word	0x400201d0
 8001ef8:	500201d0 	.word	0x500201d0
 8001efc:	40020250 	.word	0x40020250
 8001f00:	50020250 	.word	0x50020250
 8001f04:	400202d0 	.word	0x400202d0
 8001f08:	500202d0 	.word	0x500202d0
 8001f0c:	40020350 	.word	0x40020350
 8001f10:	50020350 	.word	0x50020350
 8001f14:	400203d0 	.word	0x400203d0
 8001f18:	500203d0 	.word	0x500203d0
 8001f1c:	40020450 	.word	0x40020450
 8001f20:	50020450 	.word	0x50020450
 8001f24:	400204d0 	.word	0x400204d0
 8001f28:	500204d0 	.word	0x500204d0
 8001f2c:	40020550 	.word	0x40020550
 8001f30:	50020550 	.word	0x50020550
 8001f34:	400205d0 	.word	0x400205d0
 8001f38:	500205d0 	.word	0x500205d0
 8001f3c:	40020650 	.word	0x40020650
 8001f40:	50020650 	.word	0x50020650
 8001f44:	400206d0 	.word	0x400206d0
 8001f48:	500206d0 	.word	0x500206d0
 8001f4c:	40020750 	.word	0x40020750
 8001f50:	50020750 	.word	0x50020750
 8001f54:	400207d0 	.word	0x400207d0
 8001f58:	500207d0 	.word	0x500207d0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d012      	beq.n	8001f88 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	051b      	lsls	r3, r3, #20
 8001f6e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001f72:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001f80:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fba:	f040 80b0 	bne.w	800211e <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a82      	ldr	r2, [pc, #520]	@ (80021cc <DMA_Init+0x47c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	f000 80a0 	beq.w	800210a <DMA_Init+0x3ba>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a80      	ldr	r2, [pc, #512]	@ (80021d0 <DMA_Init+0x480>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	f000 809a 	beq.w	800210a <DMA_Init+0x3ba>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7e      	ldr	r2, [pc, #504]	@ (80021d4 <DMA_Init+0x484>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	f000 8094 	beq.w	800210a <DMA_Init+0x3ba>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80021d8 <DMA_Init+0x488>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	f000 808e 	beq.w	800210a <DMA_Init+0x3ba>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7a      	ldr	r2, [pc, #488]	@ (80021dc <DMA_Init+0x48c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	f000 8088 	beq.w	800210a <DMA_Init+0x3ba>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a78      	ldr	r2, [pc, #480]	@ (80021e0 <DMA_Init+0x490>)
 8002000:	4293      	cmp	r3, r2
 8002002:	f000 8082 	beq.w	800210a <DMA_Init+0x3ba>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a76      	ldr	r2, [pc, #472]	@ (80021e4 <DMA_Init+0x494>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d07c      	beq.n	800210a <DMA_Init+0x3ba>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a74      	ldr	r2, [pc, #464]	@ (80021e8 <DMA_Init+0x498>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d077      	beq.n	800210a <DMA_Init+0x3ba>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a73      	ldr	r2, [pc, #460]	@ (80021ec <DMA_Init+0x49c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d072      	beq.n	800210a <DMA_Init+0x3ba>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a71      	ldr	r2, [pc, #452]	@ (80021f0 <DMA_Init+0x4a0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d06d      	beq.n	800210a <DMA_Init+0x3ba>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a70      	ldr	r2, [pc, #448]	@ (80021f4 <DMA_Init+0x4a4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d068      	beq.n	800210a <DMA_Init+0x3ba>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a6e      	ldr	r2, [pc, #440]	@ (80021f8 <DMA_Init+0x4a8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d063      	beq.n	800210a <DMA_Init+0x3ba>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6d      	ldr	r2, [pc, #436]	@ (80021fc <DMA_Init+0x4ac>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d05e      	beq.n	800210a <DMA_Init+0x3ba>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a6b      	ldr	r2, [pc, #428]	@ (8002200 <DMA_Init+0x4b0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d059      	beq.n	800210a <DMA_Init+0x3ba>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6a      	ldr	r2, [pc, #424]	@ (8002204 <DMA_Init+0x4b4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d054      	beq.n	800210a <DMA_Init+0x3ba>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a68      	ldr	r2, [pc, #416]	@ (8002208 <DMA_Init+0x4b8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d04f      	beq.n	800210a <DMA_Init+0x3ba>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a67      	ldr	r2, [pc, #412]	@ (800220c <DMA_Init+0x4bc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d04a      	beq.n	800210a <DMA_Init+0x3ba>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a65      	ldr	r2, [pc, #404]	@ (8002210 <DMA_Init+0x4c0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d045      	beq.n	800210a <DMA_Init+0x3ba>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a64      	ldr	r2, [pc, #400]	@ (8002214 <DMA_Init+0x4c4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d040      	beq.n	800210a <DMA_Init+0x3ba>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a62      	ldr	r2, [pc, #392]	@ (8002218 <DMA_Init+0x4c8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d03b      	beq.n	800210a <DMA_Init+0x3ba>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a61      	ldr	r2, [pc, #388]	@ (800221c <DMA_Init+0x4cc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d036      	beq.n	800210a <DMA_Init+0x3ba>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a5f      	ldr	r2, [pc, #380]	@ (8002220 <DMA_Init+0x4d0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d031      	beq.n	800210a <DMA_Init+0x3ba>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002224 <DMA_Init+0x4d4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d02c      	beq.n	800210a <DMA_Init+0x3ba>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a5c      	ldr	r2, [pc, #368]	@ (8002228 <DMA_Init+0x4d8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d027      	beq.n	800210a <DMA_Init+0x3ba>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a5b      	ldr	r2, [pc, #364]	@ (800222c <DMA_Init+0x4dc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d022      	beq.n	800210a <DMA_Init+0x3ba>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a59      	ldr	r2, [pc, #356]	@ (8002230 <DMA_Init+0x4e0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01d      	beq.n	800210a <DMA_Init+0x3ba>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a58      	ldr	r2, [pc, #352]	@ (8002234 <DMA_Init+0x4e4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d018      	beq.n	800210a <DMA_Init+0x3ba>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a56      	ldr	r2, [pc, #344]	@ (8002238 <DMA_Init+0x4e8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <DMA_Init+0x3ba>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a55      	ldr	r2, [pc, #340]	@ (800223c <DMA_Init+0x4ec>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00e      	beq.n	800210a <DMA_Init+0x3ba>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a53      	ldr	r2, [pc, #332]	@ (8002240 <DMA_Init+0x4f0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d009      	beq.n	800210a <DMA_Init+0x3ba>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a52      	ldr	r2, [pc, #328]	@ (8002244 <DMA_Init+0x4f4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d004      	beq.n	800210a <DMA_Init+0x3ba>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a50      	ldr	r2, [pc, #320]	@ (8002248 <DMA_Init+0x4f8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <DMA_Init+0x3be>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <DMA_Init+0x3c0>
 800210e:	2300      	movs	r3, #0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00d      	beq.n	8002130 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e008      	b.n	8002130 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002126:	d103      	bne.n	8002130 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002136:	4b45      	ldr	r3, [pc, #276]	@ (800224c <DMA_Init+0x4fc>)
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	68f9      	ldr	r1, [r7, #12]
 8002140:	430b      	orrs	r3, r1
 8002142:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2200      	movs	r2, #0
 800214a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a36      	ldr	r2, [pc, #216]	@ (800222c <DMA_Init+0x4dc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d022      	beq.n	800219c <DMA_Init+0x44c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a35      	ldr	r2, [pc, #212]	@ (8002230 <DMA_Init+0x4e0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d01d      	beq.n	800219c <DMA_Init+0x44c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a33      	ldr	r2, [pc, #204]	@ (8002234 <DMA_Init+0x4e4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d018      	beq.n	800219c <DMA_Init+0x44c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a32      	ldr	r2, [pc, #200]	@ (8002238 <DMA_Init+0x4e8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d013      	beq.n	800219c <DMA_Init+0x44c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a30      	ldr	r2, [pc, #192]	@ (800223c <DMA_Init+0x4ec>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00e      	beq.n	800219c <DMA_Init+0x44c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2f      	ldr	r2, [pc, #188]	@ (8002240 <DMA_Init+0x4f0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d009      	beq.n	800219c <DMA_Init+0x44c>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2d      	ldr	r2, [pc, #180]	@ (8002244 <DMA_Init+0x4f4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d004      	beq.n	800219c <DMA_Init+0x44c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a2c      	ldr	r2, [pc, #176]	@ (8002248 <DMA_Init+0x4f8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <DMA_Init+0x450>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <DMA_Init+0x452>
 80021a0:	2300      	movs	r3, #0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40020050 	.word	0x40020050
 80021d0:	50020050 	.word	0x50020050
 80021d4:	400200d0 	.word	0x400200d0
 80021d8:	500200d0 	.word	0x500200d0
 80021dc:	40020150 	.word	0x40020150
 80021e0:	50020150 	.word	0x50020150
 80021e4:	400201d0 	.word	0x400201d0
 80021e8:	500201d0 	.word	0x500201d0
 80021ec:	40020250 	.word	0x40020250
 80021f0:	50020250 	.word	0x50020250
 80021f4:	400202d0 	.word	0x400202d0
 80021f8:	500202d0 	.word	0x500202d0
 80021fc:	40020350 	.word	0x40020350
 8002200:	50020350 	.word	0x50020350
 8002204:	400203d0 	.word	0x400203d0
 8002208:	500203d0 	.word	0x500203d0
 800220c:	40020450 	.word	0x40020450
 8002210:	50020450 	.word	0x50020450
 8002214:	400204d0 	.word	0x400204d0
 8002218:	500204d0 	.word	0x500204d0
 800221c:	40020550 	.word	0x40020550
 8002220:	50020550 	.word	0x50020550
 8002224:	400205d0 	.word	0x400205d0
 8002228:	500205d0 	.word	0x500205d0
 800222c:	40020650 	.word	0x40020650
 8002230:	50020650 	.word	0x50020650
 8002234:	400206d0 	.word	0x400206d0
 8002238:	500206d0 	.word	0x500206d0
 800223c:	40020750 	.word	0x40020750
 8002240:	50020750 	.word	0x50020750
 8002244:	400207d0 	.word	0x400207d0
 8002248:	500207d0 	.word	0x500207d0
 800224c:	3cc03180 	.word	0x3cc03180

08002250 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	@ 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002262:	e1ba      	b.n	80025da <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 81aa 	beq.w	80025d4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a55      	ldr	r2, [pc, #340]	@ (80023d8 <HAL_GPIO_Init+0x188>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d15d      	bne.n	8002344 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800228e:	2201      	movs	r2, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	4013      	ands	r3, r2
 800229c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0201 	and.w	r2, r3, #1
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80022b8:	4a48      	ldr	r2, [pc, #288]	@ (80023dc <HAL_GPIO_Init+0x18c>)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022c0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80022c2:	4a46      	ldr	r2, [pc, #280]	@ (80023dc <HAL_GPIO_Init+0x18c>)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	3208      	adds	r2, #8
 80022d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022da:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220b      	movs	r2, #11
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	4313      	orrs	r3, r2
 8002304:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	3208      	adds	r2, #8
 800230e:	69f9      	ldr	r1, [r7, #28]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	4013      	ands	r3, r2
 800232a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2202      	movs	r2, #2
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	4313      	orrs	r3, r2
 800233a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e067      	b.n	8002414 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x104>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b12      	cmp	r3, #18
 8002352:	d145      	bne.n	80023e0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	4013      	ands	r3, r2
 8002376:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f003 020f 	and.w	r2, r3, #15
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	4313      	orrs	r3, r2
 8002390:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	69f9      	ldr	r1, [r7, #28]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e01e      	b.n	8002414 <HAL_GPIO_Init+0x1c4>
 80023d6:	bf00      	nop
 80023d8:	46020000 	.word	0x46020000
 80023dc:	0800bf28 	.word	0x0800bf28
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	4313      	orrs	r3, r2
 800240c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d00b      	beq.n	8002434 <HAL_GPIO_Init+0x1e4>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d007      	beq.n	8002434 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002428:	2b11      	cmp	r3, #17
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b12      	cmp	r3, #18
 8002432:	d130      	bne.n	8002496 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	4013      	ands	r3, r2
 800244a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	4313      	orrs	r3, r2
 800245c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800246a:	2201      	movs	r2, #1
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	4013      	ands	r3, r2
 8002478:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0201 	and.w	r2, r3, #1
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	4313      	orrs	r3, r2
 800248e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d017      	beq.n	80024ce <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d07c      	beq.n	80025d4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80024da:	4a47      	ldr	r2, [pc, #284]	@ (80025f8 <HAL_GPIO_Init+0x3a8>)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3318      	adds	r3, #24
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0a9a      	lsrs	r2, r3, #10
 8002502:	4b3e      	ldr	r3, [pc, #248]	@ (80025fc <HAL_GPIO_Init+0x3ac>)
 8002504:	4013      	ands	r3, r2
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	f002 0203 	and.w	r2, r2, #3
 800250c:	00d2      	lsls	r2, r2, #3
 800250e:	4093      	lsls	r3, r2
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	4313      	orrs	r3, r2
 8002514:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002516:	4938      	ldr	r1, [pc, #224]	@ (80025f8 <HAL_GPIO_Init+0x3a8>)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3318      	adds	r3, #24
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002524:	4b34      	ldr	r3, [pc, #208]	@ (80025f8 <HAL_GPIO_Init+0x3a8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	4013      	ands	r3, r2
 8002532:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002548:	4a2b      	ldr	r2, [pc, #172]	@ (80025f8 <HAL_GPIO_Init+0x3a8>)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800254e:	4b2a      	ldr	r3, [pc, #168]	@ (80025f8 <HAL_GPIO_Init+0x3a8>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	4013      	ands	r3, r2
 800255c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002572:	4a21      	ldr	r2, [pc, #132]	@ (80025f8 <HAL_GPIO_Init+0x3a8>)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002578:	4b1f      	ldr	r3, [pc, #124]	@ (80025f8 <HAL_GPIO_Init+0x3a8>)
 800257a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800257e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43db      	mvns	r3, r3
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	4013      	ands	r3, r2
 8002588:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800259e:	4a16      	ldr	r2, [pc, #88]	@ (80025f8 <HAL_GPIO_Init+0x3a8>)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80025a6:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <HAL_GPIO_Init+0x3a8>)
 80025a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80025cc:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <HAL_GPIO_Init+0x3a8>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f47f ae3d 	bne.w	8002264 <HAL_GPIO_Init+0x14>
  }
}
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	3724      	adds	r7, #36	@ 0x24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	46022000 	.word	0x46022000
 80025fc:	002f7f7f 	.word	0x002f7f7f

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800261c:	e002      	b.n	8002624 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e08d      	b.n	800275e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fa80 	bl	8000b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	@ 0x24
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002680:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002690:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d107      	bne.n	80026aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	e006      	b.n	80026b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d108      	bne.n	80026d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	e007      	b.n	80026e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002704:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69d9      	ldr	r1, [r3, #28]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1a      	ldr	r2, [r3, #32]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	461a      	mov	r2, r3
 8002774:	460b      	mov	r3, r1
 8002776:	817b      	strh	r3, [r7, #10]
 8002778:	4613      	mov	r3, r2
 800277a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b20      	cmp	r3, #32
 8002786:	f040 80da 	bne.w	800293e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_I2C_Master_Transmit+0x30>
 8002794:	2302      	movs	r3, #2
 8002796:	e0d3      	b.n	8002940 <HAL_I2C_Master_Transmit+0x1d8>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027a0:	f7fe fe48 	bl	8001434 <HAL_GetTick>
 80027a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2319      	movs	r3, #25
 80027ac:	2201      	movs	r2, #1
 80027ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f8f0 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e0be      	b.n	8002940 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2221      	movs	r2, #33	@ 0x21
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2210      	movs	r2, #16
 80027ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	893a      	ldrh	r2, [r7, #8]
 80027e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2bff      	cmp	r3, #255	@ 0xff
 80027f2:	d90e      	bls.n	8002812 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	22ff      	movs	r2, #255	@ 0xff
 80027f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	8979      	ldrh	r1, [r7, #10]
 8002802:	4b51      	ldr	r3, [pc, #324]	@ (8002948 <HAL_I2C_Master_Transmit+0x1e0>)
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fa88 	bl	8002d20 <I2C_TransferConfig>
 8002810:	e06c      	b.n	80028ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	b2da      	uxtb	r2, r3
 8002822:	8979      	ldrh	r1, [r7, #10]
 8002824:	4b48      	ldr	r3, [pc, #288]	@ (8002948 <HAL_I2C_Master_Transmit+0x1e0>)
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fa77 	bl	8002d20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002832:	e05b      	b.n	80028ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	6a39      	ldr	r1, [r7, #32]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f906 	bl	8002a4a <I2C_WaitOnTXISFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e07b      	b.n	8002940 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d034      	beq.n	80028ec <HAL_I2C_Master_Transmit+0x184>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d130      	bne.n	80028ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	@ 0x80
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f87f 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e04d      	b.n	8002940 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2bff      	cmp	r3, #255	@ 0xff
 80028ac:	d90e      	bls.n	80028cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	22ff      	movs	r2, #255	@ 0xff
 80028b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	8979      	ldrh	r1, [r7, #10]
 80028bc:	2300      	movs	r3, #0
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fa2b 	bl	8002d20 <I2C_TransferConfig>
 80028ca:	e00f      	b.n	80028ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	8979      	ldrh	r1, [r7, #10]
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fa1a 	bl	8002d20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d19e      	bne.n	8002834 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f8ec 	bl	8002ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e01a      	b.n	8002940 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2220      	movs	r2, #32
 8002910:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <HAL_I2C_Master_Transmit+0x1e4>)
 800291e:	400b      	ands	r3, r1
 8002920:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	80002000 	.word	0x80002000
 800294c:	fe00e800 	.word	0xfe00e800

08002950 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d103      	bne.n	800296e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d007      	beq.n	800298c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	619a      	str	r2, [r3, #24]
  }
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a8:	e03b      	b.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f8d6 	bl	8002b60 <I2C_IsErrorOccurred>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e041      	b.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d02d      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7fe fd35 	bl	8001434 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d122      	bne.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d113      	bne.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699a      	ldr	r2, [r3, #24]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	bf0c      	ite	eq
 8002a32:	2301      	moveq	r3, #1
 8002a34:	2300      	movne	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d0b4      	beq.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a56:	e033      	b.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f87f 	bl	8002b60 <I2C_IsErrorOccurred>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e031      	b.n	8002ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d025      	beq.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a74:	f7fe fcde 	bl	8001434 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d302      	bcc.n	8002a8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11a      	bne.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d013      	beq.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e007      	b.n	8002ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d1c4      	bne.n	8002a58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae4:	e02f      	b.n	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f838 	bl	8002b60 <I2C_IsErrorOccurred>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e02d      	b.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7fe fc9b 	bl	8001434 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d11a      	bne.n	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d013      	beq.n	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	f043 0220 	orr.w	r2, r3, #32
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e007      	b.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d1c8      	bne.n	8002ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	@ 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d068      	beq.n	8002c5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2210      	movs	r2, #16
 8002b92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b94:	e049      	b.n	8002c2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d045      	beq.n	8002c2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	f7fe fc49 	bl	8001434 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <I2C_IsErrorOccurred+0x54>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d13a      	bne.n	8002c2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bd6:	d121      	bne.n	8002c1c <I2C_IsErrorOccurred+0xbc>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bde:	d01d      	beq.n	8002c1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d01a      	beq.n	8002c1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bf4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bf6:	f7fe fc1d 	bl	8001434 <HAL_GetTick>
 8002bfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bfc:	e00e      	b.n	8002c1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bfe:	f7fe fc19 	bl	8001434 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b19      	cmp	r3, #25
 8002c0a:	d907      	bls.n	8002c1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f043 0320 	orr.w	r3, r3, #32
 8002c12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c1a:	e006      	b.n	8002c2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d1e9      	bne.n	8002bfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d003      	beq.n	8002c40 <I2C_IsErrorOccurred+0xe0>
 8002c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0aa      	beq.n	8002b96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ca2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01c      	beq.n	8002d0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff fe3b 	bl	8002950 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <I2C_IsErrorOccurred+0x1bc>)
 8002ce6:	400b      	ands	r3, r1
 8002ce8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3728      	adds	r7, #40	@ 0x28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	fe00e800 	.word	0xfe00e800

08002d20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	817b      	strh	r3, [r7, #10]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d38:	7a7b      	ldrb	r3, [r7, #9]
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d40:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d4e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	0d5b      	lsrs	r3, r3, #21
 8002d5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d5e:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <I2C_TransferConfig+0x60>)
 8002d60:	430b      	orrs	r3, r1
 8002d62:	43db      	mvns	r3, r3
 8002d64:	ea02 0103 	and.w	r1, r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	03ff63ff 	.word	0x03ff63ff

08002d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d138      	bne.n	8002e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e032      	b.n	8002e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	@ 0x24
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d139      	bne.n	8002ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e033      	b.n	8002ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2224      	movs	r2, #36	@ 0x24
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e007      	b.n	8002ee2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002ed2:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0204 	bic.w	r2, r3, #4
 8002eda:	4905      	ldr	r1, [pc, #20]	@ (8002ef0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40030400 	.word	0x40030400

08002ef4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_ICACHE_Enable+0x1c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a04      	ldr	r2, [pc, #16]	@ (8002f10 <HAL_ICACHE_Enable+0x1c>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40030400 	.word	0x40030400

08002f14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e108      	b.n	8003138 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7fe f85f 	bl	8001004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2203      	movs	r2, #3
 8002f4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	4a7b      	ldr	r2, [pc, #492]	@ (8003140 <HAL_PCD_Init+0x22c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d102      	bne.n	8002f5c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f005 fb32 	bl	80085ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7c1a      	ldrb	r2, [r3, #16]
 8002f6e:	f88d 2000 	strb.w	r2, [sp]
 8002f72:	3304      	adds	r3, #4
 8002f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f76:	f005 fa47 	bl	8008408 <USB_CoreInit>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0d5      	b.n	8003138 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f005 fb2a 	bl	80085ec <USB_SetCurrentMode>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0c6      	b.n	8003138 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e04a      	b.n	8003046 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3315      	adds	r3, #21
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3314      	adds	r3, #20
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	b298      	uxth	r0, r3
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	332e      	adds	r3, #46	@ 0x2e
 8002fec:	4602      	mov	r2, r0
 8002fee:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3318      	adds	r3, #24
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	331c      	adds	r3, #28
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	3320      	adds	r3, #32
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3324      	adds	r3, #36	@ 0x24
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	3301      	adds	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	791b      	ldrb	r3, [r3, #4]
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	429a      	cmp	r2, r3
 800304e:	d3af      	bcc.n	8002fb0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	e044      	b.n	80030e0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	3301      	adds	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	791b      	ldrb	r3, [r3, #4]
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d3b5      	bcc.n	8003056 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7c1a      	ldrb	r2, [r3, #16]
 80030f2:	f88d 2000 	strb.w	r2, [sp]
 80030f6:	3304      	adds	r3, #4
 80030f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fa:	f005 fac3 	bl	8008684 <USB_DevInit>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e013      	b.n	8003138 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7b1b      	ldrb	r3, [r3, #12]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f001 f96a 	bl	8004400 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f006 faee 	bl	8009712 <USB_DevDisconnect>

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	42040000 	.word	0x42040000

08003144 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_PCD_Start+0x1c>
 800315c:	2302      	movs	r3, #2
 800315e:	e01c      	b.n	800319a <HAL_PCD_Start+0x56>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	7b5b      	ldrb	r3, [r3, #13]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003174:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f005 fa11 	bl	80085a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f006 faa0 	bl	80096d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031a2:	b590      	push	{r4, r7, lr}
 80031a4:	b08d      	sub	sp, #52	@ 0x34
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f006 fb5e 	bl	800987a <USB_GetMode>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 84b9 	bne.w	8003b38 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f006 fac2 	bl	8009754 <USB_ReadInterrupts>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 84af 	beq.w	8003b36 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f006 faaf 	bl	8009754 <USB_ReadInterrupts>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d107      	bne.n	8003210 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f002 0202 	and.w	r2, r2, #2
 800320e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f006 fa9d 	bl	8009754 <USB_ReadInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b10      	cmp	r3, #16
 8003222:	d161      	bne.n	80032e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0210 	bic.w	r2, r2, #16
 8003232:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f003 020f 	and.w	r2, r3, #15
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	4413      	add	r3, r2
 8003250:	3304      	adds	r3, #4
 8003252:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	0c5b      	lsrs	r3, r3, #17
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	2b02      	cmp	r3, #2
 800325e:	d124      	bne.n	80032aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d035      	beq.n	80032d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800327a:	b29b      	uxth	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	6a38      	ldr	r0, [r7, #32]
 8003280:	f006 f8d4 	bl	800942c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003290:	441a      	add	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032a2:	441a      	add	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	615a      	str	r2, [r3, #20]
 80032a8:	e016      	b.n	80032d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	0c5b      	lsrs	r3, r3, #17
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d110      	bne.n	80032d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032bc:	2208      	movs	r2, #8
 80032be:	4619      	mov	r1, r3
 80032c0:	6a38      	ldr	r0, [r7, #32]
 80032c2:	f006 f8b3 	bl	800942c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d2:	441a      	add	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0210 	orr.w	r2, r2, #16
 80032e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f006 fa31 	bl	8009754 <USB_ReadInterrupts>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032fc:	f040 80a7 	bne.w	800344e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f006 fa36 	bl	800977a <USB_ReadDevAllOutEpInterrupt>
 800330e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003310:	e099      	b.n	8003446 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 808e 	beq.w	800343a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f006 fa5a 	bl	80097e2 <USB_ReadDevOutEPInterrupt>
 800332e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003346:	461a      	mov	r2, r3
 8003348:	2301      	movs	r3, #1
 800334a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800334c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fed0 	bl	80040f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00c      	beq.n	8003378 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800336a:	461a      	mov	r2, r3
 800336c:	2308      	movs	r3, #8
 800336e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003370:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 ffa6 	bl	80042c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800338e:	461a      	mov	r2, r3
 8003390:	2310      	movs	r3, #16
 8003392:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d030      	beq.n	8003400 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a6:	2b80      	cmp	r3, #128	@ 0x80
 80033a8:	d109      	bne.n	80033be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	3304      	adds	r3, #4
 80033d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	78db      	ldrb	r3, [r3, #3]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d108      	bne.n	80033ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2200      	movs	r2, #0
 80033e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f006 fe7f 	bl	800a0ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fa:	461a      	mov	r2, r3
 80033fc:	2302      	movs	r3, #2
 80033fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003416:	461a      	mov	r2, r3
 8003418:	2320      	movs	r3, #32
 800341a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003432:	461a      	mov	r2, r3
 8003434:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003438:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	3301      	adds	r3, #1
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	f47f af62 	bne.w	8003312 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f006 f97e 	bl	8009754 <USB_ReadInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800345e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003462:	f040 80db 	bne.w	800361c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f006 f99f 	bl	80097ae <USB_ReadDevAllInEpInterrupt>
 8003470:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003476:	e0cd      	b.n	8003614 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80c2 	beq.w	8003608 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f006 f9c5 	bl	800981e <USB_ReadDevInEPInterrupt>
 8003494:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d057      	beq.n	8003550 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	2201      	movs	r2, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69f9      	ldr	r1, [r7, #28]
 80034bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034c0:	4013      	ands	r3, r2
 80034c2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034d0:	461a      	mov	r2, r3
 80034d2:	2301      	movs	r3, #1
 80034d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	799b      	ldrb	r3, [r3, #6]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d132      	bne.n	8003544 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3320      	adds	r3, #32
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4403      	add	r3, r0
 80034fe:	331c      	adds	r3, #28
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4419      	add	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4403      	add	r3, r0
 8003512:	3320      	adds	r3, #32
 8003514:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	2b00      	cmp	r3, #0
 800351a:	d113      	bne.n	8003544 <HAL_PCD_IRQHandler+0x3a2>
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	3324      	adds	r3, #36	@ 0x24
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d108      	bne.n	8003544 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800353c:	461a      	mov	r2, r3
 800353e:	2101      	movs	r1, #1
 8003540:	f006 f9cc 	bl	80098dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	b2db      	uxtb	r3, r3
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f006 fd52 	bl	8009ff4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003566:	461a      	mov	r2, r3
 8003568:	2308      	movs	r3, #8
 800356a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003582:	461a      	mov	r2, r3
 8003584:	2310      	movs	r3, #16
 8003586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359e:	461a      	mov	r2, r3
 80035a0:	2340      	movs	r3, #64	@ 0x40
 80035a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d023      	beq.n	80035f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035b0:	6a38      	ldr	r0, [r7, #32]
 80035b2:	f005 f9b3 	bl	800891c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	3310      	adds	r3, #16
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	3304      	adds	r3, #4
 80035c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d108      	bne.n	80035e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f006 fd96 	bl	800a110 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f0:	461a      	mov	r2, r3
 80035f2:	2302      	movs	r3, #2
 80035f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003600:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fcea 	bl	8003fdc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	3301      	adds	r3, #1
 800360c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800360e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003616:	2b00      	cmp	r3, #0
 8003618:	f47f af2e 	bne.w	8003478 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f006 f897 	bl	8009754 <USB_ReadInterrupts>
 8003626:	4603      	mov	r3, r0
 8003628:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800362c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003630:	d122      	bne.n	8003678 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800364c:	2b01      	cmp	r3, #1
 800364e:	d108      	bne.n	8003662 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003658:	2100      	movs	r1, #0
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f006 ff16 	bl	800a48c <HAL_PCDEx_LPM_Callback>
 8003660:	e002      	b.n	8003668 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f006 fd26 	bl	800a0b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003676:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f006 f869 	bl	8009754 <USB_ReadInterrupts>
 8003682:	4603      	mov	r3, r0
 8003684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800368c:	d112      	bne.n	80036b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d102      	bne.n	80036a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f006 fcee 	bl	800a080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80036b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f006 f84b 	bl	8009754 <USB_ReadInterrupts>
 80036be:	4603      	mov	r3, r0
 80036c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036c8:	d121      	bne.n	800370e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80036d8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d111      	bne.n	8003708 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	f003 020f 	and.w	r2, r3, #15
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80036fe:	2101      	movs	r1, #1
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f006 fec3 	bl	800a48c <HAL_PCDEx_LPM_Callback>
 8003706:	e002      	b.n	800370e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f006 fcb9 	bl	800a080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f006 f81e 	bl	8009754 <USB_ReadInterrupts>
 8003718:	4603      	mov	r3, r0
 800371a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003722:	f040 80b7 	bne.w	8003894 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2110      	movs	r1, #16
 8003740:	4618      	mov	r0, r3
 8003742:	f005 f8eb 	bl	800891c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800374a:	e046      	b.n	80037da <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800374c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003758:	461a      	mov	r2, r3
 800375a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800375e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003770:	0151      	lsls	r1, r2, #5
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	440a      	add	r2, r1
 8003776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800377a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800377e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378c:	461a      	mov	r2, r3
 800378e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003792:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037a4:	0151      	lsls	r1, r2, #5
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	440a      	add	r2, r1
 80037aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c4:	0151      	lsls	r1, r2, #5
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	440a      	add	r2, r1
 80037ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d6:	3301      	adds	r3, #1
 80037d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	791b      	ldrb	r3, [r3, #4]
 80037de:	461a      	mov	r2, r3
 80037e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d3b2      	bcc.n	800374c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037f4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80037f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7bdb      	ldrb	r3, [r3, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003812:	f043 030b 	orr.w	r3, r3, #11
 8003816:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003828:	f043 030b 	orr.w	r3, r3, #11
 800382c:	6453      	str	r3, [r2, #68]	@ 0x44
 800382e:	e015      	b.n	800385c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800383e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003842:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003846:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003856:	f043 030b 	orr.w	r3, r3, #11
 800385a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800386a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800386e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800387e:	461a      	mov	r2, r3
 8003880:	f006 f82c 	bl	80098dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f005 ff5b 	bl	8009754 <USB_ReadInterrupts>
 800389e:	4603      	mov	r3, r0
 80038a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a8:	d123      	bne.n	80038f2 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f005 fff1 	bl	8009896 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f005 f8a8 	bl	8008a0e <USB_GetDevSpeed>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681c      	ldr	r4, [r3, #0]
 80038ca:	f002 f839 	bl	8005940 <HAL_RCC_GetHCLKFreq>
 80038ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038d4:	461a      	mov	r2, r3
 80038d6:	4620      	mov	r0, r4
 80038d8:	f004 fdc4 	bl	8008464 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f006 fbb1 	bl	800a044 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80038f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f005 ff2c 	bl	8009754 <USB_ReadInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b08      	cmp	r3, #8
 8003904:	d10a      	bne.n	800391c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f006 fb8e 	bl	800a028 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f002 0208 	and.w	r2, r2, #8
 800391a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f005 ff17 	bl	8009754 <USB_ReadInterrupts>
 8003926:	4603      	mov	r3, r0
 8003928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392c:	2b80      	cmp	r3, #128	@ 0x80
 800392e:	d123      	bne.n	8003978 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800393c:	2301      	movs	r3, #1
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003940:	e014      	b.n	800396c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	b2db      	uxtb	r3, r3
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fb0a 	bl	8003f7a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	3301      	adds	r3, #1
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	791b      	ldrb	r3, [r3, #4]
 8003970:	461a      	mov	r2, r3
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	4293      	cmp	r3, r2
 8003976:	d3e4      	bcc.n	8003942 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f005 fee9 	bl	8009754 <USB_ReadInterrupts>
 8003982:	4603      	mov	r3, r0
 8003984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003988:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800398c:	d13c      	bne.n	8003a08 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800398e:	2301      	movs	r3, #1
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
 8003992:	e02b      	b.n	80039ec <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	3318      	adds	r3, #24
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d115      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039bc:	2b00      	cmp	r3, #0
 80039be:	da12      	bge.n	80039e6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	3317      	adds	r3, #23
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 faca 	bl	8003f7a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	3301      	adds	r3, #1
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	791b      	ldrb	r3, [r3, #4]
 80039f0:	461a      	mov	r2, r3
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d3cd      	bcc.n	8003994 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f005 fea1 	bl	8009754 <USB_ReadInterrupts>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a1c:	d156      	bne.n	8003acc <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a1e:	2301      	movs	r3, #1
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a22:	e045      	b.n	8003ab0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d12e      	bne.n	8003aaa <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	da2b      	bge.n	8003aaa <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	0c1a      	lsrs	r2, r3, #16
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003a5c:	4053      	eors	r3, r2
 8003a5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d121      	bne.n	8003aaa <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a78:	2201      	movs	r2, #1
 8003a7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aa6:	6053      	str	r3, [r2, #4]
            break;
 8003aa8:	e008      	b.n	8003abc <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	3301      	adds	r3, #1
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	791b      	ldrb	r3, [r3, #4]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d3b3      	bcc.n	8003a24 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f005 fe3f 	bl	8009754 <USB_ReadInterrupts>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae0:	d10a      	bne.n	8003af8 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f006 fb26 	bl	800a134 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f005 fe29 	bl	8009754 <USB_ReadInterrupts>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d115      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f006 fb16 	bl	800a150 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6859      	ldr	r1, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	e000      	b.n	8003b38 <HAL_PCD_IRQHandler+0x996>
      return;
 8003b36:	bf00      	nop
    }
  }
}
 8003b38:	3734      	adds	r7, #52	@ 0x34
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd90      	pop	{r4, r7, pc}

08003b3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	460b      	mov	r3, r1
 8003b48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_PCD_SetAddress+0x1a>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e012      	b.n	8003b7e <HAL_PCD_SetAddress+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f005 fd88 	bl	8009684 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	4608      	mov	r0, r1
 8003b90:	4611      	mov	r1, r2
 8003b92:	461a      	mov	r2, r3
 8003b94:	4603      	mov	r3, r0
 8003b96:	70fb      	strb	r3, [r7, #3]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	803b      	strh	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da0f      	bge.n	8003bcc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 020f 	and.w	r2, r3, #15
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	3310      	adds	r3, #16
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	705a      	strb	r2, [r3, #1]
 8003bca:	e00f      	b.n	8003bec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	f003 020f 	and.w	r2, r3, #15
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	3304      	adds	r3, #4
 8003be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003bf8:	883b      	ldrh	r3, [r7, #0]
 8003bfa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	78ba      	ldrb	r2, [r7, #2]
 8003c06:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	785b      	ldrb	r3, [r3, #1]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c1a:	78bb      	ldrb	r3, [r7, #2]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d102      	bne.n	8003c26 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_PCD_EP_Open+0xae>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e00e      	b.n	8003c52 <HAL_PCD_EP_Open+0xcc>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68f9      	ldr	r1, [r7, #12]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f004 ff08 	bl	8008a58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c50:	7afb      	ldrb	r3, [r7, #11]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	da0f      	bge.n	8003c8e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	f003 020f 	and.w	r2, r3, #15
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	3310      	adds	r3, #16
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	3304      	adds	r3, #4
 8003c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	705a      	strb	r2, [r3, #1]
 8003c8c:	e00f      	b.n	8003cae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 020f 	and.w	r2, r3, #15
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_PCD_EP_Close+0x6e>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e00e      	b.n	8003ce6 <HAL_PCD_EP_Close+0x8c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68f9      	ldr	r1, [r7, #12]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f004 ff46 	bl	8008b68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cfe:	7afb      	ldrb	r3, [r7, #11]
 8003d00:	f003 020f 	and.w	r2, r3, #15
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	3304      	adds	r3, #4
 8003d16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2200      	movs	r2, #0
 8003d28:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d30:	7afb      	ldrb	r3, [r7, #11]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	799b      	ldrb	r3, [r3, #6]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d102      	bne.n	8003d4a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	799b      	ldrb	r3, [r3, #6]
 8003d52:	461a      	mov	r2, r3
 8003d54:	6979      	ldr	r1, [r7, #20]
 8003d56:	f004 ffe3 	bl	8008d20 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	f003 020f 	and.w	r2, r3, #15
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	460b      	mov	r3, r1
 8003da2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da4:	7afb      	ldrb	r3, [r7, #11]
 8003da6:	f003 020f 	and.w	r2, r3, #15
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	3310      	adds	r3, #16
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	3304      	adds	r3, #4
 8003dba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd4:	7afb      	ldrb	r3, [r7, #11]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	799b      	ldrb	r3, [r3, #6]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d102      	bne.n	8003dee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	799b      	ldrb	r3, [r3, #6]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6979      	ldr	r1, [r7, #20]
 8003dfa:	f004 ff91 	bl	8008d20 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	7912      	ldrb	r2, [r2, #4]
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e04f      	b.n	8003ec6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	da0f      	bge.n	8003e4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	f003 020f 	and.w	r2, r3, #15
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	3310      	adds	r3, #16
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	3304      	adds	r3, #4
 8003e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	705a      	strb	r2, [r3, #1]
 8003e4c:	e00d      	b.n	8003e6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	3304      	adds	r3, #4
 8003e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_PCD_EP_SetStall+0x82>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e01d      	b.n	8003ec6 <HAL_PCD_EP_SetStall+0xbe>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f005 fb1f 	bl	80094dc <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7999      	ldrb	r1, [r3, #6]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f005 fd10 	bl	80098dc <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	7912      	ldrb	r2, [r2, #4]
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e042      	b.n	8003f72 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	da0f      	bge.n	8003f14 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 020f 	and.w	r2, r3, #15
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	3310      	adds	r3, #16
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4413      	add	r3, r2
 8003f08:	3304      	adds	r3, #4
 8003f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	705a      	strb	r2, [r3, #1]
 8003f12:	e00f      	b.n	8003f34 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	f003 020f 	and.w	r2, r3, #15
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_PCD_EP_ClrStall+0x86>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e00e      	b.n	8003f72 <HAL_PCD_EP_ClrStall+0xa4>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68f9      	ldr	r1, [r7, #12]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f005 fb28 	bl	80095b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	da0c      	bge.n	8003fa8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	f003 020f 	and.w	r2, r3, #15
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	3310      	adds	r3, #16
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e00c      	b.n	8003fc2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	f003 020f 	and.w	r2, r3, #15
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68f9      	ldr	r1, [r7, #12]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f005 f947 	bl	800925c <USB_EPStopXfer>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003fd2:	7afb      	ldrb	r3, [r7, #11]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	@ 0x28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	3310      	adds	r3, #16
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	4413      	add	r3, r2
 8004000:	3304      	adds	r3, #4
 8004002:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d901      	bls.n	8004014 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e06b      	b.n	80040ec <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	429a      	cmp	r2, r3
 8004028:	d902      	bls.n	8004030 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	3303      	adds	r3, #3
 8004034:	089b      	lsrs	r3, r3, #2
 8004036:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004038:	e02a      	b.n	8004090 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	429a      	cmp	r2, r3
 800404e:	d902      	bls.n	8004056 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3303      	adds	r3, #3
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	68d9      	ldr	r1, [r3, #12]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	4603      	mov	r3, r0
 8004072:	6978      	ldr	r0, [r7, #20]
 8004074:	f005 f99c 	bl	80093b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	441a      	add	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	441a      	add	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d809      	bhi.n	80040ba <PCD_WriteEmptyTxFifo+0xde>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d203      	bcs.n	80040ba <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1bf      	bne.n	800403a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d811      	bhi.n	80040ea <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	2201      	movs	r2, #1
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	43db      	mvns	r3, r3
 80040e0:	6939      	ldr	r1, [r7, #16]
 80040e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040e6:	4013      	ands	r3, r2
 80040e8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	333c      	adds	r3, #60	@ 0x3c
 800410c:	3304      	adds	r3, #4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	799b      	ldrb	r3, [r3, #6]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d17b      	bne.n	8004222 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d015      	beq.n	8004160 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	4a61      	ldr	r2, [pc, #388]	@ (80042bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	f240 80b9 	bls.w	80042b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80b3 	beq.w	80042b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004156:	461a      	mov	r2, r3
 8004158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800415c:	6093      	str	r3, [r2, #8]
 800415e:	e0a7      	b.n	80042b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004176:	461a      	mov	r2, r3
 8004178:	2320      	movs	r3, #32
 800417a:	6093      	str	r3, [r2, #8]
 800417c:	e098      	b.n	80042b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	f040 8093 	bne.w	80042b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4a4b      	ldr	r2, [pc, #300]	@ (80042bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d90f      	bls.n	80041b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a8:	461a      	mov	r2, r3
 80041aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ae:	6093      	str	r3, [r2, #8]
 80041b0:	e07e      	b.n	80042b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	4413      	add	r3, r2
 80041c4:	3304      	adds	r3, #4
 80041c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1a      	ldr	r2, [r3, #32]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	0159      	lsls	r1, r3, #5
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	440b      	add	r3, r1
 80041d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041de:	1ad2      	subs	r2, r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d114      	bne.n	8004214 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041fc:	461a      	mov	r2, r3
 80041fe:	2101      	movs	r1, #1
 8004200:	f005 fb6c 	bl	80098dc <USB_EP0_OutStart>
 8004204:	e006      	b.n	8004214 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	441a      	add	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f005 fecf 	bl	8009fbe <HAL_PCD_DataOutStageCallback>
 8004220:	e046      	b.n	80042b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	4a26      	ldr	r2, [pc, #152]	@ (80042c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d124      	bne.n	8004274 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004240:	461a      	mov	r2, r3
 8004242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004246:	6093      	str	r3, [r2, #8]
 8004248:	e032      	b.n	80042b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004260:	461a      	mov	r2, r3
 8004262:	2320      	movs	r3, #32
 8004264:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f005 fea6 	bl	8009fbe <HAL_PCD_DataOutStageCallback>
 8004272:	e01d      	b.n	80042b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d114      	bne.n	80042a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d108      	bne.n	80042a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800429c:	461a      	mov	r2, r3
 800429e:	2100      	movs	r1, #0
 80042a0:	f005 fb1c 	bl	80098dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	4619      	mov	r1, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f005 fe87 	bl	8009fbe <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	4f54300a 	.word	0x4f54300a
 80042c0:	4f54310a 	.word	0x4f54310a

080042c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	333c      	adds	r3, #60	@ 0x3c
 80042dc:	3304      	adds	r3, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4a15      	ldr	r2, [pc, #84]	@ (800434c <PCD_EP_OutSetupPacket_int+0x88>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d90e      	bls.n	8004318 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004310:	461a      	mov	r2, r3
 8004312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004316:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f005 fe3e 	bl	8009f9a <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a0a      	ldr	r2, [pc, #40]	@ (800434c <PCD_EP_OutSetupPacket_int+0x88>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d90c      	bls.n	8004340 <PCD_EP_OutSetupPacket_int+0x7c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	799b      	ldrb	r3, [r3, #6]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d108      	bne.n	8004340 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004338:	461a      	mov	r2, r3
 800433a:	2101      	movs	r1, #1
 800433c:	f005 face 	bl	80098dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	4f54300a 	.word	0x4f54300a

08004350 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
 800435c:	4613      	mov	r3, r2
 800435e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d107      	bne.n	800437e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800436e:	883b      	ldrh	r3, [r7, #0]
 8004370:	0419      	lsls	r1, r3, #16
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	430a      	orrs	r2, r1
 800437a:	629a      	str	r2, [r3, #40]	@ 0x28
 800437c:	e028      	b.n	80043d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004384:	0c1b      	lsrs	r3, r3, #16
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4413      	add	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800438c:	2300      	movs	r3, #0
 800438e:	73fb      	strb	r3, [r7, #15]
 8004390:	e00d      	b.n	80043ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	3340      	adds	r3, #64	@ 0x40
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	0c1b      	lsrs	r3, r3, #16
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4413      	add	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	3301      	adds	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
 80043ae:	7bfa      	ldrb	r2, [r7, #15]
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d3ec      	bcc.n	8004392 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043b8:	883b      	ldrh	r3, [r7, #0]
 80043ba:	0418      	lsls	r0, r3, #16
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6819      	ldr	r1, [r3, #0]
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	4302      	orrs	r2, r0
 80043c8:	3340      	adds	r3, #64	@ 0x40
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004432:	f043 0303 	orr.w	r3, r3, #3
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004450:	4b39      	ldr	r3, [pc, #228]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004454:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004458:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	429a      	cmp	r2, r3
 8004460:	d10b      	bne.n	800447a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004468:	d905      	bls.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800446a:	4b33      	ldr	r3, [pc, #204]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	4a32      	ldr	r2, [pc, #200]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004474:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e057      	b.n	800452a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004480:	d90a      	bls.n	8004498 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004482:	4b2d      	ldr	r3, [pc, #180]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4313      	orrs	r3, r2
 800448e:	4a2a      	ldr	r2, [pc, #168]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004494:	60d3      	str	r3, [r2, #12]
 8004496:	e007      	b.n	80044a8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004498:	4b27      	ldr	r3, [pc, #156]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80044a0:	4925      	ldr	r1, [pc, #148]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80044a8:	4b24      	ldr	r3, [pc, #144]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a24      	ldr	r2, [pc, #144]	@ (8004540 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	2232      	movs	r2, #50	@ 0x32
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	4a21      	ldr	r2, [pc, #132]	@ (8004540 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	099b      	lsrs	r3, r3, #6
 80044c2:	3301      	adds	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80044c6:	e002      	b.n	80044ce <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80044ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d102      	bne.n	80044e0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f3      	bne.n	80044c8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01b      	beq.n	800451e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80044e6:	4b15      	ldr	r3, [pc, #84]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a15      	ldr	r2, [pc, #84]	@ (8004540 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	099b      	lsrs	r3, r3, #6
 80044f2:	2232      	movs	r2, #50	@ 0x32
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	4a11      	ldr	r2, [pc, #68]	@ (8004540 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	099b      	lsrs	r3, r3, #6
 8004500:	3301      	adds	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004504:	e002      	b.n	800450c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3b01      	subs	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800450c:	4b0a      	ldr	r3, [pc, #40]	@ (8004538 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800450e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f3      	bne.n	8004506 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e000      	b.n	800452a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	46020800 	.word	0x46020800
 800453c:	20000014 	.word	0x20000014
 8004540:	10624dd3 	.word	0x10624dd3

08004544 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <HAL_PWREx_GetVoltageRange+0x18>)
 800454a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	46020800 	.word	0x46020800

08004560 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004564:	4b05      	ldr	r3, [pc, #20]	@ (800457c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	4a04      	ldr	r2, [pc, #16]	@ (800457c <HAL_PWREx_EnableVddUSB+0x1c>)
 800456a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800456e:	6113      	str	r3, [r2, #16]
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	46020800 	.word	0x46020800

08004580 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004584:	4b05      	ldr	r3, [pc, #20]	@ (800459c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	4a04      	ldr	r2, [pc, #16]	@ (800459c <HAL_PWREx_EnableVddIO2+0x1c>)
 800458a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800458e:	6113      	str	r3, [r2, #16]
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	46020800 	.word	0x46020800

080045a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08e      	sub	sp, #56	@ 0x38
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d102      	bne.n	80045ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f000 bec8 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ba:	4b99      	ldr	r3, [pc, #612]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045c4:	4b96      	ldr	r3, [pc, #600]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80045c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 816c 	beq.w	80048b4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80045dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d007      	beq.n	80045f2 <HAL_RCC_OscConfig+0x52>
 80045e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	f040 80de 	bne.w	80047a6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	f040 80da 	bne.w	80047a6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f000 bea5 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004604:	4b86      	ldr	r3, [pc, #536]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d004      	beq.n	800461a <HAL_RCC_OscConfig+0x7a>
 8004610:	4b83      	ldr	r3, [pc, #524]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004618:	e005      	b.n	8004626 <HAL_RCC_OscConfig+0x86>
 800461a:	4b81      	ldr	r3, [pc, #516]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 800461c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004620:	041b      	lsls	r3, r3, #16
 8004622:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004626:	4293      	cmp	r3, r2
 8004628:	d255      	bcs.n	80046d6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	4618      	mov	r0, r3
 8004636:	f001 f99d 	bl	8005974 <RCC_SetFlashLatencyFromMSIRange>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f000 be82 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004646:	4b76      	ldr	r3, [pc, #472]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	4a75      	ldr	r2, [pc, #468]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 800464c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004650:	6093      	str	r3, [r2, #8]
 8004652:	4b73      	ldr	r3, [pc, #460]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	4970      	ldr	r1, [pc, #448]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 8004660:	4313      	orrs	r3, r2
 8004662:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800466c:	d309      	bcc.n	8004682 <HAL_RCC_OscConfig+0xe2>
 800466e:	4b6c      	ldr	r3, [pc, #432]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f023 021f 	bic.w	r2, r3, #31
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	4969      	ldr	r1, [pc, #420]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 800467c:	4313      	orrs	r3, r2
 800467e:	60cb      	str	r3, [r1, #12]
 8004680:	e07e      	b.n	8004780 <HAL_RCC_OscConfig+0x1e0>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	2b00      	cmp	r3, #0
 8004688:	da0a      	bge.n	80046a0 <HAL_RCC_OscConfig+0x100>
 800468a:	4b65      	ldr	r3, [pc, #404]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	015b      	lsls	r3, r3, #5
 8004698:	4961      	ldr	r1, [pc, #388]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 800469a:	4313      	orrs	r3, r2
 800469c:	60cb      	str	r3, [r1, #12]
 800469e:	e06f      	b.n	8004780 <HAL_RCC_OscConfig+0x1e0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a8:	d30a      	bcc.n	80046c0 <HAL_RCC_OscConfig+0x120>
 80046aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	029b      	lsls	r3, r3, #10
 80046b8:	4959      	ldr	r1, [pc, #356]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60cb      	str	r3, [r1, #12]
 80046be:	e05f      	b.n	8004780 <HAL_RCC_OscConfig+0x1e0>
 80046c0:	4b57      	ldr	r3, [pc, #348]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	03db      	lsls	r3, r3, #15
 80046ce:	4954      	ldr	r1, [pc, #336]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60cb      	str	r3, [r1, #12]
 80046d4:	e054      	b.n	8004780 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80046d6:	4b52      	ldr	r3, [pc, #328]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	4a51      	ldr	r2, [pc, #324]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80046dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046e0:	6093      	str	r3, [r2, #8]
 80046e2:	4b4f      	ldr	r3, [pc, #316]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	494c      	ldr	r1, [pc, #304]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80046fc:	d309      	bcc.n	8004712 <HAL_RCC_OscConfig+0x172>
 80046fe:	4b48      	ldr	r3, [pc, #288]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f023 021f 	bic.w	r2, r3, #31
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	4945      	ldr	r1, [pc, #276]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 800470c:	4313      	orrs	r3, r2
 800470e:	60cb      	str	r3, [r1, #12]
 8004710:	e028      	b.n	8004764 <HAL_RCC_OscConfig+0x1c4>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	da0a      	bge.n	8004730 <HAL_RCC_OscConfig+0x190>
 800471a:	4b41      	ldr	r3, [pc, #260]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	015b      	lsls	r3, r3, #5
 8004728:	493d      	ldr	r1, [pc, #244]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 800472a:	4313      	orrs	r3, r2
 800472c:	60cb      	str	r3, [r1, #12]
 800472e:	e019      	b.n	8004764 <HAL_RCC_OscConfig+0x1c4>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004738:	d30a      	bcc.n	8004750 <HAL_RCC_OscConfig+0x1b0>
 800473a:	4b39      	ldr	r3, [pc, #228]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	029b      	lsls	r3, r3, #10
 8004748:	4935      	ldr	r1, [pc, #212]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 800474a:	4313      	orrs	r3, r2
 800474c:	60cb      	str	r3, [r1, #12]
 800474e:	e009      	b.n	8004764 <HAL_RCC_OscConfig+0x1c4>
 8004750:	4b33      	ldr	r3, [pc, #204]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	03db      	lsls	r3, r3, #15
 800475e:	4930      	ldr	r1, [pc, #192]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 8004760:	4313      	orrs	r3, r2
 8004762:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476e:	4618      	mov	r0, r3
 8004770:	f001 f900 	bl	8005974 <RCC_SetFlashLatencyFromMSIRange>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f000 bde5 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004780:	f001 f8de 	bl	8005940 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004784:	4b27      	ldr	r3, [pc, #156]	@ (8004824 <HAL_RCC_OscConfig+0x284>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f7fc fdc9 	bl	8001320 <HAL_InitTick>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 808a 	beq.w	80048b2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800479e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047a2:	f000 bdd2 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d066      	beq.n	800487c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80047ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80047ba:	f7fc fe3b 	bl	8001434 <HAL_GetTick>
 80047be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80047c0:	e009      	b.n	80047d6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047c2:	f7fc fe37 	bl	8001434 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d902      	bls.n	80047d6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	f000 bdba 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80047d6:	4b12      	ldr	r3, [pc, #72]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0ef      	beq.n	80047c2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80047e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80047e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047ec:	6093      	str	r3, [r2, #8]
 80047ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	4909      	ldr	r1, [pc, #36]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004808:	d30e      	bcc.n	8004828 <HAL_RCC_OscConfig+0x288>
 800480a:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f023 021f 	bic.w	r2, r3, #31
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4902      	ldr	r1, [pc, #8]	@ (8004820 <HAL_RCC_OscConfig+0x280>)
 8004818:	4313      	orrs	r3, r2
 800481a:	60cb      	str	r3, [r1, #12]
 800481c:	e04a      	b.n	80048b4 <HAL_RCC_OscConfig+0x314>
 800481e:	bf00      	nop
 8004820:	46020c00 	.word	0x46020c00
 8004824:	20000018 	.word	0x20000018
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	2b00      	cmp	r3, #0
 800482e:	da0a      	bge.n	8004846 <HAL_RCC_OscConfig+0x2a6>
 8004830:	4b98      	ldr	r3, [pc, #608]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	015b      	lsls	r3, r3, #5
 800483e:	4995      	ldr	r1, [pc, #596]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004840:	4313      	orrs	r3, r2
 8004842:	60cb      	str	r3, [r1, #12]
 8004844:	e036      	b.n	80048b4 <HAL_RCC_OscConfig+0x314>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484e:	d30a      	bcc.n	8004866 <HAL_RCC_OscConfig+0x2c6>
 8004850:	4b90      	ldr	r3, [pc, #576]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	029b      	lsls	r3, r3, #10
 800485e:	498d      	ldr	r1, [pc, #564]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	60cb      	str	r3, [r1, #12]
 8004864:	e026      	b.n	80048b4 <HAL_RCC_OscConfig+0x314>
 8004866:	4b8b      	ldr	r3, [pc, #556]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	03db      	lsls	r3, r3, #15
 8004874:	4987      	ldr	r1, [pc, #540]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	60cb      	str	r3, [r1, #12]
 800487a:	e01b      	b.n	80048b4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800487c:	4b85      	ldr	r3, [pc, #532]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a84      	ldr	r2, [pc, #528]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004882:	f023 0301 	bic.w	r3, r3, #1
 8004886:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004888:	f7fc fdd4 	bl	8001434 <HAL_GetTick>
 800488c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800488e:	e009      	b.n	80048a4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004890:	f7fc fdd0 	bl	8001434 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d902      	bls.n	80048a4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	f000 bd53 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80048a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1ef      	bne.n	8004890 <HAL_RCC_OscConfig+0x2f0>
 80048b0:	e000      	b.n	80048b4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 808b 	beq.w	80049d8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_OscConfig+0x334>
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	2b0c      	cmp	r3, #12
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d106      	bne.n	80048e2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d17d      	bne.n	80049d8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f000 bd34 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_OscConfig+0x35a>
 80048ec:	4b69      	ldr	r3, [pc, #420]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a68      	ldr	r2, [pc, #416]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 80048f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	e041      	b.n	800497e <HAL_RCC_OscConfig+0x3de>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004902:	d112      	bne.n	800492a <HAL_RCC_OscConfig+0x38a>
 8004904:	4b63      	ldr	r3, [pc, #396]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a62      	ldr	r2, [pc, #392]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 800490a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4b60      	ldr	r3, [pc, #384]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a5f      	ldr	r2, [pc, #380]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004916:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b5d      	ldr	r3, [pc, #372]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a5c      	ldr	r2, [pc, #368]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	e029      	b.n	800497e <HAL_RCC_OscConfig+0x3de>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004932:	d112      	bne.n	800495a <HAL_RCC_OscConfig+0x3ba>
 8004934:	4b57      	ldr	r3, [pc, #348]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a56      	ldr	r2, [pc, #344]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 800493a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	4b54      	ldr	r3, [pc, #336]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a53      	ldr	r2, [pc, #332]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b51      	ldr	r3, [pc, #324]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a50      	ldr	r2, [pc, #320]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	e011      	b.n	800497e <HAL_RCC_OscConfig+0x3de>
 800495a:	4b4e      	ldr	r3, [pc, #312]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a4d      	ldr	r2, [pc, #308]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	4b4b      	ldr	r3, [pc, #300]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a4a      	ldr	r2, [pc, #296]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 800496c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b48      	ldr	r3, [pc, #288]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a47      	ldr	r2, [pc, #284]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004978:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800497c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d014      	beq.n	80049b0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004986:	f7fc fd55 	bl	8001434 <HAL_GetTick>
 800498a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800498c:	e009      	b.n	80049a2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800498e:	f7fc fd51 	bl	8001434 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b64      	cmp	r3, #100	@ 0x64
 800499a:	d902      	bls.n	80049a2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	f000 bcd4 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <HAL_RCC_OscConfig+0x3ee>
 80049ae:	e013      	b.n	80049d8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80049b0:	f7fc fd40 	bl	8001434 <HAL_GetTick>
 80049b4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049b6:	e009      	b.n	80049cc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b8:	f7fc fd3c 	bl	8001434 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b64      	cmp	r3, #100	@ 0x64
 80049c4:	d902      	bls.n	80049cc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	f000 bcbf 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049cc:	4b31      	ldr	r3, [pc, #196]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ef      	bne.n	80049b8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d05f      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d005      	beq.n	80049f6 <HAL_RCC_OscConfig+0x456>
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	2b0c      	cmp	r3, #12
 80049ee:	d114      	bne.n	8004a1a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d111      	bne.n	8004a1a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f000 bca3 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004a04:	4b23      	ldr	r3, [pc, #140]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	4920      	ldr	r1, [pc, #128]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a18:	e044      	b.n	8004aa4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d024      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004a22:	4b1c      	ldr	r3, [pc, #112]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1b      	ldr	r2, [pc, #108]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a2e:	f7fc fd01 	bl	8001434 <HAL_GetTick>
 8004a32:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a34:	e009      	b.n	8004a4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a36:	f7fc fcfd 	bl	8001434 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d902      	bls.n	8004a4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	f000 bc80 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a4a:	4b12      	ldr	r3, [pc, #72]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0ef      	beq.n	8004a36 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004a56:	4b0f      	ldr	r3, [pc, #60]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	041b      	lsls	r3, r3, #16
 8004a64:	490b      	ldr	r1, [pc, #44]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	610b      	str	r3, [r1, #16]
 8004a6a:	e01b      	b.n	8004aa4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004a6c:	4b09      	ldr	r3, [pc, #36]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a08      	ldr	r2, [pc, #32]	@ (8004a94 <HAL_RCC_OscConfig+0x4f4>)
 8004a72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a78:	f7fc fcdc 	bl	8001434 <HAL_GetTick>
 8004a7c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fc fcd8 	bl	8001434 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d904      	bls.n	8004a98 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	f000 bc5b 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
 8004a94:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a98:	4baf      	ldr	r3, [pc, #700]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ed      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80c8 	beq.w	8004c42 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ab8:	4ba7      	ldr	r3, [pc, #668]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d111      	bne.n	8004aea <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac6:	4ba4      	ldr	r3, [pc, #656]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004acc:	4aa2      	ldr	r2, [pc, #648]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004ace:	f043 0304 	orr.w	r3, r3, #4
 8004ad2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004ad6:	4ba0      	ldr	r3, [pc, #640]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004aea:	4b9c      	ldr	r3, [pc, #624]	@ (8004d5c <HAL_RCC_OscConfig+0x7bc>)
 8004aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d119      	bne.n	8004b2a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004af6:	4b99      	ldr	r3, [pc, #612]	@ (8004d5c <HAL_RCC_OscConfig+0x7bc>)
 8004af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afa:	4a98      	ldr	r2, [pc, #608]	@ (8004d5c <HAL_RCC_OscConfig+0x7bc>)
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b02:	f7fc fc97 	bl	8001434 <HAL_GetTick>
 8004b06:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b08:	e009      	b.n	8004b1e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0a:	f7fc fc93 	bl	8001434 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d902      	bls.n	8004b1e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	f000 bc16 	b.w	800534a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b1e:	4b8f      	ldr	r3, [pc, #572]	@ (8004d5c <HAL_RCC_OscConfig+0x7bc>)
 8004b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0ef      	beq.n	8004b0a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d05f      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004b32:	4b89      	ldr	r3, [pc, #548]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b38:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d037      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d006      	beq.n	8004b60 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e3f4      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01b      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004b6a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b70:	4a79      	ldr	r2, [pc, #484]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004b72:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004b76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004b7a:	f7fc fc5b 	bl	8001434 <HAL_GetTick>
 8004b7e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b82:	f7fc fc57 	bl	8001434 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e3da      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004b94:	4b70      	ldr	r3, [pc, #448]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1ef      	bne.n	8004b82 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ba8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	4969      	ldr	r1, [pc, #420]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004bb8:	4b67      	ldr	r3, [pc, #412]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bbe:	4a66      	ldr	r2, [pc, #408]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004bc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004bc8:	f7fc fc34 	bl	8001434 <HAL_GetTick>
 8004bcc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd0:	f7fc fc30 	bl	8001434 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e3b3      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004be2:	4b5d      	ldr	r3, [pc, #372]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ef      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x630>
 8004bf0:	e01b      	b.n	8004c2a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004bf2:	4b59      	ldr	r3, [pc, #356]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf8:	4a57      	ldr	r2, [pc, #348]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004bfa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004bfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004c02:	f7fc fc17 	bl	8001434 <HAL_GetTick>
 8004c06:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0a:	f7fc fc13 	bl	8001434 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e396      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004c1c:	4b4e      	ldr	r3, [pc, #312]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1ef      	bne.n	8004c0a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c2a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c32:	4b49      	ldr	r3, [pc, #292]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c38:	4a47      	ldr	r2, [pc, #284]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004c3a:	f023 0304 	bic.w	r3, r3, #4
 8004c3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8111 	beq.w	8004e72 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c56:	4b40      	ldr	r3, [pc, #256]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d111      	bne.n	8004c88 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c64:	4b3c      	ldr	r3, [pc, #240]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c6a:	4a3b      	ldr	r2, [pc, #236]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004c6c:	f043 0304 	orr.w	r3, r3, #4
 8004c70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c74:	4b38      	ldr	r3, [pc, #224]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004c88:	4b34      	ldr	r3, [pc, #208]	@ (8004d5c <HAL_RCC_OscConfig+0x7bc>)
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d118      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004c94:	4b31      	ldr	r3, [pc, #196]	@ (8004d5c <HAL_RCC_OscConfig+0x7bc>)
 8004c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c98:	4a30      	ldr	r2, [pc, #192]	@ (8004d5c <HAL_RCC_OscConfig+0x7bc>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca0:	f7fc fbc8 	bl	8001434 <HAL_GetTick>
 8004ca4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca8:	f7fc fbc4 	bl	8001434 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e347      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004cba:	4b28      	ldr	r3, [pc, #160]	@ (8004d5c <HAL_RCC_OscConfig+0x7bc>)
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01f      	beq.n	8004d12 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d010      	beq.n	8004d00 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004cde:	4b1e      	ldr	r3, [pc, #120]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004cee:	4b1a      	ldr	r3, [pc, #104]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cf4:	4a18      	ldr	r2, [pc, #96]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004cfe:	e018      	b.n	8004d32 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d00:	4b15      	ldr	r3, [pc, #84]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d06:	4a14      	ldr	r2, [pc, #80]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004d10:	e00f      	b.n	8004d32 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d12:	4b11      	ldr	r3, [pc, #68]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d18:	4a0f      	ldr	r2, [pc, #60]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d22:	4b0d      	ldr	r3, [pc, #52]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d28:	4a0b      	ldr	r2, [pc, #44]	@ (8004d58 <HAL_RCC_OscConfig+0x7b8>)
 8004d2a:	f023 0304 	bic.w	r3, r3, #4
 8004d2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d057      	beq.n	8004dea <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004d3a:	f7fc fb7b 	bl	8001434 <HAL_GetTick>
 8004d3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d40:	e00e      	b.n	8004d60 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d42:	f7fc fb77 	bl	8001434 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d905      	bls.n	8004d60 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e2f8      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
 8004d58:	46020c00 	.word	0x46020c00
 8004d5c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d60:	4b9c      	ldr	r3, [pc, #624]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0e9      	beq.n	8004d42 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01b      	beq.n	8004db2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004d7a:	4b96      	ldr	r3, [pc, #600]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d80:	4a94      	ldr	r2, [pc, #592]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004d8a:	e00a      	b.n	8004da2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8c:	f7fc fb52 	bl	8001434 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e2d3      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004da2:	4b8c      	ldr	r3, [pc, #560]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ed      	beq.n	8004d8c <HAL_RCC_OscConfig+0x7ec>
 8004db0:	e053      	b.n	8004e5a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004db2:	4b88      	ldr	r3, [pc, #544]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004db8:	4a86      	ldr	r2, [pc, #536]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004dc2:	e00a      	b.n	8004dda <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc4:	f7fc fb36 	bl	8001434 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e2b7      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004dda:	4b7e      	ldr	r3, [pc, #504]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1ed      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x824>
 8004de8:	e037      	b.n	8004e5a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004dea:	f7fc fb23 	bl	8001434 <HAL_GetTick>
 8004dee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004df0:	e00a      	b.n	8004e08 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df2:	f7fc fb1f 	bl	8001434 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e2a0      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e08:	4b72      	ldr	r3, [pc, #456]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1ed      	bne.n	8004df2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004e16:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01a      	beq.n	8004e5a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e24:	4b6b      	ldr	r3, [pc, #428]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e2a:	4a6a      	ldr	r2, [pc, #424]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004e2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e34:	e00a      	b.n	8004e4c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e36:	f7fc fafd 	bl	8001434 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e27e      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e4c:	4b61      	ldr	r3, [pc, #388]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1ed      	bne.n	8004e36 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e5a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e62:	4b5c      	ldr	r3, [pc, #368]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e68:	4a5a      	ldr	r2, [pc, #360]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004e6a:	f023 0304 	bic.w	r3, r3, #4
 8004e6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d036      	beq.n	8004eec <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d019      	beq.n	8004eba <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004e86:	4b53      	ldr	r3, [pc, #332]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a52      	ldr	r2, [pc, #328]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004e8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e90:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004e92:	f7fc facf 	bl	8001434 <HAL_GetTick>
 8004e96:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e9a:	f7fc facb 	bl	8001434 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e24e      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004eac:	4b49      	ldr	r3, [pc, #292]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0x8fa>
 8004eb8:	e018      	b.n	8004eec <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004eba:	4b46      	ldr	r3, [pc, #280]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a45      	ldr	r2, [pc, #276]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004ec0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ec4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004ec6:	f7fc fab5 	bl	8001434 <HAL_GetTick>
 8004eca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ece:	f7fc fab1 	bl	8001434 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e234      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d036      	beq.n	8004f66 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d019      	beq.n	8004f34 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004f00:	4b34      	ldr	r3, [pc, #208]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a33      	ldr	r2, [pc, #204]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f0a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004f0c:	f7fc fa92 	bl	8001434 <HAL_GetTick>
 8004f10:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004f14:	f7fc fa8e 	bl	8001434 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e211      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004f26:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0x974>
 8004f32:	e018      	b.n	8004f66 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004f34:	4b27      	ldr	r3, [pc, #156]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a26      	ldr	r2, [pc, #152]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004f3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f3e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004f40:	f7fc fa78 	bl	8001434 <HAL_GetTick>
 8004f44:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004f48:	f7fc fa74 	bl	8001434 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e1f7      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d07f      	beq.n	8005072 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d062      	beq.n	8005040 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004f7a:	4b16      	ldr	r3, [pc, #88]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004f80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f84:	6093      	str	r3, [r2, #8]
 8004f86:	4b13      	ldr	r3, [pc, #76]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f92:	4910      	ldr	r1, [pc, #64]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004fa0:	d309      	bcc.n	8004fb6 <HAL_RCC_OscConfig+0xa16>
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f023 021f 	bic.w	r2, r3, #31
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	4909      	ldr	r1, [pc, #36]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60cb      	str	r3, [r1, #12]
 8004fb4:	e02a      	b.n	800500c <HAL_RCC_OscConfig+0xa6c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	da0c      	bge.n	8004fd8 <HAL_RCC_OscConfig+0xa38>
 8004fbe:	4b05      	ldr	r3, [pc, #20]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	015b      	lsls	r3, r3, #5
 8004fcc:	4901      	ldr	r1, [pc, #4]	@ (8004fd4 <HAL_RCC_OscConfig+0xa34>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60cb      	str	r3, [r1, #12]
 8004fd2:	e01b      	b.n	800500c <HAL_RCC_OscConfig+0xa6c>
 8004fd4:	46020c00 	.word	0x46020c00
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe0:	d30a      	bcc.n	8004ff8 <HAL_RCC_OscConfig+0xa58>
 8004fe2:	4ba1      	ldr	r3, [pc, #644]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	029b      	lsls	r3, r3, #10
 8004ff0:	499d      	ldr	r1, [pc, #628]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60cb      	str	r3, [r1, #12]
 8004ff6:	e009      	b.n	800500c <HAL_RCC_OscConfig+0xa6c>
 8004ff8:	4b9b      	ldr	r3, [pc, #620]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	03db      	lsls	r3, r3, #15
 8005006:	4998      	ldr	r1, [pc, #608]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005008:	4313      	orrs	r3, r2
 800500a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800500c:	4b96      	ldr	r3, [pc, #600]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a95      	ldr	r2, [pc, #596]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005012:	f043 0310 	orr.w	r3, r3, #16
 8005016:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005018:	f7fc fa0c 	bl	8001434 <HAL_GetTick>
 800501c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005020:	f7fc fa08 	bl	8001434 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e18b      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005032:	4b8d      	ldr	r3, [pc, #564]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0xa80>
 800503e:	e018      	b.n	8005072 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005040:	4b89      	ldr	r3, [pc, #548]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a88      	ldr	r2, [pc, #544]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005046:	f023 0310 	bic.w	r3, r3, #16
 800504a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800504c:	f7fc f9f2 	bl	8001434 <HAL_GetTick>
 8005050:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005054:	f7fc f9ee 	bl	8001434 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e171      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005066:	4b80      	ldr	r3, [pc, #512]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 8166 	beq.w	8005348 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800507c:	2300      	movs	r3, #0
 800507e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005082:	4b79      	ldr	r3, [pc, #484]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b0c      	cmp	r3, #12
 800508c:	f000 80f2 	beq.w	8005274 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	2b02      	cmp	r3, #2
 8005096:	f040 80c5 	bne.w	8005224 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800509a:	4b73      	ldr	r3, [pc, #460]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a72      	ldr	r2, [pc, #456]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80050a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80050a6:	f7fc f9c5 	bl	8001434 <HAL_GetTick>
 80050aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ae:	f7fc f9c1 	bl	8001434 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e144      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050c0:	4b69      	ldr	r3, [pc, #420]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f0      	bne.n	80050ae <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050cc:	4b66      	ldr	r3, [pc, #408]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80050ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d111      	bne.n	80050fe <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80050da:	4b63      	ldr	r3, [pc, #396]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80050dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050e0:	4a61      	ldr	r2, [pc, #388]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80050e2:	f043 0304 	orr.w	r3, r3, #4
 80050e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80050ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80050ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80050fe:	4b5b      	ldr	r3, [pc, #364]	@ (800526c <HAL_RCC_OscConfig+0xccc>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005106:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800510a:	d102      	bne.n	8005112 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800510c:	2301      	movs	r3, #1
 800510e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005112:	4b56      	ldr	r3, [pc, #344]	@ (800526c <HAL_RCC_OscConfig+0xccc>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	4a55      	ldr	r2, [pc, #340]	@ (800526c <HAL_RCC_OscConfig+0xccc>)
 8005118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800511c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800511e:	4b52      	ldr	r3, [pc, #328]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005126:	f023 0303 	bic.w	r3, r3, #3
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005132:	3a01      	subs	r2, #1
 8005134:	0212      	lsls	r2, r2, #8
 8005136:	4311      	orrs	r1, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800513c:	430a      	orrs	r2, r1
 800513e:	494a      	ldr	r1, [pc, #296]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005140:	4313      	orrs	r3, r2
 8005142:	628b      	str	r3, [r1, #40]	@ 0x28
 8005144:	4b48      	ldr	r3, [pc, #288]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005148:	4b49      	ldr	r3, [pc, #292]	@ (8005270 <HAL_RCC_OscConfig+0xcd0>)
 800514a:	4013      	ands	r3, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005150:	3a01      	subs	r2, #1
 8005152:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800515a:	3a01      	subs	r2, #1
 800515c:	0252      	lsls	r2, r2, #9
 800515e:	b292      	uxth	r2, r2
 8005160:	4311      	orrs	r1, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005166:	3a01      	subs	r2, #1
 8005168:	0412      	lsls	r2, r2, #16
 800516a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800516e:	4311      	orrs	r1, r2
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005174:	3a01      	subs	r2, #1
 8005176:	0612      	lsls	r2, r2, #24
 8005178:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800517c:	430a      	orrs	r2, r1
 800517e:	493a      	ldr	r1, [pc, #232]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005180:	4313      	orrs	r3, r2
 8005182:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005184:	4b38      	ldr	r3, [pc, #224]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005188:	4a37      	ldr	r2, [pc, #220]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 800518a:	f023 0310 	bic.w	r3, r3, #16
 800518e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005194:	4a34      	ldr	r2, [pc, #208]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800519a:	4b33      	ldr	r3, [pc, #204]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 800519c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519e:	4a32      	ldr	r2, [pc, #200]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80051a0:	f043 0310 	orr.w	r3, r3, #16
 80051a4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80051a6:	4b30      	ldr	r3, [pc, #192]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80051a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051aa:	f023 020c 	bic.w	r2, r3, #12
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b2:	492d      	ldr	r1, [pc, #180]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80051b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d105      	bne.n	80051cc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80051c0:	4b2a      	ldr	r3, [pc, #168]	@ (800526c <HAL_RCC_OscConfig+0xccc>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a29      	ldr	r2, [pc, #164]	@ (800526c <HAL_RCC_OscConfig+0xccc>)
 80051c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051ca:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80051cc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d107      	bne.n	80051e4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80051d4:	4b24      	ldr	r3, [pc, #144]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80051d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051da:	4a23      	ldr	r2, [pc, #140]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80051dc:	f023 0304 	bic.w	r3, r3, #4
 80051e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80051e4:	4b20      	ldr	r3, [pc, #128]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 80051ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051f0:	f7fc f920 	bl	8001434 <HAL_GetTick>
 80051f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fc f91c 	bl	8001434 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e09f      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800520a:	4b17      	ldr	r3, [pc, #92]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005216:	4b14      	ldr	r3, [pc, #80]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521a:	4a13      	ldr	r2, [pc, #76]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 800521c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005220:	6293      	str	r3, [r2, #40]	@ 0x28
 8005222:	e091      	b.n	8005348 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005224:	4b10      	ldr	r3, [pc, #64]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a0f      	ldr	r2, [pc, #60]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 800522a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800522e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005230:	f7fc f900 	bl	8001434 <HAL_GetTick>
 8005234:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005238:	f7fc f8fc 	bl	8001434 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e07f      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800524a:	4b07      	ldr	r3, [pc, #28]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005256:	4b04      	ldr	r3, [pc, #16]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	4a03      	ldr	r2, [pc, #12]	@ (8005268 <HAL_RCC_OscConfig+0xcc8>)
 800525c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005260:	f023 0303 	bic.w	r3, r3, #3
 8005264:	6293      	str	r3, [r2, #40]	@ 0x28
 8005266:	e06f      	b.n	8005348 <HAL_RCC_OscConfig+0xda8>
 8005268:	46020c00 	.word	0x46020c00
 800526c:	46020800 	.word	0x46020800
 8005270:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005274:	4b37      	ldr	r3, [pc, #220]	@ (8005354 <HAL_RCC_OscConfig+0xdb4>)
 8005276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005278:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800527a:	4b36      	ldr	r3, [pc, #216]	@ (8005354 <HAL_RCC_OscConfig+0xdb4>)
 800527c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	2b01      	cmp	r3, #1
 8005286:	d039      	beq.n	80052fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f003 0203 	and.w	r2, r3, #3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d132      	bne.n	80052fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d129      	bne.n	80052fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d122      	bne.n	80052fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d11a      	bne.n	80052fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	0a5b      	lsrs	r3, r3, #9
 80052ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d111      	bne.n	80052fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	0c1b      	lsrs	r3, r3, #16
 80052dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d108      	bne.n	80052fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	0e1b      	lsrs	r3, r3, #24
 80052ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e024      	b.n	800534a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005300:	4b14      	ldr	r3, [pc, #80]	@ (8005354 <HAL_RCC_OscConfig+0xdb4>)
 8005302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005304:	08db      	lsrs	r3, r3, #3
 8005306:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800530e:	429a      	cmp	r2, r3
 8005310:	d01a      	beq.n	8005348 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005312:	4b10      	ldr	r3, [pc, #64]	@ (8005354 <HAL_RCC_OscConfig+0xdb4>)
 8005314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005316:	4a0f      	ldr	r2, [pc, #60]	@ (8005354 <HAL_RCC_OscConfig+0xdb4>)
 8005318:	f023 0310 	bic.w	r3, r3, #16
 800531c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531e:	f7fc f889 	bl	8001434 <HAL_GetTick>
 8005322:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005324:	bf00      	nop
 8005326:	f7fc f885 	bl	8001434 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	4293      	cmp	r3, r2
 8005330:	d0f9      	beq.n	8005326 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005336:	4a07      	ldr	r2, [pc, #28]	@ (8005354 <HAL_RCC_OscConfig+0xdb4>)
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800533c:	4b05      	ldr	r3, [pc, #20]	@ (8005354 <HAL_RCC_OscConfig+0xdb4>)
 800533e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005340:	4a04      	ldr	r2, [pc, #16]	@ (8005354 <HAL_RCC_OscConfig+0xdb4>)
 8005342:	f043 0310 	orr.w	r3, r3, #16
 8005346:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3738      	adds	r7, #56	@ 0x38
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	46020c00 	.word	0x46020c00

08005358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e1d9      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800536c:	4b9b      	ldr	r3, [pc, #620]	@ (80055dc <HAL_RCC_ClockConfig+0x284>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 030f 	and.w	r3, r3, #15
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d910      	bls.n	800539c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b98      	ldr	r3, [pc, #608]	@ (80055dc <HAL_RCC_ClockConfig+0x284>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 020f 	bic.w	r2, r3, #15
 8005382:	4996      	ldr	r1, [pc, #600]	@ (80055dc <HAL_RCC_ClockConfig+0x284>)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	4313      	orrs	r3, r2
 8005388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	4b94      	ldr	r3, [pc, #592]	@ (80055dc <HAL_RCC_ClockConfig+0x284>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e1c1      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d010      	beq.n	80053ca <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	4b8c      	ldr	r3, [pc, #560]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d908      	bls.n	80053ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80053b8:	4b89      	ldr	r3, [pc, #548]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	4986      	ldr	r1, [pc, #536]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d012      	beq.n	80053fc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	4b81      	ldr	r3, [pc, #516]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	091b      	lsrs	r3, r3, #4
 80053e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d909      	bls.n	80053fc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80053e8:	4b7d      	ldr	r3, [pc, #500]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	497a      	ldr	r1, [pc, #488]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	4b74      	ldr	r3, [pc, #464]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005414:	429a      	cmp	r2, r3
 8005416:	d908      	bls.n	800542a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005418:	4b71      	ldr	r3, [pc, #452]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	496e      	ldr	r1, [pc, #440]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 8005426:	4313      	orrs	r3, r2
 8005428:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d010      	beq.n	8005458 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	4b69      	ldr	r3, [pc, #420]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	429a      	cmp	r2, r3
 8005444:	d908      	bls.n	8005458 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005446:	4b66      	ldr	r3, [pc, #408]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 020f 	bic.w	r2, r3, #15
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	4963      	ldr	r1, [pc, #396]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 8005454:	4313      	orrs	r3, r2
 8005456:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80d2 	beq.w	800560a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005466:	2300      	movs	r3, #0
 8005468:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d143      	bne.n	80054fa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005472:	4b5b      	ldr	r3, [pc, #364]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 8005474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d110      	bne.n	80054a2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005480:	4b57      	ldr	r3, [pc, #348]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 8005482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005486:	4a56      	ldr	r2, [pc, #344]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 8005488:	f043 0304 	orr.w	r3, r3, #4
 800548c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005490:	4b53      	ldr	r3, [pc, #332]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 8005492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800549e:	2301      	movs	r3, #1
 80054a0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80054a2:	f7fb ffc7 	bl	8001434 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80054a8:	4b4e      	ldr	r3, [pc, #312]	@ (80055e4 <HAL_RCC_ClockConfig+0x28c>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00f      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80054b4:	e008      	b.n	80054c8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80054b6:	f7fb ffbd 	bl	8001434 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e12b      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80054c8:	4b46      	ldr	r3, [pc, #280]	@ (80055e4 <HAL_RCC_ClockConfig+0x28c>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d107      	bne.n	80054ea <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80054da:	4b41      	ldr	r3, [pc, #260]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 80054dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e0:	4a3f      	ldr	r2, [pc, #252]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 80054e2:	f023 0304 	bic.w	r3, r3, #4
 80054e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80054ea:	4b3d      	ldr	r3, [pc, #244]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d121      	bne.n	800553a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e112      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d107      	bne.n	8005512 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005502:	4b37      	ldr	r3, [pc, #220]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d115      	bne.n	800553a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e106      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d107      	bne.n	800552a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800551a:	4b31      	ldr	r3, [pc, #196]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e0fa      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800552a:	4b2d      	ldr	r3, [pc, #180]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e0f2      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800553a:	4b29      	ldr	r3, [pc, #164]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f023 0203 	bic.w	r2, r3, #3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4926      	ldr	r1, [pc, #152]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 8005548:	4313      	orrs	r3, r2
 800554a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800554c:	f7fb ff72 	bl	8001434 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b03      	cmp	r3, #3
 8005558:	d112      	bne.n	8005580 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800555a:	e00a      	b.n	8005572 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800555c:	f7fb ff6a 	bl	8001434 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e0d6      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005572:	4b1b      	ldr	r3, [pc, #108]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 030c 	and.w	r3, r3, #12
 800557a:	2b0c      	cmp	r3, #12
 800557c:	d1ee      	bne.n	800555c <HAL_RCC_ClockConfig+0x204>
 800557e:	e044      	b.n	800560a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d112      	bne.n	80055ae <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005588:	e00a      	b.n	80055a0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558a:	f7fb ff53 	bl	8001434 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005598:	4293      	cmp	r3, r2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e0bf      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80055a0:	4b0f      	ldr	r3, [pc, #60]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f003 030c 	and.w	r3, r3, #12
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d1ee      	bne.n	800558a <HAL_RCC_ClockConfig+0x232>
 80055ac:	e02d      	b.n	800560a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d123      	bne.n	80055fe <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80055b6:	e00a      	b.n	80055ce <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b8:	f7fb ff3c 	bl	8001434 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e0a8      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80055ce:	4b04      	ldr	r3, [pc, #16]	@ (80055e0 <HAL_RCC_ClockConfig+0x288>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f003 030c 	and.w	r3, r3, #12
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1ee      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x260>
 80055da:	e016      	b.n	800560a <HAL_RCC_ClockConfig+0x2b2>
 80055dc:	40022000 	.word	0x40022000
 80055e0:	46020c00 	.word	0x46020c00
 80055e4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e8:	f7fb ff24 	bl	8001434 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e090      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f003 030c 	and.w	r3, r3, #12
 8005606:	2b04      	cmp	r3, #4
 8005608:	d1ee      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d010      	beq.n	8005638 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	4b43      	ldr	r3, [pc, #268]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	429a      	cmp	r2, r3
 8005624:	d208      	bcs.n	8005638 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005626:	4b40      	ldr	r3, [pc, #256]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f023 020f 	bic.w	r2, r3, #15
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	493d      	ldr	r1, [pc, #244]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 8005634:	4313      	orrs	r3, r2
 8005636:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005638:	4b3c      	ldr	r3, [pc, #240]	@ (800572c <HAL_RCC_ClockConfig+0x3d4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d210      	bcs.n	8005668 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005646:	4b39      	ldr	r3, [pc, #228]	@ (800572c <HAL_RCC_ClockConfig+0x3d4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 020f 	bic.w	r2, r3, #15
 800564e:	4937      	ldr	r1, [pc, #220]	@ (800572c <HAL_RCC_ClockConfig+0x3d4>)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	4313      	orrs	r3, r2
 8005654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005656:	4b35      	ldr	r3, [pc, #212]	@ (800572c <HAL_RCC_ClockConfig+0x3d4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d001      	beq.n	8005668 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e05b      	b.n	8005720 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d010      	beq.n	8005696 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	4b2b      	ldr	r3, [pc, #172]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005680:	429a      	cmp	r2, r3
 8005682:	d208      	bcs.n	8005696 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005684:	4b28      	ldr	r3, [pc, #160]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4925      	ldr	r1, [pc, #148]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 8005692:	4313      	orrs	r3, r2
 8005694:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d012      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	4b20      	ldr	r3, [pc, #128]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d209      	bcs.n	80056c8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80056b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	4919      	ldr	r1, [pc, #100]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d010      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	4b13      	ldr	r3, [pc, #76]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 80056da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d208      	bcs.n	80056f6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80056e4:	4b10      	ldr	r3, [pc, #64]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	490d      	ldr	r1, [pc, #52]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80056f6:	f000 f821 	bl	800573c <HAL_RCC_GetSysClockFreq>
 80056fa:	4602      	mov	r2, r0
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <HAL_RCC_ClockConfig+0x3d0>)
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	490a      	ldr	r1, [pc, #40]	@ (8005730 <HAL_RCC_ClockConfig+0x3d8>)
 8005706:	5ccb      	ldrb	r3, [r1, r3]
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
 800570c:	4a09      	ldr	r2, [pc, #36]	@ (8005734 <HAL_RCC_ClockConfig+0x3dc>)
 800570e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005710:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <HAL_RCC_ClockConfig+0x3e0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7fb fe03 	bl	8001320 <HAL_InitTick>
 800571a:	4603      	mov	r3, r0
 800571c:	73fb      	strb	r3, [r7, #15]

  return status;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	46020c00 	.word	0x46020c00
 800572c:	40022000 	.word	0x40022000
 8005730:	0800bed8 	.word	0x0800bed8
 8005734:	20000014 	.word	0x20000014
 8005738:	20000018 	.word	0x20000018

0800573c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800573c:	b480      	push	{r7}
 800573e:	b08b      	sub	sp, #44	@ 0x2c
 8005740:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800574a:	4b78      	ldr	r3, [pc, #480]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005754:	4b75      	ldr	r3, [pc, #468]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0x34>
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2b0c      	cmp	r3, #12
 8005768:	d121      	bne.n	80057ae <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d11e      	bne.n	80057ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005770:	4b6e      	ldr	r3, [pc, #440]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800577c:	4b6b      	ldr	r3, [pc, #428]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800577e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005782:	0b1b      	lsrs	r3, r3, #12
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	627b      	str	r3, [r7, #36]	@ 0x24
 800578a:	e005      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800578c:	4b67      	ldr	r3, [pc, #412]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	0f1b      	lsrs	r3, r3, #28
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005798:	4a65      	ldr	r2, [pc, #404]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d110      	bne.n	80057ca <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80057ac:	e00d      	b.n	80057ca <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057ae:	4b5f      	ldr	r3, [pc, #380]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f003 030c 	and.w	r3, r3, #12
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d102      	bne.n	80057c0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057ba:	4b5e      	ldr	r3, [pc, #376]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	e004      	b.n	80057ca <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d101      	bne.n	80057ca <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80057c8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	f040 80a5 	bne.w	800591c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80057d2:	4b56      	ldr	r3, [pc, #344]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80057dc:	4b53      	ldr	r3, [pc, #332]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80057ea:	4b50      	ldr	r3, [pc, #320]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ee:	091b      	lsrs	r3, r3, #4
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80057f6:	4b4d      	ldr	r3, [pc, #308]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80057f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fa:	08db      	lsrs	r3, r3, #3
 80057fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	fb02 f303 	mul.w	r3, r2, r3
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d003      	beq.n	8005820 <HAL_RCC_GetSysClockFreq+0xe4>
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b03      	cmp	r3, #3
 800581c:	d022      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0x128>
 800581e:	e043      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005938 <HAL_RCC_GetSysClockFreq+0x1fc>
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005832:	4b3e      	ldr	r3, [pc, #248]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005842:	ed97 6a01 	vldr	s12, [r7, #4]
 8005846:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800593c <HAL_RCC_GetSysClockFreq+0x200>
 800584a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005862:	e046      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005938 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b2d      	ldr	r3, [pc, #180]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005886:	ed97 6a01 	vldr	s12, [r7, #4]
 800588a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800593c <HAL_RCC_GetSysClockFreq+0x200>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058a6:	e024      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	ee07 3a90 	vmov	s15, r3
 80058b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c0:	4b1a      	ldr	r3, [pc, #104]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80058c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c8:	ee07 3a90 	vmov	s15, r3
 80058cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80058d0:	ed97 6a01 	vldr	s12, [r7, #4]
 80058d4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800593c <HAL_RCC_GetSysClockFreq+0x200>
 80058d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80058e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058f0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80058f2:	4b0e      	ldr	r3, [pc, #56]	@ (800592c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80058f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f6:	0e1b      	lsrs	r3, r3, #24
 80058f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058fc:	3301      	adds	r3, #1
 80058fe:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800590a:	edd7 6a07 	vldr	s13, [r7, #28]
 800590e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005916:	ee17 3a90 	vmov	r3, s15
 800591a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800591c:	6a3b      	ldr	r3, [r7, #32]
}
 800591e:	4618      	mov	r0, r3
 8005920:	372c      	adds	r7, #44	@ 0x2c
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	46020c00 	.word	0x46020c00
 8005930:	0800bee8 	.word	0x0800bee8
 8005934:	00f42400 	.word	0x00f42400
 8005938:	4b742400 	.word	0x4b742400
 800593c:	46000000 	.word	0x46000000

08005940 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005944:	f7ff fefa 	bl	800573c <HAL_RCC_GetSysClockFreq>
 8005948:	4602      	mov	r2, r0
 800594a:	4b07      	ldr	r3, [pc, #28]	@ (8005968 <HAL_RCC_GetHCLKFreq+0x28>)
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	4906      	ldr	r1, [pc, #24]	@ (800596c <HAL_RCC_GetHCLKFreq+0x2c>)
 8005954:	5ccb      	ldrb	r3, [r1, r3]
 8005956:	fa22 f303 	lsr.w	r3, r2, r3
 800595a:	4a05      	ldr	r2, [pc, #20]	@ (8005970 <HAL_RCC_GetHCLKFreq+0x30>)
 800595c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800595e:	4b04      	ldr	r3, [pc, #16]	@ (8005970 <HAL_RCC_GetHCLKFreq+0x30>)
 8005960:	681b      	ldr	r3, [r3, #0]
}
 8005962:	4618      	mov	r0, r3
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	46020c00 	.word	0x46020c00
 800596c:	0800bed8 	.word	0x0800bed8
 8005970:	20000014 	.word	0x20000014

08005974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800597c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800597e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800598a:	f7fe fddb 	bl	8004544 <HAL_PWREx_GetVoltageRange>
 800598e:	6178      	str	r0, [r7, #20]
 8005990:	e019      	b.n	80059c6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005992:	4b39      	ldr	r3, [pc, #228]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005998:	4a37      	ldr	r2, [pc, #220]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800599a:	f043 0304 	orr.w	r3, r3, #4
 800599e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80059a2:	4b35      	ldr	r3, [pc, #212]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80059a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059b0:	f7fe fdc8 	bl	8004544 <HAL_PWREx_GetVoltageRange>
 80059b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059b6:	4b30      	ldr	r3, [pc, #192]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80059b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80059be:	f023 0304 	bic.w	r3, r3, #4
 80059c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059cc:	d003      	beq.n	80059d6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059d4:	d109      	bne.n	80059ea <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059dc:	d202      	bcs.n	80059e4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80059de:	2301      	movs	r3, #1
 80059e0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80059e2:	e033      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80059e8:	e030      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059f0:	d208      	bcs.n	8005a04 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f8:	d102      	bne.n	8005a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80059fa:	2303      	movs	r3, #3
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e025      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e035      	b.n	8005a70 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a0a:	d90f      	bls.n	8005a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a18:	d902      	bls.n	8005a20 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	e015      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005a20:	2301      	movs	r3, #1
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	e012      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	e00f      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a32:	d109      	bne.n	8005a48 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a3a:	d102      	bne.n	8005a42 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	613b      	str	r3, [r7, #16]
 8005a40:	e004      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005a42:	2302      	movs	r3, #2
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	e001      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005a48:	2301      	movs	r3, #1
 8005a4a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f023 020f 	bic.w	r2, r3, #15
 8005a54:	4909      	ldr	r1, [pc, #36]	@ (8005a7c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005a5c:	4b07      	ldr	r3, [pc, #28]	@ (8005a7c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d001      	beq.n	8005a6e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	46020c00 	.word	0x46020c00
 8005a7c:	40022000 	.word	0x40022000

08005a80 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a84:	b0b8      	sub	sp, #224	@ 0xe0
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a92:	2300      	movs	r3, #0
 8005a94:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f002 0401 	and.w	r4, r2, #1
 8005aa4:	2500      	movs	r5, #0
 8005aa6:	ea54 0305 	orrs.w	r3, r4, r5
 8005aaa:	d00b      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005aac:	4bca      	ldr	r3, [pc, #808]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ab2:	f023 0103 	bic.w	r1, r3, #3
 8005ab6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005abc:	4ac6      	ldr	r2, [pc, #792]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f002 0802 	and.w	r8, r2, #2
 8005ad0:	f04f 0900 	mov.w	r9, #0
 8005ad4:	ea58 0309 	orrs.w	r3, r8, r9
 8005ad8:	d00b      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005ada:	4bbf      	ldr	r3, [pc, #764]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ae0:	f023 010c 	bic.w	r1, r3, #12
 8005ae4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aea:	4abb      	ldr	r2, [pc, #748]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005aec:	430b      	orrs	r3, r1
 8005aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005af2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f002 0a04 	and.w	sl, r2, #4
 8005afe:	f04f 0b00 	mov.w	fp, #0
 8005b02:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b06:	d00b      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005b08:	4bb3      	ldr	r3, [pc, #716]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b0e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b18:	4aaf      	ldr	r2, [pc, #700]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f002 0308 	and.w	r3, r2, #8
 8005b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b30:	2300      	movs	r3, #0
 8005b32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	d00b      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005b40:	4ba5      	ldr	r3, [pc, #660]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b50:	4aa1      	ldr	r2, [pc, #644]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b52:	430b      	orrs	r3, r1
 8005b54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	f002 0310 	and.w	r3, r2, #16
 8005b64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005b6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005b72:	460b      	mov	r3, r1
 8005b74:	4313      	orrs	r3, r2
 8005b76:	d00b      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005b78:	4b97      	ldr	r3, [pc, #604]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b88:	4a93      	ldr	r2, [pc, #588]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b8a:	430b      	orrs	r3, r1
 8005b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f002 0320 	and.w	r3, r2, #32
 8005b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ba6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4313      	orrs	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005bb0:	4b89      	ldr	r3, [pc, #548]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bb6:	f023 0107 	bic.w	r1, r3, #7
 8005bba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bc0:	4a85      	ldr	r2, [pc, #532]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bde:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005be2:	460b      	mov	r3, r1
 8005be4:	4313      	orrs	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005be8:	4b7b      	ldr	r3, [pc, #492]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bee:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005bf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bf8:	4a77      	ldr	r2, [pc, #476]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c16:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005c20:	4b6d      	ldr	r3, [pc, #436]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c30:	4a69      	ldr	r2, [pc, #420]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005c32:	430b      	orrs	r3, r1
 8005c34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c4e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005c52:	460b      	mov	r3, r1
 8005c54:	4313      	orrs	r3, r2
 8005c56:	d00b      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005c58:	4b5f      	ldr	r3, [pc, #380]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c68:	4a5b      	ldr	r2, [pc, #364]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005c90:	4b51      	ldr	r3, [pc, #324]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c96:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ca0:	4a4d      	ldr	r2, [pc, #308]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005cbe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005cc8:	4b43      	ldr	r3, [pc, #268]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005cce:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cd8:	4a3f      	ldr	r2, [pc, #252]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005cec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cf6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	d00b      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005d00:	4b35      	ldr	r3, [pc, #212]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d06:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005d0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d10:	4a31      	ldr	r2, [pc, #196]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d12:	430b      	orrs	r3, r1
 8005d14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005d18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d20:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d26:	2300      	movs	r3, #0
 8005d28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d2a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4313      	orrs	r3, r2
 8005d32:	d00c      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005d34:	4b28      	ldr	r3, [pc, #160]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d46:	4a24      	ldr	r2, [pc, #144]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005d5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d64:	460b      	mov	r3, r1
 8005d66:	4313      	orrs	r3, r2
 8005d68:	d04f      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005d6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d72:	2b80      	cmp	r3, #128	@ 0x80
 8005d74:	d02d      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8005d76:	2b80      	cmp	r3, #128	@ 0x80
 8005d78:	d827      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d7a:	2b60      	cmp	r3, #96	@ 0x60
 8005d7c:	d02e      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005d7e:	2b60      	cmp	r3, #96	@ 0x60
 8005d80:	d823      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d82:	2b40      	cmp	r3, #64	@ 0x40
 8005d84:	d006      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005d86:	2b40      	cmp	r3, #64	@ 0x40
 8005d88:	d81f      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d011      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005d92:	e01a      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d94:	4b10      	ldr	r3, [pc, #64]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d98:	4a0f      	ldr	r2, [pc, #60]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005da0:	e01d      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005da6:	3308      	adds	r3, #8
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fc0d 	bl	80065c8 <RCCEx_PLL2_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005db4:	e013      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005db6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dba:	332c      	adds	r3, #44	@ 0x2c
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fc9b 	bl	80066f8 <RCCEx_PLL3_Config>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005dc8:	e009      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005dd0:	e005      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8005dd2:	bf00      	nop
 8005dd4:	e003      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005dd6:	bf00      	nop
 8005dd8:	46020c00 	.word	0x46020c00
        break;
 8005ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dde:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10d      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005de6:	4bb6      	ldr	r3, [pc, #728]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005de8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005dec:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df8:	4ab1      	ldr	r2, [pc, #708]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005e00:	e003      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e02:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005e06:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005e16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e18:	2300      	movs	r3, #0
 8005e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e20:	460b      	mov	r3, r1
 8005e22:	4313      	orrs	r3, r2
 8005e24:	d053      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005e26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e32:	d033      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e38:	d82c      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e3e:	d02f      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005e40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e44:	d826      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e4a:	d008      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e50:	d820      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e5a:	d011      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005e5c:	e01a      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e5e:	4b98      	ldr	r3, [pc, #608]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	4a97      	ldr	r2, [pc, #604]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e68:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005e6a:	e01a      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e70:	3308      	adds	r3, #8
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fba8 	bl	80065c8 <RCCEx_PLL2_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005e7e:	e010      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e84:	332c      	adds	r3, #44	@ 0x2c
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fc36 	bl	80066f8 <RCCEx_PLL3_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005e92:	e006      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005e9a:	e002      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005e9c:	bf00      	nop
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10d      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005eaa:	4b85      	ldr	r3, [pc, #532]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005eac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005eb0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ebc:	4a80      	ldr	r2, [pc, #512]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005ec4:	e003      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005eca:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005eda:	663b      	str	r3, [r7, #96]	@ 0x60
 8005edc:	2300      	movs	r3, #0
 8005ede:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ee0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	d046      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ef2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ef6:	d028      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ef8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005efc:	d821      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005efe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f02:	d022      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005f04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f08:	d81b      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005f0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f0e:	d01c      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005f10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f14:	d815      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f1a:	d008      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f20:	d80f      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d011      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f2a:	d00e      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005f2c:	e009      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f32:	3308      	adds	r3, #8
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fb47 	bl	80065c8 <RCCEx_PLL2_Config>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005f40:	e004      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005f48:	e000      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8005f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10d      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005f54:	4b5a      	ldr	r3, [pc, #360]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f5a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f66:	4a56      	ldr	r2, [pc, #344]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005f6e:	e003      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f70:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005f74:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005f84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f86:	2300      	movs	r3, #0
 8005f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4313      	orrs	r3, r2
 8005f92:	d03f      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d81e      	bhi.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8005fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fe7 	.word	0x08005fe7
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fcb 	.word	0x08005fcb
 8005fb4:	08005fe7 	.word	0x08005fe7
 8005fb8:	08005fe7 	.word	0x08005fe7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fbc:	4b40      	ldr	r3, [pc, #256]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc0:	4a3f      	ldr	r2, [pc, #252]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fc6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005fc8:	e00e      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fce:	332c      	adds	r3, #44	@ 0x2c
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fb91 	bl	80066f8 <RCCEx_PLL3_Config>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005fdc:	e004      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8005fe6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005fe8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10d      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005ff0:	4b33      	ldr	r3, [pc, #204]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005ff2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ff6:	f023 0107 	bic.w	r1, r3, #7
 8005ffa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006002:	4a2f      	ldr	r2, [pc, #188]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006004:	430b      	orrs	r3, r1
 8006006:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800600a:	e003      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006010:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006020:	653b      	str	r3, [r7, #80]	@ 0x50
 8006022:	2300      	movs	r3, #0
 8006024:	657b      	str	r3, [r7, #84]	@ 0x54
 8006026:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800602a:	460b      	mov	r3, r1
 800602c:	4313      	orrs	r3, r2
 800602e:	d04d      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006038:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800603c:	d028      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800603e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006042:	d821      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006044:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006048:	d024      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800604a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800604e:	d81b      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006054:	d00e      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800605a:	d815      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01b      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006064:	d110      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006066:	4b16      	ldr	r3, [pc, #88]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606a:	4a15      	ldr	r2, [pc, #84]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800606c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006070:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006072:	e012      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006074:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006078:	332c      	adds	r3, #44	@ 0x2c
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fb3c 	bl	80066f8 <RCCEx_PLL3_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006086:	e008      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800608e:	e004      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006090:	bf00      	nop
 8006092:	e002      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006094:	bf00      	nop
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006098:	bf00      	nop
    }
    if (ret == HAL_OK)
 800609a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d110      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80060a2:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80060a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80060ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060b4:	4a02      	ldr	r2, [pc, #8]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80060b6:	430b      	orrs	r3, r1
 80060b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80060bc:	e006      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80060be:	bf00      	nop
 80060c0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80060c8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80060d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060da:	2300      	movs	r3, #0
 80060dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80060e2:	460b      	mov	r3, r1
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f000 80b5 	beq.w	8006254 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ea:	2300      	movs	r3, #0
 80060ec:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060f0:	4b9d      	ldr	r3, [pc, #628]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80060f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d113      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060fe:	4b9a      	ldr	r3, [pc, #616]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006104:	4a98      	ldr	r2, [pc, #608]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006106:	f043 0304 	orr.w	r3, r3, #4
 800610a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800610e:	4b96      	ldr	r3, [pc, #600]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800611c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8006120:	2301      	movs	r3, #1
 8006122:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006126:	4b91      	ldr	r3, [pc, #580]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612a:	4a90      	ldr	r2, [pc, #576]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006132:	f7fb f97f 	bl	8001434 <HAL_GetTick>
 8006136:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800613a:	e00b      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613c:	f7fb f97a 	bl	8001434 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d903      	bls.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006152:	e005      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006154:	4b85      	ldr	r3, [pc, #532]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0ed      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006160:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006164:	2b00      	cmp	r3, #0
 8006166:	d165      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006168:	4b7f      	ldr	r3, [pc, #508]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800616a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800616e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006172:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800617a:	2b00      	cmp	r3, #0
 800617c:	d023      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800617e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006182:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800618a:	4293      	cmp	r3, r2
 800618c:	d01b      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800618e:	4b76      	ldr	r3, [pc, #472]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006198:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800619c:	4b72      	ldr	r3, [pc, #456]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800619e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061a2:	4a71      	ldr	r2, [pc, #452]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80061a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061ac:	4b6e      	ldr	r3, [pc, #440]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80061ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061b2:	4a6d      	ldr	r2, [pc, #436]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80061b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061bc:	4a6a      	ldr	r2, [pc, #424]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80061be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d019      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d2:	f7fb f92f 	bl	8001434 <HAL_GetTick>
 80061d6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061da:	e00d      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061dc:	f7fb f92a 	bl	8001434 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061e6:	1ad2      	subs	r2, r2, r3
 80061e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d903      	bls.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80061f6:	e006      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061f8:	4b5b      	ldr	r3, [pc, #364]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80061fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0ea      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8006206:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10d      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800620e:	4b56      	ldr	r3, [pc, #344]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006214:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006218:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800621c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006220:	4a51      	ldr	r2, [pc, #324]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006222:	430b      	orrs	r3, r1
 8006224:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006228:	e008      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800622a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800622e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8006232:	e003      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006238:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800623c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8006240:	2b01      	cmp	r3, #1
 8006242:	d107      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006244:	4b48      	ldr	r3, [pc, #288]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800624a:	4a47      	ldr	r2, [pc, #284]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800624c:	f023 0304 	bic.w	r3, r3, #4
 8006250:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006260:	643b      	str	r3, [r7, #64]	@ 0x40
 8006262:	2300      	movs	r3, #0
 8006264:	647b      	str	r3, [r7, #68]	@ 0x44
 8006266:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800626a:	460b      	mov	r3, r1
 800626c:	4313      	orrs	r3, r2
 800626e:	d042      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006274:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006278:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800627c:	d022      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800627e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006282:	d81b      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006284:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006288:	d011      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800628a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800628e:	d815      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d019      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006294:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006298:	d110      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800629a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800629e:	3308      	adds	r3, #8
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 f991 	bl	80065c8 <RCCEx_PLL2_Config>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80062ac:	e00d      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ae:	4b2e      	ldr	r3, [pc, #184]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80062b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80062ba:	e006      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80062c2:	e002      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80062c4:	bf00      	nop
 80062c6:	e000      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80062c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80062ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10d      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80062d2:	4b25      	ldr	r3, [pc, #148]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80062d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062d8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80062dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062e4:	4a20      	ldr	r2, [pc, #128]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80062e6:	430b      	orrs	r3, r1
 80062e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80062ec:	e003      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062f2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006302:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006304:	2300      	movs	r3, #0
 8006306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006308:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800630c:	460b      	mov	r3, r1
 800630e:	4313      	orrs	r3, r2
 8006310:	d032      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006312:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006316:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800631a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800631e:	d00b      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006324:	d804      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800632a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632e:	d007      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006336:	e004      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006338:	bf00      	nop
 800633a:	e002      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800633c:	bf00      	nop
 800633e:	e000      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006340:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006342:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006346:	2b00      	cmp	r3, #0
 8006348:	d112      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800634a:	4b07      	ldr	r3, [pc, #28]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800634c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006350:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006358:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800635c:	4a02      	ldr	r2, [pc, #8]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800635e:	430b      	orrs	r3, r1
 8006360:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006364:	e008      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006366:	bf00      	nop
 8006368:	46020c00 	.word	0x46020c00
 800636c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006374:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006378:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006384:	633b      	str	r3, [r7, #48]	@ 0x30
 8006386:	2300      	movs	r3, #0
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
 800638a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800638e:	460b      	mov	r3, r1
 8006390:	4313      	orrs	r3, r2
 8006392:	d019      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006398:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800639c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063a0:	d105      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063a2:	4b88      	ldr	r3, [pc, #544]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80063a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a6:	4a87      	ldr	r2, [pc, #540]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80063a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ac:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80063ae:	4b85      	ldr	r3, [pc, #532]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80063b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80063b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063c0:	4a80      	ldr	r2, [pc, #512]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80063c2:	430b      	orrs	r3, r1
 80063c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80063c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80063d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063d6:	2300      	movs	r3, #0
 80063d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063da:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80063de:	460b      	mov	r3, r1
 80063e0:	4313      	orrs	r3, r2
 80063e2:	d00c      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80063e4:	4b77      	ldr	r3, [pc, #476]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80063e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063f6:	4973      	ldr	r1, [pc, #460]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80063fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800640a:	623b      	str	r3, [r7, #32]
 800640c:	2300      	movs	r3, #0
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006410:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006414:	460b      	mov	r3, r1
 8006416:	4313      	orrs	r3, r2
 8006418:	d00c      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800641a:	4b6a      	ldr	r3, [pc, #424]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800641c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006420:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006428:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800642c:	4965      	ldr	r1, [pc, #404]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800644a:	460b      	mov	r3, r1
 800644c:	4313      	orrs	r3, r2
 800644e:	d00c      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006450:	4b5c      	ldr	r3, [pc, #368]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006456:	f023 0218 	bic.w	r2, r3, #24
 800645a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800645e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006462:	4958      	ldr	r1, [pc, #352]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800646a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006480:	460b      	mov	r3, r1
 8006482:	4313      	orrs	r3, r2
 8006484:	d032      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006486:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800648a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800648e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006492:	d105      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006494:	4b4b      	ldr	r3, [pc, #300]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006498:	4a4a      	ldr	r2, [pc, #296]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800649a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800649e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80064a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80064a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064ac:	d108      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064b2:	3308      	adds	r3, #8
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f887 	bl	80065c8 <RCCEx_PLL2_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80064c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10d      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80064c8:	4b3e      	ldr	r3, [pc, #248]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80064ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80064da:	493a      	ldr	r1, [pc, #232]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80064e2:	e003      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064e8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80064ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006502:	460b      	mov	r3, r1
 8006504:	4313      	orrs	r3, r2
 8006506:	d03a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800650c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006510:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006514:	d00e      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800651a:	d815      	bhi.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d017      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006524:	d110      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006526:	4b27      	ldr	r3, [pc, #156]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652a:	4a26      	ldr	r2, [pc, #152]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800652c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006530:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006532:	e00e      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006534:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006538:	3308      	adds	r3, #8
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f844 	bl	80065c8 <RCCEx_PLL2_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006546:	e004      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800654e:	e000      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8006550:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006552:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10d      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800655a:	4b1a      	ldr	r3, [pc, #104]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800655c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006560:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800656c:	4915      	ldr	r1, [pc, #84]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006574:	e003      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006576:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800657a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800657e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	2300      	movs	r3, #0
 800658e:	607b      	str	r3, [r7, #4]
 8006590:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006594:	460b      	mov	r3, r1
 8006596:	4313      	orrs	r3, r2
 8006598:	d00c      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800659a:	4b0a      	ldr	r3, [pc, #40]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800659c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065a0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80065a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80065ac:	4905      	ldr	r1, [pc, #20]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80065b4:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	37e0      	adds	r7, #224	@ 0xe0
 80065bc:	46bd      	mov	sp, r7
 80065be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065c2:	bf00      	nop
 80065c4:	46020c00 	.word	0x46020c00

080065c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80065d0:	4b47      	ldr	r3, [pc, #284]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a46      	ldr	r2, [pc, #280]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 80065d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065dc:	f7fa ff2a 	bl	8001434 <HAL_GetTick>
 80065e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065e2:	e008      	b.n	80065f6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065e4:	f7fa ff26 	bl	8001434 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e077      	b.n	80066e6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065f6:	4b3e      	ldr	r3, [pc, #248]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006602:	4b3b      	ldr	r3, [pc, #236]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 8006604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006606:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800660a:	f023 0303 	bic.w	r3, r3, #3
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6811      	ldr	r1, [r2, #0]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6852      	ldr	r2, [r2, #4]
 8006616:	3a01      	subs	r2, #1
 8006618:	0212      	lsls	r2, r2, #8
 800661a:	430a      	orrs	r2, r1
 800661c:	4934      	ldr	r1, [pc, #208]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 800661e:	4313      	orrs	r3, r2
 8006620:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006622:	4b33      	ldr	r3, [pc, #204]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 8006624:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006626:	4b33      	ldr	r3, [pc, #204]	@ (80066f4 <RCCEx_PLL2_Config+0x12c>)
 8006628:	4013      	ands	r3, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6892      	ldr	r2, [r2, #8]
 800662e:	3a01      	subs	r2, #1
 8006630:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	68d2      	ldr	r2, [r2, #12]
 8006638:	3a01      	subs	r2, #1
 800663a:	0252      	lsls	r2, r2, #9
 800663c:	b292      	uxth	r2, r2
 800663e:	4311      	orrs	r1, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6912      	ldr	r2, [r2, #16]
 8006644:	3a01      	subs	r2, #1
 8006646:	0412      	lsls	r2, r2, #16
 8006648:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800664c:	4311      	orrs	r1, r2
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6952      	ldr	r2, [r2, #20]
 8006652:	3a01      	subs	r2, #1
 8006654:	0612      	lsls	r2, r2, #24
 8006656:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800665a:	430a      	orrs	r2, r1
 800665c:	4924      	ldr	r1, [pc, #144]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 800665e:	4313      	orrs	r3, r2
 8006660:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006662:	4b23      	ldr	r3, [pc, #140]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 8006664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006666:	f023 020c 	bic.w	r2, r3, #12
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	4920      	ldr	r1, [pc, #128]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 8006670:	4313      	orrs	r3, r2
 8006672:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006674:	4b1e      	ldr	r3, [pc, #120]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 8006676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	491c      	ldr	r1, [pc, #112]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 800667e:	4313      	orrs	r3, r2
 8006680:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006682:	4b1b      	ldr	r3, [pc, #108]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	4a1a      	ldr	r2, [pc, #104]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 8006688:	f023 0310 	bic.w	r3, r3, #16
 800668c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800668e:	4b18      	ldr	r3, [pc, #96]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006696:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	69d2      	ldr	r2, [r2, #28]
 800669e:	00d2      	lsls	r2, r2, #3
 80066a0:	4913      	ldr	r1, [pc, #76]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80066a6:	4b12      	ldr	r3, [pc, #72]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 80066a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066aa:	4a11      	ldr	r2, [pc, #68]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 80066ac:	f043 0310 	orr.w	r3, r3, #16
 80066b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80066b2:	4b0f      	ldr	r3, [pc, #60]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a0e      	ldr	r2, [pc, #56]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 80066b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80066bc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066be:	f7fa feb9 	bl	8001434 <HAL_GetTick>
 80066c2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066c4:	e008      	b.n	80066d8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80066c6:	f7fa feb5 	bl	8001434 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e006      	b.n	80066e6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066d8:	4b05      	ldr	r3, [pc, #20]	@ (80066f0 <RCCEx_PLL2_Config+0x128>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0

}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	46020c00 	.word	0x46020c00
 80066f4:	80800000 	.word	0x80800000

080066f8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006700:	4b47      	ldr	r3, [pc, #284]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a46      	ldr	r2, [pc, #280]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 8006706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800670a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800670c:	f7fa fe92 	bl	8001434 <HAL_GetTick>
 8006710:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006712:	e008      	b.n	8006726 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006714:	f7fa fe8e 	bl	8001434 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d901      	bls.n	8006726 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e077      	b.n	8006816 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006726:	4b3e      	ldr	r3, [pc, #248]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f0      	bne.n	8006714 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006732:	4b3b      	ldr	r3, [pc, #236]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006736:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6811      	ldr	r1, [r2, #0]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	6852      	ldr	r2, [r2, #4]
 8006746:	3a01      	subs	r2, #1
 8006748:	0212      	lsls	r2, r2, #8
 800674a:	430a      	orrs	r2, r1
 800674c:	4934      	ldr	r1, [pc, #208]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 800674e:	4313      	orrs	r3, r2
 8006750:	630b      	str	r3, [r1, #48]	@ 0x30
 8006752:	4b33      	ldr	r3, [pc, #204]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 8006754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006756:	4b33      	ldr	r3, [pc, #204]	@ (8006824 <RCCEx_PLL3_Config+0x12c>)
 8006758:	4013      	ands	r3, r2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6892      	ldr	r2, [r2, #8]
 800675e:	3a01      	subs	r2, #1
 8006760:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	68d2      	ldr	r2, [r2, #12]
 8006768:	3a01      	subs	r2, #1
 800676a:	0252      	lsls	r2, r2, #9
 800676c:	b292      	uxth	r2, r2
 800676e:	4311      	orrs	r1, r2
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6912      	ldr	r2, [r2, #16]
 8006774:	3a01      	subs	r2, #1
 8006776:	0412      	lsls	r2, r2, #16
 8006778:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800677c:	4311      	orrs	r1, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6952      	ldr	r2, [r2, #20]
 8006782:	3a01      	subs	r2, #1
 8006784:	0612      	lsls	r2, r2, #24
 8006786:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800678a:	430a      	orrs	r2, r1
 800678c:	4924      	ldr	r1, [pc, #144]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 800678e:	4313      	orrs	r3, r2
 8006790:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006792:	4b23      	ldr	r3, [pc, #140]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006796:	f023 020c 	bic.w	r2, r3, #12
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	4920      	ldr	r1, [pc, #128]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80067a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 80067a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	491c      	ldr	r1, [pc, #112]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80067b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 80067b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 80067b8:	f023 0310 	bic.w	r3, r3, #16
 80067bc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80067be:	4b18      	ldr	r3, [pc, #96]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 80067c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067c6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	69d2      	ldr	r2, [r2, #28]
 80067ce:	00d2      	lsls	r2, r2, #3
 80067d0:	4913      	ldr	r1, [pc, #76]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80067d6:	4b12      	ldr	r3, [pc, #72]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067da:	4a11      	ldr	r2, [pc, #68]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 80067dc:	f043 0310 	orr.w	r3, r3, #16
 80067e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80067e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a0e      	ldr	r2, [pc, #56]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 80067e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067ec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80067ee:	f7fa fe21 	bl	8001434 <HAL_GetTick>
 80067f2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067f4:	e008      	b.n	8006808 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067f6:	f7fa fe1d 	bl	8001434 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e006      	b.n	8006816 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006808:	4b05      	ldr	r3, [pc, #20]	@ (8006820 <RCCEx_PLL3_Config+0x128>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0f0      	beq.n	80067f6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	46020c00 	.word	0x46020c00
 8006824:	80800000 	.word	0x80800000

08006828 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e0fb      	b.n	8006a32 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a7f      	ldr	r2, [pc, #508]	@ (8006a3c <HAL_SPI_Init+0x214>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d004      	beq.n	800684e <HAL_SPI_Init+0x26>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a7d      	ldr	r2, [pc, #500]	@ (8006a40 <HAL_SPI_Init+0x218>)
 800684a:	4293      	cmp	r3, r2
 800684c:	e000      	b.n	8006850 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800684e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a78      	ldr	r2, [pc, #480]	@ (8006a3c <HAL_SPI_Init+0x214>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_SPI_Init+0x42>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a76      	ldr	r2, [pc, #472]	@ (8006a40 <HAL_SPI_Init+0x218>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d105      	bne.n	8006876 <HAL_SPI_Init+0x4e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	2b0f      	cmp	r3, #15
 8006870:	d901      	bls.n	8006876 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e0dd      	b.n	8006a32 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fbce 	bl	8007018 <SPI_GetPacketSize>
 800687c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a6e      	ldr	r2, [pc, #440]	@ (8006a3c <HAL_SPI_Init+0x214>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d004      	beq.n	8006892 <HAL_SPI_Init+0x6a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a6c      	ldr	r2, [pc, #432]	@ (8006a40 <HAL_SPI_Init+0x218>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d102      	bne.n	8006898 <HAL_SPI_Init+0x70>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b08      	cmp	r3, #8
 8006896:	d816      	bhi.n	80068c6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800689c:	4a69      	ldr	r2, [pc, #420]	@ (8006a44 <HAL_SPI_Init+0x21c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00e      	beq.n	80068c0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a68      	ldr	r2, [pc, #416]	@ (8006a48 <HAL_SPI_Init+0x220>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d009      	beq.n	80068c0 <HAL_SPI_Init+0x98>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a66      	ldr	r2, [pc, #408]	@ (8006a4c <HAL_SPI_Init+0x224>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_SPI_Init+0x98>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a65      	ldr	r2, [pc, #404]	@ (8006a50 <HAL_SPI_Init+0x228>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d104      	bne.n	80068ca <HAL_SPI_Init+0xa2>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b10      	cmp	r3, #16
 80068c4:	d901      	bls.n	80068ca <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e0b3      	b.n	8006a32 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7fa f9f6 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0201 	bic.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006906:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006910:	d119      	bne.n	8006946 <HAL_SPI_Init+0x11e>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800691a:	d103      	bne.n	8006924 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10c      	bne.n	8006946 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006930:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006934:	d107      	bne.n	8006946 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006944:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00f      	beq.n	8006972 <HAL_SPI_Init+0x14a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	2b06      	cmp	r3, #6
 8006958:	d90b      	bls.n	8006972 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	e007      	b.n	8006982 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006980:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	69da      	ldr	r2, [r3, #28]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698a:	431a      	orrs	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006994:	ea42 0103 	orr.w	r1, r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e8:	431a      	orrs	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ee:	ea42 0103 	orr.w	r1, r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	46002000 	.word	0x46002000
 8006a40:	56002000 	.word	0x56002000
 8006a44:	40013000 	.word	0x40013000
 8006a48:	50013000 	.word	0x50013000
 8006a4c:	40003800 	.word	0x40003800
 8006a50:	50003800 	.word	0x50003800

08006a54 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	4613      	mov	r3, r2
 8006a62:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3320      	adds	r3, #32
 8006a6a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a90      	ldr	r2, [pc, #576]	@ (8006cb4 <HAL_SPI_Transmit+0x260>)
 8006a72:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a74:	f7fa fcde 	bl	8001434 <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d001      	beq.n	8006a8a <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
 8006a88:	e1f4      	b.n	8006e74 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <HAL_SPI_Transmit+0x42>
 8006a90:	88fb      	ldrh	r3, [r7, #6]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e1ec      	b.n	8006e74 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_SPI_Transmit+0x54>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e1e5      	b.n	8006e74 <HAL_SPI_Transmit+0x420>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	88fa      	ldrh	r2, [r7, #6]
 8006aca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	88fa      	ldrh	r2, [r7, #6]
 8006ad2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006b00:	d108      	bne.n	8006b14 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e009      	b.n	8006b28 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006b26:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	0c1b      	lsrs	r3, r3, #16
 8006b30:	041b      	lsls	r3, r3, #16
 8006b32:	88f9      	ldrh	r1, [r7, #6]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10c      	bne.n	8006b74 <HAL_SPI_Transmit+0x120>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b62:	d107      	bne.n	8006b74 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	2b0f      	cmp	r3, #15
 8006b7a:	d95b      	bls.n	8006c34 <HAL_SPI_Transmit+0x1e0>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a4d      	ldr	r2, [pc, #308]	@ (8006cb8 <HAL_SPI_Transmit+0x264>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d04f      	beq.n	8006c26 <HAL_SPI_Transmit+0x1d2>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a4c      	ldr	r2, [pc, #304]	@ (8006cbc <HAL_SPI_Transmit+0x268>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d04a      	beq.n	8006c26 <HAL_SPI_Transmit+0x1d2>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a4a      	ldr	r2, [pc, #296]	@ (8006cc0 <HAL_SPI_Transmit+0x26c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d045      	beq.n	8006c26 <HAL_SPI_Transmit+0x1d2>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a49      	ldr	r2, [pc, #292]	@ (8006cc4 <HAL_SPI_Transmit+0x270>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d147      	bne.n	8006c34 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006ba4:	e03f      	b.n	8006c26 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d114      	bne.n	8006bde <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bc4:	1d1a      	adds	r2, r3, #4
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006bdc:	e023      	b.n	8006c26 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bde:	f7fa fc29 	bl	8001434 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d803      	bhi.n	8006bf6 <HAL_SPI_Transmit+0x1a2>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf4:	d102      	bne.n	8006bfc <HAL_SPI_Transmit+0x1a8>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d114      	bne.n	8006c26 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f93d 	bl	8006e7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e126      	b.n	8006e74 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1b9      	bne.n	8006ba6 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006c32:	e0f9      	b.n	8006e28 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	2b07      	cmp	r3, #7
 8006c3a:	f240 80ee 	bls.w	8006e1a <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006c3e:	e067      	b.n	8006d10 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d13c      	bne.n	8006cc8 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d918      	bls.n	8006c8c <HAL_SPI_Transmit+0x238>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d014      	beq.n	8006c8c <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6812      	ldr	r2, [r2, #0]
 8006c6c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c72:	1d1a      	adds	r2, r3, #4
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3b02      	subs	r3, #2
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c8a:	e041      	b.n	8006d10 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c90:	881a      	ldrh	r2, [r3, #0]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c9a:	1c9a      	adds	r2, r3, #2
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006cb2:	e02d      	b.n	8006d10 <HAL_SPI_Transmit+0x2bc>
 8006cb4:	46002000 	.word	0x46002000
 8006cb8:	40013000 	.word	0x40013000
 8006cbc:	50013000 	.word	0x50013000
 8006cc0:	40003800 	.word	0x40003800
 8006cc4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc8:	f7fa fbb4 	bl	8001434 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d803      	bhi.n	8006ce0 <HAL_SPI_Transmit+0x28c>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d102      	bne.n	8006ce6 <HAL_SPI_Transmit+0x292>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d114      	bne.n	8006d10 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f8c8 	bl	8006e7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cf2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e0b1      	b.n	8006e74 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d191      	bne.n	8006c40 <HAL_SPI_Transmit+0x1ec>
 8006d1c:	e084      	b.n	8006e28 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d152      	bne.n	8006dd2 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d918      	bls.n	8006d6a <HAL_SPI_Transmit+0x316>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3c:	2b40      	cmp	r3, #64	@ 0x40
 8006d3e:	d914      	bls.n	8006d6a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6812      	ldr	r2, [r2, #0]
 8006d4a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d50:	1d1a      	adds	r2, r3, #4
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b04      	subs	r3, #4
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d68:	e057      	b.n	8006e1a <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d917      	bls.n	8006da6 <HAL_SPI_Transmit+0x352>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d013      	beq.n	8006da6 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d82:	881a      	ldrh	r2, [r3, #0]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d8c:	1c9a      	adds	r2, r3, #2
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b02      	subs	r3, #2
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006da4:	e039      	b.n	8006e1a <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3320      	adds	r3, #32
 8006db0:	7812      	ldrb	r2, [r2, #0]
 8006db2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006dd0:	e023      	b.n	8006e1a <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd2:	f7fa fb2f 	bl	8001434 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d803      	bhi.n	8006dea <HAL_SPI_Transmit+0x396>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de8:	d102      	bne.n	8006df0 <HAL_SPI_Transmit+0x39c>
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d114      	bne.n	8006e1a <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f843 	bl	8006e7c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dfc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e02c      	b.n	8006e74 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f47f af7b 	bne.w	8006d1e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2108      	movs	r1, #8
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 f8c2 	bl	8006fbc <SPI_WaitOnFlagUntilTimeout>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d007      	beq.n	8006e4e <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e44:	f043 0220 	orr.w	r2, r3, #32
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 f814 	bl	8006e7c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8006e72:	2300      	movs	r3, #0
  }
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0208 	orr.w	r2, r2, #8
 8006e9a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0210 	orr.w	r2, r2, #16
 8006eaa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0201 	bic.w	r2, r2, #1
 8006eba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8006eca:	f023 0303 	bic.w	r3, r3, #3
 8006ece:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006ede:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d014      	beq.n	8006f16 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00f      	beq.n	8006f16 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006efc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	699a      	ldr	r2, [r3, #24]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0220 	orr.w	r2, r2, #32
 8006f14:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d014      	beq.n	8006f4c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00f      	beq.n	8006f4c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f32:	f043 0204 	orr.w	r2, r3, #4
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699a      	ldr	r2, [r3, #24]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f4a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00f      	beq.n	8006f76 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f5c:	f043 0201 	orr.w	r2, r3, #1
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699a      	ldr	r2, [r3, #24]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f74:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00f      	beq.n	8006fa0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f86:	f043 0208 	orr.w	r2, r3, #8
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f9e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8006fb0:	bf00      	nop
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006fcc:	e010      	b.n	8006ff0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fce:	f7fa fa31 	bl	8001434 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d803      	bhi.n	8006fe6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d102      	bne.n	8006fec <SPI_WaitOnFlagUntilTimeout+0x30>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e00f      	b.n	8007010 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695a      	ldr	r2, [r3, #20]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	bf0c      	ite	eq
 8007000:	2301      	moveq	r3, #1
 8007002:	2300      	movne	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	429a      	cmp	r2, r3
 800700c:	d0df      	beq.n	8006fce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	3301      	adds	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	3301      	adds	r3, #1
 8007030:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3307      	adds	r3, #7
 8007036:	08db      	lsrs	r3, r3, #3
 8007038:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b01      	cmp	r3, #1
 8007062:	d12e      	bne.n	80070c2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800706e:	2302      	movs	r3, #2
 8007070:	e028      	b.n	80070c4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2202      	movs	r2, #2
 800707e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0201 	bic.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800709e:	ea42 0103 	orr.w	r1, r2, r3
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	e000      	b.n	80070c4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
  }
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e049      	b.n	8007176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7f9 fee0 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f000 faac 	bl	800766c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e049      	b.n	8007224 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d106      	bne.n	80071aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f841 	bl	800722c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2202      	movs	r2, #2
 80071ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4619      	mov	r1, r3
 80071bc:	4610      	mov	r0, r2
 80071be:	f000 fa55 	bl	800766c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800725a:	2302      	movs	r3, #2
 800725c:	e0ff      	b.n	800745e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b14      	cmp	r3, #20
 800726a:	f200 80f0 	bhi.w	800744e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800726e:	a201      	add	r2, pc, #4	@ (adr r2, 8007274 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	080072c9 	.word	0x080072c9
 8007278:	0800744f 	.word	0x0800744f
 800727c:	0800744f 	.word	0x0800744f
 8007280:	0800744f 	.word	0x0800744f
 8007284:	08007309 	.word	0x08007309
 8007288:	0800744f 	.word	0x0800744f
 800728c:	0800744f 	.word	0x0800744f
 8007290:	0800744f 	.word	0x0800744f
 8007294:	0800734b 	.word	0x0800734b
 8007298:	0800744f 	.word	0x0800744f
 800729c:	0800744f 	.word	0x0800744f
 80072a0:	0800744f 	.word	0x0800744f
 80072a4:	0800738b 	.word	0x0800738b
 80072a8:	0800744f 	.word	0x0800744f
 80072ac:	0800744f 	.word	0x0800744f
 80072b0:	0800744f 	.word	0x0800744f
 80072b4:	080073cd 	.word	0x080073cd
 80072b8:	0800744f 	.word	0x0800744f
 80072bc:	0800744f 	.word	0x0800744f
 80072c0:	0800744f 	.word	0x0800744f
 80072c4:	0800740d 	.word	0x0800740d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68b9      	ldr	r1, [r7, #8]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 facc 	bl	800786c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0208 	orr.w	r2, r2, #8
 80072e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0204 	bic.w	r2, r2, #4
 80072f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6999      	ldr	r1, [r3, #24]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	691a      	ldr	r2, [r3, #16]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	619a      	str	r2, [r3, #24]
      break;
 8007306:	e0a5      	b.n	8007454 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fb6e 	bl	80079f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699a      	ldr	r2, [r3, #24]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699a      	ldr	r2, [r3, #24]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6999      	ldr	r1, [r3, #24]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	021a      	lsls	r2, r3, #8
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	619a      	str	r2, [r3, #24]
      break;
 8007348:	e084      	b.n	8007454 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68b9      	ldr	r1, [r7, #8]
 8007350:	4618      	mov	r0, r3
 8007352:	f000 fbfd 	bl	8007b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69da      	ldr	r2, [r3, #28]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f042 0208 	orr.w	r2, r2, #8
 8007364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69da      	ldr	r2, [r3, #28]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0204 	bic.w	r2, r2, #4
 8007374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69d9      	ldr	r1, [r3, #28]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	61da      	str	r2, [r3, #28]
      break;
 8007388:	e064      	b.n	8007454 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fc8b 	bl	8007cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69da      	ldr	r2, [r3, #28]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69d9      	ldr	r1, [r3, #28]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	021a      	lsls	r2, r3, #8
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	61da      	str	r2, [r3, #28]
      break;
 80073ca:	e043      	b.n	8007454 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68b9      	ldr	r1, [r7, #8]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fd1a 	bl	8007e0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0208 	orr.w	r2, r2, #8
 80073e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0204 	bic.w	r2, r2, #4
 80073f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800740a:	e023      	b.n	8007454 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fd7c 	bl	8007f10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007426:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007436:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	021a      	lsls	r2, r3, #8
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800744c:	e002      	b.n	8007454 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	75fb      	strb	r3, [r7, #23]
      break;
 8007452:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop

08007468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_TIM_ConfigClockSource+0x1c>
 8007480:	2302      	movs	r3, #2
 8007482:	e0e6      	b.n	8007652 <HAL_TIM_ConfigClockSource+0x1ea>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80074a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80074a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a67      	ldr	r2, [pc, #412]	@ (800765c <HAL_TIM_ConfigClockSource+0x1f4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	f000 80b1 	beq.w	8007626 <HAL_TIM_ConfigClockSource+0x1be>
 80074c4:	4a65      	ldr	r2, [pc, #404]	@ (800765c <HAL_TIM_ConfigClockSource+0x1f4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	f200 80b6 	bhi.w	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 80074cc:	4a64      	ldr	r2, [pc, #400]	@ (8007660 <HAL_TIM_ConfigClockSource+0x1f8>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	f000 80a9 	beq.w	8007626 <HAL_TIM_ConfigClockSource+0x1be>
 80074d4:	4a62      	ldr	r2, [pc, #392]	@ (8007660 <HAL_TIM_ConfigClockSource+0x1f8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	f200 80ae 	bhi.w	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 80074dc:	4a61      	ldr	r2, [pc, #388]	@ (8007664 <HAL_TIM_ConfigClockSource+0x1fc>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	f000 80a1 	beq.w	8007626 <HAL_TIM_ConfigClockSource+0x1be>
 80074e4:	4a5f      	ldr	r2, [pc, #380]	@ (8007664 <HAL_TIM_ConfigClockSource+0x1fc>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	f200 80a6 	bhi.w	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 80074ec:	4a5e      	ldr	r2, [pc, #376]	@ (8007668 <HAL_TIM_ConfigClockSource+0x200>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	f000 8099 	beq.w	8007626 <HAL_TIM_ConfigClockSource+0x1be>
 80074f4:	4a5c      	ldr	r2, [pc, #368]	@ (8007668 <HAL_TIM_ConfigClockSource+0x200>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	f200 809e 	bhi.w	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 80074fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007500:	f000 8091 	beq.w	8007626 <HAL_TIM_ConfigClockSource+0x1be>
 8007504:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007508:	f200 8096 	bhi.w	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 800750c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007510:	f000 8089 	beq.w	8007626 <HAL_TIM_ConfigClockSource+0x1be>
 8007514:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007518:	f200 808e 	bhi.w	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 800751c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007520:	d03e      	beq.n	80075a0 <HAL_TIM_ConfigClockSource+0x138>
 8007522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007526:	f200 8087 	bhi.w	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 800752a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800752e:	f000 8086 	beq.w	800763e <HAL_TIM_ConfigClockSource+0x1d6>
 8007532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007536:	d87f      	bhi.n	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 8007538:	2b70      	cmp	r3, #112	@ 0x70
 800753a:	d01a      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x10a>
 800753c:	2b70      	cmp	r3, #112	@ 0x70
 800753e:	d87b      	bhi.n	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 8007540:	2b60      	cmp	r3, #96	@ 0x60
 8007542:	d050      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x17e>
 8007544:	2b60      	cmp	r3, #96	@ 0x60
 8007546:	d877      	bhi.n	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 8007548:	2b50      	cmp	r3, #80	@ 0x50
 800754a:	d03c      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x15e>
 800754c:	2b50      	cmp	r3, #80	@ 0x50
 800754e:	d873      	bhi.n	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 8007550:	2b40      	cmp	r3, #64	@ 0x40
 8007552:	d058      	beq.n	8007606 <HAL_TIM_ConfigClockSource+0x19e>
 8007554:	2b40      	cmp	r3, #64	@ 0x40
 8007556:	d86f      	bhi.n	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 8007558:	2b30      	cmp	r3, #48	@ 0x30
 800755a:	d064      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0x1be>
 800755c:	2b30      	cmp	r3, #48	@ 0x30
 800755e:	d86b      	bhi.n	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 8007560:	2b20      	cmp	r3, #32
 8007562:	d060      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0x1be>
 8007564:	2b20      	cmp	r3, #32
 8007566:	d867      	bhi.n	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d05c      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0x1be>
 800756c:	2b10      	cmp	r3, #16
 800756e:	d05a      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0x1be>
 8007570:	e062      	b.n	8007638 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007582:	f000 fdc5 	bl	8008110 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	609a      	str	r2, [r3, #8]
      break;
 800759e:	e04f      	b.n	8007640 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075b0:	f000 fdae 	bl	8008110 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075c2:	609a      	str	r2, [r3, #8]
      break;
 80075c4:	e03c      	b.n	8007640 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075d2:	461a      	mov	r2, r3
 80075d4:	f000 fd20 	bl	8008018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2150      	movs	r1, #80	@ 0x50
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fd79 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 80075e4:	e02c      	b.n	8007640 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075f2:	461a      	mov	r2, r3
 80075f4:	f000 fd3f 	bl	8008076 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2160      	movs	r1, #96	@ 0x60
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fd69 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 8007604:	e01c      	b.n	8007640 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007612:	461a      	mov	r2, r3
 8007614:	f000 fd00 	bl	8008018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2140      	movs	r1, #64	@ 0x40
 800761e:	4618      	mov	r0, r3
 8007620:	f000 fd59 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 8007624:	e00c      	b.n	8007640 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4619      	mov	r1, r3
 8007630:	4610      	mov	r0, r2
 8007632:	f000 fd50 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 8007636:	e003      	b.n	8007640 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	73fb      	strb	r3, [r7, #15]
      break;
 800763c:	e000      	b.n	8007640 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800763e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	00100070 	.word	0x00100070
 8007660:	00100040 	.word	0x00100040
 8007664:	00100030 	.word	0x00100030
 8007668:	00100020 	.word	0x00100020

0800766c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a6b      	ldr	r2, [pc, #428]	@ (800782c <TIM_Base_SetConfig+0x1c0>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d02b      	beq.n	80076dc <TIM_Base_SetConfig+0x70>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a6a      	ldr	r2, [pc, #424]	@ (8007830 <TIM_Base_SetConfig+0x1c4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d027      	beq.n	80076dc <TIM_Base_SetConfig+0x70>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007692:	d023      	beq.n	80076dc <TIM_Base_SetConfig+0x70>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800769a:	d01f      	beq.n	80076dc <TIM_Base_SetConfig+0x70>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a65      	ldr	r2, [pc, #404]	@ (8007834 <TIM_Base_SetConfig+0x1c8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d01b      	beq.n	80076dc <TIM_Base_SetConfig+0x70>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a64      	ldr	r2, [pc, #400]	@ (8007838 <TIM_Base_SetConfig+0x1cc>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d017      	beq.n	80076dc <TIM_Base_SetConfig+0x70>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a63      	ldr	r2, [pc, #396]	@ (800783c <TIM_Base_SetConfig+0x1d0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d013      	beq.n	80076dc <TIM_Base_SetConfig+0x70>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a62      	ldr	r2, [pc, #392]	@ (8007840 <TIM_Base_SetConfig+0x1d4>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00f      	beq.n	80076dc <TIM_Base_SetConfig+0x70>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a61      	ldr	r2, [pc, #388]	@ (8007844 <TIM_Base_SetConfig+0x1d8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00b      	beq.n	80076dc <TIM_Base_SetConfig+0x70>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a60      	ldr	r2, [pc, #384]	@ (8007848 <TIM_Base_SetConfig+0x1dc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d007      	beq.n	80076dc <TIM_Base_SetConfig+0x70>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a5f      	ldr	r2, [pc, #380]	@ (800784c <TIM_Base_SetConfig+0x1e0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d003      	beq.n	80076dc <TIM_Base_SetConfig+0x70>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a5e      	ldr	r2, [pc, #376]	@ (8007850 <TIM_Base_SetConfig+0x1e4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d108      	bne.n	80076ee <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a4e      	ldr	r2, [pc, #312]	@ (800782c <TIM_Base_SetConfig+0x1c0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d043      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a4d      	ldr	r2, [pc, #308]	@ (8007830 <TIM_Base_SetConfig+0x1c4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d03f      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007704:	d03b      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800770c:	d037      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a48      	ldr	r2, [pc, #288]	@ (8007834 <TIM_Base_SetConfig+0x1c8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d033      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a47      	ldr	r2, [pc, #284]	@ (8007838 <TIM_Base_SetConfig+0x1cc>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d02f      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a46      	ldr	r2, [pc, #280]	@ (800783c <TIM_Base_SetConfig+0x1d0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d02b      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a45      	ldr	r2, [pc, #276]	@ (8007840 <TIM_Base_SetConfig+0x1d4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d027      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a44      	ldr	r2, [pc, #272]	@ (8007844 <TIM_Base_SetConfig+0x1d8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d023      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a43      	ldr	r2, [pc, #268]	@ (8007848 <TIM_Base_SetConfig+0x1dc>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d01f      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a42      	ldr	r2, [pc, #264]	@ (800784c <TIM_Base_SetConfig+0x1e0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d01b      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a41      	ldr	r2, [pc, #260]	@ (8007850 <TIM_Base_SetConfig+0x1e4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d017      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a40      	ldr	r2, [pc, #256]	@ (8007854 <TIM_Base_SetConfig+0x1e8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d013      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a3f      	ldr	r2, [pc, #252]	@ (8007858 <TIM_Base_SetConfig+0x1ec>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00f      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a3e      	ldr	r2, [pc, #248]	@ (800785c <TIM_Base_SetConfig+0x1f0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00b      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a3d      	ldr	r2, [pc, #244]	@ (8007860 <TIM_Base_SetConfig+0x1f4>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d007      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a3c      	ldr	r2, [pc, #240]	@ (8007864 <TIM_Base_SetConfig+0x1f8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d003      	beq.n	800777e <TIM_Base_SetConfig+0x112>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a3b      	ldr	r2, [pc, #236]	@ (8007868 <TIM_Base_SetConfig+0x1fc>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d108      	bne.n	8007790 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a1e      	ldr	r2, [pc, #120]	@ (800782c <TIM_Base_SetConfig+0x1c0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d023      	beq.n	80077fe <TIM_Base_SetConfig+0x192>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007830 <TIM_Base_SetConfig+0x1c4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d01f      	beq.n	80077fe <TIM_Base_SetConfig+0x192>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a22      	ldr	r2, [pc, #136]	@ (800784c <TIM_Base_SetConfig+0x1e0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d01b      	beq.n	80077fe <TIM_Base_SetConfig+0x192>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a21      	ldr	r2, [pc, #132]	@ (8007850 <TIM_Base_SetConfig+0x1e4>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d017      	beq.n	80077fe <TIM_Base_SetConfig+0x192>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a20      	ldr	r2, [pc, #128]	@ (8007854 <TIM_Base_SetConfig+0x1e8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <TIM_Base_SetConfig+0x192>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1f      	ldr	r2, [pc, #124]	@ (8007858 <TIM_Base_SetConfig+0x1ec>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_Base_SetConfig+0x192>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1e      	ldr	r2, [pc, #120]	@ (800785c <TIM_Base_SetConfig+0x1f0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_Base_SetConfig+0x192>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007860 <TIM_Base_SetConfig+0x1f4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_Base_SetConfig+0x192>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007864 <TIM_Base_SetConfig+0x1f8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_Base_SetConfig+0x192>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007868 <TIM_Base_SetConfig+0x1fc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d103      	bne.n	8007806 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	691a      	ldr	r2, [r3, #16]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f043 0204 	orr.w	r2, r3, #4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	601a      	str	r2, [r3, #0]
}
 800781e:	bf00      	nop
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	40012c00 	.word	0x40012c00
 8007830:	50012c00 	.word	0x50012c00
 8007834:	40000400 	.word	0x40000400
 8007838:	50000400 	.word	0x50000400
 800783c:	40000800 	.word	0x40000800
 8007840:	50000800 	.word	0x50000800
 8007844:	40000c00 	.word	0x40000c00
 8007848:	50000c00 	.word	0x50000c00
 800784c:	40013400 	.word	0x40013400
 8007850:	50013400 	.word	0x50013400
 8007854:	40014000 	.word	0x40014000
 8007858:	50014000 	.word	0x50014000
 800785c:	40014400 	.word	0x40014400
 8007860:	50014400 	.word	0x50014400
 8007864:	40014800 	.word	0x40014800
 8007868:	50014800 	.word	0x50014800

0800786c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	f023 0201 	bic.w	r2, r3, #1
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800789a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800789e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0303 	bic.w	r3, r3, #3
 80078a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f023 0302 	bic.w	r3, r3, #2
 80078b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a40      	ldr	r2, [pc, #256]	@ (80079c8 <TIM_OC1_SetConfig+0x15c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d023      	beq.n	8007914 <TIM_OC1_SetConfig+0xa8>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a3f      	ldr	r2, [pc, #252]	@ (80079cc <TIM_OC1_SetConfig+0x160>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d01f      	beq.n	8007914 <TIM_OC1_SetConfig+0xa8>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a3e      	ldr	r2, [pc, #248]	@ (80079d0 <TIM_OC1_SetConfig+0x164>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d01b      	beq.n	8007914 <TIM_OC1_SetConfig+0xa8>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a3d      	ldr	r2, [pc, #244]	@ (80079d4 <TIM_OC1_SetConfig+0x168>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d017      	beq.n	8007914 <TIM_OC1_SetConfig+0xa8>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a3c      	ldr	r2, [pc, #240]	@ (80079d8 <TIM_OC1_SetConfig+0x16c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d013      	beq.n	8007914 <TIM_OC1_SetConfig+0xa8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a3b      	ldr	r2, [pc, #236]	@ (80079dc <TIM_OC1_SetConfig+0x170>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00f      	beq.n	8007914 <TIM_OC1_SetConfig+0xa8>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a3a      	ldr	r2, [pc, #232]	@ (80079e0 <TIM_OC1_SetConfig+0x174>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d00b      	beq.n	8007914 <TIM_OC1_SetConfig+0xa8>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a39      	ldr	r2, [pc, #228]	@ (80079e4 <TIM_OC1_SetConfig+0x178>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d007      	beq.n	8007914 <TIM_OC1_SetConfig+0xa8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a38      	ldr	r2, [pc, #224]	@ (80079e8 <TIM_OC1_SetConfig+0x17c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d003      	beq.n	8007914 <TIM_OC1_SetConfig+0xa8>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a37      	ldr	r2, [pc, #220]	@ (80079ec <TIM_OC1_SetConfig+0x180>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d10c      	bne.n	800792e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f023 0308 	bic.w	r3, r3, #8
 800791a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f023 0304 	bic.w	r3, r3, #4
 800792c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a25      	ldr	r2, [pc, #148]	@ (80079c8 <TIM_OC1_SetConfig+0x15c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d023      	beq.n	800797e <TIM_OC1_SetConfig+0x112>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a24      	ldr	r2, [pc, #144]	@ (80079cc <TIM_OC1_SetConfig+0x160>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d01f      	beq.n	800797e <TIM_OC1_SetConfig+0x112>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a23      	ldr	r2, [pc, #140]	@ (80079d0 <TIM_OC1_SetConfig+0x164>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d01b      	beq.n	800797e <TIM_OC1_SetConfig+0x112>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a22      	ldr	r2, [pc, #136]	@ (80079d4 <TIM_OC1_SetConfig+0x168>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d017      	beq.n	800797e <TIM_OC1_SetConfig+0x112>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a21      	ldr	r2, [pc, #132]	@ (80079d8 <TIM_OC1_SetConfig+0x16c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d013      	beq.n	800797e <TIM_OC1_SetConfig+0x112>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a20      	ldr	r2, [pc, #128]	@ (80079dc <TIM_OC1_SetConfig+0x170>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00f      	beq.n	800797e <TIM_OC1_SetConfig+0x112>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1f      	ldr	r2, [pc, #124]	@ (80079e0 <TIM_OC1_SetConfig+0x174>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00b      	beq.n	800797e <TIM_OC1_SetConfig+0x112>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a1e      	ldr	r2, [pc, #120]	@ (80079e4 <TIM_OC1_SetConfig+0x178>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d007      	beq.n	800797e <TIM_OC1_SetConfig+0x112>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a1d      	ldr	r2, [pc, #116]	@ (80079e8 <TIM_OC1_SetConfig+0x17c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d003      	beq.n	800797e <TIM_OC1_SetConfig+0x112>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a1c      	ldr	r2, [pc, #112]	@ (80079ec <TIM_OC1_SetConfig+0x180>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d111      	bne.n	80079a2 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800798c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	621a      	str	r2, [r3, #32]
}
 80079bc:	bf00      	nop
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	40012c00 	.word	0x40012c00
 80079cc:	50012c00 	.word	0x50012c00
 80079d0:	40013400 	.word	0x40013400
 80079d4:	50013400 	.word	0x50013400
 80079d8:	40014000 	.word	0x40014000
 80079dc:	50014000 	.word	0x50014000
 80079e0:	40014400 	.word	0x40014400
 80079e4:	50014400 	.word	0x50014400
 80079e8:	40014800 	.word	0x40014800
 80079ec:	50014800 	.word	0x50014800

080079f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	f023 0210 	bic.w	r2, r3, #16
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f023 0320 	bic.w	r3, r3, #32
 8007a3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	011b      	lsls	r3, r3, #4
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a36      	ldr	r2, [pc, #216]	@ (8007b28 <TIM_OC2_SetConfig+0x138>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00b      	beq.n	8007a6c <TIM_OC2_SetConfig+0x7c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a35      	ldr	r2, [pc, #212]	@ (8007b2c <TIM_OC2_SetConfig+0x13c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d007      	beq.n	8007a6c <TIM_OC2_SetConfig+0x7c>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a34      	ldr	r2, [pc, #208]	@ (8007b30 <TIM_OC2_SetConfig+0x140>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_OC2_SetConfig+0x7c>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a33      	ldr	r2, [pc, #204]	@ (8007b34 <TIM_OC2_SetConfig+0x144>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d10d      	bne.n	8007a88 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a27      	ldr	r2, [pc, #156]	@ (8007b28 <TIM_OC2_SetConfig+0x138>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d023      	beq.n	8007ad8 <TIM_OC2_SetConfig+0xe8>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a26      	ldr	r2, [pc, #152]	@ (8007b2c <TIM_OC2_SetConfig+0x13c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d01f      	beq.n	8007ad8 <TIM_OC2_SetConfig+0xe8>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a25      	ldr	r2, [pc, #148]	@ (8007b30 <TIM_OC2_SetConfig+0x140>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d01b      	beq.n	8007ad8 <TIM_OC2_SetConfig+0xe8>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a24      	ldr	r2, [pc, #144]	@ (8007b34 <TIM_OC2_SetConfig+0x144>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d017      	beq.n	8007ad8 <TIM_OC2_SetConfig+0xe8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a23      	ldr	r2, [pc, #140]	@ (8007b38 <TIM_OC2_SetConfig+0x148>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d013      	beq.n	8007ad8 <TIM_OC2_SetConfig+0xe8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a22      	ldr	r2, [pc, #136]	@ (8007b3c <TIM_OC2_SetConfig+0x14c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d00f      	beq.n	8007ad8 <TIM_OC2_SetConfig+0xe8>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a21      	ldr	r2, [pc, #132]	@ (8007b40 <TIM_OC2_SetConfig+0x150>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00b      	beq.n	8007ad8 <TIM_OC2_SetConfig+0xe8>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a20      	ldr	r2, [pc, #128]	@ (8007b44 <TIM_OC2_SetConfig+0x154>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d007      	beq.n	8007ad8 <TIM_OC2_SetConfig+0xe8>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a1f      	ldr	r2, [pc, #124]	@ (8007b48 <TIM_OC2_SetConfig+0x158>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <TIM_OC2_SetConfig+0xe8>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8007b4c <TIM_OC2_SetConfig+0x15c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d113      	bne.n	8007b00 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	621a      	str	r2, [r3, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40012c00 	.word	0x40012c00
 8007b2c:	50012c00 	.word	0x50012c00
 8007b30:	40013400 	.word	0x40013400
 8007b34:	50013400 	.word	0x50013400
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	50014000 	.word	0x50014000
 8007b40:	40014400 	.word	0x40014400
 8007b44:	50014400 	.word	0x50014400
 8007b48:	40014800 	.word	0x40014800
 8007b4c:	50014800 	.word	0x50014800

08007b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0303 	bic.w	r3, r3, #3
 8007b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a35      	ldr	r2, [pc, #212]	@ (8007c84 <TIM_OC3_SetConfig+0x134>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00b      	beq.n	8007bca <TIM_OC3_SetConfig+0x7a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a34      	ldr	r2, [pc, #208]	@ (8007c88 <TIM_OC3_SetConfig+0x138>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d007      	beq.n	8007bca <TIM_OC3_SetConfig+0x7a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a33      	ldr	r2, [pc, #204]	@ (8007c8c <TIM_OC3_SetConfig+0x13c>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d003      	beq.n	8007bca <TIM_OC3_SetConfig+0x7a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a32      	ldr	r2, [pc, #200]	@ (8007c90 <TIM_OC3_SetConfig+0x140>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d10d      	bne.n	8007be6 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a26      	ldr	r2, [pc, #152]	@ (8007c84 <TIM_OC3_SetConfig+0x134>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d023      	beq.n	8007c36 <TIM_OC3_SetConfig+0xe6>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a25      	ldr	r2, [pc, #148]	@ (8007c88 <TIM_OC3_SetConfig+0x138>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d01f      	beq.n	8007c36 <TIM_OC3_SetConfig+0xe6>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a24      	ldr	r2, [pc, #144]	@ (8007c8c <TIM_OC3_SetConfig+0x13c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d01b      	beq.n	8007c36 <TIM_OC3_SetConfig+0xe6>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a23      	ldr	r2, [pc, #140]	@ (8007c90 <TIM_OC3_SetConfig+0x140>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d017      	beq.n	8007c36 <TIM_OC3_SetConfig+0xe6>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a22      	ldr	r2, [pc, #136]	@ (8007c94 <TIM_OC3_SetConfig+0x144>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d013      	beq.n	8007c36 <TIM_OC3_SetConfig+0xe6>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a21      	ldr	r2, [pc, #132]	@ (8007c98 <TIM_OC3_SetConfig+0x148>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00f      	beq.n	8007c36 <TIM_OC3_SetConfig+0xe6>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a20      	ldr	r2, [pc, #128]	@ (8007c9c <TIM_OC3_SetConfig+0x14c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00b      	beq.n	8007c36 <TIM_OC3_SetConfig+0xe6>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a1f      	ldr	r2, [pc, #124]	@ (8007ca0 <TIM_OC3_SetConfig+0x150>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d007      	beq.n	8007c36 <TIM_OC3_SetConfig+0xe6>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a1e      	ldr	r2, [pc, #120]	@ (8007ca4 <TIM_OC3_SetConfig+0x154>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d003      	beq.n	8007c36 <TIM_OC3_SetConfig+0xe6>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a1d      	ldr	r2, [pc, #116]	@ (8007ca8 <TIM_OC3_SetConfig+0x158>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d113      	bne.n	8007c5e <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	621a      	str	r2, [r3, #32]
}
 8007c78:	bf00      	nop
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	40012c00 	.word	0x40012c00
 8007c88:	50012c00 	.word	0x50012c00
 8007c8c:	40013400 	.word	0x40013400
 8007c90:	50013400 	.word	0x50013400
 8007c94:	40014000 	.word	0x40014000
 8007c98:	50014000 	.word	0x50014000
 8007c9c:	40014400 	.word	0x40014400
 8007ca0:	50014400 	.word	0x50014400
 8007ca4:	40014800 	.word	0x40014800
 8007ca8:	50014800 	.word	0x50014800

08007cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	031b      	lsls	r3, r3, #12
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a36      	ldr	r2, [pc, #216]	@ (8007de4 <TIM_OC4_SetConfig+0x138>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00b      	beq.n	8007d28 <TIM_OC4_SetConfig+0x7c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a35      	ldr	r2, [pc, #212]	@ (8007de8 <TIM_OC4_SetConfig+0x13c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d007      	beq.n	8007d28 <TIM_OC4_SetConfig+0x7c>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a34      	ldr	r2, [pc, #208]	@ (8007dec <TIM_OC4_SetConfig+0x140>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_OC4_SetConfig+0x7c>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a33      	ldr	r2, [pc, #204]	@ (8007df0 <TIM_OC4_SetConfig+0x144>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d10d      	bne.n	8007d44 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	031b      	lsls	r3, r3, #12
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a27      	ldr	r2, [pc, #156]	@ (8007de4 <TIM_OC4_SetConfig+0x138>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d023      	beq.n	8007d94 <TIM_OC4_SetConfig+0xe8>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a26      	ldr	r2, [pc, #152]	@ (8007de8 <TIM_OC4_SetConfig+0x13c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d01f      	beq.n	8007d94 <TIM_OC4_SetConfig+0xe8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a25      	ldr	r2, [pc, #148]	@ (8007dec <TIM_OC4_SetConfig+0x140>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d01b      	beq.n	8007d94 <TIM_OC4_SetConfig+0xe8>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a24      	ldr	r2, [pc, #144]	@ (8007df0 <TIM_OC4_SetConfig+0x144>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d017      	beq.n	8007d94 <TIM_OC4_SetConfig+0xe8>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a23      	ldr	r2, [pc, #140]	@ (8007df4 <TIM_OC4_SetConfig+0x148>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d013      	beq.n	8007d94 <TIM_OC4_SetConfig+0xe8>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a22      	ldr	r2, [pc, #136]	@ (8007df8 <TIM_OC4_SetConfig+0x14c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d00f      	beq.n	8007d94 <TIM_OC4_SetConfig+0xe8>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a21      	ldr	r2, [pc, #132]	@ (8007dfc <TIM_OC4_SetConfig+0x150>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00b      	beq.n	8007d94 <TIM_OC4_SetConfig+0xe8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a20      	ldr	r2, [pc, #128]	@ (8007e00 <TIM_OC4_SetConfig+0x154>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d007      	beq.n	8007d94 <TIM_OC4_SetConfig+0xe8>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a1f      	ldr	r2, [pc, #124]	@ (8007e04 <TIM_OC4_SetConfig+0x158>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d003      	beq.n	8007d94 <TIM_OC4_SetConfig+0xe8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8007e08 <TIM_OC4_SetConfig+0x15c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d113      	bne.n	8007dbc <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007da2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	019b      	lsls	r3, r3, #6
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	019b      	lsls	r3, r3, #6
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	621a      	str	r2, [r3, #32]
}
 8007dd6:	bf00      	nop
 8007dd8:	371c      	adds	r7, #28
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	40012c00 	.word	0x40012c00
 8007de8:	50012c00 	.word	0x50012c00
 8007dec:	40013400 	.word	0x40013400
 8007df0:	50013400 	.word	0x50013400
 8007df4:	40014000 	.word	0x40014000
 8007df8:	50014000 	.word	0x50014000
 8007dfc:	40014400 	.word	0x40014400
 8007e00:	50014400 	.word	0x50014400
 8007e04:	40014800 	.word	0x40014800
 8007e08:	50014800 	.word	0x50014800

08007e0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	041b      	lsls	r3, r3, #16
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a21      	ldr	r2, [pc, #132]	@ (8007ee8 <TIM_OC5_SetConfig+0xdc>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d023      	beq.n	8007eae <TIM_OC5_SetConfig+0xa2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a20      	ldr	r2, [pc, #128]	@ (8007eec <TIM_OC5_SetConfig+0xe0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d01f      	beq.n	8007eae <TIM_OC5_SetConfig+0xa2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a1f      	ldr	r2, [pc, #124]	@ (8007ef0 <TIM_OC5_SetConfig+0xe4>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d01b      	beq.n	8007eae <TIM_OC5_SetConfig+0xa2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a1e      	ldr	r2, [pc, #120]	@ (8007ef4 <TIM_OC5_SetConfig+0xe8>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d017      	beq.n	8007eae <TIM_OC5_SetConfig+0xa2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef8 <TIM_OC5_SetConfig+0xec>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d013      	beq.n	8007eae <TIM_OC5_SetConfig+0xa2>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a1c      	ldr	r2, [pc, #112]	@ (8007efc <TIM_OC5_SetConfig+0xf0>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00f      	beq.n	8007eae <TIM_OC5_SetConfig+0xa2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a1b      	ldr	r2, [pc, #108]	@ (8007f00 <TIM_OC5_SetConfig+0xf4>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00b      	beq.n	8007eae <TIM_OC5_SetConfig+0xa2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a1a      	ldr	r2, [pc, #104]	@ (8007f04 <TIM_OC5_SetConfig+0xf8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d007      	beq.n	8007eae <TIM_OC5_SetConfig+0xa2>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a19      	ldr	r2, [pc, #100]	@ (8007f08 <TIM_OC5_SetConfig+0xfc>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d003      	beq.n	8007eae <TIM_OC5_SetConfig+0xa2>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a18      	ldr	r2, [pc, #96]	@ (8007f0c <TIM_OC5_SetConfig+0x100>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d109      	bne.n	8007ec2 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	021b      	lsls	r3, r3, #8
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	621a      	str	r2, [r3, #32]
}
 8007edc:	bf00      	nop
 8007ede:	371c      	adds	r7, #28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	40012c00 	.word	0x40012c00
 8007eec:	50012c00 	.word	0x50012c00
 8007ef0:	40013400 	.word	0x40013400
 8007ef4:	50013400 	.word	0x50013400
 8007ef8:	40014000 	.word	0x40014000
 8007efc:	50014000 	.word	0x50014000
 8007f00:	40014400 	.word	0x40014400
 8007f04:	50014400 	.word	0x50014400
 8007f08:	40014800 	.word	0x40014800
 8007f0c:	50014800 	.word	0x50014800

08007f10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	021b      	lsls	r3, r3, #8
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	051b      	lsls	r3, r3, #20
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a22      	ldr	r2, [pc, #136]	@ (8007ff0 <TIM_OC6_SetConfig+0xe0>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d023      	beq.n	8007fb4 <TIM_OC6_SetConfig+0xa4>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a21      	ldr	r2, [pc, #132]	@ (8007ff4 <TIM_OC6_SetConfig+0xe4>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d01f      	beq.n	8007fb4 <TIM_OC6_SetConfig+0xa4>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a20      	ldr	r2, [pc, #128]	@ (8007ff8 <TIM_OC6_SetConfig+0xe8>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d01b      	beq.n	8007fb4 <TIM_OC6_SetConfig+0xa4>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007ffc <TIM_OC6_SetConfig+0xec>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d017      	beq.n	8007fb4 <TIM_OC6_SetConfig+0xa4>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a1e      	ldr	r2, [pc, #120]	@ (8008000 <TIM_OC6_SetConfig+0xf0>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d013      	beq.n	8007fb4 <TIM_OC6_SetConfig+0xa4>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8008004 <TIM_OC6_SetConfig+0xf4>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00f      	beq.n	8007fb4 <TIM_OC6_SetConfig+0xa4>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a1c      	ldr	r2, [pc, #112]	@ (8008008 <TIM_OC6_SetConfig+0xf8>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00b      	beq.n	8007fb4 <TIM_OC6_SetConfig+0xa4>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800800c <TIM_OC6_SetConfig+0xfc>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d007      	beq.n	8007fb4 <TIM_OC6_SetConfig+0xa4>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8008010 <TIM_OC6_SetConfig+0x100>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d003      	beq.n	8007fb4 <TIM_OC6_SetConfig+0xa4>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a19      	ldr	r2, [pc, #100]	@ (8008014 <TIM_OC6_SetConfig+0x104>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d109      	bne.n	8007fc8 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	029b      	lsls	r3, r3, #10
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	621a      	str	r2, [r3, #32]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	40012c00 	.word	0x40012c00
 8007ff4:	50012c00 	.word	0x50012c00
 8007ff8:	40013400 	.word	0x40013400
 8007ffc:	50013400 	.word	0x50013400
 8008000:	40014000 	.word	0x40014000
 8008004:	50014000 	.word	0x50014000
 8008008:	40014400 	.word	0x40014400
 800800c:	50014400 	.word	0x50014400
 8008010:	40014800 	.word	0x40014800
 8008014:	50014800 	.word	0x50014800

08008018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	f023 0201 	bic.w	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4313      	orrs	r3, r2
 800804c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f023 030a 	bic.w	r3, r3, #10
 8008054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	4313      	orrs	r3, r2
 800805c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	621a      	str	r2, [r3, #32]
}
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008076:	b480      	push	{r7}
 8008078:	b087      	sub	sp, #28
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	f023 0210 	bic.w	r2, r3, #16
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	031b      	lsls	r3, r3, #12
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80080b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	621a      	str	r2, [r3, #32]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80080ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f043 0307 	orr.w	r3, r3, #7
 80080fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	609a      	str	r2, [r3, #8]
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800812a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	021a      	lsls	r2, r3, #8
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	431a      	orrs	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4313      	orrs	r3, r2
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	609a      	str	r2, [r3, #8]
}
 8008144:	bf00      	nop
 8008146:	371c      	adds	r7, #28
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008160:	2b01      	cmp	r3, #1
 8008162:	d101      	bne.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008164:	2302      	movs	r3, #2
 8008166:	e097      	b.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a45      	ldr	r2, [pc, #276]	@ (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00e      	beq.n	80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a44      	ldr	r2, [pc, #272]	@ (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d009      	beq.n	80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a42      	ldr	r2, [pc, #264]	@ (80082ac <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d004      	beq.n	80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a41      	ldr	r2, [pc, #260]	@ (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d108      	bne.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80081c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a2f      	ldr	r2, [pc, #188]	@ (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d040      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a2e      	ldr	r2, [pc, #184]	@ (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d03b      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081fc:	d036      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008206:	d031      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a29      	ldr	r2, [pc, #164]	@ (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d02c      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a28      	ldr	r2, [pc, #160]	@ (80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d027      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a26      	ldr	r2, [pc, #152]	@ (80082bc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d022      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a25      	ldr	r2, [pc, #148]	@ (80082c0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d01d      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a23      	ldr	r2, [pc, #140]	@ (80082c4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d018      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a22      	ldr	r2, [pc, #136]	@ (80082c8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d013      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a18      	ldr	r2, [pc, #96]	@ (80082ac <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d00e      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a17      	ldr	r2, [pc, #92]	@ (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d009      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a1b      	ldr	r2, [pc, #108]	@ (80082cc <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d004      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a1a      	ldr	r2, [pc, #104]	@ (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d10c      	bne.n	8008286 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008272:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	4313      	orrs	r3, r2
 800827c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	40012c00 	.word	0x40012c00
 80082a8:	50012c00 	.word	0x50012c00
 80082ac:	40013400 	.word	0x40013400
 80082b0:	50013400 	.word	0x50013400
 80082b4:	40000400 	.word	0x40000400
 80082b8:	50000400 	.word	0x50000400
 80082bc:	40000800 	.word	0x40000800
 80082c0:	50000800 	.word	0x50000800
 80082c4:	40000c00 	.word	0x40000c00
 80082c8:	50000c00 	.word	0x50000c00
 80082cc:	40014000 	.word	0x40014000
 80082d0:	50014000 	.word	0x50014000

080082d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d101      	bne.n	80082f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082ec:	2302      	movs	r3, #2
 80082ee:	e07d      	b.n	80083ec <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	4313      	orrs	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	4313      	orrs	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4313      	orrs	r3, r2
 800832e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	4313      	orrs	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	041b      	lsls	r3, r3, #16
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	4313      	orrs	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a1e      	ldr	r2, [pc, #120]	@ (80083f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d00e      	beq.n	80083a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a1d      	ldr	r2, [pc, #116]	@ (80083fc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d009      	beq.n	80083a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a1b      	ldr	r2, [pc, #108]	@ (8008400 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d004      	beq.n	80083a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a1a      	ldr	r2, [pc, #104]	@ (8008404 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d11c      	bne.n	80083da <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083aa:	051b      	lsls	r3, r3, #20
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c8:	4313      	orrs	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	40012c00 	.word	0x40012c00
 80083fc:	50012c00 	.word	0x50012c00
 8008400:	40013400 	.word	0x40013400
 8008404:	50013400 	.word	0x50013400

08008408 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008408:	b084      	sub	sp, #16
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	f107 001c 	add.w	r0, r7, #28
 8008416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f001 fab6 	bl	8009998 <USB_CoreReset>
 800842c:	4603      	mov	r3, r0
 800842e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008430:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008434:	2b00      	cmp	r3, #0
 8008436:	d106      	bne.n	8008446 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	639a      	str	r2, [r3, #56]	@ 0x38
 8008444:	e005      	b.n	8008452 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800845e:	b004      	add	sp, #16
 8008460:	4770      	bx	lr
	...

08008464 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008464:	b480      	push	{r7}
 8008466:	b087      	sub	sp, #28
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	4613      	mov	r3, r2
 8008470:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d165      	bne.n	8008544 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	4a41      	ldr	r2, [pc, #260]	@ (8008580 <USB_SetTurnaroundTime+0x11c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d906      	bls.n	800848e <USB_SetTurnaroundTime+0x2a>
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	4a40      	ldr	r2, [pc, #256]	@ (8008584 <USB_SetTurnaroundTime+0x120>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d202      	bcs.n	800848e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008488:	230f      	movs	r3, #15
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	e062      	b.n	8008554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	4a3c      	ldr	r2, [pc, #240]	@ (8008584 <USB_SetTurnaroundTime+0x120>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d306      	bcc.n	80084a4 <USB_SetTurnaroundTime+0x40>
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	4a3b      	ldr	r2, [pc, #236]	@ (8008588 <USB_SetTurnaroundTime+0x124>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d202      	bcs.n	80084a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800849e:	230e      	movs	r3, #14
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	e057      	b.n	8008554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	4a38      	ldr	r2, [pc, #224]	@ (8008588 <USB_SetTurnaroundTime+0x124>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d306      	bcc.n	80084ba <USB_SetTurnaroundTime+0x56>
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4a37      	ldr	r2, [pc, #220]	@ (800858c <USB_SetTurnaroundTime+0x128>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d202      	bcs.n	80084ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80084b4:	230d      	movs	r3, #13
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	e04c      	b.n	8008554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	4a33      	ldr	r2, [pc, #204]	@ (800858c <USB_SetTurnaroundTime+0x128>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d306      	bcc.n	80084d0 <USB_SetTurnaroundTime+0x6c>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	4a32      	ldr	r2, [pc, #200]	@ (8008590 <USB_SetTurnaroundTime+0x12c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d802      	bhi.n	80084d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80084ca:	230c      	movs	r3, #12
 80084cc:	617b      	str	r3, [r7, #20]
 80084ce:	e041      	b.n	8008554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	4a2f      	ldr	r2, [pc, #188]	@ (8008590 <USB_SetTurnaroundTime+0x12c>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d906      	bls.n	80084e6 <USB_SetTurnaroundTime+0x82>
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4a2e      	ldr	r2, [pc, #184]	@ (8008594 <USB_SetTurnaroundTime+0x130>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d802      	bhi.n	80084e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80084e0:	230b      	movs	r3, #11
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	e036      	b.n	8008554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	4a2a      	ldr	r2, [pc, #168]	@ (8008594 <USB_SetTurnaroundTime+0x130>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d906      	bls.n	80084fc <USB_SetTurnaroundTime+0x98>
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	4a29      	ldr	r2, [pc, #164]	@ (8008598 <USB_SetTurnaroundTime+0x134>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d802      	bhi.n	80084fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80084f6:	230a      	movs	r3, #10
 80084f8:	617b      	str	r3, [r7, #20]
 80084fa:	e02b      	b.n	8008554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	4a26      	ldr	r2, [pc, #152]	@ (8008598 <USB_SetTurnaroundTime+0x134>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d906      	bls.n	8008512 <USB_SetTurnaroundTime+0xae>
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	4a25      	ldr	r2, [pc, #148]	@ (800859c <USB_SetTurnaroundTime+0x138>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d202      	bcs.n	8008512 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800850c:	2309      	movs	r3, #9
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	e020      	b.n	8008554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	4a21      	ldr	r2, [pc, #132]	@ (800859c <USB_SetTurnaroundTime+0x138>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d306      	bcc.n	8008528 <USB_SetTurnaroundTime+0xc4>
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	4a20      	ldr	r2, [pc, #128]	@ (80085a0 <USB_SetTurnaroundTime+0x13c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d802      	bhi.n	8008528 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008522:	2308      	movs	r3, #8
 8008524:	617b      	str	r3, [r7, #20]
 8008526:	e015      	b.n	8008554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4a1d      	ldr	r2, [pc, #116]	@ (80085a0 <USB_SetTurnaroundTime+0x13c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d906      	bls.n	800853e <USB_SetTurnaroundTime+0xda>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4a1c      	ldr	r2, [pc, #112]	@ (80085a4 <USB_SetTurnaroundTime+0x140>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d202      	bcs.n	800853e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008538:	2307      	movs	r3, #7
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	e00a      	b.n	8008554 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800853e:	2306      	movs	r3, #6
 8008540:	617b      	str	r3, [r7, #20]
 8008542:	e007      	b.n	8008554 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800854a:	2309      	movs	r3, #9
 800854c:	617b      	str	r3, [r7, #20]
 800854e:	e001      	b.n	8008554 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008550:	2309      	movs	r3, #9
 8008552:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	029b      	lsls	r3, r3, #10
 8008568:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800856c:	431a      	orrs	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	371c      	adds	r7, #28
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	00d8acbf 	.word	0x00d8acbf
 8008584:	00e4e1c0 	.word	0x00e4e1c0
 8008588:	00f42400 	.word	0x00f42400
 800858c:	01067380 	.word	0x01067380
 8008590:	011a499f 	.word	0x011a499f
 8008594:	01312cff 	.word	0x01312cff
 8008598:	014ca43f 	.word	0x014ca43f
 800859c:	016e3600 	.word	0x016e3600
 80085a0:	01a6ab1f 	.word	0x01a6ab1f
 80085a4:	01e84800 	.word	0x01e84800

080085a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f043 0201 	orr.w	r2, r3, #1
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f023 0201 	bic.w	r2, r3, #1
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d115      	bne.n	800863a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800861a:	200a      	movs	r0, #10
 800861c:	f7f8 ff16 	bl	800144c <HAL_Delay>
      ms += 10U;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	330a      	adds	r3, #10
 8008624:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 f927 	bl	800987a <USB_GetMode>
 800862c:	4603      	mov	r3, r0
 800862e:	2b01      	cmp	r3, #1
 8008630:	d01e      	beq.n	8008670 <USB_SetCurrentMode+0x84>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2bc7      	cmp	r3, #199	@ 0xc7
 8008636:	d9f0      	bls.n	800861a <USB_SetCurrentMode+0x2e>
 8008638:	e01a      	b.n	8008670 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d115      	bne.n	800866c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800864c:	200a      	movs	r0, #10
 800864e:	f7f8 fefd 	bl	800144c <HAL_Delay>
      ms += 10U;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	330a      	adds	r3, #10
 8008656:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 f90e 	bl	800987a <USB_GetMode>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d005      	beq.n	8008670 <USB_SetCurrentMode+0x84>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2bc7      	cmp	r3, #199	@ 0xc7
 8008668:	d9f0      	bls.n	800864c <USB_SetCurrentMode+0x60>
 800866a:	e001      	b.n	8008670 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e005      	b.n	800867c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2bc8      	cmp	r3, #200	@ 0xc8
 8008674:	d101      	bne.n	800867a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008684:	b084      	sub	sp, #16
 8008686:	b580      	push	{r7, lr}
 8008688:	b086      	sub	sp, #24
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800869e:	2300      	movs	r3, #0
 80086a0:	613b      	str	r3, [r7, #16]
 80086a2:	e009      	b.n	80086b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	3340      	adds	r3, #64	@ 0x40
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	2200      	movs	r2, #0
 80086b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	3301      	adds	r3, #1
 80086b6:	613b      	str	r3, [r7, #16]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	2b0e      	cmp	r3, #14
 80086bc:	d9f2      	bls.n	80086a4 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80086be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d11c      	bne.n	8008700 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086d4:	f043 0302 	orr.w	r3, r3, #2
 80086d8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086de:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	e005      	b.n	800870c <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008704:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008712:	461a      	mov	r2, r3
 8008714:	2300      	movs	r3, #0
 8008716:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008718:	2103      	movs	r1, #3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f95e 	bl	80089dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008720:	2110      	movs	r1, #16
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f8fa 	bl	800891c <USB_FlushTxFifo>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f924 	bl	8008980 <USB_FlushRxFifo>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008748:	461a      	mov	r2, r3
 800874a:	2300      	movs	r3, #0
 800874c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008754:	461a      	mov	r2, r3
 8008756:	2300      	movs	r3, #0
 8008758:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008760:	461a      	mov	r2, r3
 8008762:	2300      	movs	r3, #0
 8008764:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008766:	2300      	movs	r3, #0
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	e043      	b.n	80087f4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800877e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008782:	d118      	bne.n	80087b6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10a      	bne.n	80087a0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008796:	461a      	mov	r2, r3
 8008798:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	e013      	b.n	80087c8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ac:	461a      	mov	r2, r3
 80087ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	e008      	b.n	80087c8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c2:	461a      	mov	r2, r3
 80087c4:	2300      	movs	r3, #0
 80087c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d4:	461a      	mov	r2, r3
 80087d6:	2300      	movs	r3, #0
 80087d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e6:	461a      	mov	r2, r3
 80087e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80087ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	3301      	adds	r3, #1
 80087f2:	613b      	str	r3, [r7, #16]
 80087f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80087f8:	461a      	mov	r2, r3
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d3b5      	bcc.n	800876c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008800:	2300      	movs	r3, #0
 8008802:	613b      	str	r3, [r7, #16]
 8008804:	e043      	b.n	800888e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800881c:	d118      	bne.n	8008850 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008830:	461a      	mov	r2, r3
 8008832:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008836:	6013      	str	r3, [r2, #0]
 8008838:	e013      	b.n	8008862 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008846:	461a      	mov	r2, r3
 8008848:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	e008      	b.n	8008862 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885c:	461a      	mov	r2, r3
 800885e:	2300      	movs	r3, #0
 8008860:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800886e:	461a      	mov	r2, r3
 8008870:	2300      	movs	r3, #0
 8008872:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008880:	461a      	mov	r2, r3
 8008882:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008886:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	3301      	adds	r3, #1
 800888c:	613b      	str	r3, [r7, #16]
 800888e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008892:	461a      	mov	r2, r3
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	4293      	cmp	r3, r2
 8008898:	d3b5      	bcc.n	8008806 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80088ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80088bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	f043 0210 	orr.w	r2, r3, #16
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	699a      	ldr	r2, [r3, #24]
 80088d4:	4b10      	ldr	r3, [pc, #64]	@ (8008918 <USB_DevInit+0x294>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80088dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	f043 0208 	orr.w	r2, r3, #8
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80088f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d107      	bne.n	8008908 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008900:	f043 0304 	orr.w	r3, r3, #4
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008908:	7dfb      	ldrb	r3, [r7, #23]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008914:	b004      	add	sp, #16
 8008916:	4770      	bx	lr
 8008918:	803c3800 	.word	0x803c3800

0800891c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3301      	adds	r3, #1
 800892e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008936:	d901      	bls.n	800893c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e01b      	b.n	8008974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	daf2      	bge.n	800892a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008944:	2300      	movs	r3, #0
 8008946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	019b      	lsls	r3, r3, #6
 800894c:	f043 0220 	orr.w	r2, r3, #32
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3301      	adds	r3, #1
 8008958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008960:	d901      	bls.n	8008966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e006      	b.n	8008974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	f003 0320 	and.w	r3, r3, #32
 800896e:	2b20      	cmp	r3, #32
 8008970:	d0f0      	beq.n	8008954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3301      	adds	r3, #1
 8008990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008998:	d901      	bls.n	800899e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e018      	b.n	80089d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	daf2      	bge.n	800898c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2210      	movs	r2, #16
 80089ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3301      	adds	r3, #1
 80089b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089bc:	d901      	bls.n	80089c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e006      	b.n	80089d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	f003 0310 	and.w	r3, r3, #16
 80089ca:	2b10      	cmp	r3, #16
 80089cc:	d0f0      	beq.n	80089b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	68f9      	ldr	r1, [r7, #12]
 80089f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089fc:	4313      	orrs	r3, r2
 80089fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b087      	sub	sp, #28
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f003 0306 	and.w	r3, r3, #6
 8008a26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d102      	bne.n	8008a34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	75fb      	strb	r3, [r7, #23]
 8008a32:	e00a      	b.n	8008a4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d002      	beq.n	8008a40 <USB_GetDevSpeed+0x32>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b06      	cmp	r3, #6
 8008a3e:	d102      	bne.n	8008a46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008a40:	2302      	movs	r3, #2
 8008a42:	75fb      	strb	r3, [r7, #23]
 8008a44:	e001      	b.n	8008a4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008a46:	230f      	movs	r3, #15
 8008a48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	371c      	adds	r7, #28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d13a      	bne.n	8008aea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a7a:	69da      	ldr	r2, [r3, #28]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	f003 030f 	and.w	r3, r3, #15
 8008a84:	2101      	movs	r1, #1
 8008a86:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	68f9      	ldr	r1, [r7, #12]
 8008a8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a92:	4313      	orrs	r3, r2
 8008a94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d155      	bne.n	8008b58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	791b      	ldrb	r3, [r3, #4]
 8008ac6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ac8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	059b      	lsls	r3, r3, #22
 8008ace:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	0151      	lsls	r1, r2, #5
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	440a      	add	r2, r1
 8008ada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	e036      	b.n	8008b58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008af0:	69da      	ldr	r2, [r3, #28]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	f003 030f 	and.w	r3, r3, #15
 8008afa:	2101      	movs	r1, #1
 8008afc:	fa01 f303 	lsl.w	r3, r1, r3
 8008b00:	041b      	lsls	r3, r3, #16
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d11a      	bne.n	8008b58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	015a      	lsls	r2, r3, #5
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	791b      	ldrb	r3, [r3, #4]
 8008b3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b3e:	430b      	orrs	r3, r1
 8008b40:	4313      	orrs	r3, r2
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	0151      	lsls	r1, r2, #5
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	440a      	add	r2, r1
 8008b4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
	...

08008b68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	785b      	ldrb	r3, [r3, #1]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d161      	bne.n	8008c48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	015a      	lsls	r2, r3, #5
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b9a:	d11f      	bne.n	8008bdc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	0151      	lsls	r1, r2, #5
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	440a      	add	r2, r1
 8008bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008bba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	0151      	lsls	r1, r2, #5
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	440a      	add	r2, r1
 8008bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	2101      	movs	r1, #1
 8008bee:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c06:	69da      	ldr	r2, [r3, #28]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	2101      	movs	r1, #1
 8008c12:	fa01 f303 	lsl.w	r3, r1, r3
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	43db      	mvns	r3, r3
 8008c1a:	68f9      	ldr	r1, [r7, #12]
 8008c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c20:	4013      	ands	r3, r2
 8008c22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	0159      	lsls	r1, r3, #5
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	440b      	add	r3, r1
 8008c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c3e:	4619      	mov	r1, r3
 8008c40:	4b35      	ldr	r3, [pc, #212]	@ (8008d18 <USB_DeactivateEndpoint+0x1b0>)
 8008c42:	4013      	ands	r3, r2
 8008c44:	600b      	str	r3, [r1, #0]
 8008c46:	e060      	b.n	8008d0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c5e:	d11f      	bne.n	8008ca0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	0151      	lsls	r1, r2, #5
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	440a      	add	r2, r1
 8008c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	0151      	lsls	r1, r2, #5
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	440a      	add	r2, r1
 8008c96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ca6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb6:	041b      	lsls	r3, r3, #16
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cca:	69da      	ldr	r2, [r3, #28]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	f003 030f 	and.w	r3, r3, #15
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8008cda:	041b      	lsls	r3, r3, #16
 8008cdc:	43db      	mvns	r3, r3
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	0159      	lsls	r1, r3, #5
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	440b      	add	r3, r1
 8008cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d02:	4619      	mov	r1, r3
 8008d04:	4b05      	ldr	r3, [pc, #20]	@ (8008d1c <USB_DeactivateEndpoint+0x1b4>)
 8008d06:	4013      	ands	r3, r2
 8008d08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	ec337800 	.word	0xec337800
 8008d1c:	eff37800 	.word	0xeff37800

08008d20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08a      	sub	sp, #40	@ 0x28
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	f040 817f 	bne.w	8009040 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d132      	bne.n	8008db0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	0151      	lsls	r1, r2, #5
 8008d5c:	69fa      	ldr	r2, [r7, #28]
 8008d5e:	440a      	add	r2, r1
 8008d60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d64:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008d68:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008d6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	0151      	lsls	r1, r2, #5
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	440a      	add	r2, r1
 8008d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	0151      	lsls	r1, r2, #5
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	440a      	add	r2, r1
 8008da4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008da8:	0cdb      	lsrs	r3, r3, #19
 8008daa:	04db      	lsls	r3, r3, #19
 8008dac:	6113      	str	r3, [r2, #16]
 8008dae:	e097      	b.n	8008ee0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	0151      	lsls	r1, r2, #5
 8008dc2:	69fa      	ldr	r2, [r7, #28]
 8008dc4:	440a      	add	r2, r1
 8008dc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dca:	0cdb      	lsrs	r3, r3, #19
 8008dcc:	04db      	lsls	r3, r3, #19
 8008dce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	0151      	lsls	r1, r2, #5
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	440a      	add	r2, r1
 8008de6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008dee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008df2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d11a      	bne.n	8008e30 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	691a      	ldr	r2, [r3, #16]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d903      	bls.n	8008e0e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	689a      	ldr	r2, [r3, #8]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	0151      	lsls	r1, r2, #5
 8008e20:	69fa      	ldr	r2, [r7, #28]
 8008e22:	440a      	add	r2, r1
 8008e24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e2c:	6113      	str	r3, [r2, #16]
 8008e2e:	e044      	b.n	8008eba <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	691a      	ldr	r2, [r3, #16]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	4413      	add	r3, r2
 8008e3a:	1e5a      	subs	r2, r3, #1
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e44:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e52:	691a      	ldr	r2, [r3, #16]
 8008e54:	8afb      	ldrh	r3, [r7, #22]
 8008e56:	04d9      	lsls	r1, r3, #19
 8008e58:	4ba4      	ldr	r3, [pc, #656]	@ (80090ec <USB_EPStartXfer+0x3cc>)
 8008e5a:	400b      	ands	r3, r1
 8008e5c:	69b9      	ldr	r1, [r7, #24]
 8008e5e:	0148      	lsls	r0, r1, #5
 8008e60:	69f9      	ldr	r1, [r7, #28]
 8008e62:	4401      	add	r1, r0
 8008e64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	791b      	ldrb	r3, [r3, #4]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d122      	bne.n	8008eba <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	0151      	lsls	r1, r2, #5
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	440a      	add	r2, r1
 8008e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e8e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008e92:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea0:	691a      	ldr	r2, [r3, #16]
 8008ea2:	8afb      	ldrh	r3, [r7, #22]
 8008ea4:	075b      	lsls	r3, r3, #29
 8008ea6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008eaa:	69b9      	ldr	r1, [r7, #24]
 8008eac:	0148      	lsls	r0, r1, #5
 8008eae:	69f9      	ldr	r1, [r7, #28]
 8008eb0:	4401      	add	r1, r0
 8008eb2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ec6:	691a      	ldr	r2, [r3, #16]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ed0:	69b9      	ldr	r1, [r7, #24]
 8008ed2:	0148      	lsls	r0, r1, #5
 8008ed4:	69f9      	ldr	r1, [r7, #28]
 8008ed6:	4401      	add	r1, r0
 8008ed8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008edc:	4313      	orrs	r3, r2
 8008ede:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d14b      	bne.n	8008f7e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d009      	beq.n	8008f02 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008efa:	461a      	mov	r2, r3
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	791b      	ldrb	r3, [r3, #4]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d128      	bne.n	8008f5c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d110      	bne.n	8008f3c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	0151      	lsls	r1, r2, #5
 8008f2c:	69fa      	ldr	r2, [r7, #28]
 8008f2e:	440a      	add	r2, r1
 8008f30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	e00f      	b.n	8008f5c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	0151      	lsls	r1, r2, #5
 8008f4e:	69fa      	ldr	r2, [r7, #28]
 8008f50:	440a      	add	r2, r1
 8008f52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f5a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	0151      	lsls	r1, r2, #5
 8008f6e:	69fa      	ldr	r2, [r7, #28]
 8008f70:	440a      	add	r2, r1
 8008f72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f76:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	e166      	b.n	800924c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	0151      	lsls	r1, r2, #5
 8008f90:	69fa      	ldr	r2, [r7, #28]
 8008f92:	440a      	add	r2, r1
 8008f94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f98:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f9c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	791b      	ldrb	r3, [r3, #4]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d015      	beq.n	8008fd2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 814e 	beq.w	800924c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc6:	69f9      	ldr	r1, [r7, #28]
 8008fc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	634b      	str	r3, [r1, #52]	@ 0x34
 8008fd0:	e13c      	b.n	800924c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d110      	bne.n	8009004 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	69fa      	ldr	r2, [r7, #28]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ffc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	e00f      	b.n	8009024 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	0151      	lsls	r1, r2, #5
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	440a      	add	r2, r1
 800901a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800901e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009022:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	68d9      	ldr	r1, [r3, #12]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	781a      	ldrb	r2, [r3, #0]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	b298      	uxth	r0, r3
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	4603      	mov	r3, r0
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 f9b9 	bl	80093b0 <USB_WritePacket>
 800903e:	e105      	b.n	800924c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	0151      	lsls	r1, r2, #5
 8009052:	69fa      	ldr	r2, [r7, #28]
 8009054:	440a      	add	r2, r1
 8009056:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800905a:	0cdb      	lsrs	r3, r3, #19
 800905c:	04db      	lsls	r3, r3, #19
 800905e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	0151      	lsls	r1, r2, #5
 8009072:	69fa      	ldr	r2, [r7, #28]
 8009074:	440a      	add	r2, r1
 8009076:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800907a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800907e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009082:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d132      	bne.n	80090f0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	689a      	ldr	r2, [r3, #8]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ae:	691a      	ldr	r2, [r3, #16]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090b8:	69b9      	ldr	r1, [r7, #24]
 80090ba:	0148      	lsls	r0, r1, #5
 80090bc:	69f9      	ldr	r1, [r7, #28]
 80090be:	4401      	add	r1, r0
 80090c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80090c4:	4313      	orrs	r3, r2
 80090c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	0151      	lsls	r1, r2, #5
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	440a      	add	r2, r1
 80090de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090e6:	6113      	str	r3, [r2, #16]
 80090e8:	e062      	b.n	80091b0 <USB_EPStartXfer+0x490>
 80090ea:	bf00      	nop
 80090ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d123      	bne.n	8009140 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009104:	691a      	ldr	r2, [r3, #16]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800910e:	69b9      	ldr	r1, [r7, #24]
 8009110:	0148      	lsls	r0, r1, #5
 8009112:	69f9      	ldr	r1, [r7, #28]
 8009114:	4401      	add	r1, r0
 8009116:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800911a:	4313      	orrs	r3, r2
 800911c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	4413      	add	r3, r2
 8009126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	0151      	lsls	r1, r2, #5
 8009130:	69fa      	ldr	r2, [r7, #28]
 8009132:	440a      	add	r2, r1
 8009134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009138:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800913c:	6113      	str	r3, [r2, #16]
 800913e:	e037      	b.n	80091b0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	691a      	ldr	r2, [r3, #16]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	4413      	add	r3, r2
 800914a:	1e5a      	subs	r2, r3, #1
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	fbb2 f3f3 	udiv	r3, r2, r3
 8009154:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	8afa      	ldrh	r2, [r7, #22]
 800915c:	fb03 f202 	mul.w	r2, r3, r2
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009170:	691a      	ldr	r2, [r3, #16]
 8009172:	8afb      	ldrh	r3, [r7, #22]
 8009174:	04d9      	lsls	r1, r3, #19
 8009176:	4b38      	ldr	r3, [pc, #224]	@ (8009258 <USB_EPStartXfer+0x538>)
 8009178:	400b      	ands	r3, r1
 800917a:	69b9      	ldr	r1, [r7, #24]
 800917c:	0148      	lsls	r0, r1, #5
 800917e:	69f9      	ldr	r1, [r7, #28]
 8009180:	4401      	add	r1, r0
 8009182:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009186:	4313      	orrs	r3, r2
 8009188:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009196:	691a      	ldr	r2, [r3, #16]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091a0:	69b9      	ldr	r1, [r7, #24]
 80091a2:	0148      	lsls	r0, r1, #5
 80091a4:	69f9      	ldr	r1, [r7, #28]
 80091a6:	4401      	add	r1, r0
 80091a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091ac:	4313      	orrs	r3, r2
 80091ae:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80091b0:	79fb      	ldrb	r3, [r7, #7]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d10d      	bne.n	80091d2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d009      	beq.n	80091d2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	68d9      	ldr	r1, [r3, #12]
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ce:	460a      	mov	r2, r1
 80091d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	791b      	ldrb	r3, [r3, #4]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d128      	bne.n	800922c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d110      	bne.n	800920c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	69fa      	ldr	r2, [r7, #28]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009204:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	e00f      	b.n	800922c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	440a      	add	r2, r1
 8009222:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800922a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009246:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800924a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	1ff80000 	.word	0x1ff80000

0800925c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800925c:	b480      	push	{r7}
 800925e:	b087      	sub	sp, #28
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	785b      	ldrb	r3, [r3, #1]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d14a      	bne.n	8009310 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800928e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009292:	f040 8086 	bne.w	80093a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	7812      	ldrb	r2, [r2, #0]
 80092aa:	0151      	lsls	r1, r2, #5
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	440a      	add	r2, r1
 80092b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80092b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	7812      	ldrb	r2, [r2, #0]
 80092ce:	0151      	lsls	r1, r2, #5
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	440a      	add	r2, r1
 80092d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3301      	adds	r3, #1
 80092e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d902      	bls.n	80092f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	75fb      	strb	r3, [r7, #23]
          break;
 80092f2:	e056      	b.n	80093a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009308:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800930c:	d0e7      	beq.n	80092de <USB_EPStopXfer+0x82>
 800930e:	e048      	b.n	80093a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	4413      	add	r3, r2
 800931a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009328:	d13b      	bne.n	80093a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	7812      	ldrb	r2, [r2, #0]
 800933e:	0151      	lsls	r1, r2, #5
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	440a      	add	r2, r1
 8009344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009348:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800934c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	7812      	ldrb	r2, [r2, #0]
 8009362:	0151      	lsls	r1, r2, #5
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	440a      	add	r2, r1
 8009368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800936c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009370:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3301      	adds	r3, #1
 8009376:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800937e:	4293      	cmp	r3, r2
 8009380:	d902      	bls.n	8009388 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	75fb      	strb	r3, [r7, #23]
          break;
 8009386:	e00c      	b.n	80093a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	4413      	add	r3, r2
 8009392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800939c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093a0:	d0e7      	beq.n	8009372 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	371c      	adds	r7, #28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b089      	sub	sp, #36	@ 0x24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	4611      	mov	r1, r2
 80093bc:	461a      	mov	r2, r3
 80093be:	460b      	mov	r3, r1
 80093c0:	71fb      	strb	r3, [r7, #7]
 80093c2:	4613      	mov	r3, r2
 80093c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80093ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d123      	bne.n	800941e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80093d6:	88bb      	ldrh	r3, [r7, #4]
 80093d8:	3303      	adds	r3, #3
 80093da:	089b      	lsrs	r3, r3, #2
 80093dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80093de:	2300      	movs	r3, #0
 80093e0:	61bb      	str	r3, [r7, #24]
 80093e2:	e018      	b.n	8009416 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	031a      	lsls	r2, r3, #12
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093f0:	461a      	mov	r2, r3
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	3301      	adds	r3, #1
 80093fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	3301      	adds	r3, #1
 8009402:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	3301      	adds	r3, #1
 8009408:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	3301      	adds	r3, #1
 800940e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	3301      	adds	r3, #1
 8009414:	61bb      	str	r3, [r7, #24]
 8009416:	69ba      	ldr	r2, [r7, #24]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	429a      	cmp	r2, r3
 800941c:	d3e2      	bcc.n	80093e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3724      	adds	r7, #36	@ 0x24
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800942c:	b480      	push	{r7}
 800942e:	b08b      	sub	sp, #44	@ 0x2c
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009442:	88fb      	ldrh	r3, [r7, #6]
 8009444:	089b      	lsrs	r3, r3, #2
 8009446:	b29b      	uxth	r3, r3
 8009448:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800944a:	88fb      	ldrh	r3, [r7, #6]
 800944c:	f003 0303 	and.w	r3, r3, #3
 8009450:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009452:	2300      	movs	r3, #0
 8009454:	623b      	str	r3, [r7, #32]
 8009456:	e014      	b.n	8009482 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009462:	601a      	str	r2, [r3, #0]
    pDest++;
 8009464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009466:	3301      	adds	r3, #1
 8009468:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800946a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946c:	3301      	adds	r3, #1
 800946e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009472:	3301      	adds	r3, #1
 8009474:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009478:	3301      	adds	r3, #1
 800947a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	3301      	adds	r3, #1
 8009480:	623b      	str	r3, [r7, #32]
 8009482:	6a3a      	ldr	r2, [r7, #32]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	429a      	cmp	r2, r3
 8009488:	d3e6      	bcc.n	8009458 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800948a:	8bfb      	ldrh	r3, [r7, #30]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01e      	beq.n	80094ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009490:	2300      	movs	r3, #0
 8009492:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800949a:	461a      	mov	r2, r3
 800949c:	f107 0310 	add.w	r3, r7, #16
 80094a0:	6812      	ldr	r2, [r2, #0]
 80094a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	fa22 f303 	lsr.w	r3, r2, r3
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b4:	701a      	strb	r2, [r3, #0]
      i++;
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	3301      	adds	r3, #1
 80094ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80094bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094be:	3301      	adds	r3, #1
 80094c0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80094c2:	8bfb      	ldrh	r3, [r7, #30]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80094c8:	8bfb      	ldrh	r3, [r7, #30]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1ea      	bne.n	80094a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80094ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	372c      	adds	r7, #44	@ 0x2c
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	785b      	ldrb	r3, [r3, #1]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d12c      	bne.n	8009552 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	db12      	blt.n	8009530 <USB_EPSetStall+0x54>
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00f      	beq.n	8009530 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	0151      	lsls	r1, r2, #5
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	440a      	add	r2, r1
 8009526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800952a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800952e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	0151      	lsls	r1, r2, #5
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	440a      	add	r2, r1
 8009546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800954a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	e02b      	b.n	80095aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	db12      	blt.n	800958a <USB_EPSetStall+0xae>
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00f      	beq.n	800958a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4413      	add	r3, r2
 8009572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	440a      	add	r2, r1
 8009580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009584:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009588:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4413      	add	r3, r2
 8009592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	0151      	lsls	r1, r2, #5
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	440a      	add	r2, r1
 80095a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80095a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	785b      	ldrb	r3, [r3, #1]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d128      	bne.n	8009626 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	0151      	lsls	r1, r2, #5
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	440a      	add	r2, r1
 80095ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80095f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	791b      	ldrb	r3, [r3, #4]
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d003      	beq.n	8009604 <USB_EPClearStall+0x4c>
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	791b      	ldrb	r3, [r3, #4]
 8009600:	2b02      	cmp	r3, #2
 8009602:	d138      	bne.n	8009676 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	0151      	lsls	r1, r2, #5
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	440a      	add	r2, r1
 800961a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800961e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009622:	6013      	str	r3, [r2, #0]
 8009624:	e027      	b.n	8009676 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4413      	add	r3, r2
 800962e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	0151      	lsls	r1, r2, #5
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	440a      	add	r2, r1
 800963c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009640:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009644:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	791b      	ldrb	r3, [r3, #4]
 800964a:	2b03      	cmp	r3, #3
 800964c:	d003      	beq.n	8009656 <USB_EPClearStall+0x9e>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	791b      	ldrb	r3, [r3, #4]
 8009652:	2b02      	cmp	r3, #2
 8009654:	d10f      	bne.n	8009676 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	0151      	lsls	r1, r2, #5
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	440a      	add	r2, r1
 800966c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009674:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80096a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80096b8:	68f9      	ldr	r1, [r7, #12]
 80096ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096be:	4313      	orrs	r3, r2
 80096c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80096ea:	f023 0303 	bic.w	r3, r3, #3
 80096ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096fe:	f023 0302 	bic.w	r3, r3, #2
 8009702:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009712:	b480      	push	{r7}
 8009714:	b085      	sub	sp, #20
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800972c:	f023 0303 	bic.w	r3, r3, #3
 8009730:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009740:	f043 0302 	orr.w	r3, r3, #2
 8009744:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	4013      	ands	r3, r2
 800976a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800976c:	68fb      	ldr	r3, [r7, #12]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800977a:	b480      	push	{r7}
 800977c:	b085      	sub	sp, #20
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	4013      	ands	r3, r2
 800979c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	0c1b      	lsrs	r3, r3, #16
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b085      	sub	sp, #20
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	4013      	ands	r3, r2
 80097d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	b29b      	uxth	r3, r3
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b085      	sub	sp, #20
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	460b      	mov	r3, r1
 80097ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80097f2:	78fb      	ldrb	r3, [r7, #3]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	4013      	ands	r3, r2
 800980e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009810:	68bb      	ldr	r3, [r7, #8]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800981e:	b480      	push	{r7}
 8009820:	b087      	sub	sp, #28
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	460b      	mov	r3, r1
 8009828:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800983e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009840:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009842:	78fb      	ldrb	r3, [r7, #3]
 8009844:	f003 030f 	and.w	r3, r3, #15
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	fa22 f303 	lsr.w	r3, r2, r3
 800984e:	01db      	lsls	r3, r3, #7
 8009850:	b2db      	uxtb	r3, r3
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	4313      	orrs	r3, r2
 8009856:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	4013      	ands	r3, r2
 800986a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800986c:	68bb      	ldr	r3, [r7, #8]
}
 800986e:	4618      	mov	r0, r3
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	f003 0301 	and.w	r3, r3, #1
}
 800988a:	4618      	mov	r0, r3
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80098b4:	f023 0307 	bic.w	r3, r3, #7
 80098b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3714      	adds	r7, #20
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80098dc:	b480      	push	{r7}
 80098de:	b087      	sub	sp, #28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	460b      	mov	r3, r1
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	333c      	adds	r3, #60	@ 0x3c
 80098f2:	3304      	adds	r3, #4
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	4a26      	ldr	r2, [pc, #152]	@ (8009994 <USB_EP0_OutStart+0xb8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d90a      	bls.n	8009916 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800990c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009910:	d101      	bne.n	8009916 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	e037      	b.n	8009986 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800991c:	461a      	mov	r2, r3
 800991e:	2300      	movs	r3, #0
 8009920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009930:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009944:	f043 0318 	orr.w	r3, r3, #24
 8009948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009958:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800995c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800995e:	7afb      	ldrb	r3, [r7, #11]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d10f      	bne.n	8009984 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800996a:	461a      	mov	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800997e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009982:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	371c      	adds	r7, #28
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	4f54300a 	.word	0x4f54300a

08009998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099a0:	2300      	movs	r3, #0
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	3301      	adds	r3, #1
 80099a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099b0:	d901      	bls.n	80099b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e01b      	b.n	80099ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	daf2      	bge.n	80099a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	f043 0201 	orr.w	r2, r3, #1
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3301      	adds	r3, #1
 80099d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099da:	d901      	bls.n	80099e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e006      	b.n	80099ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d0f0      	beq.n	80099ce <USB_CoreReset+0x36>

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
	...

080099fc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009a00:	2200      	movs	r2, #0
 8009a02:	4912      	ldr	r1, [pc, #72]	@ (8009a4c <MX_USB_Device_Init+0x50>)
 8009a04:	4812      	ldr	r0, [pc, #72]	@ (8009a50 <MX_USB_Device_Init+0x54>)
 8009a06:	f001 f8cb 	bl	800aba0 <USBD_Init>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d001      	beq.n	8009a14 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009a10:	f7f7 f882 	bl	8000b18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009a14:	490f      	ldr	r1, [pc, #60]	@ (8009a54 <MX_USB_Device_Init+0x58>)
 8009a16:	480e      	ldr	r0, [pc, #56]	@ (8009a50 <MX_USB_Device_Init+0x54>)
 8009a18:	f001 f8f2 	bl	800ac00 <USBD_RegisterClass>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009a22:	f7f7 f879 	bl	8000b18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009a26:	490c      	ldr	r1, [pc, #48]	@ (8009a58 <MX_USB_Device_Init+0x5c>)
 8009a28:	4809      	ldr	r0, [pc, #36]	@ (8009a50 <MX_USB_Device_Init+0x54>)
 8009a2a:	f001 f81d 	bl	800aa68 <USBD_CDC_RegisterInterface>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009a34:	f7f7 f870 	bl	8000b18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009a38:	4805      	ldr	r0, [pc, #20]	@ (8009a50 <MX_USB_Device_Init+0x54>)
 8009a3a:	f001 f908 	bl	800ac4e <USBD_Start>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009a44:	f7f7 f868 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009a48:	bf00      	nop
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	20000034 	.word	0x20000034
 8009a50:	20000d28 	.word	0x20000d28
 8009a54:	20000094 	.word	0x20000094
 8009a58:	20000020 	.word	0x20000020

08009a5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a60:	2200      	movs	r2, #0
 8009a62:	4905      	ldr	r1, [pc, #20]	@ (8009a78 <CDC_Init_FS+0x1c>)
 8009a64:	4805      	ldr	r0, [pc, #20]	@ (8009a7c <CDC_Init_FS+0x20>)
 8009a66:	f001 f814 	bl	800aa92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a6a:	4905      	ldr	r1, [pc, #20]	@ (8009a80 <CDC_Init_FS+0x24>)
 8009a6c:	4803      	ldr	r0, [pc, #12]	@ (8009a7c <CDC_Init_FS+0x20>)
 8009a6e:	f001 f829 	bl	800aac4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	200017f8 	.word	0x200017f8
 8009a7c:	20000d28 	.word	0x20000d28
 8009a80:	20000ff8 	.word	0x20000ff8

08009a84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a84:	b480      	push	{r7}
 8009a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	6039      	str	r1, [r7, #0]
 8009a9e:	71fb      	strb	r3, [r7, #7]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	2b23      	cmp	r3, #35	@ 0x23
 8009aa8:	d84a      	bhi.n	8009b40 <CDC_Control_FS+0xac>
 8009aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab0 <CDC_Control_FS+0x1c>)
 8009aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab0:	08009b41 	.word	0x08009b41
 8009ab4:	08009b41 	.word	0x08009b41
 8009ab8:	08009b41 	.word	0x08009b41
 8009abc:	08009b41 	.word	0x08009b41
 8009ac0:	08009b41 	.word	0x08009b41
 8009ac4:	08009b41 	.word	0x08009b41
 8009ac8:	08009b41 	.word	0x08009b41
 8009acc:	08009b41 	.word	0x08009b41
 8009ad0:	08009b41 	.word	0x08009b41
 8009ad4:	08009b41 	.word	0x08009b41
 8009ad8:	08009b41 	.word	0x08009b41
 8009adc:	08009b41 	.word	0x08009b41
 8009ae0:	08009b41 	.word	0x08009b41
 8009ae4:	08009b41 	.word	0x08009b41
 8009ae8:	08009b41 	.word	0x08009b41
 8009aec:	08009b41 	.word	0x08009b41
 8009af0:	08009b41 	.word	0x08009b41
 8009af4:	08009b41 	.word	0x08009b41
 8009af8:	08009b41 	.word	0x08009b41
 8009afc:	08009b41 	.word	0x08009b41
 8009b00:	08009b41 	.word	0x08009b41
 8009b04:	08009b41 	.word	0x08009b41
 8009b08:	08009b41 	.word	0x08009b41
 8009b0c:	08009b41 	.word	0x08009b41
 8009b10:	08009b41 	.word	0x08009b41
 8009b14:	08009b41 	.word	0x08009b41
 8009b18:	08009b41 	.word	0x08009b41
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b41 	.word	0x08009b41
 8009b24:	08009b41 	.word	0x08009b41
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b41 	.word	0x08009b41
 8009b30:	08009b41 	.word	0x08009b41
 8009b34:	08009b41 	.word	0x08009b41
 8009b38:	08009b41 	.word	0x08009b41
 8009b3c:	08009b41 	.word	0x08009b41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b40:	bf00      	nop
  }

  return (USBD_OK);
 8009b42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	f5ad 4d80 	sub.w	sp, sp, #16384	@ 0x4000
 8009b56:	b088      	sub	sp, #32
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	f107 0320 	add.w	r3, r7, #32
 8009b5e:	f843 0c1c 	str.w	r0, [r3, #-28]
 8009b62:	f107 0320 	add.w	r3, r7, #32
 8009b66:	f843 1c20 	str.w	r1, [r3, #-32]
  /* USER CODE BEGIN 6 */
  uint16_t Buf2[8192];
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b6a:	f107 0320 	add.w	r3, r7, #32
 8009b6e:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8009b72:	4863      	ldr	r0, [pc, #396]	@ (8009d00 <CDC_Receive_FS+0x1b0>)
 8009b74:	f000 ffa6 	bl	800aac4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b78:	4861      	ldr	r0, [pc, #388]	@ (8009d00 <CDC_Receive_FS+0x1b0>)
 8009b7a:	f000 ffe7 	bl	800ab4c <USBD_CDC_ReceivePacket>

  for(int i = 0; i < 8192; i++){
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8009b84:	f102 021c 	add.w	r2, r2, #28
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	e01c      	b.n	8009bc6 <CDC_Receive_FS+0x76>
	  Buf2[i] = i;
 8009b8c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009b90:	f103 031c 	add.w	r3, r3, #28
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	f107 0320 	add.w	r3, r7, #32
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009ba2:	f103 031c 	add.w	r3, r3, #28
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	440b      	add	r3, r1
 8009bac:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(int i = 0; i < 8192; i++){
 8009bb0:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009bb4:	f103 031c 	add.w	r3, r3, #28
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8009bc0:	f102 021c 	add.w	r2, r2, #28
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009bca:	f103 031c 	add.w	r3, r3, #28
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bd4:	dbda      	blt.n	8009b8c <CDC_Receive_FS+0x3c>
  }

//  test_cmd = (char)Buf[0];

  uint32_t msg_rx = (Buf[3]<<24)|(Buf[2]<<16)|(Buf[1]<<8)|(Buf[0]);
 8009bd6:	f107 0320 	add.w	r3, r7, #32
 8009bda:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009bde:	3303      	adds	r3, #3
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	061a      	lsls	r2, r3, #24
 8009be4:	f107 0320 	add.w	r3, r7, #32
 8009be8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009bec:	3302      	adds	r3, #2
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	041b      	lsls	r3, r3, #16
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	f107 0320 	add.w	r3, r7, #32
 8009bf8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	021b      	lsls	r3, r3, #8
 8009c02:	4313      	orrs	r3, r2
 8009c04:	f107 0220 	add.w	r2, r7, #32
 8009c08:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 8009c0c:	7812      	ldrb	r2, [r2, #0]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8009c14:	f102 0218 	add.w	r2, r2, #24
 8009c18:	6013      	str	r3, [r2, #0]

  uint32_t addr = (msg_rx&0x7F000000)>>24;
 8009c1a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009c1e:	f103 0318 	add.w	r3, r3, #24
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	0e1b      	lsrs	r3, r3, #24
 8009c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c2a:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8009c2e:	f102 0214 	add.w	r2, r2, #20
 8009c32:	6013      	str	r3, [r2, #0]
  uint32_t data = (msg_rx&0x00FFFFFF);
 8009c34:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009c38:	f103 0318 	add.w	r3, r3, #24
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009c42:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8009c46:	f102 0210 	add.w	r2, r2, #16
 8009c4a:	6013      	str	r3, [r2, #0]
  uint32_t msg_tx = 0xdeadbeef;
 8009c4c:	f107 0320 	add.w	r3, r7, #32
 8009c50:	461a      	mov	r2, r3
 8009c52:	4b2c      	ldr	r3, [pc, #176]	@ (8009d04 <CDC_Receive_FS+0x1b4>)
 8009c54:	f842 3c14 	str.w	r3, [r2, #-20]

  if(msg_rx&0x80000000){
 8009c58:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009c5c:	f103 0318 	add.w	r3, r3, #24
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	da0d      	bge.n	8009c82 <CDC_Receive_FS+0x132>
	  set_register(&device_registers,addr,data);
 8009c66:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009c6a:	f103 0310 	add.w	r3, r3, #16
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009c74:	f103 0314 	add.w	r3, r3, #20
 8009c78:	6819      	ldr	r1, [r3, #0]
 8009c7a:	4823      	ldr	r0, [pc, #140]	@ (8009d08 <CDC_Receive_FS+0x1b8>)
 8009c7c:	f7f7 fb0c 	bl	8001298 <set_register>
 8009c80:	e037      	b.n	8009cf2 <CDC_Receive_FS+0x1a2>
  }
  else{
	  if(addr == DVC_SAMPLE_DATA){
 8009c82:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009c86:	f103 0314 	add.w	r3, r3, #20
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b32      	cmp	r3, #50	@ 0x32
 8009c8e:	d108      	bne.n	8009ca2 <CDC_Receive_FS+0x152>
		  CDC_Transmit_FS((uint8_t*)&Buf2, sizeof(Buf2));
 8009c90:	f107 0320 	add.w	r3, r7, #32
 8009c94:	3b10      	subs	r3, #16
 8009c96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f836 	bl	8009d0c <CDC_Transmit_FS>
 8009ca0:	e027      	b.n	8009cf2 <CDC_Receive_FS+0x1a2>
	  }
	  else{
		  data = get_register(&device_registers,addr);
 8009ca2:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009ca6:	f103 0314 	add.w	r3, r3, #20
 8009caa:	6819      	ldr	r1, [r3, #0]
 8009cac:	4816      	ldr	r0, [pc, #88]	@ (8009d08 <CDC_Receive_FS+0x1b8>)
 8009cae:	f7f7 fae2 	bl	8001276 <get_register>
 8009cb2:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009cb6:	f103 0310 	add.w	r3, r3, #16
 8009cba:	6018      	str	r0, [r3, #0]
		  msg_tx = ((addr << 24)&0x7F000000) | (data&0x00FFFFFF);
 8009cbc:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009cc0:	f103 0314 	add.w	r3, r3, #20
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	061b      	lsls	r3, r3, #24
 8009cc8:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 8009ccc:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8009cd0:	f103 0310 	add.w	r3, r3, #16
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	f107 0220 	add.w	r2, r7, #32
 8009ce0:	f842 3c14 	str.w	r3, [r2, #-20]
		  CDC_Transmit_FS((uint8_t*)&msg_tx, sizeof(msg_tx));
 8009ce4:	f107 0320 	add.w	r3, r7, #32
 8009ce8:	3b14      	subs	r3, #20
 8009cea:	2104      	movs	r1, #4
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 f80d 	bl	8009d0c <CDC_Transmit_FS>
	  }
  }

  return (USBD_OK);
 8009cf2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f507 4780 	add.w	r7, r7, #16384	@ 0x4000
 8009cfa:	3720      	adds	r7, #32
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	20000d28 	.word	0x20000d28
 8009d04:	deadbeef 	.word	0xdeadbeef
 8009d08:	20000924 	.word	0x20000924

08009d0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d54 <CDC_Transmit_FS+0x48>)
 8009d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e00b      	b.n	8009d4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d32:	887b      	ldrh	r3, [r7, #2]
 8009d34:	461a      	mov	r2, r3
 8009d36:	6879      	ldr	r1, [r7, #4]
 8009d38:	4806      	ldr	r0, [pc, #24]	@ (8009d54 <CDC_Transmit_FS+0x48>)
 8009d3a:	f000 feaa 	bl	800aa92 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d3e:	4805      	ldr	r0, [pc, #20]	@ (8009d54 <CDC_Transmit_FS+0x48>)
 8009d40:	f000 fed4 	bl	800aaec <USBD_CDC_TransmitPacket>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20000d28 	.word	0x20000d28

08009d58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	4613      	mov	r3, r2
 8009d64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
	...

08009d7c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	4603      	mov	r3, r0
 8009d84:	6039      	str	r1, [r7, #0]
 8009d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2212      	movs	r2, #18
 8009d8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009d8e:	4b03      	ldr	r3, [pc, #12]	@ (8009d9c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	20000054 	.word	0x20000054

08009da0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	4603      	mov	r3, r0
 8009da8:	6039      	str	r1, [r7, #0]
 8009daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2204      	movs	r2, #4
 8009db0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009db2:	4b03      	ldr	r3, [pc, #12]	@ (8009dc0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	20000068 	.word	0x20000068

08009dc4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	6039      	str	r1, [r7, #0]
 8009dce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dd0:	79fb      	ldrb	r3, [r7, #7]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d105      	bne.n	8009de2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	4907      	ldr	r1, [pc, #28]	@ (8009df8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009dda:	4808      	ldr	r0, [pc, #32]	@ (8009dfc <USBD_CDC_ProductStrDescriptor+0x38>)
 8009ddc:	f001 ff40 	bl	800bc60 <USBD_GetString>
 8009de0:	e004      	b.n	8009dec <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	4904      	ldr	r1, [pc, #16]	@ (8009df8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009de6:	4805      	ldr	r0, [pc, #20]	@ (8009dfc <USBD_CDC_ProductStrDescriptor+0x38>)
 8009de8:	f001 ff3a 	bl	800bc60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dec:	4b02      	ldr	r3, [pc, #8]	@ (8009df8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20001ff8 	.word	0x20001ff8
 8009dfc:	0800be90 	.word	0x0800be90

08009e00 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	6039      	str	r1, [r7, #0]
 8009e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	4904      	ldr	r1, [pc, #16]	@ (8009e20 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009e10:	4804      	ldr	r0, [pc, #16]	@ (8009e24 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009e12:	f001 ff25 	bl	800bc60 <USBD_GetString>
  return USBD_StrDesc;
 8009e16:	4b02      	ldr	r3, [pc, #8]	@ (8009e20 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20001ff8 	.word	0x20001ff8
 8009e24:	0800bea8 	.word	0x0800bea8

08009e28 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	4603      	mov	r3, r0
 8009e30:	6039      	str	r1, [r7, #0]
 8009e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	221a      	movs	r2, #26
 8009e38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e3a:	f000 f843 	bl	8009ec4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009e3e:	4b02      	ldr	r3, [pc, #8]	@ (8009e48 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	2000006c 	.word	0x2000006c

08009e4c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	6039      	str	r1, [r7, #0]
 8009e56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e58:	79fb      	ldrb	r3, [r7, #7]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d105      	bne.n	8009e6a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	4907      	ldr	r1, [pc, #28]	@ (8009e80 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e62:	4808      	ldr	r0, [pc, #32]	@ (8009e84 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e64:	f001 fefc 	bl	800bc60 <USBD_GetString>
 8009e68:	e004      	b.n	8009e74 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	4904      	ldr	r1, [pc, #16]	@ (8009e80 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e6e:	4805      	ldr	r0, [pc, #20]	@ (8009e84 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e70:	f001 fef6 	bl	800bc60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e74:	4b02      	ldr	r3, [pc, #8]	@ (8009e80 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20001ff8 	.word	0x20001ff8
 8009e84:	0800bebc 	.word	0x0800bebc

08009e88 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	6039      	str	r1, [r7, #0]
 8009e92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e94:	79fb      	ldrb	r3, [r7, #7]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d105      	bne.n	8009ea6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	4907      	ldr	r1, [pc, #28]	@ (8009ebc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e9e:	4808      	ldr	r0, [pc, #32]	@ (8009ec0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009ea0:	f001 fede 	bl	800bc60 <USBD_GetString>
 8009ea4:	e004      	b.n	8009eb0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	4904      	ldr	r1, [pc, #16]	@ (8009ebc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009eaa:	4805      	ldr	r0, [pc, #20]	@ (8009ec0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009eac:	f001 fed8 	bl	800bc60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009eb0:	4b02      	ldr	r3, [pc, #8]	@ (8009ebc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20001ff8 	.word	0x20001ff8
 8009ec0:	0800bec8 	.word	0x0800bec8

08009ec4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009eca:	4b0f      	ldr	r3, [pc, #60]	@ (8009f08 <Get_SerialNum+0x44>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8009f0c <Get_SerialNum+0x48>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8009f10 <Get_SerialNum+0x4c>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d009      	beq.n	8009efe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009eea:	2208      	movs	r2, #8
 8009eec:	4909      	ldr	r1, [pc, #36]	@ (8009f14 <Get_SerialNum+0x50>)
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f000 f814 	bl	8009f1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ef4:	2204      	movs	r2, #4
 8009ef6:	4908      	ldr	r1, [pc, #32]	@ (8009f18 <Get_SerialNum+0x54>)
 8009ef8:	68b8      	ldr	r0, [r7, #8]
 8009efa:	f000 f80f 	bl	8009f1c <IntToUnicode>
  }
}
 8009efe:	bf00      	nop
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	0bfa0700 	.word	0x0bfa0700
 8009f0c:	0bfa0704 	.word	0x0bfa0704
 8009f10:	0bfa0708 	.word	0x0bfa0708
 8009f14:	2000006e 	.word	0x2000006e
 8009f18:	2000007e 	.word	0x2000007e

08009f1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	4613      	mov	r3, r2
 8009f28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f2e:	2300      	movs	r3, #0
 8009f30:	75fb      	strb	r3, [r7, #23]
 8009f32:	e027      	b.n	8009f84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	0f1b      	lsrs	r3, r3, #28
 8009f38:	2b09      	cmp	r3, #9
 8009f3a:	d80b      	bhi.n	8009f54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	0f1b      	lsrs	r3, r3, #28
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
 8009f44:	005b      	lsls	r3, r3, #1
 8009f46:	4619      	mov	r1, r3
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	440b      	add	r3, r1
 8009f4c:	3230      	adds	r2, #48	@ 0x30
 8009f4e:	b2d2      	uxtb	r2, r2
 8009f50:	701a      	strb	r2, [r3, #0]
 8009f52:	e00a      	b.n	8009f6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	0f1b      	lsrs	r3, r3, #28
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	4619      	mov	r1, r3
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	440b      	add	r3, r1
 8009f64:	3237      	adds	r2, #55	@ 0x37
 8009f66:	b2d2      	uxtb	r2, r2
 8009f68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	011b      	lsls	r3, r3, #4
 8009f6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	3301      	adds	r3, #1
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	4413      	add	r3, r2
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	3301      	adds	r3, #1
 8009f82:	75fb      	strb	r3, [r7, #23]
 8009f84:	7dfa      	ldrb	r2, [r7, #23]
 8009f86:	79fb      	ldrb	r3, [r7, #7]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d3d3      	bcc.n	8009f34 <IntToUnicode+0x18>
  }
}
 8009f8c:	bf00      	nop
 8009f8e:	bf00      	nop
 8009f90:	371c      	adds	r7, #28
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	f000 fe97 	bl	800ace4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009fd0:	78fa      	ldrb	r2, [r7, #3]
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	00db      	lsls	r3, r3, #3
 8009fd8:	4413      	add	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	440b      	add	r3, r1
 8009fde:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	f000 fed1 	bl	800ad8e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a006:	78fa      	ldrb	r2, [r7, #3]
 800a008:	6879      	ldr	r1, [r7, #4]
 800a00a:	4613      	mov	r3, r2
 800a00c:	00db      	lsls	r3, r3, #3
 800a00e:	4413      	add	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	440b      	add	r3, r1
 800a014:	3320      	adds	r3, #32
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	78fb      	ldrb	r3, [r7, #3]
 800a01a:	4619      	mov	r1, r3
 800a01c:	f000 ff1a 	bl	800ae54 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a020:	bf00      	nop
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a036:	4618      	mov	r0, r3
 800a038:	f001 f81e 	bl	800b078 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a03c:	bf00      	nop
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a04c:	2301      	movs	r3, #1
 800a04e:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	79db      	ldrb	r3, [r3, #7]
 800a054:	2b02      	cmp	r3, #2
 800a056:	d001      	beq.n	800a05c <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a058:	f7f6 fd5e 	bl	8000b18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a062:	7bfa      	ldrb	r2, [r7, #15]
 800a064:	4611      	mov	r1, r2
 800a066:	4618      	mov	r0, r3
 800a068:	f000 ffcb 	bl	800b002 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a072:	4618      	mov	r0, r3
 800a074:	f000 ff84 	bl	800af80 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a078:	bf00      	nop
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 ffc7 	bl	800b022 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	7adb      	ldrb	r3, [r3, #11]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d005      	beq.n	800a0a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a09c:	4b04      	ldr	r3, [pc, #16]	@ (800a0b0 <HAL_PCD_SuspendCallback+0x30>)
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	4a03      	ldr	r2, [pc, #12]	@ (800a0b0 <HAL_PCD_SuspendCallback+0x30>)
 800a0a2:	f043 0306 	orr.w	r3, r3, #6
 800a0a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	e000ed00 	.word	0xe000ed00

0800a0b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	7adb      	ldrb	r3, [r3, #11]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d007      	beq.n	800a0d4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0c4:	4b08      	ldr	r3, [pc, #32]	@ (800a0e8 <HAL_PCD_ResumeCallback+0x34>)
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	4a07      	ldr	r2, [pc, #28]	@ (800a0e8 <HAL_PCD_ResumeCallback+0x34>)
 800a0ca:	f023 0306 	bic.w	r3, r3, #6
 800a0ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a0d0:	f000 fa2a 	bl	800a528 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 ffb6 	bl	800b04c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	e000ed00 	.word	0xe000ed00

0800a0ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0fe:	78fa      	ldrb	r2, [r7, #3]
 800a100:	4611      	mov	r1, r2
 800a102:	4618      	mov	r0, r3
 800a104:	f000 ffdf 	bl	800b0c6 <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a122:	78fa      	ldrb	r2, [r7, #3]
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f000 ffc0 	bl	800b0ac <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 800a12c:	bf00      	nop
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a142:	4618      	mov	r0, r3
 800a144:	f000 ffcc 	bl	800b0e0 <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 ffc9 	bl	800b0f6 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 800a164:	bf00      	nop
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a174:	4a24      	ldr	r2, [pc, #144]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a22      	ldr	r2, [pc, #136]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a180:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a184:	f7fa f9ec 	bl	8004560 <HAL_PWREx_EnableVddUSB>
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    Error_Handler( );
  }
#else
  hpcd_USB_FS.Instance = USB_OTG_FS;
 800a188:	4b1f      	ldr	r3, [pc, #124]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a18a:	4a20      	ldr	r2, [pc, #128]	@ (800a20c <USBD_LL_Init+0xa0>)
 800a18c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 6;
 800a18e:	4b1e      	ldr	r3, [pc, #120]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a190:	2206      	movs	r2, #6
 800a192:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a194:	4b1c      	ldr	r3, [pc, #112]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a196:	2202      	movs	r2, #2
 800a198:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a19a:	4b1b      	ldr	r3, [pc, #108]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a1a0:	4b19      	ldr	r3, [pc, #100]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a1a6:	4b18      	ldr	r3, [pc, #96]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a1ac:	4b16      	ldr	r3, [pc, #88]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_FS.Init.use_dedicated_ep1 = DISABLE;
 800a1b2:	4b15      	ldr	r3, [pc, #84]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_FS.Init.vbus_sensing_enable = DISABLE;
 800a1b8:	4b13      	ldr	r3, [pc, #76]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a1be:	4812      	ldr	r0, [pc, #72]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a1c0:	f7f8 fea8 	bl	8002f14 <HAL_PCD_Init>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <USBD_LL_Init+0x62>
  {
    Error_Handler();
 800a1ca:	f7f6 fca5 	bl	8000b18 <Error_Handler>
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , 0, 0xC0);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , 0, 0x110);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , 0, 0x100);
#else
  HAL_PCDEx_SetRxFiFo((PCD_HandleTypeDef*)pdev->pData, 0x80);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a1d4:	2180      	movs	r1, #128	@ 0x80
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fa f901 	bl	80043de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 0, 0x40);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a1e2:	2240      	movs	r2, #64	@ 0x40
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fa f8b2 	bl	8004350 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 1, 0x80);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a1f2:	2280      	movs	r2, #128	@ 0x80
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fa f8aa 	bl	8004350 <HAL_PCDEx_SetTxFiFo>
#endif
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	200021f8 	.word	0x200021f8
 800a20c:	42040000 	.word	0x42040000

0800a210 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a218:	2300      	movs	r3, #0
 800a21a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a226:	4618      	mov	r0, r3
 800a228:	f7f8 ff8c 	bl	8003144 <HAL_PCD_Start>
 800a22c:	4603      	mov	r3, r0
 800a22e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a230:	7bfb      	ldrb	r3, [r7, #15]
 800a232:	4618      	mov	r0, r3
 800a234:	f000 f97e 	bl	800a534 <USBD_Get_USB_Status>
 800a238:	4603      	mov	r3, r0
 800a23a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a23c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
 800a24e:	4608      	mov	r0, r1
 800a250:	4611      	mov	r1, r2
 800a252:	461a      	mov	r2, r3
 800a254:	4603      	mov	r3, r0
 800a256:	70fb      	strb	r3, [r7, #3]
 800a258:	460b      	mov	r3, r1
 800a25a:	70bb      	strb	r3, [r7, #2]
 800a25c:	4613      	mov	r3, r2
 800a25e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a26e:	78bb      	ldrb	r3, [r7, #2]
 800a270:	883a      	ldrh	r2, [r7, #0]
 800a272:	78f9      	ldrb	r1, [r7, #3]
 800a274:	f7f9 fc87 	bl	8003b86 <HAL_PCD_EP_Open>
 800a278:	4603      	mov	r3, r0
 800a27a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 f958 	bl	800a534 <USBD_Get_USB_Status>
 800a284:	4603      	mov	r3, r0
 800a286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a288:	7bbb      	ldrb	r3, [r7, #14]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	460b      	mov	r3, r1
 800a29c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a2ac:	78fa      	ldrb	r2, [r7, #3]
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7f9 fcd2 	bl	8003c5a <HAL_PCD_EP_Close>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ba:	7bfb      	ldrb	r3, [r7, #15]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 f939 	bl	800a534 <USBD_Get_USB_Status>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7f9 fd8a 	bl	8003e08 <HAL_PCD_EP_SetStall>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f91a 	bl	800a534 <USBD_Get_USB_Status>
 800a300:	4603      	mov	r3, r0
 800a302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a304:	7bbb      	ldrb	r3, [r7, #14]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a328:	78fa      	ldrb	r2, [r7, #3]
 800a32a:	4611      	mov	r1, r2
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7f9 fdce 	bl	8003ece <HAL_PCD_EP_ClrStall>
 800a332:	4603      	mov	r3, r0
 800a334:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 f8fb 	bl	800a534 <USBD_Get_USB_Status>
 800a33e:	4603      	mov	r3, r0
 800a340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a342:	7bbb      	ldrb	r3, [r7, #14]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	460b      	mov	r3, r1
 800a356:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a35e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a364:	2b00      	cmp	r3, #0
 800a366:	da0b      	bge.n	800a380 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a368:	78fb      	ldrb	r3, [r7, #3]
 800a36a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a36e:	68f9      	ldr	r1, [r7, #12]
 800a370:	4613      	mov	r3, r2
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	4413      	add	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	440b      	add	r3, r1
 800a37a:	3316      	adds	r3, #22
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	e00b      	b.n	800a398 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a380:	78fb      	ldrb	r3, [r7, #3]
 800a382:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a386:	68f9      	ldr	r1, [r7, #12]
 800a388:	4613      	mov	r3, r2
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	4413      	add	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	440b      	add	r3, r1
 800a392:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a396:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3be:	78fa      	ldrb	r2, [r7, #3]
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7f9 fbbb 	bl	8003b3e <HAL_PCD_SetAddress>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f000 f8b0 	bl	800a534 <USBD_Get_USB_Status>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b086      	sub	sp, #24
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	607a      	str	r2, [r7, #4]
 800a3ec:	603b      	str	r3, [r7, #0]
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a400:	7af9      	ldrb	r1, [r7, #11]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	f7f9 fcc5 	bl	8003d94 <HAL_PCD_EP_Transmit>
 800a40a:	4603      	mov	r3, r0
 800a40c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	4618      	mov	r0, r3
 800a412:	f000 f88f 	bl	800a534 <USBD_Get_USB_Status>
 800a416:	4603      	mov	r3, r0
 800a418:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a41a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	607a      	str	r2, [r7, #4]
 800a42e:	603b      	str	r3, [r7, #0]
 800a430:	460b      	mov	r3, r1
 800a432:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a442:	7af9      	ldrb	r1, [r7, #11]
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	f7f9 fc51 	bl	8003cee <HAL_PCD_EP_Receive>
 800a44c:	4603      	mov	r3, r0
 800a44e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	4618      	mov	r0, r3
 800a454:	f000 f86e 	bl	800a534 <USBD_Get_USB_Status>
 800a458:	4603      	mov	r3, r0
 800a45a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a45c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3718      	adds	r7, #24
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b082      	sub	sp, #8
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	460b      	mov	r3, r1
 800a470:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a478:	78fa      	ldrb	r2, [r7, #3]
 800a47a:	4611      	mov	r1, r2
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7f9 fc71 	bl	8003d64 <HAL_PCD_EP_GetRxCount>
 800a482:	4603      	mov	r3, r0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d002      	beq.n	800a4a4 <HAL_PCDEx_LPM_Callback+0x18>
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d013      	beq.n	800a4ca <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a4a2:	e023      	b.n	800a4ec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	7adb      	ldrb	r3, [r3, #11]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d007      	beq.n	800a4bc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a4ac:	f000 f83c 	bl	800a528 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4b0:	4b10      	ldr	r3, [pc, #64]	@ (800a4f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	4a0f      	ldr	r2, [pc, #60]	@ (800a4f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4b6:	f023 0306 	bic.w	r3, r3, #6
 800a4ba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f000 fdc2 	bl	800b04c <USBD_LL_Resume>
    break;
 800a4c8:	e010      	b.n	800a4ec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 fda6 	bl	800b022 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	7adb      	ldrb	r3, [r3, #11]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d005      	beq.n	800a4ea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4de:	4b05      	ldr	r3, [pc, #20]	@ (800a4f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	4a04      	ldr	r2, [pc, #16]	@ (800a4f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4e4:	f043 0306 	orr.w	r3, r3, #6
 800a4e8:	6113      	str	r3, [r2, #16]
    break;
 800a4ea:	bf00      	nop
}
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	e000ed00 	.word	0xe000ed00

0800a4f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a500:	4b03      	ldr	r3, [pc, #12]	@ (800a510 <USBD_static_malloc+0x18>)
}
 800a502:	4618      	mov	r0, r3
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	200026dc 	.word	0x200026dc

0800a514 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]

}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a52c:	f7f5 ff3e 	bl	80003ac <SystemClock_Config>
}
 800a530:	bf00      	nop
 800a532:	bd80      	pop	{r7, pc}

0800a534 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	4603      	mov	r3, r0
 800a53c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	2b03      	cmp	r3, #3
 800a546:	d817      	bhi.n	800a578 <USBD_Get_USB_Status+0x44>
 800a548:	a201      	add	r2, pc, #4	@ (adr r2, 800a550 <USBD_Get_USB_Status+0x1c>)
 800a54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54e:	bf00      	nop
 800a550:	0800a561 	.word	0x0800a561
 800a554:	0800a567 	.word	0x0800a567
 800a558:	0800a56d 	.word	0x0800a56d
 800a55c:	0800a573 	.word	0x0800a573
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	73fb      	strb	r3, [r7, #15]
    break;
 800a564:	e00b      	b.n	800a57e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a566:	2303      	movs	r3, #3
 800a568:	73fb      	strb	r3, [r7, #15]
    break;
 800a56a:	e008      	b.n	800a57e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a56c:	2301      	movs	r3, #1
 800a56e:	73fb      	strb	r3, [r7, #15]
    break;
 800a570:	e005      	b.n	800a57e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a572:	2303      	movs	r3, #3
 800a574:	73fb      	strb	r3, [r7, #15]
    break;
 800a576:	e002      	b.n	800a57e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a578:	2303      	movs	r3, #3
 800a57a:	73fb      	strb	r3, [r7, #15]
    break;
 800a57c:	bf00      	nop
  }
  return usb_status;
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	460b      	mov	r3, r1
 800a596:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a598:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a59c:	f7ff ffac 	bl	800a4f8 <USBD_static_malloc>
 800a5a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d105      	bne.n	800a5b4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	e066      	b.n	800a682 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	7c1b      	ldrb	r3, [r3, #16]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d119      	bne.n	800a5f8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	2181      	movs	r1, #129	@ 0x81
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff fe3a 	bl	800a246 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5dc:	2202      	movs	r2, #2
 800a5de:	2101      	movs	r1, #1
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f7ff fe30 	bl	800a246 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2210      	movs	r2, #16
 800a5f2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a5f6:	e016      	b.n	800a626 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5f8:	2340      	movs	r3, #64	@ 0x40
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	2181      	movs	r1, #129	@ 0x81
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7ff fe21 	bl	800a246 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a60a:	2340      	movs	r3, #64	@ 0x40
 800a60c:	2202      	movs	r2, #2
 800a60e:	2101      	movs	r1, #1
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7ff fe18 	bl	800a246 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2201      	movs	r2, #1
 800a61a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2210      	movs	r2, #16
 800a622:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a626:	2308      	movs	r3, #8
 800a628:	2203      	movs	r2, #3
 800a62a:	2182      	movs	r1, #130	@ 0x82
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7ff fe0a 	bl	800a246 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	7c1b      	ldrb	r3, [r3, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d109      	bne.n	800a670 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a662:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a666:	2101      	movs	r1, #1
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f7ff fedb 	bl	800a424 <USBD_LL_PrepareReceive>
 800a66e:	e007      	b.n	800a680 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a676:	2340      	movs	r3, #64	@ 0x40
 800a678:	2101      	movs	r1, #1
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff fed2 	bl	800a424 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b082      	sub	sp, #8
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	460b      	mov	r3, r1
 800a694:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a696:	2181      	movs	r1, #129	@ 0x81
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff fdfa 	bl	800a292 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a6a4:	2101      	movs	r1, #1
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7ff fdf3 	bl	800a292 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a6b4:	2182      	movs	r1, #130	@ 0x82
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff fdeb 	bl	800a292 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00e      	beq.n	800a6f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7ff ff14 	bl	800a514 <USBD_static_free>
    pdev->pClassData = NULL;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a710:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a726:	2b00      	cmp	r3, #0
 800a728:	d03a      	beq.n	800a7a0 <USBD_CDC_Setup+0xa0>
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	f040 8097 	bne.w	800a85e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	88db      	ldrh	r3, [r3, #6]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d029      	beq.n	800a78c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	b25b      	sxtb	r3, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	da11      	bge.n	800a766 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a74e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	88d2      	ldrh	r2, [r2, #6]
 800a754:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a756:	6939      	ldr	r1, [r7, #16]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	88db      	ldrh	r3, [r3, #6]
 800a75c:	461a      	mov	r2, r3
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f001 fade 	bl	800bd20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a764:	e082      	b.n	800a86c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	785a      	ldrb	r2, [r3, #1]
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	88db      	ldrh	r3, [r3, #6]
 800a774:	b2da      	uxtb	r2, r3
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a77c:	6939      	ldr	r1, [r7, #16]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	88db      	ldrh	r3, [r3, #6]
 800a782:	461a      	mov	r2, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 faf7 	bl	800bd78 <USBD_CtlPrepareRx>
      break;
 800a78a:	e06f      	b.n	800a86c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	683a      	ldr	r2, [r7, #0]
 800a796:	7850      	ldrb	r0, [r2, #1]
 800a798:	2200      	movs	r2, #0
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	4798      	blx	r3
      break;
 800a79e:	e065      	b.n	800a86c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	785b      	ldrb	r3, [r3, #1]
 800a7a4:	2b0b      	cmp	r3, #11
 800a7a6:	d84f      	bhi.n	800a848 <USBD_CDC_Setup+0x148>
 800a7a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b0 <USBD_CDC_Setup+0xb0>)
 800a7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ae:	bf00      	nop
 800a7b0:	0800a7e1 	.word	0x0800a7e1
 800a7b4:	0800a857 	.word	0x0800a857
 800a7b8:	0800a849 	.word	0x0800a849
 800a7bc:	0800a849 	.word	0x0800a849
 800a7c0:	0800a849 	.word	0x0800a849
 800a7c4:	0800a849 	.word	0x0800a849
 800a7c8:	0800a849 	.word	0x0800a849
 800a7cc:	0800a849 	.word	0x0800a849
 800a7d0:	0800a849 	.word	0x0800a849
 800a7d4:	0800a849 	.word	0x0800a849
 800a7d8:	0800a809 	.word	0x0800a809
 800a7dc:	0800a831 	.word	0x0800a831
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d107      	bne.n	800a7fa <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a7ea:	f107 030c 	add.w	r3, r7, #12
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f001 fa94 	bl	800bd20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7f8:	e030      	b.n	800a85c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f001 fa1e 	bl	800bc3e <USBD_CtlError>
            ret = USBD_FAIL;
 800a802:	2303      	movs	r3, #3
 800a804:	75fb      	strb	r3, [r7, #23]
          break;
 800a806:	e029      	b.n	800a85c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d107      	bne.n	800a822 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a812:	f107 030f 	add.w	r3, r7, #15
 800a816:	2201      	movs	r2, #1
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f001 fa80 	bl	800bd20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a820:	e01c      	b.n	800a85c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 fa0a 	bl	800bc3e <USBD_CtlError>
            ret = USBD_FAIL;
 800a82a:	2303      	movs	r3, #3
 800a82c:	75fb      	strb	r3, [r7, #23]
          break;
 800a82e:	e015      	b.n	800a85c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a836:	2b03      	cmp	r3, #3
 800a838:	d00f      	beq.n	800a85a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f001 f9fe 	bl	800bc3e <USBD_CtlError>
            ret = USBD_FAIL;
 800a842:	2303      	movs	r3, #3
 800a844:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a846:	e008      	b.n	800a85a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f001 f9f7 	bl	800bc3e <USBD_CtlError>
          ret = USBD_FAIL;
 800a850:	2303      	movs	r3, #3
 800a852:	75fb      	strb	r3, [r7, #23]
          break;
 800a854:	e002      	b.n	800a85c <USBD_CDC_Setup+0x15c>
          break;
 800a856:	bf00      	nop
 800a858:	e008      	b.n	800a86c <USBD_CDC_Setup+0x16c>
          break;
 800a85a:	bf00      	nop
      }
      break;
 800a85c:	e006      	b.n	800a86c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f001 f9ec 	bl	800bc3e <USBD_CtlError>
      ret = USBD_FAIL;
 800a866:	2303      	movs	r3, #3
 800a868:	75fb      	strb	r3, [r7, #23]
      break;
 800a86a:	bf00      	nop
  }

  return (uint8_t)ret;
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop

0800a878 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a88a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a892:	2b00      	cmp	r3, #0
 800a894:	d101      	bne.n	800a89a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a896:	2303      	movs	r3, #3
 800a898:	e04f      	b.n	800a93a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a8a2:	78fa      	ldrb	r2, [r7, #3]
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	440b      	add	r3, r1
 800a8b0:	3318      	adds	r3, #24
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d029      	beq.n	800a90c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a8b8:	78fa      	ldrb	r2, [r7, #3]
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	440b      	add	r3, r1
 800a8c6:	3318      	adds	r3, #24
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	78f9      	ldrb	r1, [r7, #3]
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	440b      	add	r3, r1
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4403      	add	r3, r0
 800a8d8:	331c      	adds	r3, #28
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a8e0:	fb01 f303 	mul.w	r3, r1, r3
 800a8e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d110      	bne.n	800a90c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a8ea:	78fa      	ldrb	r2, [r7, #3]
 800a8ec:	6879      	ldr	r1, [r7, #4]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	440b      	add	r3, r1
 800a8f8:	3318      	adds	r3, #24
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a8fe:	78f9      	ldrb	r1, [r7, #3]
 800a900:	2300      	movs	r3, #0
 800a902:	2200      	movs	r2, #0
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff fd6c 	bl	800a3e2 <USBD_LL_Transmit>
 800a90a:	e015      	b.n	800a938 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	2200      	movs	r2, #0
 800a910:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00b      	beq.n	800a938 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a934:	78fa      	ldrb	r2, [r7, #3]
 800a936:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	460b      	mov	r3, r1
 800a94c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a954:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d101      	bne.n	800a964 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a960:	2303      	movs	r3, #3
 800a962:	e015      	b.n	800a990 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a964:	78fb      	ldrb	r3, [r7, #3]
 800a966:	4619      	mov	r1, r3
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff fd7c 	bl	800a466 <USBD_LL_GetRxDataSize>
 800a96e:	4602      	mov	r2, r0
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a98a:	4611      	mov	r1, r2
 800a98c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9a6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d014      	beq.n	800a9dc <USBD_CDC_EP0_RxReady+0x44>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a9b8:	2bff      	cmp	r3, #255	@ 0xff
 800a9ba:	d00f      	beq.n	800a9dc <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a9ca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a9d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	22ff      	movs	r2, #255	@ 0xff
 800a9d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
	...

0800a9e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2243      	movs	r2, #67	@ 0x43
 800a9f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a9f6:	4b03      	ldr	r3, [pc, #12]	@ (800aa04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	20000110 	.word	0x20000110

0800aa08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2243      	movs	r2, #67	@ 0x43
 800aa14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800aa16:	4b03      	ldr	r3, [pc, #12]	@ (800aa24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	200000cc 	.word	0x200000cc

0800aa28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2243      	movs	r2, #67	@ 0x43
 800aa34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800aa36:	4b03      	ldr	r3, [pc, #12]	@ (800aa44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	20000154 	.word	0x20000154

0800aa48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	220a      	movs	r2, #10
 800aa54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aa56:	4b03      	ldr	r3, [pc, #12]	@ (800aa64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr
 800aa64:	20000088 	.word	0x20000088

0800aa68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d101      	bne.n	800aa7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	e004      	b.n	800aa86 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b087      	sub	sp, #28
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	60f8      	str	r0, [r7, #12]
 800aa9a:	60b9      	str	r1, [r7, #8]
 800aa9c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aaa4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	371c      	adds	r7, #28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aad4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3714      	adds	r7, #20
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aafa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aafc:	2301      	movs	r3, #1
 800aafe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e01a      	b.n	800ab44 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d114      	bne.n	800ab42 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ab36:	2181      	movs	r1, #129	@ 0x81
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7ff fc52 	bl	800a3e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d101      	bne.n	800ab6a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e016      	b.n	800ab98 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	7c1b      	ldrb	r3, [r3, #16]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d109      	bne.n	800ab86 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7ff fc50 	bl	800a424 <USBD_LL_PrepareReceive>
 800ab84:	e007      	b.n	800ab96 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab8c:	2340      	movs	r3, #64	@ 0x40
 800ab8e:	2101      	movs	r1, #1
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7ff fc47 	bl	800a424 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	4613      	mov	r3, r2
 800abac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e01f      	b.n	800abf8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2201      	movs	r2, #1
 800abe2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	79fa      	ldrb	r2, [r7, #7]
 800abea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f7ff fabd 	bl	800a16c <USBD_LL_Init>
 800abf2:	4603      	mov	r3, r0
 800abf4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e016      	b.n	800ac46 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00b      	beq.n	800ac44 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac34:	f107 020e 	add.w	r2, r7, #14
 800ac38:	4610      	mov	r0, r2
 800ac3a:	4798      	blx	r3
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b082      	sub	sp, #8
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff fada 	bl	800a210 <USBD_LL_Start>
 800ac5c:	4603      	mov	r3, r0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d009      	beq.n	800acaa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	78fa      	ldrb	r2, [r7, #3]
 800aca0:	4611      	mov	r1, r2
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	4798      	blx	r3
 800aca6:	4603      	mov	r3, r0
 800aca8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	460b      	mov	r3, r1
 800acbe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d007      	beq.n	800acda <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	78fa      	ldrb	r2, [r7, #3]
 800acd4:	4611      	mov	r1, r2
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	4798      	blx	r3
  }

  return USBD_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 ff67 	bl	800bbca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad18:	f003 031f 	and.w	r3, r3, #31
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d01a      	beq.n	800ad56 <USBD_LL_SetupStage+0x72>
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d822      	bhi.n	800ad6a <USBD_LL_SetupStage+0x86>
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <USBD_LL_SetupStage+0x4a>
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d00a      	beq.n	800ad42 <USBD_LL_SetupStage+0x5e>
 800ad2c:	e01d      	b.n	800ad6a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fa18 	bl	800b16c <USBD_StdDevReq>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad40:	e020      	b.n	800ad84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fa7c 	bl	800b248 <USBD_StdItfReq>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73fb      	strb	r3, [r7, #15]
      break;
 800ad54:	e016      	b.n	800ad84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 faba 	bl	800b2d8 <USBD_StdEPReq>
 800ad64:	4603      	mov	r3, r0
 800ad66:	73fb      	strb	r3, [r7, #15]
      break;
 800ad68:	e00c      	b.n	800ad84 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad70:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff faa9 	bl	800a2d0 <USBD_LL_StallEP>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	73fb      	strb	r3, [r7, #15]
      break;
 800ad82:	bf00      	nop
  }

  return ret;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b086      	sub	sp, #24
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	60f8      	str	r0, [r7, #12]
 800ad96:	460b      	mov	r3, r1
 800ad98:	607a      	str	r2, [r7, #4]
 800ad9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad9c:	7afb      	ldrb	r3, [r7, #11]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d137      	bne.n	800ae12 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ada8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800adb0:	2b03      	cmp	r3, #3
 800adb2:	d14a      	bne.n	800ae4a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	689a      	ldr	r2, [r3, #8]
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d913      	bls.n	800ade8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	689a      	ldr	r2, [r3, #8]
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	1ad2      	subs	r2, r2, r3
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	4293      	cmp	r3, r2
 800add8:	bf28      	it	cs
 800adda:	4613      	movcs	r3, r2
 800addc:	461a      	mov	r2, r3
 800adde:	6879      	ldr	r1, [r7, #4]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 ffe6 	bl	800bdb2 <USBD_CtlContinueRx>
 800ade6:	e030      	b.n	800ae4a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00a      	beq.n	800ae0a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d105      	bne.n	800ae0a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 ffe2 	bl	800bdd4 <USBD_CtlSendStatus>
 800ae10:	e01b      	b.n	800ae4a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d013      	beq.n	800ae46 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ae24:	2b03      	cmp	r3, #3
 800ae26:	d10e      	bne.n	800ae46 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	7afa      	ldrb	r2, [r7, #11]
 800ae32:	4611      	mov	r1, r2
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	4798      	blx	r3
 800ae38:	4603      	mov	r3, r0
 800ae3a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d003      	beq.n	800ae4a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
 800ae44:	e002      	b.n	800ae4c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e000      	b.n	800ae4c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	607a      	str	r2, [r7, #4]
 800ae60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ae62:	7afb      	ldrb	r3, [r7, #11]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d16a      	bne.n	800af3e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3314      	adds	r3, #20
 800ae6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d155      	bne.n	800af24 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	689a      	ldr	r2, [r3, #8]
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d914      	bls.n	800aeae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	1ad2      	subs	r2, r2, r3
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	461a      	mov	r2, r3
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f000 ff5b 	bl	800bd56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aea0:	2300      	movs	r3, #0
 800aea2:	2200      	movs	r2, #0
 800aea4:	2100      	movs	r1, #0
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7ff fabc 	bl	800a424 <USBD_LL_PrepareReceive>
 800aeac:	e03a      	b.n	800af24 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	68da      	ldr	r2, [r3, #12]
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d11c      	bne.n	800aef4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d316      	bcc.n	800aef4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	685a      	ldr	r2, [r3, #4]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d20f      	bcs.n	800aef4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aed4:	2200      	movs	r2, #0
 800aed6:	2100      	movs	r1, #0
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 ff3c 	bl	800bd56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aee6:	2300      	movs	r3, #0
 800aee8:	2200      	movs	r2, #0
 800aeea:	2100      	movs	r1, #0
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f7ff fa99 	bl	800a424 <USBD_LL_PrepareReceive>
 800aef2:	e017      	b.n	800af24 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00a      	beq.n	800af16 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800af06:	2b03      	cmp	r3, #3
 800af08:	d105      	bne.n	800af16 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800af16:	2180      	movs	r1, #128	@ 0x80
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7ff f9d9 	bl	800a2d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f000 ff6b 	bl	800bdfa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d123      	bne.n	800af76 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f7ff fe99 	bl	800ac66 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800af3c:	e01b      	b.n	800af76 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d013      	beq.n	800af72 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800af50:	2b03      	cmp	r3, #3
 800af52:	d10e      	bne.n	800af72 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	7afa      	ldrb	r2, [r7, #11]
 800af5e:	4611      	mov	r1, r2
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	4798      	blx	r3
 800af64:	4603      	mov	r3, r0
 800af66:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	e002      	b.n	800af78 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800af72:	2303      	movs	r3, #3
 800af74:	e000      	b.n	800af78 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3718      	adds	r7, #24
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afac:	2b00      	cmp	r3, #0
 800afae:	d009      	beq.n	800afc4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	6852      	ldr	r2, [r2, #4]
 800afbc:	b2d2      	uxtb	r2, r2
 800afbe:	4611      	mov	r1, r2
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afc4:	2340      	movs	r3, #64	@ 0x40
 800afc6:	2200      	movs	r2, #0
 800afc8:	2100      	movs	r1, #0
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff f93b 	bl	800a246 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2240      	movs	r2, #64	@ 0x40
 800afdc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afe0:	2340      	movs	r3, #64	@ 0x40
 800afe2:	2200      	movs	r2, #0
 800afe4:	2180      	movs	r1, #128	@ 0x80
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7ff f92d 	bl	800a246 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2240      	movs	r2, #64	@ 0x40
 800aff6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	460b      	mov	r3, r1
 800b00c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	78fa      	ldrb	r2, [r7, #3]
 800b012:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b022:	b480      	push	{r7}
 800b024:	b083      	sub	sp, #12
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2204      	movs	r2, #4
 800b03a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b05a:	2b04      	cmp	r3, #4
 800b05c:	d105      	bne.n	800b06a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b086:	2b03      	cmp	r3, #3
 800b088:	d10b      	bne.n	800b0a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b090:	69db      	ldr	r3, [r3, #28]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d005      	beq.n	800b0a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b09c:	69db      	ldr	r3, [r3, #28]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b083      	sub	sp, #12
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d009      	beq.n	800b124 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	6852      	ldr	r2, [r2, #4]
 800b11c:	b2d2      	uxtb	r2, r2
 800b11e:	4611      	mov	r1, r2
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	4798      	blx	r3
  }

  return USBD_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b12e:	b480      	push	{r7}
 800b130:	b087      	sub	sp, #28
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	3301      	adds	r3, #1
 800b144:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b14c:	8a3b      	ldrh	r3, [r7, #16]
 800b14e:	021b      	lsls	r3, r3, #8
 800b150:	b21a      	sxth	r2, r3
 800b152:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b156:	4313      	orrs	r3, r2
 800b158:	b21b      	sxth	r3, r3
 800b15a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b15c:	89fb      	ldrh	r3, [r7, #14]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	371c      	adds	r7, #28
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
	...

0800b16c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b182:	2b40      	cmp	r3, #64	@ 0x40
 800b184:	d005      	beq.n	800b192 <USBD_StdDevReq+0x26>
 800b186:	2b40      	cmp	r3, #64	@ 0x40
 800b188:	d853      	bhi.n	800b232 <USBD_StdDevReq+0xc6>
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00b      	beq.n	800b1a6 <USBD_StdDevReq+0x3a>
 800b18e:	2b20      	cmp	r3, #32
 800b190:	d14f      	bne.n	800b232 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	4798      	blx	r3
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a4:	e04a      	b.n	800b23c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	785b      	ldrb	r3, [r3, #1]
 800b1aa:	2b09      	cmp	r3, #9
 800b1ac:	d83b      	bhi.n	800b226 <USBD_StdDevReq+0xba>
 800b1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b4 <USBD_StdDevReq+0x48>)
 800b1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b4:	0800b209 	.word	0x0800b209
 800b1b8:	0800b21d 	.word	0x0800b21d
 800b1bc:	0800b227 	.word	0x0800b227
 800b1c0:	0800b213 	.word	0x0800b213
 800b1c4:	0800b227 	.word	0x0800b227
 800b1c8:	0800b1e7 	.word	0x0800b1e7
 800b1cc:	0800b1dd 	.word	0x0800b1dd
 800b1d0:	0800b227 	.word	0x0800b227
 800b1d4:	0800b1ff 	.word	0x0800b1ff
 800b1d8:	0800b1f1 	.word	0x0800b1f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f9da 	bl	800b598 <USBD_GetDescriptor>
      break;
 800b1e4:	e024      	b.n	800b230 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fb69 	bl	800b8c0 <USBD_SetAddress>
      break;
 800b1ee:	e01f      	b.n	800b230 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fba8 	bl	800b948 <USBD_SetConfig>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b1fc:	e018      	b.n	800b230 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 fc45 	bl	800ba90 <USBD_GetConfig>
      break;
 800b206:	e013      	b.n	800b230 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fc75 	bl	800bafa <USBD_GetStatus>
      break;
 800b210:	e00e      	b.n	800b230 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 fca3 	bl	800bb60 <USBD_SetFeature>
      break;
 800b21a:	e009      	b.n	800b230 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fcb2 	bl	800bb88 <USBD_ClrFeature>
      break;
 800b224:	e004      	b.n	800b230 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b226:	6839      	ldr	r1, [r7, #0]
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 fd08 	bl	800bc3e <USBD_CtlError>
      break;
 800b22e:	bf00      	nop
    }
    break;
 800b230:	e004      	b.n	800b23c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b232:	6839      	ldr	r1, [r7, #0]
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fd02 	bl	800bc3e <USBD_CtlError>
    break;
 800b23a:	bf00      	nop
  }

  return ret;
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop

0800b248 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b252:	2300      	movs	r3, #0
 800b254:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b25e:	2b40      	cmp	r3, #64	@ 0x40
 800b260:	d005      	beq.n	800b26e <USBD_StdItfReq+0x26>
 800b262:	2b40      	cmp	r3, #64	@ 0x40
 800b264:	d82e      	bhi.n	800b2c4 <USBD_StdItfReq+0x7c>
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <USBD_StdItfReq+0x26>
 800b26a:	2b20      	cmp	r3, #32
 800b26c:	d12a      	bne.n	800b2c4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b274:	3b01      	subs	r3, #1
 800b276:	2b02      	cmp	r3, #2
 800b278:	d81d      	bhi.n	800b2b6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	889b      	ldrh	r3, [r3, #4]
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b01      	cmp	r3, #1
 800b282:	d813      	bhi.n	800b2ac <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	4798      	blx	r3
 800b292:	4603      	mov	r3, r0
 800b294:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	88db      	ldrh	r3, [r3, #6]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d110      	bne.n	800b2c0 <USBD_StdItfReq+0x78>
 800b29e:	7bfb      	ldrb	r3, [r7, #15]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10d      	bne.n	800b2c0 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fd95 	bl	800bdd4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b2aa:	e009      	b.n	800b2c0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 fcc5 	bl	800bc3e <USBD_CtlError>
      break;
 800b2b4:	e004      	b.n	800b2c0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800b2b6:	6839      	ldr	r1, [r7, #0]
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fcc0 	bl	800bc3e <USBD_CtlError>
      break;
 800b2be:	e000      	b.n	800b2c2 <USBD_StdItfReq+0x7a>
      break;
 800b2c0:	bf00      	nop
    }
    break;
 800b2c2:	e004      	b.n	800b2ce <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800b2c4:	6839      	ldr	r1, [r7, #0]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fcb9 	bl	800bc3e <USBD_CtlError>
    break;
 800b2cc:	bf00      	nop
  }

  return ret;
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	889b      	ldrh	r3, [r3, #4]
 800b2ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b2f4:	2b40      	cmp	r3, #64	@ 0x40
 800b2f6:	d007      	beq.n	800b308 <USBD_StdEPReq+0x30>
 800b2f8:	2b40      	cmp	r3, #64	@ 0x40
 800b2fa:	f200 8142 	bhi.w	800b582 <USBD_StdEPReq+0x2aa>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00c      	beq.n	800b31c <USBD_StdEPReq+0x44>
 800b302:	2b20      	cmp	r3, #32
 800b304:	f040 813d 	bne.w	800b582 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	4798      	blx	r3
 800b316:	4603      	mov	r3, r0
 800b318:	73fb      	strb	r3, [r7, #15]
    break;
 800b31a:	e137      	b.n	800b58c <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	785b      	ldrb	r3, [r3, #1]
 800b320:	2b03      	cmp	r3, #3
 800b322:	d007      	beq.n	800b334 <USBD_StdEPReq+0x5c>
 800b324:	2b03      	cmp	r3, #3
 800b326:	f300 8126 	bgt.w	800b576 <USBD_StdEPReq+0x29e>
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d07d      	beq.n	800b42a <USBD_StdEPReq+0x152>
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d03b      	beq.n	800b3aa <USBD_StdEPReq+0xd2>
 800b332:	e120      	b.n	800b576 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d002      	beq.n	800b344 <USBD_StdEPReq+0x6c>
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d016      	beq.n	800b370 <USBD_StdEPReq+0x98>
 800b342:	e02c      	b.n	800b39e <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b344:	7bbb      	ldrb	r3, [r7, #14]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00d      	beq.n	800b366 <USBD_StdEPReq+0x8e>
 800b34a:	7bbb      	ldrb	r3, [r7, #14]
 800b34c:	2b80      	cmp	r3, #128	@ 0x80
 800b34e:	d00a      	beq.n	800b366 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b350:	7bbb      	ldrb	r3, [r7, #14]
 800b352:	4619      	mov	r1, r3
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f7fe ffbb 	bl	800a2d0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b35a:	2180      	movs	r1, #128	@ 0x80
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7fe ffb7 	bl	800a2d0 <USBD_LL_StallEP>
 800b362:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b364:	e020      	b.n	800b3a8 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fc68 	bl	800bc3e <USBD_CtlError>
        break;
 800b36e:	e01b      	b.n	800b3a8 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	885b      	ldrh	r3, [r3, #2]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10e      	bne.n	800b396 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b378:	7bbb      	ldrb	r3, [r7, #14]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00b      	beq.n	800b396 <USBD_StdEPReq+0xbe>
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b80      	cmp	r3, #128	@ 0x80
 800b382:	d008      	beq.n	800b396 <USBD_StdEPReq+0xbe>
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	88db      	ldrh	r3, [r3, #6]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d104      	bne.n	800b396 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b38c:	7bbb      	ldrb	r3, [r7, #14]
 800b38e:	4619      	mov	r1, r3
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f7fe ff9d 	bl	800a2d0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fd1c 	bl	800bdd4 <USBD_CtlSendStatus>

        break;
 800b39c:	e004      	b.n	800b3a8 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fc4c 	bl	800bc3e <USBD_CtlError>
        break;
 800b3a6:	bf00      	nop
      }
      break;
 800b3a8:	e0ea      	b.n	800b580 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d002      	beq.n	800b3ba <USBD_StdEPReq+0xe2>
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d016      	beq.n	800b3e6 <USBD_StdEPReq+0x10e>
 800b3b8:	e030      	b.n	800b41c <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3ba:	7bbb      	ldrb	r3, [r7, #14]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00d      	beq.n	800b3dc <USBD_StdEPReq+0x104>
 800b3c0:	7bbb      	ldrb	r3, [r7, #14]
 800b3c2:	2b80      	cmp	r3, #128	@ 0x80
 800b3c4:	d00a      	beq.n	800b3dc <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7fe ff80 	bl	800a2d0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3d0:	2180      	movs	r1, #128	@ 0x80
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7fe ff7c 	bl	800a2d0 <USBD_LL_StallEP>
 800b3d8:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b3da:	e025      	b.n	800b428 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fc2d 	bl	800bc3e <USBD_CtlError>
        break;
 800b3e4:	e020      	b.n	800b428 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	885b      	ldrh	r3, [r3, #2]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d11b      	bne.n	800b426 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b3ee:	7bbb      	ldrb	r3, [r7, #14]
 800b3f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d004      	beq.n	800b402 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b3f8:	7bbb      	ldrb	r3, [r7, #14]
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7fe ff86 	bl	800a30e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fce6 	bl	800bdd4 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	4798      	blx	r3
 800b416:	4603      	mov	r3, r0
 800b418:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b41a:	e004      	b.n	800b426 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fc0d 	bl	800bc3e <USBD_CtlError>
        break;
 800b424:	e000      	b.n	800b428 <USBD_StdEPReq+0x150>
        break;
 800b426:	bf00      	nop
      }
      break;
 800b428:	e0aa      	b.n	800b580 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b430:	2b02      	cmp	r3, #2
 800b432:	d002      	beq.n	800b43a <USBD_StdEPReq+0x162>
 800b434:	2b03      	cmp	r3, #3
 800b436:	d032      	beq.n	800b49e <USBD_StdEPReq+0x1c6>
 800b438:	e097      	b.n	800b56a <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b43a:	7bbb      	ldrb	r3, [r7, #14]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d007      	beq.n	800b450 <USBD_StdEPReq+0x178>
 800b440:	7bbb      	ldrb	r3, [r7, #14]
 800b442:	2b80      	cmp	r3, #128	@ 0x80
 800b444:	d004      	beq.n	800b450 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fbf8 	bl	800bc3e <USBD_CtlError>
          break;
 800b44e:	e091      	b.n	800b574 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b454:	2b00      	cmp	r3, #0
 800b456:	da0b      	bge.n	800b470 <USBD_StdEPReq+0x198>
 800b458:	7bbb      	ldrb	r3, [r7, #14]
 800b45a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b45e:	4613      	mov	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	3310      	adds	r3, #16
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	4413      	add	r3, r2
 800b46c:	3304      	adds	r3, #4
 800b46e:	e00b      	b.n	800b488 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b476:	4613      	mov	r3, r2
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4413      	add	r3, r2
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	4413      	add	r3, r2
 800b486:	3304      	adds	r3, #4
 800b488:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	2200      	movs	r2, #0
 800b48e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2202      	movs	r2, #2
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fc42 	bl	800bd20 <USBD_CtlSendData>
        break;
 800b49c:	e06a      	b.n	800b574 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b49e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	da11      	bge.n	800b4ca <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
 800b4a8:	f003 020f 	and.w	r2, r3, #15
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	4413      	add	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	440b      	add	r3, r1
 800b4b8:	3324      	adds	r3, #36	@ 0x24
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d117      	bne.n	800b4f0 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fbbb 	bl	800bc3e <USBD_CtlError>
            break;
 800b4c8:	e054      	b.n	800b574 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b4ca:	7bbb      	ldrb	r3, [r7, #14]
 800b4cc:	f003 020f 	and.w	r2, r3, #15
 800b4d0:	6879      	ldr	r1, [r7, #4]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	440b      	add	r3, r1
 800b4dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b4e0:	881b      	ldrh	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d104      	bne.n	800b4f0 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fba8 	bl	800bc3e <USBD_CtlError>
            break;
 800b4ee:	e041      	b.n	800b574 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	da0b      	bge.n	800b510 <USBD_StdEPReq+0x238>
 800b4f8:	7bbb      	ldrb	r3, [r7, #14]
 800b4fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	3310      	adds	r3, #16
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	4413      	add	r3, r2
 800b50c:	3304      	adds	r3, #4
 800b50e:	e00b      	b.n	800b528 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b510:	7bbb      	ldrb	r3, [r7, #14]
 800b512:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b516:	4613      	mov	r3, r2
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4413      	add	r3, r2
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	4413      	add	r3, r2
 800b526:	3304      	adds	r3, #4
 800b528:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b52a:	7bbb      	ldrb	r3, [r7, #14]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <USBD_StdEPReq+0x25e>
 800b530:	7bbb      	ldrb	r3, [r7, #14]
 800b532:	2b80      	cmp	r3, #128	@ 0x80
 800b534:	d103      	bne.n	800b53e <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2200      	movs	r2, #0
 800b53a:	601a      	str	r2, [r3, #0]
 800b53c:	e00e      	b.n	800b55c <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7fe ff02 	bl	800a34c <USBD_LL_IsStallEP>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d003      	beq.n	800b556 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2201      	movs	r2, #1
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	e002      	b.n	800b55c <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	2200      	movs	r2, #0
 800b55a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2202      	movs	r2, #2
 800b560:	4619      	mov	r1, r3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fbdc 	bl	800bd20 <USBD_CtlSendData>
          break;
 800b568:	e004      	b.n	800b574 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 fb66 	bl	800bc3e <USBD_CtlError>
        break;
 800b572:	bf00      	nop
      }
      break;
 800b574:	e004      	b.n	800b580 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 fb60 	bl	800bc3e <USBD_CtlError>
      break;
 800b57e:	bf00      	nop
    }
    break;
 800b580:	e004      	b.n	800b58c <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fb5a 	bl	800bc3e <USBD_CtlError>
    break;
 800b58a:	bf00      	nop
  }

  return ret;
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	885b      	ldrh	r3, [r3, #2]
 800b5b2:	0a1b      	lsrs	r3, r3, #8
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	2b0e      	cmp	r3, #14
 800b5ba:	f200 8152 	bhi.w	800b862 <USBD_GetDescriptor+0x2ca>
 800b5be:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c4 <USBD_GetDescriptor+0x2c>)
 800b5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c4:	0800b635 	.word	0x0800b635
 800b5c8:	0800b64d 	.word	0x0800b64d
 800b5cc:	0800b68d 	.word	0x0800b68d
 800b5d0:	0800b863 	.word	0x0800b863
 800b5d4:	0800b863 	.word	0x0800b863
 800b5d8:	0800b803 	.word	0x0800b803
 800b5dc:	0800b82f 	.word	0x0800b82f
 800b5e0:	0800b863 	.word	0x0800b863
 800b5e4:	0800b863 	.word	0x0800b863
 800b5e8:	0800b863 	.word	0x0800b863
 800b5ec:	0800b863 	.word	0x0800b863
 800b5f0:	0800b863 	.word	0x0800b863
 800b5f4:	0800b863 	.word	0x0800b863
 800b5f8:	0800b863 	.word	0x0800b863
 800b5fc:	0800b601 	.word	0x0800b601
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b606:	69db      	ldr	r3, [r3, #28]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00b      	beq.n	800b624 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b612:	69db      	ldr	r3, [r3, #28]
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	7c12      	ldrb	r2, [r2, #16]
 800b618:	f107 0108 	add.w	r1, r7, #8
 800b61c:	4610      	mov	r0, r2
 800b61e:	4798      	blx	r3
 800b620:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b622:	e126      	b.n	800b872 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fb09 	bl	800bc3e <USBD_CtlError>
      err++;
 800b62c:	7afb      	ldrb	r3, [r7, #11]
 800b62e:	3301      	adds	r3, #1
 800b630:	72fb      	strb	r3, [r7, #11]
    break;
 800b632:	e11e      	b.n	800b872 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	7c12      	ldrb	r2, [r2, #16]
 800b640:	f107 0108 	add.w	r1, r7, #8
 800b644:	4610      	mov	r0, r2
 800b646:	4798      	blx	r3
 800b648:	60f8      	str	r0, [r7, #12]
    break;
 800b64a:	e112      	b.n	800b872 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	7c1b      	ldrb	r3, [r3, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10d      	bne.n	800b670 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b65a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b65c:	f107 0208 	add.w	r2, r7, #8
 800b660:	4610      	mov	r0, r2
 800b662:	4798      	blx	r3
 800b664:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	3301      	adds	r3, #1
 800b66a:	2202      	movs	r2, #2
 800b66c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b66e:	e100      	b.n	800b872 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b678:	f107 0208 	add.w	r2, r7, #8
 800b67c:	4610      	mov	r0, r2
 800b67e:	4798      	blx	r3
 800b680:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	3301      	adds	r3, #1
 800b686:	2202      	movs	r2, #2
 800b688:	701a      	strb	r2, [r3, #0]
    break;
 800b68a:	e0f2      	b.n	800b872 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	885b      	ldrh	r3, [r3, #2]
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b05      	cmp	r3, #5
 800b694:	f200 80ac 	bhi.w	800b7f0 <USBD_GetDescriptor+0x258>
 800b698:	a201      	add	r2, pc, #4	@ (adr r2, 800b6a0 <USBD_GetDescriptor+0x108>)
 800b69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69e:	bf00      	nop
 800b6a0:	0800b6b9 	.word	0x0800b6b9
 800b6a4:	0800b6ed 	.word	0x0800b6ed
 800b6a8:	0800b721 	.word	0x0800b721
 800b6ac:	0800b755 	.word	0x0800b755
 800b6b0:	0800b789 	.word	0x0800b789
 800b6b4:	0800b7bd 	.word	0x0800b7bd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00b      	beq.n	800b6dc <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	7c12      	ldrb	r2, [r2, #16]
 800b6d0:	f107 0108 	add.w	r1, r7, #8
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	4798      	blx	r3
 800b6d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6da:	e091      	b.n	800b800 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 faad 	bl	800bc3e <USBD_CtlError>
        err++;
 800b6e4:	7afb      	ldrb	r3, [r7, #11]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	72fb      	strb	r3, [r7, #11]
      break;
 800b6ea:	e089      	b.n	800b800 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00b      	beq.n	800b710 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	7c12      	ldrb	r2, [r2, #16]
 800b704:	f107 0108 	add.w	r1, r7, #8
 800b708:	4610      	mov	r0, r2
 800b70a:	4798      	blx	r3
 800b70c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b70e:	e077      	b.n	800b800 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fa93 	bl	800bc3e <USBD_CtlError>
        err++;
 800b718:	7afb      	ldrb	r3, [r7, #11]
 800b71a:	3301      	adds	r3, #1
 800b71c:	72fb      	strb	r3, [r7, #11]
      break;
 800b71e:	e06f      	b.n	800b800 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00b      	beq.n	800b744 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	7c12      	ldrb	r2, [r2, #16]
 800b738:	f107 0108 	add.w	r1, r7, #8
 800b73c:	4610      	mov	r0, r2
 800b73e:	4798      	blx	r3
 800b740:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b742:	e05d      	b.n	800b800 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fa79 	bl	800bc3e <USBD_CtlError>
        err++;
 800b74c:	7afb      	ldrb	r3, [r7, #11]
 800b74e:	3301      	adds	r3, #1
 800b750:	72fb      	strb	r3, [r7, #11]
      break;
 800b752:	e055      	b.n	800b800 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00b      	beq.n	800b778 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	7c12      	ldrb	r2, [r2, #16]
 800b76c:	f107 0108 	add.w	r1, r7, #8
 800b770:	4610      	mov	r0, r2
 800b772:	4798      	blx	r3
 800b774:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b776:	e043      	b.n	800b800 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fa5f 	bl	800bc3e <USBD_CtlError>
        err++;
 800b780:	7afb      	ldrb	r3, [r7, #11]
 800b782:	3301      	adds	r3, #1
 800b784:	72fb      	strb	r3, [r7, #11]
      break;
 800b786:	e03b      	b.n	800b800 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00b      	beq.n	800b7ac <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b79a:	695b      	ldr	r3, [r3, #20]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	7c12      	ldrb	r2, [r2, #16]
 800b7a0:	f107 0108 	add.w	r1, r7, #8
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	4798      	blx	r3
 800b7a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7aa:	e029      	b.n	800b800 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fa45 	bl	800bc3e <USBD_CtlError>
        err++;
 800b7b4:	7afb      	ldrb	r3, [r7, #11]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	72fb      	strb	r3, [r7, #11]
      break;
 800b7ba:	e021      	b.n	800b800 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00b      	beq.n	800b7e0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	7c12      	ldrb	r2, [r2, #16]
 800b7d4:	f107 0108 	add.w	r1, r7, #8
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4798      	blx	r3
 800b7dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7de:	e00f      	b.n	800b800 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fa2b 	bl	800bc3e <USBD_CtlError>
        err++;
 800b7e8:	7afb      	ldrb	r3, [r7, #11]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	72fb      	strb	r3, [r7, #11]
      break;
 800b7ee:	e007      	b.n	800b800 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 fa23 	bl	800bc3e <USBD_CtlError>
      err++;
 800b7f8:	7afb      	ldrb	r3, [r7, #11]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b7fe:	bf00      	nop
    }
    break;
 800b800:	e037      	b.n	800b872 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	7c1b      	ldrb	r3, [r3, #16]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d109      	bne.n	800b81e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b812:	f107 0208 	add.w	r2, r7, #8
 800b816:	4610      	mov	r0, r2
 800b818:	4798      	blx	r3
 800b81a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b81c:	e029      	b.n	800b872 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fa0c 	bl	800bc3e <USBD_CtlError>
      err++;
 800b826:	7afb      	ldrb	r3, [r7, #11]
 800b828:	3301      	adds	r3, #1
 800b82a:	72fb      	strb	r3, [r7, #11]
    break;
 800b82c:	e021      	b.n	800b872 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	7c1b      	ldrb	r3, [r3, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10d      	bne.n	800b852 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83e:	f107 0208 	add.w	r2, r7, #8
 800b842:	4610      	mov	r0, r2
 800b844:	4798      	blx	r3
 800b846:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3301      	adds	r3, #1
 800b84c:	2207      	movs	r2, #7
 800b84e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b850:	e00f      	b.n	800b872 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b852:	6839      	ldr	r1, [r7, #0]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f9f2 	bl	800bc3e <USBD_CtlError>
      err++;
 800b85a:	7afb      	ldrb	r3, [r7, #11]
 800b85c:	3301      	adds	r3, #1
 800b85e:	72fb      	strb	r3, [r7, #11]
    break;
 800b860:	e007      	b.n	800b872 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f9ea 	bl	800bc3e <USBD_CtlError>
    err++;
 800b86a:	7afb      	ldrb	r3, [r7, #11]
 800b86c:	3301      	adds	r3, #1
 800b86e:	72fb      	strb	r3, [r7, #11]
    break;
 800b870:	bf00      	nop
  }

  if (err != 0U)
 800b872:	7afb      	ldrb	r3, [r7, #11]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d11e      	bne.n	800b8b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	88db      	ldrh	r3, [r3, #6]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d016      	beq.n	800b8ae <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800b880:	893b      	ldrh	r3, [r7, #8]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00e      	beq.n	800b8a4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	88da      	ldrh	r2, [r3, #6]
 800b88a:	893b      	ldrh	r3, [r7, #8]
 800b88c:	4293      	cmp	r3, r2
 800b88e:	bf28      	it	cs
 800b890:	4613      	movcs	r3, r2
 800b892:	b29b      	uxth	r3, r3
 800b894:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b896:	893b      	ldrh	r3, [r7, #8]
 800b898:	461a      	mov	r2, r3
 800b89a:	68f9      	ldr	r1, [r7, #12]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fa3f 	bl	800bd20 <USBD_CtlSendData>
 800b8a2:	e009      	b.n	800b8b8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b8a4:	6839      	ldr	r1, [r7, #0]
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f9c9 	bl	800bc3e <USBD_CtlError>
 800b8ac:	e004      	b.n	800b8b8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 fa90 	bl	800bdd4 <USBD_CtlSendStatus>
 800b8b4:	e000      	b.n	800b8b8 <USBD_GetDescriptor+0x320>
    return;
 800b8b6:	bf00      	nop
    }
  }
}
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop

0800b8c0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	889b      	ldrh	r3, [r3, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d130      	bne.n	800b934 <USBD_SetAddress+0x74>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	88db      	ldrh	r3, [r3, #6]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d12c      	bne.n	800b934 <USBD_SetAddress+0x74>
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	885b      	ldrh	r3, [r3, #2]
 800b8de:	2b7f      	cmp	r3, #127	@ 0x7f
 800b8e0:	d828      	bhi.n	800b934 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	885b      	ldrh	r3, [r3, #2]
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f4:	2b03      	cmp	r3, #3
 800b8f6:	d104      	bne.n	800b902 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f99f 	bl	800bc3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b900:	e01d      	b.n	800b93e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	7bfa      	ldrb	r2, [r7, #15]
 800b906:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
 800b90c:	4619      	mov	r1, r3
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7fe fd48 	bl	800a3a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fa5d 	bl	800bdd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d004      	beq.n	800b92a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2202      	movs	r2, #2
 800b924:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b928:	e009      	b.n	800b93e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b932:	e004      	b.n	800b93e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b934:	6839      	ldr	r1, [r7, #0]
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f981 	bl	800bc3e <USBD_CtlError>
  }
}
 800b93c:	bf00      	nop
 800b93e:	bf00      	nop
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	885b      	ldrh	r3, [r3, #2]
 800b95a:	b2da      	uxtb	r2, r3
 800b95c:	4b4b      	ldr	r3, [pc, #300]	@ (800ba8c <USBD_SetConfig+0x144>)
 800b95e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b960:	4b4a      	ldr	r3, [pc, #296]	@ (800ba8c <USBD_SetConfig+0x144>)
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d905      	bls.n	800b974 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f967 	bl	800bc3e <USBD_CtlError>
    return USBD_FAIL;
 800b970:	2303      	movs	r3, #3
 800b972:	e087      	b.n	800ba84 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d002      	beq.n	800b984 <USBD_SetConfig+0x3c>
 800b97e:	2b03      	cmp	r3, #3
 800b980:	d025      	beq.n	800b9ce <USBD_SetConfig+0x86>
 800b982:	e071      	b.n	800ba68 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b984:	4b41      	ldr	r3, [pc, #260]	@ (800ba8c <USBD_SetConfig+0x144>)
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d01c      	beq.n	800b9c6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b98c:	4b3f      	ldr	r3, [pc, #252]	@ (800ba8c <USBD_SetConfig+0x144>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	461a      	mov	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b996:	4b3d      	ldr	r3, [pc, #244]	@ (800ba8c <USBD_SetConfig+0x144>)
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7ff f96d 	bl	800ac7c <USBD_SetClassConfig>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d004      	beq.n	800b9b6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f945 	bl	800bc3e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b9b4:	e065      	b.n	800ba82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fa0c 	bl	800bdd4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2203      	movs	r2, #3
 800b9c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800b9c4:	e05d      	b.n	800ba82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fa04 	bl	800bdd4 <USBD_CtlSendStatus>
    break;
 800b9cc:	e059      	b.n	800ba82 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b9ce:	4b2f      	ldr	r3, [pc, #188]	@ (800ba8c <USBD_SetConfig+0x144>)
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d112      	bne.n	800b9fc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2202      	movs	r2, #2
 800b9da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 800b9de:	4b2b      	ldr	r3, [pc, #172]	@ (800ba8c <USBD_SetConfig+0x144>)
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b9e8:	4b28      	ldr	r3, [pc, #160]	@ (800ba8c <USBD_SetConfig+0x144>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7ff f960 	bl	800acb4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 f9ed 	bl	800bdd4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b9fa:	e042      	b.n	800ba82 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b9fc:	4b23      	ldr	r3, [pc, #140]	@ (800ba8c <USBD_SetConfig+0x144>)
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	461a      	mov	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d02a      	beq.n	800ba60 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff f94e 	bl	800acb4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ba18:	4b1c      	ldr	r3, [pc, #112]	@ (800ba8c <USBD_SetConfig+0x144>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba22:	4b1a      	ldr	r3, [pc, #104]	@ (800ba8c <USBD_SetConfig+0x144>)
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff f927 	bl	800ac7c <USBD_SetClassConfig>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ba32:	7bfb      	ldrb	r3, [r7, #15]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00f      	beq.n	800ba58 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f8ff 	bl	800bc3e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff f933 	bl	800acb4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2202      	movs	r2, #2
 800ba52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800ba56:	e014      	b.n	800ba82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f9bb 	bl	800bdd4 <USBD_CtlSendStatus>
    break;
 800ba5e:	e010      	b.n	800ba82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f9b7 	bl	800bdd4 <USBD_CtlSendStatus>
    break;
 800ba66:	e00c      	b.n	800ba82 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f8e7 	bl	800bc3e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba70:	4b06      	ldr	r3, [pc, #24]	@ (800ba8c <USBD_SetConfig+0x144>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff f91c 	bl	800acb4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba80:	bf00      	nop
  }

  return ret;
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	200028fc 	.word	0x200028fc

0800ba90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	88db      	ldrh	r3, [r3, #6]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d004      	beq.n	800baac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800baa2:	6839      	ldr	r1, [r7, #0]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f8ca 	bl	800bc3e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800baaa:	e022      	b.n	800baf2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	dc02      	bgt.n	800babc <USBD_GetConfig+0x2c>
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dc03      	bgt.n	800bac2 <USBD_GetConfig+0x32>
 800baba:	e015      	b.n	800bae8 <USBD_GetConfig+0x58>
 800babc:	2b03      	cmp	r3, #3
 800babe:	d00b      	beq.n	800bad8 <USBD_GetConfig+0x48>
 800bac0:	e012      	b.n	800bae8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	3308      	adds	r3, #8
 800bacc:	2201      	movs	r2, #1
 800bace:	4619      	mov	r1, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f925 	bl	800bd20 <USBD_CtlSendData>
      break;
 800bad6:	e00c      	b.n	800baf2 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3304      	adds	r3, #4
 800badc:	2201      	movs	r2, #1
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f91d 	bl	800bd20 <USBD_CtlSendData>
      break;
 800bae6:	e004      	b.n	800baf2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 f8a7 	bl	800bc3e <USBD_CtlError>
      break;
 800baf0:	bf00      	nop
}
 800baf2:	bf00      	nop
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d81e      	bhi.n	800bb4e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	88db      	ldrh	r3, [r3, #6]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d004      	beq.n	800bb22 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800bb18:	6839      	ldr	r1, [r7, #0]
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f88f 	bl	800bc3e <USBD_CtlError>
      break;
 800bb20:	e01a      	b.n	800bb58 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d005      	beq.n	800bb3e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	f043 0202 	orr.w	r2, r3, #2
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	330c      	adds	r3, #12
 800bb42:	2202      	movs	r2, #2
 800bb44:	4619      	mov	r1, r3
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f8ea 	bl	800bd20 <USBD_CtlSendData>
    break;
 800bb4c:	e004      	b.n	800bb58 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f874 	bl	800bc3e <USBD_CtlError>
    break;
 800bb56:	bf00      	nop
  }
}
 800bb58:	bf00      	nop
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	885b      	ldrh	r3, [r3, #2]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d106      	bne.n	800bb80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f92a 	bl	800bdd4 <USBD_CtlSendStatus>
  }
}
 800bb80:	bf00      	nop
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d80b      	bhi.n	800bbb6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	885b      	ldrh	r3, [r3, #2]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d10c      	bne.n	800bbc0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f910 	bl	800bdd4 <USBD_CtlSendStatus>
      }
      break;
 800bbb4:	e004      	b.n	800bbc0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f840 	bl	800bc3e <USBD_CtlError>
      break;
 800bbbe:	e000      	b.n	800bbc2 <USBD_ClrFeature+0x3a>
      break;
 800bbc0:	bf00      	nop
  }
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b084      	sub	sp, #16
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	781a      	ldrb	r2, [r3, #0]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	781a      	ldrb	r2, [r3, #0]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f7ff fa9a 	bl	800b12e <SWAPBYTE>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3301      	adds	r3, #1
 800bc06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f7ff fa8d 	bl	800b12e <SWAPBYTE>
 800bc14:	4603      	mov	r3, r0
 800bc16:	461a      	mov	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	3301      	adds	r3, #1
 800bc26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f7ff fa80 	bl	800b12e <SWAPBYTE>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	461a      	mov	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	80da      	strh	r2, [r3, #6]
}
 800bc36:	bf00      	nop
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc48:	2180      	movs	r1, #128	@ 0x80
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7fe fb40 	bl	800a2d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bc50:	2100      	movs	r1, #0
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7fe fb3c 	bl	800a2d0 <USBD_LL_StallEP>
}
 800bc58:	bf00      	nop
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d036      	beq.n	800bce4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bc7a:	6938      	ldr	r0, [r7, #16]
 800bc7c:	f000 f836 	bl	800bcec <USBD_GetLen>
 800bc80:	4603      	mov	r3, r0
 800bc82:	3301      	adds	r3, #1
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bc8e:	7dfb      	ldrb	r3, [r7, #23]
 800bc90:	68ba      	ldr	r2, [r7, #8]
 800bc92:	4413      	add	r3, r2
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	7812      	ldrb	r2, [r2, #0]
 800bc98:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	4413      	add	r3, r2
 800bca6:	2203      	movs	r2, #3
 800bca8:	701a      	strb	r2, [r3, #0]
  idx++;
 800bcaa:	7dfb      	ldrb	r3, [r7, #23]
 800bcac:	3301      	adds	r3, #1
 800bcae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bcb0:	e013      	b.n	800bcda <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bcb2:	7dfb      	ldrb	r3, [r7, #23]
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	7812      	ldrb	r2, [r2, #0]
 800bcbc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	613b      	str	r3, [r7, #16]
    idx++;
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	4413      	add	r3, r2
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	701a      	strb	r2, [r3, #0]
    idx++;
 800bcd4:	7dfb      	ldrb	r3, [r7, #23]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1e7      	bne.n	800bcb2 <USBD_GetString+0x52>
 800bce2:	e000      	b.n	800bce6 <USBD_GetString+0x86>
    return;
 800bce4:	bf00      	nop
  }
}
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bcfc:	e005      	b.n	800bd0a <USBD_GetLen+0x1e>
  {
    len++;
 800bcfe:	7bfb      	ldrb	r3, [r7, #15]
 800bd00:	3301      	adds	r3, #1
 800bd02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	3301      	adds	r3, #1
 800bd08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1f5      	bne.n	800bcfe <USBD_GetLen+0x12>
  }

  return len;
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	2100      	movs	r1, #0
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f7fe fb4b 	bl	800a3e2 <USBD_LL_Transmit>

  return USBD_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	60f8      	str	r0, [r7, #12]
 800bd5e:	60b9      	str	r1, [r7, #8]
 800bd60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	2100      	movs	r1, #0
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f7fe fb3a 	bl	800a3e2 <USBD_LL_Transmit>

  return USBD_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2203      	movs	r2, #3
 800bd88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  pdev->ep_out[0].rem_length = len;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	2100      	movs	r1, #0
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7fe fb3e 	bl	800a424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b084      	sub	sp, #16
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	60b9      	str	r1, [r7, #8]
 800bdbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f7fe fb2d 	bl	800a424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2204      	movs	r2, #4
 800bde0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bde4:	2300      	movs	r3, #0
 800bde6:	2200      	movs	r2, #0
 800bde8:	2100      	movs	r1, #0
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7fe faf9 	bl	800a3e2 <USBD_LL_Transmit>

  return USBD_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2205      	movs	r2, #5
 800be06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be0a:	2300      	movs	r3, #0
 800be0c:	2200      	movs	r2, #0
 800be0e:	2100      	movs	r1, #0
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7fe fb07 	bl	800a424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <memset>:
 800be20:	4402      	add	r2, r0
 800be22:	4603      	mov	r3, r0
 800be24:	4293      	cmp	r3, r2
 800be26:	d100      	bne.n	800be2a <memset+0xa>
 800be28:	4770      	bx	lr
 800be2a:	f803 1b01 	strb.w	r1, [r3], #1
 800be2e:	e7f9      	b.n	800be24 <memset+0x4>

0800be30 <__libc_init_array>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	4d0d      	ldr	r5, [pc, #52]	@ (800be68 <__libc_init_array+0x38>)
 800be34:	2600      	movs	r6, #0
 800be36:	4c0d      	ldr	r4, [pc, #52]	@ (800be6c <__libc_init_array+0x3c>)
 800be38:	1b64      	subs	r4, r4, r5
 800be3a:	10a4      	asrs	r4, r4, #2
 800be3c:	42a6      	cmp	r6, r4
 800be3e:	d109      	bne.n	800be54 <__libc_init_array+0x24>
 800be40:	4d0b      	ldr	r5, [pc, #44]	@ (800be70 <__libc_init_array+0x40>)
 800be42:	2600      	movs	r6, #0
 800be44:	4c0b      	ldr	r4, [pc, #44]	@ (800be74 <__libc_init_array+0x44>)
 800be46:	f000 f817 	bl	800be78 <_init>
 800be4a:	1b64      	subs	r4, r4, r5
 800be4c:	10a4      	asrs	r4, r4, #2
 800be4e:	42a6      	cmp	r6, r4
 800be50:	d105      	bne.n	800be5e <__libc_init_array+0x2e>
 800be52:	bd70      	pop	{r4, r5, r6, pc}
 800be54:	f855 3b04 	ldr.w	r3, [r5], #4
 800be58:	3601      	adds	r6, #1
 800be5a:	4798      	blx	r3
 800be5c:	e7ee      	b.n	800be3c <__libc_init_array+0xc>
 800be5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800be62:	3601      	adds	r6, #1
 800be64:	4798      	blx	r3
 800be66:	e7f2      	b.n	800be4e <__libc_init_array+0x1e>
 800be68:	0800bfa8 	.word	0x0800bfa8
 800be6c:	0800bfa8 	.word	0x0800bfa8
 800be70:	0800bfa8 	.word	0x0800bfa8
 800be74:	0800bfac 	.word	0x0800bfac

0800be78 <_init>:
 800be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7a:	bf00      	nop
 800be7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7e:	bc08      	pop	{r3}
 800be80:	469e      	mov	lr, r3
 800be82:	4770      	bx	lr

0800be84 <_fini>:
 800be84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be86:	bf00      	nop
 800be88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be8a:	bc08      	pop	{r3}
 800be8c:	469e      	mov	lr, r3
 800be8e:	4770      	bx	lr
