
DeviceProcessor03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be60  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800c098  0800c098  0000d098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c1b0  0800c1b0  0000d1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800c1b4  0800c1b4  0000d1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000001eb  20000000  0800c1b8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000e871  200001ec  0800c3a3  0000e1ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000603  2000ea5d  0800c3a3  0000ea5d  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000e1eb  2**0
                  CONTENTS, READONLY
  9 .debug_info   000237f9  00000000  00000000  0000e221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004ff4  00000000  00000000  00031a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001dc8  00000000  00000000  00036a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000016c9  00000000  00000000  000387d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037d86  00000000  00000000  00039ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00029d74  00000000  00000000  00071c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014bc24  00000000  00000000  0009b99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001e75bf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007d3c  00000000  00000000  001e7604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001ef340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001ec 	.word	0x200001ec
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c080 	.word	0x0800c080

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f0 	.word	0x200001f0
 8000274:	0800c080 	.word	0x0800c080

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f001 fa2a 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f81c 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 faf0 	bl	8000868 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000288:	f000 f87c 	bl	8000384 <MX_GPDMA1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800028c:	f000 faba 	bl	8000804 <MX_USB_OTG_FS_PCD_Init>
  MX_ICACHE_Init();
 8000290:	f000 f914 	bl	80004bc <MX_ICACHE_Init>
  MX_TIM8_Init();
 8000294:	f000 fa06 	bl	80006a4 <MX_TIM8_Init>
  MX_I2C2_Init();
 8000298:	f000 f894 	bl	80003c4 <MX_I2C2_Init>
  MX_I2C3_Init();
 800029c:	f000 f8d0 	bl	8000440 <MX_I2C3_Init>
  MX_SPI2_Init();
 80002a0:	f000 f990 	bl	80005c4 <MX_SPI2_Init>
  MX_SPI1_Init();
 80002a4:	f000 f91e 	bl	80004e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 80002a8:	f009 fd18 	bl	8009cdc <MX_USB_Device_Init>
  HAL_Delay(2000);
 80002ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002b0:	f001 fad6 	bl	8001860 <HAL_Delay>
  run_device();
 80002b4:	f001 f8e6 	bl	8001484 <run_device>
//  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b8:	bf00      	nop
 80002ba:	e7fd      	b.n	80002b8 <main+0x40>

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b09e      	sub	sp, #120	@ 0x78
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2260      	movs	r2, #96	@ 0x60
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f00b feac 	bl	800c028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	463b      	mov	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]
 80002de:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80002e4:	f004 faba 	bl	800485c <HAL_PWREx_ControlVoltageScaling>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80002ee:	f000 fb9b 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI
 80002f2:	2370      	movs	r3, #112	@ 0x70
 80002f4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002fc:	2301      	movs	r3, #1
 80002fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000300:	2310      	movs	r3, #16
 8000302:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000304:	2300      	movs	r3, #0
 8000306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 8000308:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800030c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 800030e:	2310      	movs	r3, #16
 8000310:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000316:	2301      	movs	r3, #1
 8000318:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800031a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800031e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000320:	2303      	movs	r3, #3
 8000322:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000324:	230a      	movs	r3, #10
 8000326:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000328:	2302      	movs	r3, #2
 800032a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800032c:	2302      	movs	r3, #2
 800032e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000330:	2301      	movs	r3, #1
 8000332:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000334:	230c      	movs	r3, #12
 8000336:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4618      	mov	r0, r3
 8000342:	f004 fb37 	bl	80049b4 <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800034c:	f000 fb6c 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	231f      	movs	r3, #31
 8000352:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	2303      	movs	r3, #3
 8000356:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	2104      	movs	r1, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f005 f9fd 	bl	800576c <HAL_RCC_ClockConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000378:	f000 fb56 	bl	8000a28 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3778      	adds	r7, #120	@ 0x78
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800038a:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <MX_GPDMA1_Init+0x3c>)
 800038c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000390:	4a0b      	ldr	r2, [pc, #44]	@ (80003c0 <MX_GPDMA1_Init+0x3c>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800039a:	4b09      	ldr	r3, [pc, #36]	@ (80003c0 <MX_GPDMA1_Init+0x3c>)
 800039c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	2054      	movs	r0, #84	@ 0x54
 80003ae:	f001 fb33 	bl	8001a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80003b2:	2054      	movs	r0, #84	@ 0x54
 80003b4:	f001 fb4a 	bl	8001a4c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	46020c00 	.word	0x46020c00

080003c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003ca:	4a1c      	ldr	r2, [pc, #112]	@ (800043c <MX_I2C2_Init+0x78>)
 80003cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003d0:	f640 6214 	movw	r2, #3604	@ 0xe14
 80003d4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003d6:	4b18      	ldr	r3, [pc, #96]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003dc:	4b16      	ldr	r3, [pc, #88]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003de:	2201      	movs	r2, #1
 80003e0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e2:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003ee:	4b12      	ldr	r3, [pc, #72]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f4:	4b10      	ldr	r3, [pc, #64]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000400:	480d      	ldr	r0, [pc, #52]	@ (8000438 <MX_I2C2_Init+0x74>)
 8000402:	f002 fb1f 	bl	8002a44 <HAL_I2C_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800040c:	f000 fb0c 	bl	8000a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000410:	2100      	movs	r1, #0
 8000412:	4809      	ldr	r0, [pc, #36]	@ (8000438 <MX_I2C2_Init+0x74>)
 8000414:	f002 fec0 	bl	8003198 <HAL_I2CEx_ConfigAnalogFilter>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800041e:	f000 fb03 	bl	8000a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000422:	2100      	movs	r1, #0
 8000424:	4804      	ldr	r0, [pc, #16]	@ (8000438 <MX_I2C2_Init+0x74>)
 8000426:	f002 ff02 	bl	800322e <HAL_I2CEx_ConfigDigitalFilter>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000430:	f000 fafa 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000208 	.word	0x20000208
 800043c:	40005800 	.word	0x40005800

08000440 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000446:	4a1c      	ldr	r2, [pc, #112]	@ (80004b8 <MX_I2C3_Init+0x78>)
 8000448:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <MX_I2C3_Init+0x74>)
 800044c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000450:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000452:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000458:	4b16      	ldr	r3, [pc, #88]	@ (80004b4 <MX_I2C3_Init+0x74>)
 800045a:	2201      	movs	r2, #1
 800045c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800045e:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000464:	4b13      	ldr	r3, [pc, #76]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800046a:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <MX_I2C3_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000470:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000476:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800047c:	480d      	ldr	r0, [pc, #52]	@ (80004b4 <MX_I2C3_Init+0x74>)
 800047e:	f002 fae1 	bl	8002a44 <HAL_I2C_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000488:	f000 face 	bl	8000a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800048c:	2100      	movs	r1, #0
 800048e:	4809      	ldr	r0, [pc, #36]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000490:	f002 fe82 	bl	8003198 <HAL_I2CEx_ConfigAnalogFilter>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800049a:	f000 fac5 	bl	8000a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800049e:	2100      	movs	r1, #0
 80004a0:	4804      	ldr	r0, [pc, #16]	@ (80004b4 <MX_I2C3_Init+0x74>)
 80004a2:	f002 fec4 	bl	800322e <HAL_I2CEx_ConfigDigitalFilter>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80004ac:	f000 fabc 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000025c 	.word	0x2000025c
 80004b8:	46002800 	.word	0x46002800

080004bc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80004c0:	2000      	movs	r0, #0
 80004c2:	f002 ff01 	bl	80032c8 <HAL_ICACHE_ConfigAssociativityMode>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80004cc:	f000 faac 	bl	8000a28 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80004d0:	f002 ff1a 	bl	8003308 <HAL_ICACHE_Enable>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80004da:	f000 faa5 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004f4:	4b31      	ldr	r3, [pc, #196]	@ (80005bc <MX_SPI1_Init+0xd8>)
 80004f6:	4a32      	ldr	r2, [pc, #200]	@ (80005c0 <MX_SPI1_Init+0xdc>)
 80004f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004fa:	4b30      	ldr	r3, [pc, #192]	@ (80005bc <MX_SPI1_Init+0xd8>)
 80004fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000502:	4b2e      	ldr	r3, [pc, #184]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000508:	4b2c      	ldr	r3, [pc, #176]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800050a:	2207      	movs	r2, #7
 800050c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800050e:	4b2b      	ldr	r3, [pc, #172]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000510:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000514:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000516:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800051c:	4b27      	ldr	r3, [pc, #156]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800051e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000522:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000524:	4b25      	ldr	r3, [pc, #148]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800052a:	4b24      	ldr	r3, [pc, #144]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000530:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000536:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000538:	2200      	movs	r2, #0
 800053a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800053c:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800053e:	2207      	movs	r2, #7
 8000540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000542:	4b1e      	ldr	r3, [pc, #120]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000544:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000548:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800054a:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800054c:	2200      	movs	r2, #0
 800054e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000550:	4b1a      	ldr	r3, [pc, #104]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000552:	2200      	movs	r2, #0
 8000554:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000556:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000558:	2200      	movs	r2, #0
 800055a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800055c:	4b17      	ldr	r3, [pc, #92]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800055e:	2200      	movs	r2, #0
 8000560:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000562:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000564:	2200      	movs	r2, #0
 8000566:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000568:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800056a:	2200      	movs	r2, #0
 800056c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800056e:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000570:	2200      	movs	r2, #0
 8000572:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000576:	2200      	movs	r2, #0
 8000578:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800057c:	2200      	movs	r2, #0
 800057e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000580:	480e      	ldr	r0, [pc, #56]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000582:	f006 fb5b 	bl	8006c3c <HAL_SPI_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 800058c:	f000 fa4c 	bl	8000a28 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000594:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	4806      	ldr	r0, [pc, #24]	@ (80005bc <MX_SPI1_Init+0xd8>)
 80005a4:	f006 ff5d 	bl	8007462 <HAL_SPIEx_SetConfigAutonomousMode>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 80005ae:	f000 fa3b 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200002b0 	.word	0x200002b0
 80005c0:	40013000 	.word	0x40013000

080005c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005d4:	4b31      	ldr	r3, [pc, #196]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005d6:	4a32      	ldr	r2, [pc, #200]	@ (80006a0 <MX_SPI2_Init+0xdc>)
 80005d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005da:	4b30      	ldr	r3, [pc, #192]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005dc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e8:	4b2c      	ldr	r3, [pc, #176]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005ea:	2207      	movs	r2, #7
 80005ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80005f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f6:	4b29      	ldr	r3, [pc, #164]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005fc:	4b27      	ldr	r3, [pc, #156]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005fe:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000602:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000604:	4b25      	ldr	r3, [pc, #148]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800060a:	4b24      	ldr	r3, [pc, #144]	@ (800069c <MX_SPI2_Init+0xd8>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000616:	4b21      	ldr	r3, [pc, #132]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000618:	2200      	movs	r2, #0
 800061a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_SPI2_Init+0xd8>)
 800061e:	2207      	movs	r2, #7
 8000620:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000624:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000628:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800062a:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <MX_SPI2_Init+0xd8>)
 800062c:	2200      	movs	r2, #0
 800062e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000630:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000632:	2200      	movs	r2, #0
 8000634:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000636:	4b19      	ldr	r3, [pc, #100]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000638:	2200      	movs	r2, #0
 800063a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_SPI2_Init+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000644:	2200      	movs	r2, #0
 8000646:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_SPI2_Init+0xd8>)
 800064a:	2200      	movs	r2, #0
 800064c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000650:	2200      	movs	r2, #0
 8000652:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000656:	2200      	movs	r2, #0
 8000658:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <MX_SPI2_Init+0xd8>)
 800065c:	2200      	movs	r2, #0
 800065e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000660:	480e      	ldr	r0, [pc, #56]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000662:	f006 faeb 	bl	8006c3c <HAL_SPI_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 800066c:	f000 f9dc 	bl	8000a28 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000674:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4806      	ldr	r0, [pc, #24]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000684:	f006 feed 	bl	8007462 <HAL_SPIEx_SetConfigAutonomousMode>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 800068e:	f000 f9cb 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000340 	.word	0x20000340
 80006a0:	40003800 	.word	0x40003800

080006a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b09c      	sub	sp, #112	@ 0x70
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]
 80006d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2234      	movs	r2, #52	@ 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f00b fca2 	bl	800c028 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80006e4:	4b45      	ldr	r3, [pc, #276]	@ (80007fc <MX_TIM8_Init+0x158>)
 80006e6:	4a46      	ldr	r2, [pc, #280]	@ (8000800 <MX_TIM8_Init+0x15c>)
 80006e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80006ea:	4b44      	ldr	r3, [pc, #272]	@ (80007fc <MX_TIM8_Init+0x158>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b42      	ldr	r3, [pc, #264]	@ (80007fc <MX_TIM8_Init+0x158>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80006f6:	4b41      	ldr	r3, [pc, #260]	@ (80007fc <MX_TIM8_Init+0x158>)
 80006f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fe:	4b3f      	ldr	r3, [pc, #252]	@ (80007fc <MX_TIM8_Init+0x158>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000704:	4b3d      	ldr	r3, [pc, #244]	@ (80007fc <MX_TIM8_Init+0x158>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800070a:	4b3c      	ldr	r3, [pc, #240]	@ (80007fc <MX_TIM8_Init+0x158>)
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000710:	483a      	ldr	r0, [pc, #232]	@ (80007fc <MX_TIM8_Init+0x158>)
 8000712:	f006 fee7 	bl	80074e4 <HAL_TIM_Base_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800071c:	f000 f984 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000724:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000726:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800072a:	4619      	mov	r1, r3
 800072c:	4833      	ldr	r0, [pc, #204]	@ (80007fc <MX_TIM8_Init+0x158>)
 800072e:	f007 f80b 	bl	8007748 <HAL_TIM_ConfigClockSource>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000738:	f000 f976 	bl	8000a28 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800073c:	482f      	ldr	r0, [pc, #188]	@ (80007fc <MX_TIM8_Init+0x158>)
 800073e:	f006 ff28 	bl	8007592 <HAL_TIM_OC_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000748:	f000 f96e 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000758:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800075c:	4619      	mov	r1, r3
 800075e:	4827      	ldr	r0, [pc, #156]	@ (80007fc <MX_TIM8_Init+0x158>)
 8000760:	f007 fe66 	bl	8008430 <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800076a:	f000 f95d 	bl	8000a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800076e:	2330      	movs	r3, #48	@ 0x30
 8000770:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800077a:	2300      	movs	r3, #0
 800077c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800078a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800078e:	2204      	movs	r2, #4
 8000790:	4619      	mov	r1, r3
 8000792:	481a      	ldr	r0, [pc, #104]	@ (80007fc <MX_TIM8_Init+0x158>)
 8000794:	f006 ff5e 	bl	8007654 <HAL_TIM_OC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800079e:	f000 f943 	bl	8000a28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	4807      	ldr	r0, [pc, #28]	@ (80007fc <MX_TIM8_Init+0x158>)
 80007e0:	f007 fee8 	bl	80085b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80007ea:	f000 f91d 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80007ee:	4803      	ldr	r0, [pc, #12]	@ (80007fc <MX_TIM8_Init+0x158>)
 80007f0:	f000 fb56 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 80007f4:	bf00      	nop
 80007f6:	3770      	adds	r7, #112	@ 0x70
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200003d0 	.word	0x200003d0
 8000800:	40013400 	.word	0x40013400

08000804 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800080a:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800080c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000810:	2206      	movs	r2, #6
 8000812:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000816:	2202      	movs	r2, #2
 8000818:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800081c:	2202      	movs	r2, #2
 800081e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000822:	2200      	movs	r2, #0
 8000824:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000828:	2200      	movs	r2, #0
 800082a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800082e:	2200      	movs	r2, #0
 8000830:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083a:	2200      	movs	r2, #0
 800083c:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000840:	2200      	movs	r2, #0
 8000842:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000846:	2200      	movs	r2, #0
 8000848:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084c:	f002 fd6c 	bl	8003328 <HAL_PCD_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000856:	f000 f8e7 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000494 	.word	0x20000494
 8000864:	42040000 	.word	0x42040000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	4b65      	ldr	r3, [pc, #404]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000884:	4a63      	ldr	r2, [pc, #396]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800088e:	4b61      	ldr	r3, [pc, #388]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000894:	f003 0310 	and.w	r3, r3, #16
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089c:	4b5d      	ldr	r3, [pc, #372]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 800089e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008a2:	4a5c      	ldr	r2, [pc, #368]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ac:	4b59      	ldr	r3, [pc, #356]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b2:	f003 0320 	and.w	r3, r3, #32
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b56      	ldr	r3, [pc, #344]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c0:	4a54      	ldr	r2, [pc, #336]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ca:	4b52      	ldr	r3, [pc, #328]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b4e      	ldr	r3, [pc, #312]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008de:	4a4d      	ldr	r2, [pc, #308]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008e8:	4b4a      	ldr	r3, [pc, #296]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f6:	4b47      	ldr	r3, [pc, #284]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008fc:	4a45      	ldr	r2, [pc, #276]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000902:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000906:	4b43      	ldr	r3, [pc, #268]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800090c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b3f      	ldr	r3, [pc, #252]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800091a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000924:	4b3b      	ldr	r3, [pc, #236]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	4b38      	ldr	r3, [pc, #224]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000938:	4a36      	ldr	r2, [pc, #216]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000942:	4b34      	ldr	r3, [pc, #208]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000948:	f003 0308 	and.w	r3, r3, #8
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 8000950:	2200      	movs	r2, #0
 8000952:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000956:	4830      	ldr	r0, [pc, #192]	@ (8000a18 <MX_GPIO_Init+0x1b0>)
 8000958:	f002 f85c 	bl	8002a14 <HAL_GPIO_WritePin>
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000962:	482e      	ldr	r0, [pc, #184]	@ (8000a1c <MX_GPIO_Init+0x1b4>)
 8000964:	f002 f856 	bl	8002a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADCV1_D13_Pin ADCV1_D12_Pin ADCV1_D11_Pin ADCV1_D10_Pin
                           ADCV1_D09_Pin ADCV1_D08_Pin ADCV1_D07_Pin ADCV1_D06_Pin
                           ADCV1_D05_Pin ADCV1_D04_Pin ADCV1_D03_Pin ADCV1_D02_Pin
                           ADCV1_D01_Pin ADCV1_D00_Pin ADCV1_D15_Pin ADCV1_D14_Pin */
  GPIO_InitStruct.Pin = ADCV1_D13_Pin|ADCV1_D12_Pin|ADCV1_D11_Pin|ADCV1_D10_Pin
 8000968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800096c:	61fb      	str	r3, [r7, #28]
                          |ADCV1_D09_Pin|ADCV1_D08_Pin|ADCV1_D07_Pin|ADCV1_D06_Pin
                          |ADCV1_D05_Pin|ADCV1_D04_Pin|ADCV1_D03_Pin|ADCV1_D02_Pin
                          |ADCV1_D01_Pin|ADCV1_D00_Pin|ADCV1_D15_Pin|ADCV1_D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4828      	ldr	r0, [pc, #160]	@ (8000a20 <MX_GPIO_Init+0x1b8>)
 800097e:	f001 fe71 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D00_Pin ADCV2_D01_Pin ADCV2_D02_Pin ADCV2_D03_Pin
                           ADCV2_D04_Pin ADCV2_D05_Pin ADCV2_D06_Pin ADCV2_D07_Pin
                           ADCV2_D08_Pin ADCV2_D09_Pin ADCV2_D10_Pin ADCV2_D11_Pin */
  GPIO_InitStruct.Pin = ADCV2_D00_Pin|ADCV2_D01_Pin|ADCV2_D02_Pin|ADCV2_D03_Pin
 8000982:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000986:	61fb      	str	r3, [r7, #28]
                          |ADCV2_D04_Pin|ADCV2_D05_Pin|ADCV2_D06_Pin|ADCV2_D07_Pin
                          |ADCV2_D08_Pin|ADCV2_D09_Pin|ADCV2_D10_Pin|ADCV2_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4823      	ldr	r0, [pc, #140]	@ (8000a24 <MX_GPIO_Init+0x1bc>)
 8000998:	f001 fe64 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D12_Pin ADCV2_D13_Pin ADCV2_D14_Pin ADCV2_D15_Pin */
  GPIO_InitStruct.Pin = ADCV2_D12_Pin|ADCV2_D13_Pin|ADCV2_D14_Pin|ADCV2_D15_Pin;
 800099c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a6:	2302      	movs	r3, #2
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481c      	ldr	r0, [pc, #112]	@ (8000a24 <MX_GPIO_Init+0x1bc>)
 80009b2:	f001 fe57 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_01_Pin SWNT_CTRL_02_Pin SWNT_CTRL_03_Pin SWNT_CTRL_04_Pin
                           SWNT_CTRL_05_Pin SWNT_CTRL_06_Pin SWNT_CTRL_07_Pin SWNT_CTRL_08_Pin
                           SWNT_CTRL_09_Pin SWNT_CTRL_10_Pin SWNT_CTRL_11_Pin SWNT_CTRL_12_Pin
                           SWNT_CTRL_13_Pin SWNT_CTRL_14_Pin SWNT_CTRL_15_Pin SWNT_CTRL_16_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 80009b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ba:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <MX_GPIO_Init+0x1b0>)
 80009d0:	f001 fe48 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_20_Pin SWNT_CTRL_21_Pin SWNT_CTRL_17_Pin SWNT_CTRL_18_Pin
                           SWNT_CTRL_19_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 80009d4:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80009d8:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_19_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	480b      	ldr	r0, [pc, #44]	@ (8000a1c <MX_GPIO_Init+0x1b4>)
 80009ee:	f001 fe39 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV1_OTR_Pin ADCV2_OTR_Pin */
  GPIO_InitStruct.Pin = ADCV1_OTR_Pin|ADCV2_OTR_Pin;
 80009f2:	2306      	movs	r3, #6
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_GPIO_Init+0x1b4>)
 8000a06:	f001 fe2d 	bl	8002664 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3730      	adds	r7, #48	@ 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	46020c00 	.word	0x46020c00
 8000a18:	42021800 	.word	0x42021800
 8000a1c:	42020c00 	.word	0x42020c00
 8000a20:	42021000 	.word	0x42021000
 8000a24:	42021400 	.word	0x42021400

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <HAL_MspInit+0x34>)
 8000a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a40:	4a09      	ldr	r2, [pc, #36]	@ (8000a68 <HAL_MspInit+0x34>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <HAL_MspInit+0x34>)
 8000a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000a58:	f003 ff8c 	bl	8004974 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8000a5c:	f003 ff9a 	bl	8004994 <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	46020c00 	.word	0x46020c00

08000a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0bc      	sub	sp, #240	@ 0xf0
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	22c0      	movs	r2, #192	@ 0xc0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f00b facb 	bl	800c028 <memset>
  if(hi2c->Instance==I2C2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a4d      	ldr	r2, [pc, #308]	@ (8000bcc <HAL_I2C_MspInit+0x160>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d148      	bne.n	8000b2e <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a9c:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_MSIK;
 8000aa8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f005 f9ed 	bl	8005e94 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000ac0:	f7ff ffb2 	bl	8000a28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	4b42      	ldr	r3, [pc, #264]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aca:	4a41      	ldr	r2, [pc, #260]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_DAC2_CURR_POT_SCL_Pin|I2C_DAC2_CURR_POT_SDA_Pin;
 8000ae2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aea:	2312      	movs	r3, #18
 8000aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000afc:	2304      	movs	r3, #4
 8000afe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b06:	4619      	mov	r1, r3
 8000b08:	4832      	ldr	r0, [pc, #200]	@ (8000bd4 <HAL_I2C_MspInit+0x168>)
 8000b0a:	f001 fdab 	bl	8002664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b0e:	4b30      	ldr	r3, [pc, #192]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b14:	4a2e      	ldr	r2, [pc, #184]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b1a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b2c:	e04a      	b.n	8000bc4 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C3)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a29      	ldr	r2, [pc, #164]	@ (8000bd8 <HAL_I2C_MspInit+0x16c>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d145      	bne.n	8000bc4 <HAL_I2C_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000b38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_MSIK;
 8000b44:	23c0      	movs	r3, #192	@ 0xc0
 8000b46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4a:	f107 0318 	add.w	r3, r7, #24
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 f9a0 	bl	8005e94 <HAL_RCCEx_PeriphCLKConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8000b5a:	f7ff ff65 	bl	8000a28 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b64:	4a1a      	ldr	r2, [pc, #104]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_DAC1_POT_SCL_Pin|I2C_DAC1_POT_SDA_Pin;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b82:	2312      	movs	r3, #18
 8000b84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b94:	2304      	movs	r3, #4
 8000b96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <HAL_I2C_MspInit+0x170>)
 8000ba2:	f001 fd5f 	bl	8002664 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000ba8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000bac:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000bb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
}
 8000bc4:	bf00      	nop
 8000bc6:	37f0      	adds	r7, #240	@ 0xf0
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40005800 	.word	0x40005800
 8000bd0:	46020c00 	.word	0x46020c00
 8000bd4:	42020400 	.word	0x42020400
 8000bd8:	46002800 	.word	0x46002800
 8000bdc:	42020800 	.word	0x42020800

08000be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0be      	sub	sp, #248	@ 0xf8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	22c0      	movs	r2, #192	@ 0xc0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00b fa11 	bl	800c028 <memset>
  if(hspi->Instance==SPI1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a6a      	ldr	r2, [pc, #424]	@ (8000db4 <HAL_SPI_MspInit+0x1d4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d147      	bne.n	8000ca0 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000c10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_MSIK;
 8000c1c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000c20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f005 f933 	bl	8005e94 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000c34:	f7ff fef8 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c38:	4b5f      	ldr	r3, [pc, #380]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c3e:	4a5e      	ldr	r2, [pc, #376]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c44:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c48:	4b5b      	ldr	r3, [pc, #364]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b58      	ldr	r3, [pc, #352]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c5c:	4a56      	ldr	r2, [pc, #344]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c66:	4b54      	ldr	r3, [pc, #336]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_DAC2_SCK_Pin|SPI_DAC2_NSS_Pin|SPI_DAC2_MISO_Pin|SPI_DAC2_MOSI_Pin;
 8000c74:	23d2      	movs	r3, #210	@ 0xd2
 8000c76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4848      	ldr	r0, [pc, #288]	@ (8000dbc <HAL_SPI_MspInit+0x1dc>)
 8000c9a:	f001 fce3 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c9e:	e084      	b.n	8000daa <HAL_SPI_MspInit+0x1ca>
  else if(hspi->Instance==SPI2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a46      	ldr	r2, [pc, #280]	@ (8000dc0 <HAL_SPI_MspInit+0x1e0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d17f      	bne.n	8000daa <HAL_SPI_MspInit+0x1ca>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000caa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_MSIK;
 8000cb6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 f8e6 	bl	8005e94 <HAL_RCCEx_PeriphCLKConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 8000cce:	f7ff feab 	bl	8000a28 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cd2:	4b39      	ldr	r3, [pc, #228]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000cd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cd8:	4a37      	ldr	r2, [pc, #220]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cde:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ce2:	4b35      	ldr	r3, [pc, #212]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf0:	4b31      	ldr	r3, [pc, #196]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf6:	4a30      	ldr	r2, [pc, #192]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d00:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d14:	4a28      	ldr	r2, [pc, #160]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d1e:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI_DAC1_MISO_Pin;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d44:	2305      	movs	r3, #5
 8000d46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481c      	ldr	r0, [pc, #112]	@ (8000dc4 <HAL_SPI_MspInit+0x1e4>)
 8000d52:	f001 fc87 	bl	8002664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_NSS_Pin|SPI_DAC1_MOSI_Pin;
 8000d56:	2311      	movs	r3, #17
 8000d58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4813      	ldr	r0, [pc, #76]	@ (8000dc8 <HAL_SPI_MspInit+0x1e8>)
 8000d7c:	f001 fc72 	bl	8002664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_SCK_Pin;
 8000d80:	2308      	movs	r3, #8
 8000d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000da2:	4619      	mov	r1, r3
 8000da4:	4808      	ldr	r0, [pc, #32]	@ (8000dc8 <HAL_SPI_MspInit+0x1e8>)
 8000da6:	f001 fc5d 	bl	8002664 <HAL_GPIO_Init>
}
 8000daa:	bf00      	nop
 8000dac:	37f8      	adds	r7, #248	@ 0xf8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40013000 	.word	0x40013000
 8000db8:	46020c00 	.word	0x46020c00
 8000dbc:	42020000 	.word	0x42020000
 8000dc0:	40003800 	.word	0x40003800
 8000dc4:	42020800 	.word	0x42020800
 8000dc8:	42020c00 	.word	0x42020c00

08000dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8000e90 <HAL_TIM_Base_MspInit+0xc4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d153      	bne.n	8000e86 <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000dde:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <HAL_TIM_Base_MspInit+0xc8>)
 8000de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000de4:	4a2b      	ldr	r2, [pc, #172]	@ (8000e94 <HAL_TIM_Base_MspInit+0xc8>)
 8000de6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000dea:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000dee:	4b29      	ldr	r3, [pc, #164]	@ (8000e94 <HAL_TIM_Base_MspInit+0xc8>)
 8000df0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* GPDMA1_REQUEST_TIM8_UP Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8000dfc:	4b26      	ldr	r3, [pc, #152]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000dfe:	4a27      	ldr	r2, [pc, #156]	@ (8000e9c <HAL_TIM_Base_MspInit+0xd0>)
 8000e00:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_TIM8_UP;
 8000e02:	4b25      	ldr	r3, [pc, #148]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e04:	2235      	movs	r2, #53	@ 0x35
 8000e06:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000e08:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e0e:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e14:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e1e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e22:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e2c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e30:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e38:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 8000e40:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000e46:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8000e58:	480f      	ldr	r0, [pc, #60]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e5a:	f000 feb9 	bl	8001bd0 <HAL_DMA_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_TIM_Base_MspInit+0x9c>
    {
      Error_Handler();
 8000e64:	f7ff fde0 	bl	8000a28 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel12);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e6c:	621a      	str	r2, [r3, #32]
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e74:	2110      	movs	r1, #16
 8000e76:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e78:	f001 f937 	bl	80020ea <HAL_DMA_ConfigChannelAttributes>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_TIM_Base_MspInit+0xba>
    {
      Error_Handler();
 8000e82:	f7ff fdd1 	bl	8000a28 <Error_Handler>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40013400 	.word	0x40013400
 8000e94:	46020c00 	.word	0x46020c00
 8000e98:	2000041c 	.word	0x2000041c
 8000e9c:	40020650 	.word	0x40020650

08000ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <HAL_TIM_MspPostInit+0x68>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d11e      	bne.n	8000f00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_TIM_MspPostInit+0x6c>)
 8000ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec8:	4a10      	ldr	r2, [pc, #64]	@ (8000f0c <HAL_TIM_MspPostInit+0x6c>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <HAL_TIM_MspPostInit+0x6c>)
 8000ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ADC_CLK_DVC_Pin;
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_CLK_DVC_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <HAL_TIM_MspPostInit+0x70>)
 8000efc:	f001 fbb2 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40013400 	.word	0x40013400
 8000f0c:	46020c00 	.word	0x46020c00
 8000f10:	42020800 	.word	0x42020800

08000f14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0bc      	sub	sp, #240	@ 0xf0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	22c0      	movs	r2, #192	@ 0xc0
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00b f877 	bl	800c028 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8001030 <HAL_PCD_MspInit+0x11c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d171      	bne.n	8001028 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f44:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 ff9a 	bl	8005e94 <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000f66:	f7ff fd5f 	bl	8000a28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b32      	ldr	r3, [pc, #200]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f70:	4a30      	ldr	r2, [pc, #192]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f88:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fac:	4619      	mov	r1, r3
 8000fae:	4822      	ldr	r0, [pc, #136]	@ (8001038 <HAL_PCD_MspInit+0x124>)
 8000fb0:	f001 fb58 	bl	8002664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fba:	4a1e      	ldr	r2, [pc, #120]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd2:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d119      	bne.n	8001014 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fe6:	4a13      	ldr	r2, [pc, #76]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000ff0:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000ffe:	f003 fcb9 	bl	8004974 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8001004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001008:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 800100a:	f023 0304 	bic.w	r3, r3, #4
 800100e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001012:	e001      	b.n	8001018 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001014:	f003 fcae 	bl	8004974 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2049      	movs	r0, #73	@ 0x49
 800101e:	f000 fcfb 	bl	8001a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001022:	2049      	movs	r0, #73	@ 0x49
 8001024:	f000 fd12 	bl	8001a4c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001028:	bf00      	nop
 800102a:	37f0      	adds	r7, #240	@ 0xf0
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	42040000 	.word	0x42040000
 8001034:	46020c00 	.word	0x46020c00
 8001038:	42020000 	.word	0x42020000

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <NMI_Handler+0x4>

08001044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <MemManage_Handler+0x4>

08001054 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <UsageFault_Handler+0x4>

08001064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001092:	f000 fbc5 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
//  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <OTG_FS_IRQHandler+0x10>)
 80010a2:	f002 fa88 	bl	80035b6 <HAL_PCD_IRQHandler>
  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000e358 	.word	0x2000e358

080010b0 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 80010b4:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <GPDMA1_Channel12_IRQHandler+0x10>)
 80010b6:	f000 feb7 	bl	8001e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000041c 	.word	0x2000041c

080010c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c8:	4b18      	ldr	r3, [pc, #96]	@ (800112c <SystemInit+0x68>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ce:	4a17      	ldr	r2, [pc, #92]	@ (800112c <SystemInit+0x68>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <SystemInit+0x6c>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <SystemInit+0x6c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <SystemInit+0x6c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <SystemInit+0x6c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <SystemInit+0x6c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001130 <SystemInit+0x6c>)
 80010f6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80010fa:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80010fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <SystemInit+0x6c>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <SystemInit+0x6c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <SystemInit+0x6c>)
 800110c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001110:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <SystemInit+0x6c>)
 8001114:	2200      	movs	r2, #0
 8001116:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <SystemInit+0x68>)
 800111a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800111e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	46020c00 	.word	0x46020c00

08001134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800116c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001138:	f7ff ffc4 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800113c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800113e:	e003      	b.n	8001148 <LoopCopyDataInit>

08001140 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001142:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001144:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001146:	3104      	adds	r1, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001148:	480a      	ldr	r0, [pc, #40]	@ (8001174 <LoopForever+0xa>)
	ldr	r3, =_edata
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <LoopForever+0xe>)
	adds	r2, r0, r1
 800114c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800114e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001150:	d3f6      	bcc.n	8001140 <CopyDataInit>
	ldr	r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001154:	e002      	b.n	800115c <LoopFillZerobss>

08001156 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001156:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001158:	f842 3b04 	str.w	r3, [r2], #4

0800115c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <LoopForever+0x16>)
	cmp	r2, r3
 800115e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001160:	d3f9      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f00a ff69 	bl	800c038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001166:	f7ff f887 	bl	8000278 <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800116c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001170:	0800c1b8 	.word	0x0800c1b8
	ldr	r0, =_sdata
 8001174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001178:	200001eb 	.word	0x200001eb
	ldr	r2, =_sbss
 800117c:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 8001180:	2000ea5d 	.word	0x2000ea5d

08001184 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_IRQHandler>
	...

08001188 <set_adc_sampling_freq>:
 */

#include "main.h"
#include "device_constants.h"

void set_adc_sampling_freq(uint32_t sample_freq){
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	uint32_t sample_freq_div;
	sample_freq_div = 160000000UL / sample_freq;
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <set_adc_sampling_freq+0x3c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	fbb2 f3f3 	udiv	r3, r2, r3
 8001198:	60fb      	str	r3, [r7, #12]
	TIM8->ARR = sample_freq_div-1;
 800119a:	4a0b      	ldr	r2, [pc, #44]	@ (80011c8 <set_adc_sampling_freq+0x40>)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3b01      	subs	r3, #1
 80011a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM8->CCR1 = TIM8->ARR/2;
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <set_adc_sampling_freq+0x40>)
 80011a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a6:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <set_adc_sampling_freq+0x40>)
 80011a8:	085b      	lsrs	r3, r3, #1
 80011aa:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM8->CCR2 = TIM8->ARR/2;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <set_adc_sampling_freq+0x40>)
 80011ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b0:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <set_adc_sampling_freq+0x40>)
 80011b2:	085b      	lsrs	r3, r3, #1
 80011b4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	09896800 	.word	0x09896800
 80011c8:	40013400 	.word	0x40013400

080011cc <init_register_map>:
 *      Author: User
 */

#include "../Inc/device_registers.h"

void init_register_map(RegisterMap_TypeDef* RegMap){
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	e007      	b.n	80011ea <init_register_map+0x1e>
		RegMap->RegisterArray[i].RegData = 0xdeadbeef;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	4908      	ldr	r1, [pc, #32]	@ (8001200 <init_register_map+0x34>)
 80011e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2bff      	cmp	r3, #255	@ 0xff
 80011ee:	ddf4      	ble.n	80011da <init_register_map+0xe>
	}
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	deadbeef 	.word	0xdeadbeef

08001204 <get_register>:

uint32_t get_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr){
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	return (REG_DATA_MASK & RegMap->RegisterArray[reg_addr].RegData);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001216:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <set_register>:

void set_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr, uint32_t data){
 8001226:	b480      	push	{r7}
 8001228:	b085      	sub	sp, #20
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
	RegMap->RegisterArray[reg_addr].RegData = (REG_DATA_MASK & data);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <set_ad9833_dds_buffer>:
 *      Author: User
 */
#include "main.h"
#include "device_sourcing.h"

void set_ad9833_dds_buffer(uint8_t *buffer, uint32_t freq_28b) {
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	// Combine 14 MSBs and 14 LSBs
//    uint32_t freq_28b = ((freq_14msb & 0x3FFF) << 14) | (freq_14lsb & 0x3FFF);
    // Populate the buffer according to the command sequence
    buffer[0] = 0x21; buffer[1] = 0x00; // Control Register
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2221      	movs	r2, #33	@ 0x21
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3301      	adds	r3, #1
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x40 | ((freq_28b >> 8) & 0x3F); // Frequency Register 0 LSB
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800126e:	b2da      	uxtb	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3302      	adds	r3, #2
 8001274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	701a      	strb	r2, [r3, #0]
    buffer[3] = freq_28b & 0xFF;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3303      	adds	r3, #3
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x40 | ((freq_28b >> 22) & 0x3F); // Frequency Register 0 MSB
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	0d9b      	lsrs	r3, r3, #22
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001290:	b2da      	uxtb	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3304      	adds	r3, #4
 8001296:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]
    buffer[5] = (freq_28b >> 14) & 0xFF;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	0b9a      	lsrs	r2, r3, #14
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3305      	adds	r3, #5
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]
    buffer[6] = 0xC0; buffer[7] = 0x00; // Phase Register 0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3306      	adds	r3, #6
 80012ae:	22c0      	movs	r2, #192	@ 0xc0
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3307      	adds	r3, #7
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
    buffer[8] = 0x20; buffer[9] = 0x00; // Exit Reset
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3308      	adds	r3, #8
 80012be:	2220      	movs	r2, #32
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3309      	adds	r3, #9
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <set_pot_buffer>:

void set_pot_buffer(uint8_t *buffer, uint32_t cmd, uint32_t value) {
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
    buffer[0] = cmd;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	701a      	strb	r2, [r3, #0]
    buffer[1] = value;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <config_dds_freq>:

HAL_StatusTypeDef config_dds_freq(SPI_HandleTypeDef *hspi, uint8_t *buffer){
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	result = HAL_SPI_Transmit(hspi, buffer, 10, 1000);
 800130a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130e:	220a      	movs	r2, #10
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f005 fda8 	bl	8006e68 <HAL_SPI_Transmit>
 8001318:	4603      	mov	r3, r0
 800131a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 800131c:	2064      	movs	r0, #100	@ 0x64
 800131e:	f000 fa9f 	bl	8001860 <HAL_Delay>
	return result;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <config_volt_src_gain>:

HAL_StatusTypeDef config_volt_src_gain(I2C_HandleTypeDef *hi2c, uint16_t pot_addr, uint8_t *buffer){
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af02      	add	r7, sp, #8
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	460b      	mov	r3, r1
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
 800133a:	8979      	ldrh	r1, [r7, #10]
 800133c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2302      	movs	r3, #2
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f001 fc18 	bl	8002b7c <HAL_I2C_Master_Transmit>
 800134c:	4603      	mov	r3, r0
 800134e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8001350:	2064      	movs	r0, #100	@ 0x64
 8001352:	f000 fa85 	bl	8001860 <HAL_Delay>
	return result;
 8001356:	7dfb      	ldrb	r3, [r7, #23]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <config_volt_src_offset>:

HAL_StatusTypeDef config_volt_src_offset(I2C_HandleTypeDef *hi2c, uint16_t pot_addr, uint8_t *buffer){
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af02      	add	r7, sp, #8
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	460b      	mov	r3, r1
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
 800136e:	8979      	ldrh	r1, [r7, #10]
 8001370:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2302      	movs	r3, #2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f001 fbfe 	bl	8002b7c <HAL_I2C_Master_Transmit>
 8001380:	4603      	mov	r3, r0
 8001382:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8001384:	2064      	movs	r0, #100	@ 0x64
 8001386:	f000 fa6b 	bl	8001860 <HAL_Delay>
	return result;
 800138a:	7dfb      	ldrb	r3, [r7, #23]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <dvc_exec_msr_dc_resistance_2p>:
uint8_t volt_src_offset_i2c_tx_buf[] = {0,126};

extern RegisterMap_TypeDef device_registers;
extern SwitchNetwork_TypeDef device_switch_network;

void dvc_exec_msr_dc_resistance_2p(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	set_ad9833_dds_buffer(volt_src_dds1_spi_tx_buf,0x10C7);
 800139a:	f241 01c7 	movw	r1, #4295	@ 0x10c7
 800139e:	4811      	ldr	r0, [pc, #68]	@ (80013e4 <dvc_exec_msr_dc_resistance_2p+0x50>)
 80013a0:	f7ff ff54 	bl	800124c <set_ad9833_dds_buffer>
	set_pot_buffer(volt_src_gain_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,100);
 80013a4:	2264      	movs	r2, #100	@ 0x64
 80013a6:	2100      	movs	r1, #0
 80013a8:	480f      	ldr	r0, [pc, #60]	@ (80013e8 <dvc_exec_msr_dc_resistance_2p+0x54>)
 80013aa:	f7ff ff94 	bl	80012d6 <set_pot_buffer>
	set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,110);
 80013ae:	226e      	movs	r2, #110	@ 0x6e
 80013b0:	2100      	movs	r1, #0
 80013b2:	480e      	ldr	r0, [pc, #56]	@ (80013ec <dvc_exec_msr_dc_resistance_2p+0x58>)
 80013b4:	f7ff ff8f 	bl	80012d6 <set_pot_buffer>

	result = config_volt_src_gain(&hi2c3,DVC_VOLT_SRC_1_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 80013b8:	4a0b      	ldr	r2, [pc, #44]	@ (80013e8 <dvc_exec_msr_dc_resistance_2p+0x54>)
 80013ba:	215e      	movs	r1, #94	@ 0x5e
 80013bc:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <dvc_exec_msr_dc_resistance_2p+0x5c>)
 80013be:	f7ff ffb5 	bl	800132c <config_volt_src_gain>
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
	result = config_volt_src_offset(&hi2c3,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 80013c6:	4a09      	ldr	r2, [pc, #36]	@ (80013ec <dvc_exec_msr_dc_resistance_2p+0x58>)
 80013c8:	215c      	movs	r1, #92	@ 0x5c
 80013ca:	4809      	ldr	r0, [pc, #36]	@ (80013f0 <dvc_exec_msr_dc_resistance_2p+0x5c>)
 80013cc:	f7ff ffc8 	bl	8001360 <config_volt_src_offset>
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]

	config_dds_freq(&hspi2,volt_src_dds1_spi_tx_buf);
 80013d4:	4903      	ldr	r1, [pc, #12]	@ (80013e4 <dvc_exec_msr_dc_resistance_2p+0x50>)
 80013d6:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <dvc_exec_msr_dc_resistance_2p+0x60>)
 80013d8:	f7ff ff92 	bl	8001300 <config_dds_freq>
//	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
//	set_switch_network(&device_switch_network);
//	HAL_Delay(1000);
//	clear_switch_network(&device_switch_network);
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000004 	.word	0x20000004
 80013e8:	20000010 	.word	0x20000010
 80013ec:	20000014 	.word	0x20000014
 80013f0:	2000025c 	.word	0x2000025c
 80013f4:	20000340 	.word	0x20000340

080013f8 <dvc_exec_msr_current_voltage>:

void dvc_exec_msr_current_voltage(void){
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <dvc_exec_msr_capacitance_voltage_2p>:

void dvc_exec_msr_capacitance_voltage_2p(void){
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <dvc_exec_msr_impedance_spectroscopy_2p>:

void dvc_exec_msr_impedance_spectroscopy_2p(void){
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <dvc_exec_msr_transfer_characteristics>:

void dvc_exec_msr_transfer_characteristics(void){
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <dvc_exec_msr_output_characteristics>:

void dvc_exec_msr_output_characteristics(void){
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <dvc_exec_msr_capacitance_voltage_3p>:

void dvc_exec_msr_capacitance_voltage_3p(void){
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <dvc_exec_msr_electrochemical>:

void dvc_exec_msr_electrochemical(void){
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <dvc_exec_msr_low_resistance>:

void dvc_exec_msr_low_resistance(void){
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <dvc_exec_msr_dc_resistance_4p>:

void dvc_exec_msr_dc_resistance_4p(void){
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <dvc_exec_msr_impedance_spectroscopy_4p>:

void dvc_exec_msr_impedance_spectroscopy_4p(void){
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <run_device>:
uint8_t spi_tx_buf_dac_2_freq[] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};

RegisterMap_TypeDef device_registers;
SwitchNetwork_TypeDef device_switch_network;

void run_device(){
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	MeasurementCfg_Type measurement_type = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	70fb      	strb	r3, [r7, #3]

	init_register_map(&device_registers);
 800148e:	4840      	ldr	r0, [pc, #256]	@ (8001590 <run_device+0x10c>)
 8001490:	f7ff fe9c 	bl	80011cc <init_register_map>
	init_switch_network(&device_switch_network);
 8001494:	483f      	ldr	r0, [pc, #252]	@ (8001594 <run_device+0x110>)
 8001496:	f000 f887 	bl	80015a8 <init_switch_network>
	clear_switch_network(&device_switch_network);
 800149a:	483e      	ldr	r0, [pc, #248]	@ (8001594 <run_device+0x110>)
 800149c:	f000 f8dc 	bl	8001658 <clear_switch_network>
	set_adc_sampling_freq(10000000UL);
 80014a0:	483d      	ldr	r0, [pc, #244]	@ (8001598 <run_device+0x114>)
 80014a2:	f7ff fe71 	bl	8001188 <set_adc_sampling_freq>
	for(int i = 0; i < DVC_MAX_NUM_ADC_SAMPLES; i++){
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	e014      	b.n	80014d6 <run_device+0x52>
		adc_samples_1[i] = 0xdead;
 80014ac:	4a3b      	ldr	r2, [pc, #236]	@ (800159c <run_device+0x118>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 80014b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_samples_2[i] = 0xdead;
 80014b8:	4a39      	ldr	r2, [pc, #228]	@ (80015a0 <run_device+0x11c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 80014c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_samples_3[i] = 0xdead;
 80014c4:	4a37      	ldr	r2, [pc, #220]	@ (80015a4 <run_device+0x120>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 80014cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < DVC_MAX_NUM_ADC_SAMPLES; i++){
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3301      	adds	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014dc:	dbe6      	blt.n	80014ac <run_device+0x28>
//			for(int i = 0; i < 500; i++){
//				CDC_Transmit_FS(&dmaValCheck[i],sizeof(dmaValCheck[i]));
//				HAL_Delay(100);
//			}
//		}
		if(get_register(&device_registers,DVC_MEASUREMENT_CONFIG)%2){
 80014de:	2101      	movs	r1, #1
 80014e0:	482b      	ldr	r0, [pc, #172]	@ (8001590 <run_device+0x10c>)
 80014e2:	f7ff fe8f 	bl	8001204 <get_register>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f6      	beq.n	80014de <run_device+0x5a>
			measurement_type = (get_register(&device_registers,DVC_MEASUREMENT_CONFIG)>>6) & 0xF;
 80014f0:	2101      	movs	r1, #1
 80014f2:	4827      	ldr	r0, [pc, #156]	@ (8001590 <run_device+0x10c>)
 80014f4:	f7ff fe86 	bl	8001204 <get_register>
 80014f8:	4603      	mov	r3, r0
 80014fa:	099b      	lsrs	r3, r3, #6
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	70fb      	strb	r3, [r7, #3]
			switch (measurement_type) {
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	3b01      	subs	r3, #1
 8001508:	2b0a      	cmp	r3, #10
 800150a:	d83f      	bhi.n	800158c <run_device+0x108>
 800150c:	a201      	add	r2, pc, #4	@ (adr r2, 8001514 <run_device+0x90>)
 800150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001512:	bf00      	nop
 8001514:	08001541 	.word	0x08001541
 8001518:	08001551 	.word	0x08001551
 800151c:	08001557 	.word	0x08001557
 8001520:	0800155d 	.word	0x0800155d
 8001524:	08001563 	.word	0x08001563
 8001528:	08001569 	.word	0x08001569
 800152c:	0800156f 	.word	0x0800156f
 8001530:	08001575 	.word	0x08001575
 8001534:	0800157b 	.word	0x0800157b
 8001538:	08001581 	.word	0x08001581
 800153c:	08001587 	.word	0x08001587
				case DC_RESISTANCE:
					dvc_exec_msr_dc_resistance_2p();
 8001540:	f7ff ff28 	bl	8001394 <dvc_exec_msr_dc_resistance_2p>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 8001544:	2200      	movs	r2, #0
 8001546:	2101      	movs	r1, #1
 8001548:	4811      	ldr	r0, [pc, #68]	@ (8001590 <run_device+0x10c>)
 800154a:	f7ff fe6c 	bl	8001226 <set_register>
					break;
 800154e:	e01e      	b.n	800158e <run_device+0x10a>
				case CURRENT_VOLTAGE:
					dvc_exec_msr_current_voltage();
 8001550:	f7ff ff52 	bl	80013f8 <dvc_exec_msr_current_voltage>
					break;
 8001554:	e01b      	b.n	800158e <run_device+0x10a>
				case CAPACITANCE_VOLTAGE_2P:
					dvc_exec_msr_capacitance_voltage_2p();
 8001556:	f7ff ff56 	bl	8001406 <dvc_exec_msr_capacitance_voltage_2p>
					break;
 800155a:	e018      	b.n	800158e <run_device+0x10a>
				case IMPEDANCE_SPECTROSCOPY_2P:
					dvc_exec_msr_impedance_spectroscopy_2p();
 800155c:	f7ff ff5a 	bl	8001414 <dvc_exec_msr_impedance_spectroscopy_2p>
					break;
 8001560:	e015      	b.n	800158e <run_device+0x10a>
				case TRANSFER_CHARACTERISTICS:
					dvc_exec_msr_transfer_characteristics();
 8001562:	f7ff ff5e 	bl	8001422 <dvc_exec_msr_transfer_characteristics>
					break;
 8001566:	e012      	b.n	800158e <run_device+0x10a>
				case OUTPUT_CHARACTERISTICS:
					dvc_exec_msr_output_characteristics();
 8001568:	f7ff ff62 	bl	8001430 <dvc_exec_msr_output_characteristics>
					break;
 800156c:	e00f      	b.n	800158e <run_device+0x10a>
				case CAPACITANCE_VOLTAGE_3P:
					dvc_exec_msr_capacitance_voltage_3p();
 800156e:	f7ff ff66 	bl	800143e <dvc_exec_msr_capacitance_voltage_3p>
					break;
 8001572:	e00c      	b.n	800158e <run_device+0x10a>
				case ELECTROCHEMICAL:
					dvc_exec_msr_electrochemical();
 8001574:	f7ff ff6a 	bl	800144c <dvc_exec_msr_electrochemical>
					break;
 8001578:	e009      	b.n	800158e <run_device+0x10a>
				case LOW_RESISTANCE:
					dvc_exec_msr_low_resistance();
 800157a:	f7ff ff6e 	bl	800145a <dvc_exec_msr_low_resistance>
					break;
 800157e:	e006      	b.n	800158e <run_device+0x10a>
				case PROBE_RESISTANCE:
					dvc_exec_msr_dc_resistance_4p();
 8001580:	f7ff ff72 	bl	8001468 <dvc_exec_msr_dc_resistance_4p>
					break;
 8001584:	e003      	b.n	800158e <run_device+0x10a>
				case IMPEDANCE_SPECTROSCOPY_4P:
					dvc_exec_msr_impedance_spectroscopy_4p();
 8001586:	f7ff ff76 	bl	8001476 <dvc_exec_msr_impedance_spectroscopy_4p>
					break;
 800158a:	e000      	b.n	800158e <run_device+0x10a>
				default:
					break;
 800158c:	bf00      	nop
		if(get_register(&device_registers,DVC_MEASUREMENT_CONFIG)%2){
 800158e:	e7a6      	b.n	80014de <run_device+0x5a>
 8001590:	2000c978 	.word	0x2000c978
 8001594:	2000cd78 	.word	0x2000cd78
 8001598:	00989680 	.word	0x00989680
 800159c:	20000978 	.word	0x20000978
 80015a0:	20004978 	.word	0x20004978
 80015a4:	20008978 	.word	0x20008978

080015a8 <init_switch_network>:
        ,SWNT_CTRL_09_Pin,SWNT_CTRL_10_Pin,SWNT_CTRL_11_Pin,SWNT_CTRL_12_Pin
        ,SWNT_CTRL_13_Pin,SWNT_CTRL_14_Pin,SWNT_CTRL_15_Pin,SWNT_CTRL_16_Pin
		,SWNT_CTRL_17_Pin,SWNT_CTRL_18_Pin,SWNT_CTRL_19_Pin,SWNT_CTRL_20_Pin
		,SWNT_CTRL_21_Pin};

void init_switch_network(SwitchNetwork_TypeDef* switch_network){
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 80015b0:	2301      	movs	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e040      	b.n	8001638 <init_switch_network+0x90>
		switch_network->Relays[i].RelayId = i;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	b2d8      	uxtb	r0, r3
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	4602      	mov	r2, r0
 80015ca:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].AssociatedProbe = 0;
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3301      	adds	r3, #1
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].RelayState = GPIO_PIN_RESET;
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3302      	adds	r3, #2
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].AssociatedGPIOPort = (i < 17) ? GPIOG : GPIOD;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b10      	cmp	r3, #16
 80015f8:	dc01      	bgt.n	80015fe <init_switch_network+0x56>
 80015fa:	4914      	ldr	r1, [pc, #80]	@ (800164c <init_switch_network+0xa4>)
 80015fc:	e000      	b.n	8001600 <init_switch_network+0x58>
 80015fe:	4914      	ldr	r1, [pc, #80]	@ (8001650 <init_switch_network+0xa8>)
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4403      	add	r3, r0
 800160e:	3304      	adds	r3, #4
 8001610:	6019      	str	r1, [r3, #0]
		switch_network->Relays[i].AssociatedGPIO = swnt_pin_list[i-1];
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3b01      	subs	r3, #1
 8001616:	4a0f      	ldr	r2, [pc, #60]	@ (8001654 <init_switch_network+0xac>)
 8001618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161c:	b298      	uxth	r0, r3
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3308      	adds	r3, #8
 800162e:	4602      	mov	r2, r0
 8001630:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3301      	adds	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b15      	cmp	r3, #21
 800163c:	ddbb      	ble.n	80015b6 <init_switch_network+0xe>
	}
	return;
 800163e:	bf00      	nop
}
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	42021800 	.word	0x42021800
 8001650:	42020c00 	.word	0x42020c00
 8001654:	20000018 	.word	0x20000018

08001658 <clear_switch_network>:

void clear_switch_network(SwitchNetwork_TypeDef* switch_network){
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8001660:	2301      	movs	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	e02f      	b.n	80016c6 <clear_switch_network+0x6e>
		switch_network->Relays[i].RelayState = GPIO_PIN_RESET;
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3302      	adds	r3, #2
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(switch_network->Relays[i].AssociatedGPIOPort,
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3304      	adds	r3, #4
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	3308      	adds	r3, #8
 800169c:	881c      	ldrh	r4, [r3, #0]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	3302      	adds	r3, #2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4621      	mov	r1, r4
 80016b4:	f001 f9ae 	bl	8002a14 <HAL_GPIO_WritePin>
						  switch_network->Relays[i].AssociatedGPIO,
						  switch_network->Relays[i].RelayState);
		HAL_Delay(300);
 80016b8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80016bc:	f000 f8d0 	bl	8001860 <HAL_Delay>
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b15      	cmp	r3, #21
 80016ca:	ddcc      	ble.n	8001666 <clear_switch_network+0xe>
	}
	return;
 80016cc:	bf00      	nop
}
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd90      	pop	{r4, r7, pc}

080016d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_Init+0x50>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a11      	ldr	r2, [pc, #68]	@ (8001724 <HAL_Init+0x50>)
 80016de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f98c 	bl	8001a02 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80016ea:	f004 fa31 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <HAL_Init+0x54>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	490c      	ldr	r1, [pc, #48]	@ (800172c <HAL_Init+0x58>)
 80016fa:	5ccb      	ldrb	r3, [r1, r3]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <HAL_Init+0x5c>)
 8001702:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001704:	2004      	movs	r0, #4
 8001706:	f000 f9d1 	bl	8001aac <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170a:	200f      	movs	r0, #15
 800170c:	f000 f812 	bl	8001734 <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e002      	b.n	8001720 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800171a:	f7ff f98b 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40022000 	.word	0x40022000
 8001728:	46020c00 	.word	0x46020c00
 800172c:	0800c0e0 	.word	0x0800c0e0
 8001730:	20000000 	.word	0x20000000

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001740:	4b33      	ldr	r3, [pc, #204]	@ (8001810 <HAL_InitTick+0xdc>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e05c      	b.n	8001806 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800174c:	4b31      	ldr	r3, [pc, #196]	@ (8001814 <HAL_InitTick+0xe0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b04      	cmp	r3, #4
 8001756:	d10c      	bne.n	8001772 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001758:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <HAL_InitTick+0xe4>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b2c      	ldr	r3, [pc, #176]	@ (8001810 <HAL_InitTick+0xdc>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e037      	b.n	80017e2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001772:	f000 f9f3 	bl	8001b5c <HAL_SYSTICK_GetCLKSourceConfig>
 8001776:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d023      	beq.n	80017c6 <HAL_InitTick+0x92>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d82d      	bhi.n	80017e0 <HAL_InitTick+0xac>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_InitTick+0x5e>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d00d      	beq.n	80017ac <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001790:	e026      	b.n	80017e0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001792:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_InitTick+0xe4>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b1e      	ldr	r3, [pc, #120]	@ (8001810 <HAL_InitTick+0xdc>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4619      	mov	r1, r3
 800179c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80017a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	60fb      	str	r3, [r7, #12]
        break;
 80017aa:	e01a      	b.n	80017e2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80017ac:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <HAL_InitTick+0xdc>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80017ba:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	60fb      	str	r3, [r7, #12]
        break;
 80017c4:	e00d      	b.n	80017e2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80017c6:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_InitTick+0xdc>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80017d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	60fb      	str	r3, [r7, #12]
        break;
 80017de:	e000      	b.n	80017e2 <HAL_InitTick+0xae>
        break;
 80017e0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f940 	bl	8001a68 <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e009      	b.n	8001806 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f2:	2200      	movs	r2, #0
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	f04f 30ff 	mov.w	r0, #4294967295
 80017fa:	f000 f90d 	bl	8001a18 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80017fe:	4a07      	ldr	r2, [pc, #28]	@ (800181c <HAL_InitTick+0xe8>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000070 	.word	0x20000070
 8001814:	e000e010 	.word	0xe000e010
 8001818:	20000000 	.word	0x20000000
 800181c:	2000006c 	.word	0x2000006c

08001820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000070 	.word	0x20000070
 8001844:	2000ce84 	.word	0x2000ce84

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	2000ce84 	.word	0x2000ce84

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ffee 	bl	8001848 <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffde 	bl	8001848 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000070 	.word	0x20000070

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	@ (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	@ (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	@ (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	@ 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	@ 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ff4c 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a26:	f7ff ff63 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	6978      	ldr	r0, [r7, #20]
 8001a32:	f7ff ffb3 	bl	800199c <NVIC_EncodePriority>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff82 	bl	8001948 <__NVIC_SetPriority>
}
 8001a44:	bf00      	nop
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff56 	bl	800190c <__NVIC_EnableIRQ>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00d      	b.n	8001a9a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <HAL_SYSTICK_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <HAL_SYSTICK_Config+0x40>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_SYSTICK_Config+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <HAL_SYSTICK_Config+0x40>)
 8001a92:	f043 0303 	orr.w	r3, r3, #3
 8001a96:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d844      	bhi.n	8001b44 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001aba:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac0:	08001ae3 	.word	0x08001ae3
 8001ac4:	08001b01 	.word	0x08001b01
 8001ac8:	08001b23 	.word	0x08001b23
 8001acc:	08001b45 	.word	0x08001b45
 8001ad0:	08001ad5 	.word	0x08001ad5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6013      	str	r3, [r2, #0]
      break;
 8001ae0:	e031      	b.n	8001b46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001aee:	4b1a      	ldr	r3, [pc, #104]	@ (8001b58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af4:	4a18      	ldr	r2, [pc, #96]	@ (8001b58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001af6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001afe:	e022      	b.n	8001b46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a13      	ldr	r2, [pc, #76]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b06:	f023 0304 	bic.w	r3, r3, #4
 8001b0a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b12:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001b16:	4a10      	ldr	r2, [pc, #64]	@ (8001b58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001b20:	e011      	b.n	8001b46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001b22:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b34:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001b42:	e000      	b.n	8001b46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001b44:	bf00      	nop
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010
 8001b58:	46020c00 	.word	0x46020c00

08001b5c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001b62:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	e021      	b.n	8001bb8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001b7e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b86:	d011      	beq.n	8001bac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b8e:	d810      	bhi.n	8001bb2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b9c:	d003      	beq.n	8001ba6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001b9e:	e008      	b.n	8001bb2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
        break;
 8001ba4:	e008      	b.n	8001bb8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
        break;
 8001baa:	e005      	b.n	8001bb8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001bac:	2302      	movs	r3, #2
 8001bae:	607b      	str	r3, [r7, #4]
        break;
 8001bb0:	e002      	b.n	8001bb8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
        break;
 8001bb6:	bf00      	nop
    }
  }
  return systick_source;
 8001bb8:	687b      	ldr	r3, [r7, #4]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010
 8001bcc:	46020c00 	.word	0x46020c00

08001bd0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff fe36 	bl	8001848 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0db      	b.n	8001da0 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6e      	ldr	r2, [pc, #440]	@ (8001da8 <HAL_DMA_Init+0x1d8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	f000 809f 	beq.w	8001d32 <HAL_DMA_Init+0x162>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a6c      	ldr	r2, [pc, #432]	@ (8001dac <HAL_DMA_Init+0x1dc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	f000 8099 	beq.w	8001d32 <HAL_DMA_Init+0x162>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a6a      	ldr	r2, [pc, #424]	@ (8001db0 <HAL_DMA_Init+0x1e0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	f000 8093 	beq.w	8001d32 <HAL_DMA_Init+0x162>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a68      	ldr	r2, [pc, #416]	@ (8001db4 <HAL_DMA_Init+0x1e4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	f000 808d 	beq.w	8001d32 <HAL_DMA_Init+0x162>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a66      	ldr	r2, [pc, #408]	@ (8001db8 <HAL_DMA_Init+0x1e8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	f000 8087 	beq.w	8001d32 <HAL_DMA_Init+0x162>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a64      	ldr	r2, [pc, #400]	@ (8001dbc <HAL_DMA_Init+0x1ec>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	f000 8081 	beq.w	8001d32 <HAL_DMA_Init+0x162>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a62      	ldr	r2, [pc, #392]	@ (8001dc0 <HAL_DMA_Init+0x1f0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d07b      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a61      	ldr	r2, [pc, #388]	@ (8001dc4 <HAL_DMA_Init+0x1f4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d076      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a5f      	ldr	r2, [pc, #380]	@ (8001dc8 <HAL_DMA_Init+0x1f8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d071      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a5e      	ldr	r2, [pc, #376]	@ (8001dcc <HAL_DMA_Init+0x1fc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d06c      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a5c      	ldr	r2, [pc, #368]	@ (8001dd0 <HAL_DMA_Init+0x200>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d067      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a5b      	ldr	r2, [pc, #364]	@ (8001dd4 <HAL_DMA_Init+0x204>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d062      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a59      	ldr	r2, [pc, #356]	@ (8001dd8 <HAL_DMA_Init+0x208>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d05d      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a58      	ldr	r2, [pc, #352]	@ (8001ddc <HAL_DMA_Init+0x20c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d058      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a56      	ldr	r2, [pc, #344]	@ (8001de0 <HAL_DMA_Init+0x210>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d053      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a55      	ldr	r2, [pc, #340]	@ (8001de4 <HAL_DMA_Init+0x214>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d04e      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a53      	ldr	r2, [pc, #332]	@ (8001de8 <HAL_DMA_Init+0x218>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d049      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a52      	ldr	r2, [pc, #328]	@ (8001dec <HAL_DMA_Init+0x21c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d044      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a50      	ldr	r2, [pc, #320]	@ (8001df0 <HAL_DMA_Init+0x220>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d03f      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a4f      	ldr	r2, [pc, #316]	@ (8001df4 <HAL_DMA_Init+0x224>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d03a      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001df8 <HAL_DMA_Init+0x228>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d035      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a4c      	ldr	r2, [pc, #304]	@ (8001dfc <HAL_DMA_Init+0x22c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d030      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8001e00 <HAL_DMA_Init+0x230>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d02b      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a49      	ldr	r2, [pc, #292]	@ (8001e04 <HAL_DMA_Init+0x234>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d026      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a47      	ldr	r2, [pc, #284]	@ (8001e08 <HAL_DMA_Init+0x238>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d021      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a46      	ldr	r2, [pc, #280]	@ (8001e0c <HAL_DMA_Init+0x23c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d01c      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a44      	ldr	r2, [pc, #272]	@ (8001e10 <HAL_DMA_Init+0x240>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d017      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a43      	ldr	r2, [pc, #268]	@ (8001e14 <HAL_DMA_Init+0x244>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d012      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a41      	ldr	r2, [pc, #260]	@ (8001e18 <HAL_DMA_Init+0x248>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00d      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a40      	ldr	r2, [pc, #256]	@ (8001e1c <HAL_DMA_Init+0x24c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d008      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a3e      	ldr	r2, [pc, #248]	@ (8001e20 <HAL_DMA_Init+0x250>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d003      	beq.n	8001d32 <HAL_DMA_Init+0x162>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e24 <HAL_DMA_Init+0x254>)
 8001d30:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695a      	ldr	r2, [r3, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0206 	orr.w	r2, r2, #6
 8001d50:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001d52:	e00f      	b.n	8001d74 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001d54:	f7ff fd78 	bl	8001848 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	d908      	bls.n	8001d74 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2210      	movs	r2, #16
 8001d66:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e015      	b.n	8001da0 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1e8      	bne.n	8001d54 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f9ee 	bl	8002164 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40020050 	.word	0x40020050
 8001dac:	50020050 	.word	0x50020050
 8001db0:	400200d0 	.word	0x400200d0
 8001db4:	500200d0 	.word	0x500200d0
 8001db8:	40020150 	.word	0x40020150
 8001dbc:	50020150 	.word	0x50020150
 8001dc0:	400201d0 	.word	0x400201d0
 8001dc4:	500201d0 	.word	0x500201d0
 8001dc8:	40020250 	.word	0x40020250
 8001dcc:	50020250 	.word	0x50020250
 8001dd0:	400202d0 	.word	0x400202d0
 8001dd4:	500202d0 	.word	0x500202d0
 8001dd8:	40020350 	.word	0x40020350
 8001ddc:	50020350 	.word	0x50020350
 8001de0:	400203d0 	.word	0x400203d0
 8001de4:	500203d0 	.word	0x500203d0
 8001de8:	40020450 	.word	0x40020450
 8001dec:	50020450 	.word	0x50020450
 8001df0:	400204d0 	.word	0x400204d0
 8001df4:	500204d0 	.word	0x500204d0
 8001df8:	40020550 	.word	0x40020550
 8001dfc:	50020550 	.word	0x50020550
 8001e00:	400205d0 	.word	0x400205d0
 8001e04:	500205d0 	.word	0x500205d0
 8001e08:	40020650 	.word	0x40020650
 8001e0c:	50020650 	.word	0x50020650
 8001e10:	400206d0 	.word	0x400206d0
 8001e14:	500206d0 	.word	0x500206d0
 8001e18:	40020750 	.word	0x40020750
 8001e1c:	50020750 	.word	0x50020750
 8001e20:	400207d0 	.word	0x400207d0
 8001e24:	500207d0 	.word	0x500207d0

08001e28 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001e38:	f023 030f 	bic.w	r3, r3, #15
 8001e3c:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e46:	3b50      	subs	r3, #80	@ 0x50
 8001e48:	09db      	lsrs	r3, r3, #7
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	2201      	movs	r2, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 813b 	beq.w	80020de <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d011      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00a      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e8c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d011      	beq.n	8001ecc <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ebe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec4:	f043 0202 	orr.w	r2, r3, #2
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d011      	beq.n	8001efe <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ef0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	f043 0204 	orr.w	r2, r3, #4
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d011      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f22:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f28:	f043 0208 	orr.w	r2, r3, #8
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d013      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00c      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f54:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d04c      	beq.n	800200e <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d045      	beq.n	800200e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f8a:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d12e      	bne.n	8001ff6 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fa6:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0202 	orr.w	r2, r2, #2
 8001fb6:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d07a      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
        }

        return;
 8001ff4:	e075      	b.n	80020e2 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d039      	beq.n	8002090 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d032      	beq.n	8002090 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800202e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d012      	beq.n	800205c <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800203c:	2b00      	cmp	r3, #0
 800203e:	d116      	bne.n	800206e <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002046:	2b00      	cmp	r3, #0
 8002048:	d111      	bne.n	800206e <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002056:	2201      	movs	r2, #1
 8002058:	731a      	strb	r2, [r3, #12]
 800205a:	e008      	b.n	800206e <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002062:	2b00      	cmp	r3, #0
 8002064:	d103      	bne.n	800206e <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002076:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	2b00      	cmp	r3, #0
 8002096:	d025      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0202 	orr.w	r2, r2, #2
 80020a6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c0:	2201      	movs	r2, #1
 80020c2:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
 80020dc:	e002      	b.n	80020e4 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80020e2:	bf00      	nop
    }
  }
}
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e02b      	b.n	8002156 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002106:	f023 030f 	bic.w	r3, r3, #15
 800210a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	3b50      	subs	r3, #80	@ 0x50
 8002116:	09db      	lsrs	r3, r3, #7
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	2201      	movs	r2, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	f003 0311 	and.w	r3, r3, #17
 8002134:	2b11      	cmp	r3, #17
 8002136:	d106      	bne.n	8002146 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	431a      	orrs	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	e006      	b.n	8002154 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	43db      	mvns	r3, r3
 800214e:	401a      	ands	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	430a      	orrs	r2, r1
 8002184:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a53      	ldr	r2, [pc, #332]	@ (80022f0 <DMA_Init+0x18c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	f000 80a0 	beq.w	80022ea <DMA_Init+0x186>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a51      	ldr	r2, [pc, #324]	@ (80022f4 <DMA_Init+0x190>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	f000 809a 	beq.w	80022ea <DMA_Init+0x186>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a4f      	ldr	r2, [pc, #316]	@ (80022f8 <DMA_Init+0x194>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	f000 8094 	beq.w	80022ea <DMA_Init+0x186>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a4d      	ldr	r2, [pc, #308]	@ (80022fc <DMA_Init+0x198>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	f000 808e 	beq.w	80022ea <DMA_Init+0x186>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002300 <DMA_Init+0x19c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	f000 8088 	beq.w	80022ea <DMA_Init+0x186>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a49      	ldr	r2, [pc, #292]	@ (8002304 <DMA_Init+0x1a0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	f000 8082 	beq.w	80022ea <DMA_Init+0x186>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a47      	ldr	r2, [pc, #284]	@ (8002308 <DMA_Init+0x1a4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d07c      	beq.n	80022ea <DMA_Init+0x186>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a45      	ldr	r2, [pc, #276]	@ (800230c <DMA_Init+0x1a8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d077      	beq.n	80022ea <DMA_Init+0x186>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a44      	ldr	r2, [pc, #272]	@ (8002310 <DMA_Init+0x1ac>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d072      	beq.n	80022ea <DMA_Init+0x186>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a42      	ldr	r2, [pc, #264]	@ (8002314 <DMA_Init+0x1b0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d06d      	beq.n	80022ea <DMA_Init+0x186>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a41      	ldr	r2, [pc, #260]	@ (8002318 <DMA_Init+0x1b4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d068      	beq.n	80022ea <DMA_Init+0x186>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a3f      	ldr	r2, [pc, #252]	@ (800231c <DMA_Init+0x1b8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d063      	beq.n	80022ea <DMA_Init+0x186>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a3e      	ldr	r2, [pc, #248]	@ (8002320 <DMA_Init+0x1bc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d05e      	beq.n	80022ea <DMA_Init+0x186>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a3c      	ldr	r2, [pc, #240]	@ (8002324 <DMA_Init+0x1c0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d059      	beq.n	80022ea <DMA_Init+0x186>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a3b      	ldr	r2, [pc, #236]	@ (8002328 <DMA_Init+0x1c4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d054      	beq.n	80022ea <DMA_Init+0x186>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a39      	ldr	r2, [pc, #228]	@ (800232c <DMA_Init+0x1c8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d04f      	beq.n	80022ea <DMA_Init+0x186>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a38      	ldr	r2, [pc, #224]	@ (8002330 <DMA_Init+0x1cc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d04a      	beq.n	80022ea <DMA_Init+0x186>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a36      	ldr	r2, [pc, #216]	@ (8002334 <DMA_Init+0x1d0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d045      	beq.n	80022ea <DMA_Init+0x186>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a35      	ldr	r2, [pc, #212]	@ (8002338 <DMA_Init+0x1d4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d040      	beq.n	80022ea <DMA_Init+0x186>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a33      	ldr	r2, [pc, #204]	@ (800233c <DMA_Init+0x1d8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d03b      	beq.n	80022ea <DMA_Init+0x186>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a32      	ldr	r2, [pc, #200]	@ (8002340 <DMA_Init+0x1dc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d036      	beq.n	80022ea <DMA_Init+0x186>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a30      	ldr	r2, [pc, #192]	@ (8002344 <DMA_Init+0x1e0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d031      	beq.n	80022ea <DMA_Init+0x186>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a2f      	ldr	r2, [pc, #188]	@ (8002348 <DMA_Init+0x1e4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d02c      	beq.n	80022ea <DMA_Init+0x186>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a2d      	ldr	r2, [pc, #180]	@ (800234c <DMA_Init+0x1e8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d027      	beq.n	80022ea <DMA_Init+0x186>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a2c      	ldr	r2, [pc, #176]	@ (8002350 <DMA_Init+0x1ec>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d022      	beq.n	80022ea <DMA_Init+0x186>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002354 <DMA_Init+0x1f0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01d      	beq.n	80022ea <DMA_Init+0x186>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a29      	ldr	r2, [pc, #164]	@ (8002358 <DMA_Init+0x1f4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d018      	beq.n	80022ea <DMA_Init+0x186>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a27      	ldr	r2, [pc, #156]	@ (800235c <DMA_Init+0x1f8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <DMA_Init+0x186>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a26      	ldr	r2, [pc, #152]	@ (8002360 <DMA_Init+0x1fc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d00e      	beq.n	80022ea <DMA_Init+0x186>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a24      	ldr	r2, [pc, #144]	@ (8002364 <DMA_Init+0x200>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d009      	beq.n	80022ea <DMA_Init+0x186>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a23      	ldr	r2, [pc, #140]	@ (8002368 <DMA_Init+0x204>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d004      	beq.n	80022ea <DMA_Init+0x186>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a21      	ldr	r2, [pc, #132]	@ (800236c <DMA_Init+0x208>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d142      	bne.n	8002370 <DMA_Init+0x20c>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e041      	b.n	8002372 <DMA_Init+0x20e>
 80022ee:	bf00      	nop
 80022f0:	40020050 	.word	0x40020050
 80022f4:	50020050 	.word	0x50020050
 80022f8:	400200d0 	.word	0x400200d0
 80022fc:	500200d0 	.word	0x500200d0
 8002300:	40020150 	.word	0x40020150
 8002304:	50020150 	.word	0x50020150
 8002308:	400201d0 	.word	0x400201d0
 800230c:	500201d0 	.word	0x500201d0
 8002310:	40020250 	.word	0x40020250
 8002314:	50020250 	.word	0x50020250
 8002318:	400202d0 	.word	0x400202d0
 800231c:	500202d0 	.word	0x500202d0
 8002320:	40020350 	.word	0x40020350
 8002324:	50020350 	.word	0x50020350
 8002328:	400203d0 	.word	0x400203d0
 800232c:	500203d0 	.word	0x500203d0
 8002330:	40020450 	.word	0x40020450
 8002334:	50020450 	.word	0x50020450
 8002338:	400204d0 	.word	0x400204d0
 800233c:	500204d0 	.word	0x500204d0
 8002340:	40020550 	.word	0x40020550
 8002344:	50020550 	.word	0x50020550
 8002348:	400205d0 	.word	0x400205d0
 800234c:	500205d0 	.word	0x500205d0
 8002350:	40020650 	.word	0x40020650
 8002354:	50020650 	.word	0x50020650
 8002358:	400206d0 	.word	0x400206d0
 800235c:	500206d0 	.word	0x500206d0
 8002360:	40020750 	.word	0x40020750
 8002364:	50020750 	.word	0x50020750
 8002368:	400207d0 	.word	0x400207d0
 800236c:	500207d0 	.word	0x500207d0
 8002370:	2300      	movs	r3, #0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d012      	beq.n	800239c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	3b01      	subs	r3, #1
 8002380:	051b      	lsls	r3, r3, #20
 8002382:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002386:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	3b01      	subs	r3, #1
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002394:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ce:	f040 80b0 	bne.w	8002532 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a82      	ldr	r2, [pc, #520]	@ (80025e0 <DMA_Init+0x47c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	f000 80a0 	beq.w	800251e <DMA_Init+0x3ba>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a80      	ldr	r2, [pc, #512]	@ (80025e4 <DMA_Init+0x480>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	f000 809a 	beq.w	800251e <DMA_Init+0x3ba>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7e      	ldr	r2, [pc, #504]	@ (80025e8 <DMA_Init+0x484>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	f000 8094 	beq.w	800251e <DMA_Init+0x3ba>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7c      	ldr	r2, [pc, #496]	@ (80025ec <DMA_Init+0x488>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	f000 808e 	beq.w	800251e <DMA_Init+0x3ba>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a7a      	ldr	r2, [pc, #488]	@ (80025f0 <DMA_Init+0x48c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	f000 8088 	beq.w	800251e <DMA_Init+0x3ba>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a78      	ldr	r2, [pc, #480]	@ (80025f4 <DMA_Init+0x490>)
 8002414:	4293      	cmp	r3, r2
 8002416:	f000 8082 	beq.w	800251e <DMA_Init+0x3ba>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a76      	ldr	r2, [pc, #472]	@ (80025f8 <DMA_Init+0x494>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d07c      	beq.n	800251e <DMA_Init+0x3ba>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a74      	ldr	r2, [pc, #464]	@ (80025fc <DMA_Init+0x498>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d077      	beq.n	800251e <DMA_Init+0x3ba>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a73      	ldr	r2, [pc, #460]	@ (8002600 <DMA_Init+0x49c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d072      	beq.n	800251e <DMA_Init+0x3ba>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a71      	ldr	r2, [pc, #452]	@ (8002604 <DMA_Init+0x4a0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d06d      	beq.n	800251e <DMA_Init+0x3ba>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a70      	ldr	r2, [pc, #448]	@ (8002608 <DMA_Init+0x4a4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d068      	beq.n	800251e <DMA_Init+0x3ba>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6e      	ldr	r2, [pc, #440]	@ (800260c <DMA_Init+0x4a8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d063      	beq.n	800251e <DMA_Init+0x3ba>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a6d      	ldr	r2, [pc, #436]	@ (8002610 <DMA_Init+0x4ac>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d05e      	beq.n	800251e <DMA_Init+0x3ba>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a6b      	ldr	r2, [pc, #428]	@ (8002614 <DMA_Init+0x4b0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d059      	beq.n	800251e <DMA_Init+0x3ba>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6a      	ldr	r2, [pc, #424]	@ (8002618 <DMA_Init+0x4b4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d054      	beq.n	800251e <DMA_Init+0x3ba>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a68      	ldr	r2, [pc, #416]	@ (800261c <DMA_Init+0x4b8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d04f      	beq.n	800251e <DMA_Init+0x3ba>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a67      	ldr	r2, [pc, #412]	@ (8002620 <DMA_Init+0x4bc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d04a      	beq.n	800251e <DMA_Init+0x3ba>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a65      	ldr	r2, [pc, #404]	@ (8002624 <DMA_Init+0x4c0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d045      	beq.n	800251e <DMA_Init+0x3ba>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a64      	ldr	r2, [pc, #400]	@ (8002628 <DMA_Init+0x4c4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d040      	beq.n	800251e <DMA_Init+0x3ba>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a62      	ldr	r2, [pc, #392]	@ (800262c <DMA_Init+0x4c8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d03b      	beq.n	800251e <DMA_Init+0x3ba>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a61      	ldr	r2, [pc, #388]	@ (8002630 <DMA_Init+0x4cc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d036      	beq.n	800251e <DMA_Init+0x3ba>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002634 <DMA_Init+0x4d0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d031      	beq.n	800251e <DMA_Init+0x3ba>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a5e      	ldr	r2, [pc, #376]	@ (8002638 <DMA_Init+0x4d4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d02c      	beq.n	800251e <DMA_Init+0x3ba>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a5c      	ldr	r2, [pc, #368]	@ (800263c <DMA_Init+0x4d8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d027      	beq.n	800251e <DMA_Init+0x3ba>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002640 <DMA_Init+0x4dc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d022      	beq.n	800251e <DMA_Init+0x3ba>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a59      	ldr	r2, [pc, #356]	@ (8002644 <DMA_Init+0x4e0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01d      	beq.n	800251e <DMA_Init+0x3ba>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a58      	ldr	r2, [pc, #352]	@ (8002648 <DMA_Init+0x4e4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d018      	beq.n	800251e <DMA_Init+0x3ba>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a56      	ldr	r2, [pc, #344]	@ (800264c <DMA_Init+0x4e8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <DMA_Init+0x3ba>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a55      	ldr	r2, [pc, #340]	@ (8002650 <DMA_Init+0x4ec>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00e      	beq.n	800251e <DMA_Init+0x3ba>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a53      	ldr	r2, [pc, #332]	@ (8002654 <DMA_Init+0x4f0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d009      	beq.n	800251e <DMA_Init+0x3ba>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a52      	ldr	r2, [pc, #328]	@ (8002658 <DMA_Init+0x4f4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d004      	beq.n	800251e <DMA_Init+0x3ba>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a50      	ldr	r2, [pc, #320]	@ (800265c <DMA_Init+0x4f8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <DMA_Init+0x3be>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <DMA_Init+0x3c0>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00d      	beq.n	8002544 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	e008      	b.n	8002544 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800253a:	d103      	bne.n	8002544 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002542:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800254a:	4b45      	ldr	r3, [pc, #276]	@ (8002660 <DMA_Init+0x4fc>)
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	430b      	orrs	r3, r1
 8002556:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a36      	ldr	r2, [pc, #216]	@ (8002640 <DMA_Init+0x4dc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d022      	beq.n	80025b0 <DMA_Init+0x44c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a35      	ldr	r2, [pc, #212]	@ (8002644 <DMA_Init+0x4e0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d01d      	beq.n	80025b0 <DMA_Init+0x44c>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a33      	ldr	r2, [pc, #204]	@ (8002648 <DMA_Init+0x4e4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d018      	beq.n	80025b0 <DMA_Init+0x44c>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a32      	ldr	r2, [pc, #200]	@ (800264c <DMA_Init+0x4e8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d013      	beq.n	80025b0 <DMA_Init+0x44c>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a30      	ldr	r2, [pc, #192]	@ (8002650 <DMA_Init+0x4ec>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00e      	beq.n	80025b0 <DMA_Init+0x44c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2f      	ldr	r2, [pc, #188]	@ (8002654 <DMA_Init+0x4f0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d009      	beq.n	80025b0 <DMA_Init+0x44c>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002658 <DMA_Init+0x4f4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <DMA_Init+0x44c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2c      	ldr	r2, [pc, #176]	@ (800265c <DMA_Init+0x4f8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d101      	bne.n	80025b4 <DMA_Init+0x450>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <DMA_Init+0x452>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2200      	movs	r2, #0
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40020050 	.word	0x40020050
 80025e4:	50020050 	.word	0x50020050
 80025e8:	400200d0 	.word	0x400200d0
 80025ec:	500200d0 	.word	0x500200d0
 80025f0:	40020150 	.word	0x40020150
 80025f4:	50020150 	.word	0x50020150
 80025f8:	400201d0 	.word	0x400201d0
 80025fc:	500201d0 	.word	0x500201d0
 8002600:	40020250 	.word	0x40020250
 8002604:	50020250 	.word	0x50020250
 8002608:	400202d0 	.word	0x400202d0
 800260c:	500202d0 	.word	0x500202d0
 8002610:	40020350 	.word	0x40020350
 8002614:	50020350 	.word	0x50020350
 8002618:	400203d0 	.word	0x400203d0
 800261c:	500203d0 	.word	0x500203d0
 8002620:	40020450 	.word	0x40020450
 8002624:	50020450 	.word	0x50020450
 8002628:	400204d0 	.word	0x400204d0
 800262c:	500204d0 	.word	0x500204d0
 8002630:	40020550 	.word	0x40020550
 8002634:	50020550 	.word	0x50020550
 8002638:	400205d0 	.word	0x400205d0
 800263c:	500205d0 	.word	0x500205d0
 8002640:	40020650 	.word	0x40020650
 8002644:	50020650 	.word	0x50020650
 8002648:	400206d0 	.word	0x400206d0
 800264c:	500206d0 	.word	0x500206d0
 8002650:	40020750 	.word	0x40020750
 8002654:	50020750 	.word	0x50020750
 8002658:	400207d0 	.word	0x400207d0
 800265c:	500207d0 	.word	0x500207d0
 8002660:	3cc03180 	.word	0x3cc03180

08002664 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	@ 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002676:	e1ba      	b.n	80029ee <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 81aa 	beq.w	80029e8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a55      	ldr	r2, [pc, #340]	@ (80027ec <HAL_GPIO_Init+0x188>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d15d      	bne.n	8002758 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80026a2:	2201      	movs	r2, #1
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0201 	and.w	r2, r3, #1
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80026cc:	4a48      	ldr	r2, [pc, #288]	@ (80027f0 <HAL_GPIO_Init+0x18c>)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026d4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80026d6:	4a46      	ldr	r2, [pc, #280]	@ (80027f0 <HAL_GPIO_Init+0x18c>)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	08da      	lsrs	r2, r3, #3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	3208      	adds	r2, #8
 80026ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	4013      	ands	r3, r2
 8002704:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	220b      	movs	r2, #11
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	4313      	orrs	r3, r2
 8002718:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	3208      	adds	r2, #8
 8002722:	69f9      	ldr	r1, [r7, #28]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	4013      	ands	r3, r2
 800273e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2202      	movs	r2, #2
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4313      	orrs	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e067      	b.n	8002828 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x104>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b12      	cmp	r3, #18
 8002766:	d145      	bne.n	80027f4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002774:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	4013      	ands	r3, r2
 800278a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f003 020f 	and.w	r2, r3, #15
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	08da      	lsrs	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3208      	adds	r2, #8
 80027ae:	69f9      	ldr	r1, [r7, #28]
 80027b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0203 	and.w	r2, r3, #3
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e01e      	b.n	8002828 <HAL_GPIO_Init+0x1c4>
 80027ea:	bf00      	nop
 80027ec:	46020000 	.word	0x46020000
 80027f0:	0800c130 	.word	0x0800c130
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	4013      	ands	r3, r2
 800280a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	4313      	orrs	r3, r2
 8002820:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d00b      	beq.n	8002848 <HAL_GPIO_Init+0x1e4>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d007      	beq.n	8002848 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800283c:	2b11      	cmp	r3, #17
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b12      	cmp	r3, #18
 8002846:	d130      	bne.n	80028aa <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	4013      	ands	r3, r2
 800285e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	4313      	orrs	r3, r2
 8002870:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800287e:	2201      	movs	r2, #1
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	4013      	ands	r3, r2
 800288c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 0201 	and.w	r2, r3, #1
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d017      	beq.n	80028e2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d07c      	beq.n	80029e8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80028ee:	4a47      	ldr	r2, [pc, #284]	@ (8002a0c <HAL_GPIO_Init+0x3a8>)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3318      	adds	r3, #24
 80028f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	220f      	movs	r2, #15
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	4013      	ands	r3, r2
 8002910:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0a9a      	lsrs	r2, r3, #10
 8002916:	4b3e      	ldr	r3, [pc, #248]	@ (8002a10 <HAL_GPIO_Init+0x3ac>)
 8002918:	4013      	ands	r3, r2
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	f002 0203 	and.w	r2, r2, #3
 8002920:	00d2      	lsls	r2, r2, #3
 8002922:	4093      	lsls	r3, r2
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	4313      	orrs	r3, r2
 8002928:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800292a:	4938      	ldr	r1, [pc, #224]	@ (8002a0c <HAL_GPIO_Init+0x3a8>)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	3318      	adds	r3, #24
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002938:	4b34      	ldr	r3, [pc, #208]	@ (8002a0c <HAL_GPIO_Init+0x3a8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	43db      	mvns	r3, r3
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	4013      	ands	r3, r2
 8002946:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800295c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a0c <HAL_GPIO_Init+0x3a8>)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002962:	4b2a      	ldr	r3, [pc, #168]	@ (8002a0c <HAL_GPIO_Init+0x3a8>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	43db      	mvns	r3, r3
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	4013      	ands	r3, r2
 8002970:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002986:	4a21      	ldr	r2, [pc, #132]	@ (8002a0c <HAL_GPIO_Init+0x3a8>)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800298c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a0c <HAL_GPIO_Init+0x3a8>)
 800298e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002992:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43db      	mvns	r3, r3
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	4013      	ands	r3, r2
 800299c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80029b2:	4a16      	ldr	r2, [pc, #88]	@ (8002a0c <HAL_GPIO_Init+0x3a8>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80029ba:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <HAL_GPIO_Init+0x3a8>)
 80029bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80029e0:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <HAL_GPIO_Init+0x3a8>)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3301      	adds	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f47f ae3d 	bne.w	8002678 <HAL_GPIO_Init+0x14>
  }
}
 80029fe:	bf00      	nop
 8002a00:	bf00      	nop
 8002a02:	3724      	adds	r7, #36	@ 0x24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	46022000 	.word	0x46022000
 8002a10:	002f7f7f 	.word	0x002f7f7f

08002a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
 8002a20:	4613      	mov	r3, r2
 8002a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a24:	787b      	ldrb	r3, [r7, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002a30:	e002      	b.n	8002a38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e08d      	b.n	8002b72 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fd fffe 	bl	8000a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	@ 0x24
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002aa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e006      	b.n	8002acc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002aca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d108      	bne.n	8002ae6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	e007      	b.n	8002af6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002af4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69d9      	ldr	r1, [r3, #28]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1a      	ldr	r2, [r3, #32]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	461a      	mov	r2, r3
 8002b88:	460b      	mov	r3, r1
 8002b8a:	817b      	strh	r3, [r7, #10]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	f040 80da 	bne.w	8002d52 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_I2C_Master_Transmit+0x30>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e0d3      	b.n	8002d54 <HAL_I2C_Master_Transmit+0x1d8>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bb4:	f7fe fe48 	bl	8001848 <HAL_GetTick>
 8002bb8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2319      	movs	r3, #25
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f8f0 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0be      	b.n	8002d54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2221      	movs	r2, #33	@ 0x21
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2210      	movs	r2, #16
 8002be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	893a      	ldrh	r2, [r7, #8]
 8002bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2bff      	cmp	r3, #255	@ 0xff
 8002c06:	d90e      	bls.n	8002c26 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	22ff      	movs	r2, #255	@ 0xff
 8002c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	8979      	ldrh	r1, [r7, #10]
 8002c16:	4b51      	ldr	r3, [pc, #324]	@ (8002d5c <HAL_I2C_Master_Transmit+0x1e0>)
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fa88 	bl	8003134 <I2C_TransferConfig>
 8002c24:	e06c      	b.n	8002d00 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	8979      	ldrh	r1, [r7, #10]
 8002c38:	4b48      	ldr	r3, [pc, #288]	@ (8002d5c <HAL_I2C_Master_Transmit+0x1e0>)
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fa77 	bl	8003134 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c46:	e05b      	b.n	8002d00 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	6a39      	ldr	r1, [r7, #32]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f906 	bl	8002e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e07b      	b.n	8002d54 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d034      	beq.n	8002d00 <HAL_I2C_Master_Transmit+0x184>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d130      	bne.n	8002d00 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2180      	movs	r1, #128	@ 0x80
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f87f 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e04d      	b.n	8002d54 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2bff      	cmp	r3, #255	@ 0xff
 8002cc0:	d90e      	bls.n	8002ce0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	22ff      	movs	r2, #255	@ 0xff
 8002cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	8979      	ldrh	r1, [r7, #10]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fa2b 	bl	8003134 <I2C_TransferConfig>
 8002cde:	e00f      	b.n	8002d00 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	8979      	ldrh	r1, [r7, #10]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fa1a 	bl	8003134 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d19e      	bne.n	8002c48 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	6a39      	ldr	r1, [r7, #32]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f8ec 	bl	8002eec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e01a      	b.n	8002d54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2220      	movs	r2, #32
 8002d24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d32:	400b      	ands	r3, r1
 8002d34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	80002000 	.word	0x80002000
 8002d60:	fe00e800 	.word	0xfe00e800

08002d64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d103      	bne.n	8002d82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d007      	beq.n	8002da0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	619a      	str	r2, [r3, #24]
  }
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dbc:	e03b      	b.n	8002e36 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f8d6 	bl	8002f74 <I2C_IsErrorOccurred>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e041      	b.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d02d      	beq.n	8002e36 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7fe fd35 	bl	8001848 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d122      	bne.n	8002e36 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d113      	bne.n	8002e36 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	f043 0220 	orr.w	r2, r3, #32
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d0b4      	beq.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e6a:	e033      	b.n	8002ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f87f 	bl	8002f74 <I2C_IsErrorOccurred>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e031      	b.n	8002ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d025      	beq.n	8002ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e88:	f7fe fcde 	bl	8001848 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d302      	bcc.n	8002e9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11a      	bne.n	8002ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d013      	beq.n	8002ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb0:	f043 0220 	orr.w	r2, r3, #32
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e007      	b.n	8002ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d1c4      	bne.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ef8:	e02f      	b.n	8002f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f838 	bl	8002f74 <I2C_IsErrorOccurred>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e02d      	b.n	8002f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fe fc9b 	bl	8001848 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d11a      	bne.n	8002f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d013      	beq.n	8002f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	f043 0220 	orr.w	r2, r3, #32
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e007      	b.n	8002f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d1c8      	bne.n	8002efa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	@ 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d068      	beq.n	8003072 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fa8:	e049      	b.n	800303e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d045      	beq.n	800303e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fb2:	f7fe fc49 	bl	8001848 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <I2C_IsErrorOccurred+0x54>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d13a      	bne.n	800303e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fea:	d121      	bne.n	8003030 <I2C_IsErrorOccurred+0xbc>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ff2:	d01d      	beq.n	8003030 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d01a      	beq.n	8003030 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003008:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800300a:	f7fe fc1d 	bl	8001848 <HAL_GetTick>
 800300e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003010:	e00e      	b.n	8003030 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003012:	f7fe fc19 	bl	8001848 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b19      	cmp	r3, #25
 800301e:	d907      	bls.n	8003030 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	f043 0320 	orr.w	r3, r3, #32
 8003026:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800302e:	e006      	b.n	800303e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b20      	cmp	r3, #32
 800303c:	d1e9      	bne.n	8003012 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b20      	cmp	r3, #32
 800304a:	d003      	beq.n	8003054 <I2C_IsErrorOccurred+0xe0>
 800304c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0aa      	beq.n	8002faa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003058:	2b00      	cmp	r3, #0
 800305a:	d103      	bne.n	8003064 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2220      	movs	r2, #32
 8003062:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	f043 0304 	orr.w	r3, r3, #4
 800306a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003094:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f043 0308 	orr.w	r3, r3, #8
 80030ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00b      	beq.n	80030e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80030e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01c      	beq.n	8003122 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f7ff fe3b 	bl	8002d64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <I2C_IsErrorOccurred+0x1bc>)
 80030fa:	400b      	ands	r3, r1
 80030fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	431a      	orrs	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003122:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003126:	4618      	mov	r0, r3
 8003128:	3728      	adds	r7, #40	@ 0x28
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	fe00e800 	.word	0xfe00e800

08003134 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	817b      	strh	r3, [r7, #10]
 8003142:	4613      	mov	r3, r2
 8003144:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003146:	897b      	ldrh	r3, [r7, #10]
 8003148:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800314c:	7a7b      	ldrb	r3, [r7, #9]
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003154:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	4313      	orrs	r3, r2
 800315e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003162:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	0d5b      	lsrs	r3, r3, #21
 800316e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003172:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <I2C_TransferConfig+0x60>)
 8003174:	430b      	orrs	r3, r1
 8003176:	43db      	mvns	r3, r3
 8003178:	ea02 0103 	and.w	r1, r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003186:	bf00      	nop
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	03ff63ff 	.word	0x03ff63ff

08003198 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d138      	bne.n	8003220 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e032      	b.n	8003222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	@ 0x24
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e000      	b.n	8003222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003220:	2302      	movs	r3, #2
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b20      	cmp	r3, #32
 8003242:	d139      	bne.n	80032b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800324e:	2302      	movs	r3, #2
 8003250:	e033      	b.n	80032ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2224      	movs	r2, #36	@ 0x24
 800325e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003280:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80032d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e007      	b.n	80032f6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80032e6:	4b07      	ldr	r3, [pc, #28]	@ (8003304 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 0204 	bic.w	r2, r3, #4
 80032ee:	4905      	ldr	r1, [pc, #20]	@ (8003304 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40030400 	.word	0x40030400

08003308 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800330c:	4b05      	ldr	r3, [pc, #20]	@ (8003324 <HAL_ICACHE_Enable+0x1c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <HAL_ICACHE_Enable+0x1c>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40030400 	.word	0x40030400

08003328 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af02      	add	r7, sp, #8
 800332e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e108      	b.n	800354c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fd fddd 	bl	8000f14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2203      	movs	r2, #3
 800335e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4a7b      	ldr	r2, [pc, #492]	@ (8003554 <HAL_PCD_Init+0x22c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d102      	bne.n	8003370 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f005 fa98 	bl	80088aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7c1a      	ldrb	r2, [r3, #16]
 8003382:	f88d 2000 	strb.w	r2, [sp]
 8003386:	3304      	adds	r3, #4
 8003388:	cb0e      	ldmia	r3, {r1, r2, r3}
 800338a:	f005 f9ad 	bl	80086e8 <USB_CoreInit>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0d5      	b.n	800354c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f005 fa90 	bl	80088cc <USB_SetCurrentMode>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0c6      	b.n	800354c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	e04a      	b.n	800345a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033c4:	7bfa      	ldrb	r2, [r7, #15]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3315      	adds	r3, #21
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	3314      	adds	r3, #20
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	b298      	uxth	r0, r3
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	332e      	adds	r3, #46	@ 0x2e
 8003400:	4602      	mov	r2, r0
 8003402:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3318      	adds	r3, #24
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	331c      	adds	r3, #28
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	3320      	adds	r3, #32
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	3324      	adds	r3, #36	@ 0x24
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	3301      	adds	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	791b      	ldrb	r3, [r3, #4]
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	429a      	cmp	r2, r3
 8003462:	d3af      	bcc.n	80033c4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e044      	b.n	80034f4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034c2:	7bfa      	ldrb	r2, [r7, #15]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	3301      	adds	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	791b      	ldrb	r3, [r3, #4]
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d3b5      	bcc.n	800346a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7c1a      	ldrb	r2, [r3, #16]
 8003506:	f88d 2000 	strb.w	r2, [sp]
 800350a:	3304      	adds	r3, #4
 800350c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800350e:	f005 fa29 	bl	8008964 <USB_DevInit>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e013      	b.n	800354c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	7b1b      	ldrb	r3, [r3, #12]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d102      	bne.n	8003540 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f001 f96a 	bl	8004814 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f006 fa54 	bl	80099f2 <USB_DevDisconnect>

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	42040000 	.word	0x42040000

08003558 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_PCD_Start+0x1c>
 8003570:	2302      	movs	r3, #2
 8003572:	e01c      	b.n	80035ae <HAL_PCD_Start+0x56>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	7b5b      	ldrb	r3, [r3, #13]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003588:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f005 f977 	bl	8008888 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f006 fa06 	bl	80099b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035b6:	b590      	push	{r4, r7, lr}
 80035b8:	b08d      	sub	sp, #52	@ 0x34
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f006 fac4 	bl	8009b5a <USB_GetMode>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f040 84b9 	bne.w	8003f4c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f006 fa28 	bl	8009a34 <USB_ReadInterrupts>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 84af 	beq.w	8003f4a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f006 fa15 	bl	8009a34 <USB_ReadInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b02      	cmp	r3, #2
 8003612:	d107      	bne.n	8003624 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f002 0202 	and.w	r2, r2, #2
 8003622:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f006 fa03 	bl	8009a34 <USB_ReadInterrupts>
 800362e:	4603      	mov	r3, r0
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b10      	cmp	r3, #16
 8003636:	d161      	bne.n	80036fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0210 	bic.w	r2, r2, #16
 8003646:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	3304      	adds	r3, #4
 8003666:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	0c5b      	lsrs	r3, r3, #17
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	2b02      	cmp	r3, #2
 8003672:	d124      	bne.n	80036be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d035      	beq.n	80036ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800368a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800368e:	b29b      	uxth	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	6a38      	ldr	r0, [r7, #32]
 8003694:	f006 f83a 	bl	800970c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a4:	441a      	add	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b6:	441a      	add	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	615a      	str	r2, [r3, #20]
 80036bc:	e016      	b.n	80036ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	0c5b      	lsrs	r3, r3, #17
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d110      	bne.n	80036ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036d0:	2208      	movs	r2, #8
 80036d2:	4619      	mov	r1, r3
 80036d4:	6a38      	ldr	r0, [r7, #32]
 80036d6:	f006 f819 	bl	800970c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036e6:	441a      	add	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0210 	orr.w	r2, r2, #16
 80036fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f006 f997 	bl	8009a34 <USB_ReadInterrupts>
 8003706:	4603      	mov	r3, r0
 8003708:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800370c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003710:	f040 80a7 	bne.w	8003862 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f006 f99c 	bl	8009a5a <USB_ReadDevAllOutEpInterrupt>
 8003722:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003724:	e099      	b.n	800385a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 808e 	beq.w	800384e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f006 f9c0 	bl	8009ac2 <USB_ReadDevOutEPInterrupt>
 8003742:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00c      	beq.n	8003768 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800374e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800375a:	461a      	mov	r2, r3
 800375c:	2301      	movs	r3, #1
 800375e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003760:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fed0 	bl	8004508 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00c      	beq.n	800378c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800377e:	461a      	mov	r2, r3
 8003780:	2308      	movs	r3, #8
 8003782:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003784:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 ffa6 	bl	80046d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	2310      	movs	r3, #16
 80037a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d030      	beq.n	8003814 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ba:	2b80      	cmp	r3, #128	@ 0x80
 80037bc:	d109      	bne.n	80037d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	3304      	adds	r3, #4
 80037e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	78db      	ldrb	r3, [r3, #3]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2200      	movs	r2, #0
 80037f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	4619      	mov	r1, r3
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f006 fd79 	bl	800a2f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380e:	461a      	mov	r2, r3
 8003810:	2302      	movs	r3, #2
 8003812:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382a:	461a      	mov	r2, r3
 800382c:	2320      	movs	r3, #32
 800382e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003846:	461a      	mov	r2, r3
 8003848:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800384c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	3301      	adds	r3, #1
 8003852:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	f47f af62 	bne.w	8003726 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f006 f8e4 	bl	8009a34 <USB_ReadInterrupts>
 800386c:	4603      	mov	r3, r0
 800386e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003872:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003876:	f040 80db 	bne.w	8003a30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f006 f905 	bl	8009a8e <USB_ReadDevAllInEpInterrupt>
 8003884:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800388a:	e0cd      	b.n	8003a28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800388c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80c2 	beq.w	8003a1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f006 f92b 	bl	8009afe <USB_ReadDevInEPInterrupt>
 80038a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d057      	beq.n	8003964 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	2201      	movs	r2, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69f9      	ldr	r1, [r7, #28]
 80038d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038d4:	4013      	ands	r3, r2
 80038d6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e4:	461a      	mov	r2, r3
 80038e6:	2301      	movs	r3, #1
 80038e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	799b      	ldrb	r3, [r3, #6]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d132      	bne.n	8003958 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	3320      	adds	r3, #32
 8003902:	6819      	ldr	r1, [r3, #0]
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4403      	add	r3, r0
 8003912:	331c      	adds	r3, #28
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4419      	add	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4403      	add	r3, r0
 8003926:	3320      	adds	r3, #32
 8003928:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	2b00      	cmp	r3, #0
 800392e:	d113      	bne.n	8003958 <HAL_PCD_IRQHandler+0x3a2>
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	3324      	adds	r3, #36	@ 0x24
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d108      	bne.n	8003958 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003950:	461a      	mov	r2, r3
 8003952:	2101      	movs	r1, #1
 8003954:	f006 f932 	bl	8009bbc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	b2db      	uxtb	r3, r3
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f006 fc4c 	bl	800a1fc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800397a:	461a      	mov	r2, r3
 800397c:	2308      	movs	r3, #8
 800397e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0310 	and.w	r3, r3, #16
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003996:	461a      	mov	r2, r3
 8003998:	2310      	movs	r3, #16
 800399a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039b2:	461a      	mov	r2, r3
 80039b4:	2340      	movs	r3, #64	@ 0x40
 80039b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d023      	beq.n	8003a0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039c4:	6a38      	ldr	r0, [r7, #32]
 80039c6:	f005 f919 	bl	8008bfc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80039ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	3310      	adds	r3, #16
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	3304      	adds	r3, #4
 80039dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	78db      	ldrb	r3, [r3, #3]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d108      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2200      	movs	r2, #0
 80039ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f006 fc90 	bl	800a318 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a04:	461a      	mov	r2, r3
 8003a06:	2302      	movs	r3, #2
 8003a08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fcea 	bl	80043f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	3301      	adds	r3, #1
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a24:	085b      	lsrs	r3, r3, #1
 8003a26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f47f af2e 	bne.w	800388c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f005 fffd 	bl	8009a34 <USB_ReadInterrupts>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a44:	d122      	bne.n	8003a8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d108      	bne.n	8003a76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f006 fe10 	bl	800a694 <HAL_PCDEx_LPM_Callback>
 8003a74:	e002      	b.n	8003a7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f006 fc20 	bl	800a2bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f005 ffcf 	bl	8009a34 <USB_ReadInterrupts>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aa0:	d112      	bne.n	8003ac8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d102      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f006 fbe8 	bl	800a288 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f005 ffb1 	bl	8009a34 <USB_ReadInterrupts>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ad8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003adc:	d121      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003aec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d111      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	f003 020f 	and.w	r2, r3, #15
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b12:	2101      	movs	r1, #1
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f006 fdbd 	bl	800a694 <HAL_PCDEx_LPM_Callback>
 8003b1a:	e002      	b.n	8003b22 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f006 fbb3 	bl	800a288 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f005 ff84 	bl	8009a34 <USB_ReadInterrupts>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b36:	f040 80b7 	bne.w	8003ca8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2110      	movs	r1, #16
 8003b54:	4618      	mov	r0, r3
 8003b56:	f005 f851 	bl	8008bfc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b5e:	e046      	b.n	8003bee <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ba6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bb8:	0151      	lsls	r1, r2, #5
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	440a      	add	r2, r1
 8003bbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003be2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003be6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bea:	3301      	adds	r3, #1
 8003bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	791b      	ldrb	r3, [r3, #4]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d3b2      	bcc.n	8003b60 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c08:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003c0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7bdb      	ldrb	r3, [r3, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c26:	f043 030b 	orr.w	r3, r3, #11
 8003c2a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c3c:	f043 030b 	orr.w	r3, r3, #11
 8003c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c42:	e015      	b.n	8003c70 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c56:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003c5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c6a:	f043 030b 	orr.w	r3, r3, #11
 8003c6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c7e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003c82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c92:	461a      	mov	r2, r3
 8003c94:	f005 ff92 	bl	8009bbc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f005 fec1 	bl	8009a34 <USB_ReadInterrupts>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cbc:	d123      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f005 ff57 	bl	8009b76 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f005 f80e 	bl	8008cee <USB_GetDevSpeed>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681c      	ldr	r4, [r3, #0]
 8003cde:	f002 f839 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8003ce2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4620      	mov	r0, r4
 8003cec:	f004 fd2a 	bl	8008744 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f006 faab 	bl	800a24c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f005 fe92 	bl	8009a34 <USB_ReadInterrupts>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d10a      	bne.n	8003d30 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f006 fa88 	bl	800a230 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f002 0208 	and.w	r2, r2, #8
 8003d2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f005 fe7d 	bl	8009a34 <USB_ReadInterrupts>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d40:	2b80      	cmp	r3, #128	@ 0x80
 8003d42:	d123      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d50:	2301      	movs	r3, #1
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d54:	e014      	b.n	8003d80 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d105      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	4619      	mov	r1, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fb0a 	bl	800438e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	791b      	ldrb	r3, [r3, #4]
 8003d84:	461a      	mov	r2, r3
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d3e4      	bcc.n	8003d56 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f005 fe4f 	bl	8009a34 <USB_ReadInterrupts>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003da0:	d13c      	bne.n	8003e1c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003da2:	2301      	movs	r3, #1
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da6:	e02b      	b.n	8003e00 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d115      	bne.n	8003dfa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003dce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	da12      	bge.n	8003dfa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	3317      	adds	r3, #23
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	4619      	mov	r1, r3
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 faca 	bl	800438e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	791b      	ldrb	r3, [r3, #4]
 8003e04:	461a      	mov	r2, r3
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d3cd      	bcc.n	8003da8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f005 fe07 	bl	8009a34 <USB_ReadInterrupts>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e30:	d156      	bne.n	8003ee0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e32:	2301      	movs	r3, #1
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e36:	e045      	b.n	8003ec4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d12e      	bne.n	8003ebe <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	da2b      	bge.n	8003ebe <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	0c1a      	lsrs	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003e70:	4053      	eors	r3, r2
 8003e72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d121      	bne.n	8003ebe <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10a      	bne.n	8003ebe <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eba:	6053      	str	r3, [r2, #4]
            break;
 8003ebc:	e008      	b.n	8003ed0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	791b      	ldrb	r3, [r3, #4]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d3b3      	bcc.n	8003e38 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f005 fda5 	bl	8009a34 <USB_ReadInterrupts>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef4:	d10a      	bne.n	8003f0c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f006 fa20 	bl	800a33c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f005 fd8f 	bl	8009a34 <USB_ReadInterrupts>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d115      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f006 fa10 	bl	800a358 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	e000      	b.n	8003f4c <HAL_PCD_IRQHandler+0x996>
      return;
 8003f4a:	bf00      	nop
    }
  }
}
 8003f4c:	3734      	adds	r7, #52	@ 0x34
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd90      	pop	{r4, r7, pc}

08003f52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_PCD_SetAddress+0x1a>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e012      	b.n	8003f92 <HAL_PCD_SetAddress+0x40>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f005 fcee 	bl	8009964 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	4608      	mov	r0, r1
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4603      	mov	r3, r0
 8003faa:	70fb      	strb	r3, [r7, #3]
 8003fac:	460b      	mov	r3, r1
 8003fae:	803b      	strh	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da0f      	bge.n	8003fe0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 020f 	and.w	r2, r3, #15
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	3310      	adds	r3, #16
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	705a      	strb	r2, [r3, #1]
 8003fde:	e00f      	b.n	8004000 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	f003 020f 	and.w	r2, r3, #15
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800400c:	883b      	ldrh	r3, [r7, #0]
 800400e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	78ba      	ldrb	r2, [r7, #2]
 800401a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	785b      	ldrb	r3, [r3, #1]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800402e:	78bb      	ldrb	r3, [r7, #2]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d102      	bne.n	800403a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_PCD_EP_Open+0xae>
 8004044:	2302      	movs	r3, #2
 8004046:	e00e      	b.n	8004066 <HAL_PCD_EP_Open+0xcc>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68f9      	ldr	r1, [r7, #12]
 8004056:	4618      	mov	r0, r3
 8004058:	f004 fe6e 	bl	8008d38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004064:	7afb      	ldrb	r3, [r7, #11]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	460b      	mov	r3, r1
 8004078:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800407a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800407e:	2b00      	cmp	r3, #0
 8004080:	da0f      	bge.n	80040a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	3310      	adds	r3, #16
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	3304      	adds	r3, #4
 8004098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	705a      	strb	r2, [r3, #1]
 80040a0:	e00f      	b.n	80040c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	f003 020f 	and.w	r2, r3, #15
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	3304      	adds	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_PCD_EP_Close+0x6e>
 80040d8:	2302      	movs	r3, #2
 80040da:	e00e      	b.n	80040fa <HAL_PCD_EP_Close+0x8c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68f9      	ldr	r1, [r7, #12]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f004 feac 	bl	8008e48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	460b      	mov	r3, r1
 8004110:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004112:	7afb      	ldrb	r3, [r7, #11]
 8004114:	f003 020f 	and.w	r2, r3, #15
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	3304      	adds	r3, #4
 800412a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004144:	7afb      	ldrb	r3, [r7, #11]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	b2da      	uxtb	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	799b      	ldrb	r3, [r3, #6]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d102      	bne.n	800415e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	799b      	ldrb	r3, [r3, #6]
 8004166:	461a      	mov	r2, r3
 8004168:	6979      	ldr	r1, [r7, #20]
 800416a:	f004 ff49 	bl	8009000 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	f003 020f 	and.w	r2, r3, #15
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	460b      	mov	r3, r1
 80041b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b8:	7afb      	ldrb	r3, [r7, #11]
 80041ba:	f003 020f 	and.w	r2, r3, #15
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	3310      	adds	r3, #16
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2201      	movs	r2, #1
 80041e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e8:	7afb      	ldrb	r3, [r7, #11]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	799b      	ldrb	r3, [r3, #6]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d102      	bne.n	8004202 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	799b      	ldrb	r3, [r3, #6]
 800420a:	461a      	mov	r2, r3
 800420c:	6979      	ldr	r1, [r7, #20]
 800420e:	f004 fef7 	bl	8009000 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	7912      	ldrb	r2, [r2, #4]
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e04f      	b.n	80042da <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800423a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800423e:	2b00      	cmp	r3, #0
 8004240:	da0f      	bge.n	8004262 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	f003 020f 	and.w	r2, r3, #15
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	3310      	adds	r3, #16
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	3304      	adds	r3, #4
 8004258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	705a      	strb	r2, [r3, #1]
 8004260:	e00d      	b.n	800427e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	3304      	adds	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_PCD_EP_SetStall+0x82>
 800429a:	2302      	movs	r3, #2
 800429c:	e01d      	b.n	80042da <HAL_PCD_EP_SetStall+0xbe>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68f9      	ldr	r1, [r7, #12]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f005 fa85 	bl	80097bc <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	7999      	ldrb	r1, [r3, #6]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042ca:	461a      	mov	r2, r3
 80042cc:	f005 fc76 	bl	8009bbc <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	7912      	ldrb	r2, [r2, #4]
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e042      	b.n	8004386 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004304:	2b00      	cmp	r3, #0
 8004306:	da0f      	bge.n	8004328 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 020f 	and.w	r2, r3, #15
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	3310      	adds	r3, #16
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	4413      	add	r3, r2
 800431c:	3304      	adds	r3, #4
 800431e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	705a      	strb	r2, [r3, #1]
 8004326:	e00f      	b.n	8004348 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	f003 020f 	and.w	r2, r3, #15
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	3304      	adds	r3, #4
 8004340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	b2da      	uxtb	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_PCD_EP_ClrStall+0x86>
 8004364:	2302      	movs	r3, #2
 8004366:	e00e      	b.n	8004386 <HAL_PCD_EP_ClrStall+0xa4>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68f9      	ldr	r1, [r7, #12]
 8004376:	4618      	mov	r0, r3
 8004378:	f005 fa8e 	bl	8009898 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800439a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da0c      	bge.n	80043bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 020f 	and.w	r2, r3, #15
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	3310      	adds	r3, #16
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	3304      	adds	r3, #4
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e00c      	b.n	80043d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	f003 020f 	and.w	r2, r3, #15
 80043c2:	4613      	mov	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	3304      	adds	r3, #4
 80043d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68f9      	ldr	r1, [r7, #12]
 80043dc:	4618      	mov	r0, r3
 80043de:	f005 f8ad 	bl	800953c <USB_EPStopXfer>
 80043e2:	4603      	mov	r3, r0
 80043e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80043e6:	7afb      	ldrb	r3, [r7, #11]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	@ 0x28
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	3310      	adds	r3, #16
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	3304      	adds	r3, #4
 8004416:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	429a      	cmp	r2, r3
 8004422:	d901      	bls.n	8004428 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e06b      	b.n	8004500 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	429a      	cmp	r2, r3
 800443c:	d902      	bls.n	8004444 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	3303      	adds	r3, #3
 8004448:	089b      	lsrs	r3, r3, #2
 800444a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800444c:	e02a      	b.n	80044a4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	429a      	cmp	r2, r3
 8004462:	d902      	bls.n	800446a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	3303      	adds	r3, #3
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68d9      	ldr	r1, [r3, #12]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	4603      	mov	r3, r0
 8004486:	6978      	ldr	r0, [r7, #20]
 8004488:	f005 f902 	bl	8009690 <USB_WritePacket>

    ep->xfer_buff  += len;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	441a      	add	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	441a      	add	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d809      	bhi.n	80044ce <PCD_WriteEmptyTxFifo+0xde>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d203      	bcs.n	80044ce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1bf      	bne.n	800444e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d811      	bhi.n	80044fe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	2201      	movs	r2, #1
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	6939      	ldr	r1, [r7, #16]
 80044f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044fa:	4013      	ands	r3, r2
 80044fc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3720      	adds	r7, #32
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	333c      	adds	r3, #60	@ 0x3c
 8004520:	3304      	adds	r3, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	799b      	ldrb	r3, [r3, #6]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d17b      	bne.n	8004636 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d015      	beq.n	8004574 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	4a61      	ldr	r2, [pc, #388]	@ (80046d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	f240 80b9 	bls.w	80046c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80b3 	beq.w	80046c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800456a:	461a      	mov	r2, r3
 800456c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004570:	6093      	str	r3, [r2, #8]
 8004572:	e0a7      	b.n	80046c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800458a:	461a      	mov	r2, r3
 800458c:	2320      	movs	r3, #32
 800458e:	6093      	str	r3, [r2, #8]
 8004590:	e098      	b.n	80046c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	f040 8093 	bne.w	80046c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	4a4b      	ldr	r2, [pc, #300]	@ (80046d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d90f      	bls.n	80045c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045bc:	461a      	mov	r2, r3
 80045be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045c2:	6093      	str	r3, [r2, #8]
 80045c4:	e07e      	b.n	80046c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	4413      	add	r3, r2
 80045d8:	3304      	adds	r3, #4
 80045da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1a      	ldr	r2, [r3, #32]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	0159      	lsls	r1, r3, #5
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	440b      	add	r3, r1
 80045e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f2:	1ad2      	subs	r2, r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d114      	bne.n	8004628 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004610:	461a      	mov	r2, r3
 8004612:	2101      	movs	r1, #1
 8004614:	f005 fad2 	bl	8009bbc <USB_EP0_OutStart>
 8004618:	e006      	b.n	8004628 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	441a      	add	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	4619      	mov	r1, r3
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f005 fdc9 	bl	800a1c6 <HAL_PCD_DataOutStageCallback>
 8004634:	e046      	b.n	80046c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	4a26      	ldr	r2, [pc, #152]	@ (80046d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d124      	bne.n	8004688 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004654:	461a      	mov	r2, r3
 8004656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800465a:	6093      	str	r3, [r2, #8]
 800465c:	e032      	b.n	80046c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004674:	461a      	mov	r2, r3
 8004676:	2320      	movs	r3, #32
 8004678:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	4619      	mov	r1, r3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f005 fda0 	bl	800a1c6 <HAL_PCD_DataOutStageCallback>
 8004686:	e01d      	b.n	80046c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d114      	bne.n	80046b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d108      	bne.n	80046b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046b0:	461a      	mov	r2, r3
 80046b2:	2100      	movs	r1, #0
 80046b4:	f005 fa82 	bl	8009bbc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f005 fd81 	bl	800a1c6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	4f54300a 	.word	0x4f54300a
 80046d4:	4f54310a 	.word	0x4f54310a

080046d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	333c      	adds	r3, #60	@ 0x3c
 80046f0:	3304      	adds	r3, #4
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a15      	ldr	r2, [pc, #84]	@ (8004760 <PCD_EP_OutSetupPacket_int+0x88>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d90e      	bls.n	800472c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004724:	461a      	mov	r2, r3
 8004726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800472a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f005 fd38 	bl	800a1a2 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4a0a      	ldr	r2, [pc, #40]	@ (8004760 <PCD_EP_OutSetupPacket_int+0x88>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d90c      	bls.n	8004754 <PCD_EP_OutSetupPacket_int+0x7c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	799b      	ldrb	r3, [r3, #6]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d108      	bne.n	8004754 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800474c:	461a      	mov	r2, r3
 800474e:	2101      	movs	r1, #1
 8004750:	f005 fa34 	bl	8009bbc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	4f54300a 	.word	0x4f54300a

08004764 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
 8004770:	4613      	mov	r3, r2
 8004772:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004782:	883b      	ldrh	r3, [r7, #0]
 8004784:	0419      	lsls	r1, r3, #16
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	430a      	orrs	r2, r1
 800478e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004790:	e028      	b.n	80047e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	0c1b      	lsrs	r3, r3, #16
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	4413      	add	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]
 80047a4:	e00d      	b.n	80047c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	3340      	adds	r3, #64	@ 0x40
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	0c1b      	lsrs	r3, r3, #16
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	4413      	add	r3, r2
 80047ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	3301      	adds	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
 80047c2:	7bfa      	ldrb	r2, [r7, #15]
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d3ec      	bcc.n	80047a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047cc:	883b      	ldrh	r3, [r7, #0]
 80047ce:	0418      	lsls	r0, r3, #16
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	4302      	orrs	r2, r0
 80047dc:	3340      	adds	r3, #64	@ 0x40
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	460b      	mov	r3, r1
 80047fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	887a      	ldrh	r2, [r7, #2]
 8004804:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004846:	f043 0303 	orr.w	r3, r3, #3
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004864:	4b39      	ldr	r3, [pc, #228]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004868:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800486c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d10b      	bne.n	800488e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487c:	d905      	bls.n	800488a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800487e:	4b33      	ldr	r3, [pc, #204]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	4a32      	ldr	r2, [pc, #200]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004888:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e057      	b.n	800493e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004894:	d90a      	bls.n	80048ac <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004896:	4b2d      	ldr	r3, [pc, #180]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	4a2a      	ldr	r2, [pc, #168]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80048a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048a8:	60d3      	str	r3, [r2, #12]
 80048aa:	e007      	b.n	80048bc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80048ac:	4b27      	ldr	r3, [pc, #156]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80048b4:	4925      	ldr	r1, [pc, #148]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80048bc:	4b24      	ldr	r3, [pc, #144]	@ (8004950 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a24      	ldr	r2, [pc, #144]	@ (8004954 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	2232      	movs	r2, #50	@ 0x32
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	4a21      	ldr	r2, [pc, #132]	@ (8004954 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80048d0:	fba2 2303 	umull	r2, r3, r2, r3
 80048d4:	099b      	lsrs	r3, r3, #6
 80048d6:	3301      	adds	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80048da:	e002      	b.n	80048e2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3b01      	subs	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80048e2:	4b1a      	ldr	r3, [pc, #104]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f3      	bne.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01b      	beq.n	8004932 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80048fa:	4b15      	ldr	r3, [pc, #84]	@ (8004950 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a15      	ldr	r2, [pc, #84]	@ (8004954 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	099b      	lsrs	r3, r3, #6
 8004906:	2232      	movs	r2, #50	@ 0x32
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	4a11      	ldr	r2, [pc, #68]	@ (8004954 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004918:	e002      	b.n	8004920 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3b01      	subs	r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004920:	4b0a      	ldr	r3, [pc, #40]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f3      	bne.n	800491a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e000      	b.n	800493e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	46020800 	.word	0x46020800
 8004950:	20000000 	.word	0x20000000
 8004954:	10624dd3 	.word	0x10624dd3

08004958 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800495c:	4b04      	ldr	r3, [pc, #16]	@ (8004970 <HAL_PWREx_GetVoltageRange+0x18>)
 800495e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	46020800 	.word	0x46020800

08004974 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004978:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <HAL_PWREx_EnableVddUSB+0x1c>)
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	4a04      	ldr	r2, [pc, #16]	@ (8004990 <HAL_PWREx_EnableVddUSB+0x1c>)
 800497e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004982:	6113      	str	r3, [r2, #16]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	46020800 	.word	0x46020800

08004994 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004998:	4b05      	ldr	r3, [pc, #20]	@ (80049b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	4a04      	ldr	r2, [pc, #16]	@ (80049b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800499e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049a2:	6113      	str	r3, [r2, #16]
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	46020800 	.word	0x46020800

080049b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08e      	sub	sp, #56	@ 0x38
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80049bc:	2300      	movs	r3, #0
 80049be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f000 bec8 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ce:	4b99      	ldr	r3, [pc, #612]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d8:	4b96      	ldr	r3, [pc, #600]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 816c 	beq.w	8004cc8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <HAL_RCC_OscConfig+0x52>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	f040 80de 	bne.w	8004bba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	f040 80da 	bne.w	8004bba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f000 bea5 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a18:	4b86      	ldr	r3, [pc, #536]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d004      	beq.n	8004a2e <HAL_RCC_OscConfig+0x7a>
 8004a24:	4b83      	ldr	r3, [pc, #524]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004a2c:	e005      	b.n	8004a3a <HAL_RCC_OscConfig+0x86>
 8004a2e:	4b81      	ldr	r3, [pc, #516]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d255      	bcs.n	8004aea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 f99d 	bl	8005d88 <RCC_SetFlashLatencyFromMSIRange>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f000 be82 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a5a:	4b76      	ldr	r3, [pc, #472]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	4a75      	ldr	r2, [pc, #468]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a64:	6093      	str	r3, [r2, #8]
 8004a66:	4b73      	ldr	r3, [pc, #460]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	4970      	ldr	r1, [pc, #448]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a80:	d309      	bcc.n	8004a96 <HAL_RCC_OscConfig+0xe2>
 8004a82:	4b6c      	ldr	r3, [pc, #432]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f023 021f 	bic.w	r2, r3, #31
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	4969      	ldr	r1, [pc, #420]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60cb      	str	r3, [r1, #12]
 8004a94:	e07e      	b.n	8004b94 <HAL_RCC_OscConfig+0x1e0>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da0a      	bge.n	8004ab4 <HAL_RCC_OscConfig+0x100>
 8004a9e:	4b65      	ldr	r3, [pc, #404]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	015b      	lsls	r3, r3, #5
 8004aac:	4961      	ldr	r1, [pc, #388]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60cb      	str	r3, [r1, #12]
 8004ab2:	e06f      	b.n	8004b94 <HAL_RCC_OscConfig+0x1e0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004abc:	d30a      	bcc.n	8004ad4 <HAL_RCC_OscConfig+0x120>
 8004abe:	4b5d      	ldr	r3, [pc, #372]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	029b      	lsls	r3, r3, #10
 8004acc:	4959      	ldr	r1, [pc, #356]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60cb      	str	r3, [r1, #12]
 8004ad2:	e05f      	b.n	8004b94 <HAL_RCC_OscConfig+0x1e0>
 8004ad4:	4b57      	ldr	r3, [pc, #348]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	03db      	lsls	r3, r3, #15
 8004ae2:	4954      	ldr	r1, [pc, #336]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60cb      	str	r3, [r1, #12]
 8004ae8:	e054      	b.n	8004b94 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004aea:	4b52      	ldr	r3, [pc, #328]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	4a51      	ldr	r2, [pc, #324]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004af0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004af4:	6093      	str	r3, [r2, #8]
 8004af6:	4b4f      	ldr	r3, [pc, #316]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	494c      	ldr	r1, [pc, #304]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004b10:	d309      	bcc.n	8004b26 <HAL_RCC_OscConfig+0x172>
 8004b12:	4b48      	ldr	r3, [pc, #288]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f023 021f 	bic.w	r2, r3, #31
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	4945      	ldr	r1, [pc, #276]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60cb      	str	r3, [r1, #12]
 8004b24:	e028      	b.n	8004b78 <HAL_RCC_OscConfig+0x1c4>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da0a      	bge.n	8004b44 <HAL_RCC_OscConfig+0x190>
 8004b2e:	4b41      	ldr	r3, [pc, #260]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	015b      	lsls	r3, r3, #5
 8004b3c:	493d      	ldr	r1, [pc, #244]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60cb      	str	r3, [r1, #12]
 8004b42:	e019      	b.n	8004b78 <HAL_RCC_OscConfig+0x1c4>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b4c:	d30a      	bcc.n	8004b64 <HAL_RCC_OscConfig+0x1b0>
 8004b4e:	4b39      	ldr	r3, [pc, #228]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	029b      	lsls	r3, r3, #10
 8004b5c:	4935      	ldr	r1, [pc, #212]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60cb      	str	r3, [r1, #12]
 8004b62:	e009      	b.n	8004b78 <HAL_RCC_OscConfig+0x1c4>
 8004b64:	4b33      	ldr	r3, [pc, #204]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	03db      	lsls	r3, r3, #15
 8004b72:	4930      	ldr	r1, [pc, #192]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 f900 	bl	8005d88 <RCC_SetFlashLatencyFromMSIRange>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f000 bde5 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004b94:	f001 f8de 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b98:	4b27      	ldr	r3, [pc, #156]	@ (8004c38 <HAL_RCC_OscConfig+0x284>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fc fdc9 	bl	8001734 <HAL_InitTick>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 808a 	beq.w	8004cc6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bb6:	f000 bdd2 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d066      	beq.n	8004c90 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bce:	f7fc fe3b 	bl	8001848 <HAL_GetTick>
 8004bd2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004bd4:	e009      	b.n	8004bea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bd6:	f7fc fe37 	bl	8001848 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d902      	bls.n	8004bea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	f000 bdba 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004bea:	4b12      	ldr	r3, [pc, #72]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0ef      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004bfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c00:	6093      	str	r3, [r2, #8]
 8004c02:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	4909      	ldr	r1, [pc, #36]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c18:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004c1c:	d30e      	bcc.n	8004c3c <HAL_RCC_OscConfig+0x288>
 8004c1e:	4b05      	ldr	r3, [pc, #20]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f023 021f 	bic.w	r2, r3, #31
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	4902      	ldr	r1, [pc, #8]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60cb      	str	r3, [r1, #12]
 8004c30:	e04a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x314>
 8004c32:	bf00      	nop
 8004c34:	46020c00 	.word	0x46020c00
 8004c38:	2000006c 	.word	0x2000006c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	da0a      	bge.n	8004c5a <HAL_RCC_OscConfig+0x2a6>
 8004c44:	4b98      	ldr	r3, [pc, #608]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	015b      	lsls	r3, r3, #5
 8004c52:	4995      	ldr	r1, [pc, #596]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60cb      	str	r3, [r1, #12]
 8004c58:	e036      	b.n	8004cc8 <HAL_RCC_OscConfig+0x314>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c62:	d30a      	bcc.n	8004c7a <HAL_RCC_OscConfig+0x2c6>
 8004c64:	4b90      	ldr	r3, [pc, #576]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	029b      	lsls	r3, r3, #10
 8004c72:	498d      	ldr	r1, [pc, #564]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60cb      	str	r3, [r1, #12]
 8004c78:	e026      	b.n	8004cc8 <HAL_RCC_OscConfig+0x314>
 8004c7a:	4b8b      	ldr	r3, [pc, #556]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	03db      	lsls	r3, r3, #15
 8004c88:	4987      	ldr	r1, [pc, #540]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60cb      	str	r3, [r1, #12]
 8004c8e:	e01b      	b.n	8004cc8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004c90:	4b85      	ldr	r3, [pc, #532]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a84      	ldr	r2, [pc, #528]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c9c:	f7fc fdd4 	bl	8001848 <HAL_GetTick>
 8004ca0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004ca2:	e009      	b.n	8004cb8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ca4:	f7fc fdd0 	bl	8001848 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d902      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	f000 bd53 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1ef      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x2f0>
 8004cc4:	e000      	b.n	8004cc8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004cc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 808b 	beq.w	8004dec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x334>
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	2b0c      	cmp	r3, #12
 8004ce0:	d109      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d106      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d17d      	bne.n	8004dec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f000 bd34 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x35a>
 8004d00:	4b69      	ldr	r3, [pc, #420]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a68      	ldr	r2, [pc, #416]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e041      	b.n	8004d92 <HAL_RCC_OscConfig+0x3de>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d16:	d112      	bne.n	8004d3e <HAL_RCC_OscConfig+0x38a>
 8004d18:	4b63      	ldr	r3, [pc, #396]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a62      	ldr	r2, [pc, #392]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	4b60      	ldr	r3, [pc, #384]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a5f      	ldr	r2, [pc, #380]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d2a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b5d      	ldr	r3, [pc, #372]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a5c      	ldr	r2, [pc, #368]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	e029      	b.n	8004d92 <HAL_RCC_OscConfig+0x3de>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004d46:	d112      	bne.n	8004d6e <HAL_RCC_OscConfig+0x3ba>
 8004d48:	4b57      	ldr	r3, [pc, #348]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a56      	ldr	r2, [pc, #344]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	4b54      	ldr	r3, [pc, #336]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a53      	ldr	r2, [pc, #332]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b51      	ldr	r3, [pc, #324]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a50      	ldr	r2, [pc, #320]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	e011      	b.n	8004d92 <HAL_RCC_OscConfig+0x3de>
 8004d6e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a4d      	ldr	r2, [pc, #308]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	4b48      	ldr	r3, [pc, #288]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a47      	ldr	r2, [pc, #284]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004d8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004d90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d014      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004d9a:	f7fc fd55 	bl	8001848 <HAL_GetTick>
 8004d9e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da0:	e009      	b.n	8004db6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da2:	f7fc fd51 	bl	8001848 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b64      	cmp	r3, #100	@ 0x64
 8004dae:	d902      	bls.n	8004db6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	f000 bcd4 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004db6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0ef      	beq.n	8004da2 <HAL_RCC_OscConfig+0x3ee>
 8004dc2:	e013      	b.n	8004dec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004dc4:	f7fc fd40 	bl	8001848 <HAL_GetTick>
 8004dc8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dca:	e009      	b.n	8004de0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dcc:	f7fc fd3c 	bl	8001848 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	@ 0x64
 8004dd8:	d902      	bls.n	8004de0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	f000 bcbf 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004de0:	4b31      	ldr	r3, [pc, #196]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ef      	bne.n	8004dcc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d05f      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d005      	beq.n	8004e0a <HAL_RCC_OscConfig+0x456>
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e00:	2b0c      	cmp	r3, #12
 8004e02:	d114      	bne.n	8004e2e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d111      	bne.n	8004e2e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f000 bca3 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004e18:	4b23      	ldr	r3, [pc, #140]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	4920      	ldr	r1, [pc, #128]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e2c:	e044      	b.n	8004eb8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d024      	beq.n	8004e80 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004e36:	4b1c      	ldr	r3, [pc, #112]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e42:	f7fc fd01 	bl	8001848 <HAL_GetTick>
 8004e46:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e48:	e009      	b.n	8004e5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e4a:	f7fc fcfd 	bl	8001848 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d902      	bls.n	8004e5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	f000 bc80 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e5e:	4b12      	ldr	r3, [pc, #72]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0ef      	beq.n	8004e4a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	490b      	ldr	r1, [pc, #44]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	610b      	str	r3, [r1, #16]
 8004e7e:	e01b      	b.n	8004eb8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004e80:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a08      	ldr	r2, [pc, #32]	@ (8004ea8 <HAL_RCC_OscConfig+0x4f4>)
 8004e86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e8a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e8c:	f7fc fcdc 	bl	8001848 <HAL_GetTick>
 8004e90:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e94:	f7fc fcd8 	bl	8001848 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d904      	bls.n	8004eac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	f000 bc5b 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
 8004ea8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eac:	4baf      	ldr	r3, [pc, #700]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ed      	bne.n	8004e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80c8 	beq.w	8005056 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ecc:	4ba7      	ldr	r3, [pc, #668]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d111      	bne.n	8004efe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eda:	4ba4      	ldr	r3, [pc, #656]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee0:	4aa2      	ldr	r2, [pc, #648]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004ee2:	f043 0304 	orr.w	r3, r3, #4
 8004ee6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004eea:	4ba0      	ldr	r3, [pc, #640]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004efe:	4b9c      	ldr	r3, [pc, #624]	@ (8005170 <HAL_RCC_OscConfig+0x7bc>)
 8004f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d119      	bne.n	8004f3e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004f0a:	4b99      	ldr	r3, [pc, #612]	@ (8005170 <HAL_RCC_OscConfig+0x7bc>)
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0e:	4a98      	ldr	r2, [pc, #608]	@ (8005170 <HAL_RCC_OscConfig+0x7bc>)
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f16:	f7fc fc97 	bl	8001848 <HAL_GetTick>
 8004f1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f1c:	e009      	b.n	8004f32 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1e:	f7fc fc93 	bl	8001848 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d902      	bls.n	8004f32 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	f000 bc16 	b.w	800575e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f32:	4b8f      	ldr	r3, [pc, #572]	@ (8005170 <HAL_RCC_OscConfig+0x7bc>)
 8004f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0ef      	beq.n	8004f1e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d05f      	beq.n	8005006 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004f46:	4b89      	ldr	r3, [pc, #548]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f4c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d037      	beq.n	8004fcc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d006      	beq.n	8004f74 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e3f4      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01b      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004f7e:	4b7b      	ldr	r3, [pc, #492]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f84:	4a79      	ldr	r2, [pc, #484]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004f86:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004f8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004f8e:	f7fc fc5b 	bl	8001848 <HAL_GetTick>
 8004f92:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f96:	f7fc fc57 	bl	8001848 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e3da      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004fa8:	4b70      	ldr	r3, [pc, #448]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1ef      	bne.n	8004f96 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fbc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	4969      	ldr	r1, [pc, #420]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004fcc:	4b67      	ldr	r3, [pc, #412]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fd2:	4a66      	ldr	r2, [pc, #408]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004fd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004fdc:	f7fc fc34 	bl	8001848 <HAL_GetTick>
 8004fe0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe4:	f7fc fc30 	bl	8001848 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e3b3      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8004ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ef      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x630>
 8005004:	e01b      	b.n	800503e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005006:	4b59      	ldr	r3, [pc, #356]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8005008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800500c:	4a57      	ldr	r2, [pc, #348]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 800500e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005012:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005016:	f7fc fc17 	bl	8001848 <HAL_GetTick>
 800501a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800501e:	f7fc fc13 	bl	8001848 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b05      	cmp	r3, #5
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e396      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005030:	4b4e      	ldr	r3, [pc, #312]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8005032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005036:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1ef      	bne.n	800501e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800503e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005046:	4b49      	ldr	r3, [pc, #292]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8005048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800504c:	4a47      	ldr	r2, [pc, #284]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 800504e:	f023 0304 	bic.w	r3, r3, #4
 8005052:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8111 	beq.w	8005286 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506a:	4b40      	ldr	r3, [pc, #256]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 800506c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d111      	bne.n	800509c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005078:	4b3c      	ldr	r3, [pc, #240]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 800507a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800507e:	4a3b      	ldr	r2, [pc, #236]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8005080:	f043 0304 	orr.w	r3, r3, #4
 8005084:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005088:	4b38      	ldr	r3, [pc, #224]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 800508a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800509c:	4b34      	ldr	r3, [pc, #208]	@ (8005170 <HAL_RCC_OscConfig+0x7bc>)
 800509e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d118      	bne.n	80050da <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80050a8:	4b31      	ldr	r3, [pc, #196]	@ (8005170 <HAL_RCC_OscConfig+0x7bc>)
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	4a30      	ldr	r2, [pc, #192]	@ (8005170 <HAL_RCC_OscConfig+0x7bc>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b4:	f7fc fbc8 	bl	8001848 <HAL_GetTick>
 80050b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050bc:	f7fc fbc4 	bl	8001848 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e347      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050ce:	4b28      	ldr	r3, [pc, #160]	@ (8005170 <HAL_RCC_OscConfig+0x7bc>)
 80050d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01f      	beq.n	8005126 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d010      	beq.n	8005114 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050f2:	4b1e      	ldr	r3, [pc, #120]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 80050f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050f8:	4a1c      	ldr	r2, [pc, #112]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005102:	4b1a      	ldr	r3, [pc, #104]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8005104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005108:	4a18      	ldr	r2, [pc, #96]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005112:	e018      	b.n	8005146 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005114:	4b15      	ldr	r3, [pc, #84]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8005116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800511a:	4a14      	ldr	r2, [pc, #80]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005124:	e00f      	b.n	8005146 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005126:	4b11      	ldr	r3, [pc, #68]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8005128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800512c:	4a0f      	ldr	r2, [pc, #60]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005136:	4b0d      	ldr	r3, [pc, #52]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 8005138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800513c:	4a0b      	ldr	r2, [pc, #44]	@ (800516c <HAL_RCC_OscConfig+0x7b8>)
 800513e:	f023 0304 	bic.w	r3, r3, #4
 8005142:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d057      	beq.n	80051fe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800514e:	f7fc fb7b 	bl	8001848 <HAL_GetTick>
 8005152:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005154:	e00e      	b.n	8005174 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005156:	f7fc fb77 	bl	8001848 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005164:	4293      	cmp	r3, r2
 8005166:	d905      	bls.n	8005174 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e2f8      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
 800516c:	46020c00 	.word	0x46020c00
 8005170:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005174:	4b9c      	ldr	r3, [pc, #624]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 8005176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0e9      	beq.n	8005156 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01b      	beq.n	80051c6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800518e:	4b96      	ldr	r3, [pc, #600]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 8005190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005194:	4a94      	ldr	r2, [pc, #592]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 8005196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800519a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800519e:	e00a      	b.n	80051b6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a0:	f7fc fb52 	bl	8001848 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e2d3      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80051b6:	4b8c      	ldr	r3, [pc, #560]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80051b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ed      	beq.n	80051a0 <HAL_RCC_OscConfig+0x7ec>
 80051c4:	e053      	b.n	800526e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80051c6:	4b88      	ldr	r3, [pc, #544]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80051c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051cc:	4a86      	ldr	r2, [pc, #536]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80051ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d8:	f7fc fb36 	bl	8001848 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e2b7      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051ee:	4b7e      	ldr	r3, [pc, #504]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80051f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1ed      	bne.n	80051d8 <HAL_RCC_OscConfig+0x824>
 80051fc:	e037      	b.n	800526e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80051fe:	f7fc fb23 	bl	8001848 <HAL_GetTick>
 8005202:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005204:	e00a      	b.n	800521c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005206:	f7fc fb1f 	bl	8001848 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e2a0      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800521c:	4b72      	ldr	r3, [pc, #456]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 800521e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ed      	bne.n	8005206 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800522a:	4b6f      	ldr	r3, [pc, #444]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 800522c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01a      	beq.n	800526e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005238:	4b6b      	ldr	r3, [pc, #428]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 800523a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800523e:	4a6a      	ldr	r2, [pc, #424]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 8005240:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005244:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005248:	e00a      	b.n	8005260 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524a:	f7fc fafd 	bl	8001848 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005258:	4293      	cmp	r3, r2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e27e      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005260:	4b61      	ldr	r3, [pc, #388]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 8005262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1ed      	bne.n	800524a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800526e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005272:	2b01      	cmp	r3, #1
 8005274:	d107      	bne.n	8005286 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005276:	4b5c      	ldr	r3, [pc, #368]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 8005278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527c:	4a5a      	ldr	r2, [pc, #360]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 800527e:	f023 0304 	bic.w	r3, r3, #4
 8005282:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d036      	beq.n	8005300 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d019      	beq.n	80052ce <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800529a:	4b53      	ldr	r3, [pc, #332]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a52      	ldr	r2, [pc, #328]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80052a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052a4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052a6:	f7fc facf 	bl	8001848 <HAL_GetTick>
 80052aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052ae:	f7fc facb 	bl	8001848 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e24e      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80052c0:	4b49      	ldr	r3, [pc, #292]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x8fa>
 80052cc:	e018      	b.n	8005300 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80052ce:	4b46      	ldr	r3, [pc, #280]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a45      	ldr	r2, [pc, #276]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80052d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052da:	f7fc fab5 	bl	8001848 <HAL_GetTick>
 80052de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052e2:	f7fc fab1 	bl	8001848 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e234      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80052f4:	4b3c      	ldr	r3, [pc, #240]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f0      	bne.n	80052e2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005308:	2b00      	cmp	r3, #0
 800530a:	d036      	beq.n	800537a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005310:	2b00      	cmp	r3, #0
 8005312:	d019      	beq.n	8005348 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005314:	4b34      	ldr	r3, [pc, #208]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a33      	ldr	r2, [pc, #204]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 800531a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800531e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005320:	f7fc fa92 	bl	8001848 <HAL_GetTick>
 8005324:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005328:	f7fc fa8e 	bl	8001848 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e211      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800533a:	4b2b      	ldr	r3, [pc, #172]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0x974>
 8005346:	e018      	b.n	800537a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005348:	4b27      	ldr	r3, [pc, #156]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a26      	ldr	r2, [pc, #152]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 800534e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005352:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005354:	f7fc fa78 	bl	8001848 <HAL_GetTick>
 8005358:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800535c:	f7fc fa74 	bl	8001848 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e1f7      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800536e:	4b1e      	ldr	r3, [pc, #120]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d07f      	beq.n	8005486 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800538a:	2b00      	cmp	r3, #0
 800538c:	d062      	beq.n	8005454 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800538e:	4b16      	ldr	r3, [pc, #88]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	4a15      	ldr	r2, [pc, #84]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 8005394:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005398:	6093      	str	r3, [r2, #8]
 800539a:	4b13      	ldr	r3, [pc, #76]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a6:	4910      	ldr	r1, [pc, #64]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80053b4:	d309      	bcc.n	80053ca <HAL_RCC_OscConfig+0xa16>
 80053b6:	4b0c      	ldr	r3, [pc, #48]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f023 021f 	bic.w	r2, r3, #31
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	4909      	ldr	r1, [pc, #36]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60cb      	str	r3, [r1, #12]
 80053c8:	e02a      	b.n	8005420 <HAL_RCC_OscConfig+0xa6c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	da0c      	bge.n	80053ec <HAL_RCC_OscConfig+0xa38>
 80053d2:	4b05      	ldr	r3, [pc, #20]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	015b      	lsls	r3, r3, #5
 80053e0:	4901      	ldr	r1, [pc, #4]	@ (80053e8 <HAL_RCC_OscConfig+0xa34>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60cb      	str	r3, [r1, #12]
 80053e6:	e01b      	b.n	8005420 <HAL_RCC_OscConfig+0xa6c>
 80053e8:	46020c00 	.word	0x46020c00
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f4:	d30a      	bcc.n	800540c <HAL_RCC_OscConfig+0xa58>
 80053f6:	4ba1      	ldr	r3, [pc, #644]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	029b      	lsls	r3, r3, #10
 8005404:	499d      	ldr	r1, [pc, #628]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005406:	4313      	orrs	r3, r2
 8005408:	60cb      	str	r3, [r1, #12]
 800540a:	e009      	b.n	8005420 <HAL_RCC_OscConfig+0xa6c>
 800540c:	4b9b      	ldr	r3, [pc, #620]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	03db      	lsls	r3, r3, #15
 800541a:	4998      	ldr	r1, [pc, #608]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 800541c:	4313      	orrs	r3, r2
 800541e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005420:	4b96      	ldr	r3, [pc, #600]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a95      	ldr	r2, [pc, #596]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005426:	f043 0310 	orr.w	r3, r3, #16
 800542a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800542c:	f7fc fa0c 	bl	8001848 <HAL_GetTick>
 8005430:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005434:	f7fc fa08 	bl	8001848 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e18b      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005446:	4b8d      	ldr	r3, [pc, #564]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCC_OscConfig+0xa80>
 8005452:	e018      	b.n	8005486 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005454:	4b89      	ldr	r3, [pc, #548]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a88      	ldr	r2, [pc, #544]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 800545a:	f023 0310 	bic.w	r3, r3, #16
 800545e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005460:	f7fc f9f2 	bl	8001848 <HAL_GetTick>
 8005464:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005468:	f7fc f9ee 	bl	8001848 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e171      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800547a:	4b80      	ldr	r3, [pc, #512]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 8166 	beq.w	800575c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005490:	2300      	movs	r3, #0
 8005492:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005496:	4b79      	ldr	r3, [pc, #484]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f003 030c 	and.w	r3, r3, #12
 800549e:	2b0c      	cmp	r3, #12
 80054a0:	f000 80f2 	beq.w	8005688 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	f040 80c5 	bne.w	8005638 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80054ae:	4b73      	ldr	r3, [pc, #460]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a72      	ldr	r2, [pc, #456]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80054b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80054ba:	f7fc f9c5 	bl	8001848 <HAL_GetTick>
 80054be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c2:	f7fc f9c1 	bl	8001848 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e144      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80054d4:	4b69      	ldr	r3, [pc, #420]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f0      	bne.n	80054c2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054e0:	4b66      	ldr	r3, [pc, #408]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80054e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d111      	bne.n	8005512 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80054ee:	4b63      	ldr	r3, [pc, #396]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80054f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f4:	4a61      	ldr	r2, [pc, #388]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80054f6:	f043 0304 	orr.w	r3, r3, #4
 80054fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80054fe:	4b5f      	ldr	r3, [pc, #380]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005500:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005512:	4b5b      	ldr	r3, [pc, #364]	@ (8005680 <HAL_RCC_OscConfig+0xccc>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800551a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800551e:	d102      	bne.n	8005526 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005526:	4b56      	ldr	r3, [pc, #344]	@ (8005680 <HAL_RCC_OscConfig+0xccc>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4a55      	ldr	r2, [pc, #340]	@ (8005680 <HAL_RCC_OscConfig+0xccc>)
 800552c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005530:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005532:	4b52      	ldr	r3, [pc, #328]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005546:	3a01      	subs	r2, #1
 8005548:	0212      	lsls	r2, r2, #8
 800554a:	4311      	orrs	r1, r2
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005550:	430a      	orrs	r2, r1
 8005552:	494a      	ldr	r1, [pc, #296]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005554:	4313      	orrs	r3, r2
 8005556:	628b      	str	r3, [r1, #40]	@ 0x28
 8005558:	4b48      	ldr	r3, [pc, #288]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 800555a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800555c:	4b49      	ldr	r3, [pc, #292]	@ (8005684 <HAL_RCC_OscConfig+0xcd0>)
 800555e:	4013      	ands	r3, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005564:	3a01      	subs	r2, #1
 8005566:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800556e:	3a01      	subs	r2, #1
 8005570:	0252      	lsls	r2, r2, #9
 8005572:	b292      	uxth	r2, r2
 8005574:	4311      	orrs	r1, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800557a:	3a01      	subs	r2, #1
 800557c:	0412      	lsls	r2, r2, #16
 800557e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005582:	4311      	orrs	r1, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005588:	3a01      	subs	r2, #1
 800558a:	0612      	lsls	r2, r2, #24
 800558c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005590:	430a      	orrs	r2, r1
 8005592:	493a      	ldr	r1, [pc, #232]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005594:	4313      	orrs	r3, r2
 8005596:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005598:	4b38      	ldr	r3, [pc, #224]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 800559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559c:	4a37      	ldr	r2, [pc, #220]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 800559e:	f023 0310 	bic.w	r3, r3, #16
 80055a2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a8:	4a34      	ldr	r2, [pc, #208]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80055ae:	4b33      	ldr	r3, [pc, #204]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80055b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b2:	4a32      	ldr	r2, [pc, #200]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80055b4:	f043 0310 	orr.w	r3, r3, #16
 80055b8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80055ba:	4b30      	ldr	r3, [pc, #192]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80055bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055be:	f023 020c 	bic.w	r2, r3, #12
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c6:	492d      	ldr	r1, [pc, #180]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80055cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d105      	bne.n	80055e0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80055d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005680 <HAL_RCC_OscConfig+0xccc>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	4a29      	ldr	r2, [pc, #164]	@ (8005680 <HAL_RCC_OscConfig+0xccc>)
 80055da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055de:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80055e0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d107      	bne.n	80055f8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80055e8:	4b24      	ldr	r3, [pc, #144]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80055ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ee:	4a23      	ldr	r2, [pc, #140]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80055f0:	f023 0304 	bic.w	r3, r3, #4
 80055f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80055f8:	4b20      	ldr	r3, [pc, #128]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1f      	ldr	r2, [pc, #124]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 80055fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005602:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005604:	f7fc f920 	bl	8001848 <HAL_GetTick>
 8005608:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800560c:	f7fc f91c 	bl	8001848 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e09f      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800561e:	4b17      	ldr	r3, [pc, #92]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800562a:	4b14      	ldr	r3, [pc, #80]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 800562c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562e:	4a13      	ldr	r2, [pc, #76]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005634:	6293      	str	r3, [r2, #40]	@ 0x28
 8005636:	e091      	b.n	800575c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005638:	4b10      	ldr	r3, [pc, #64]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a0f      	ldr	r2, [pc, #60]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 800563e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005642:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005644:	f7fc f900 	bl	8001848 <HAL_GetTick>
 8005648:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564c:	f7fc f8fc 	bl	8001848 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e07f      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800565e:	4b07      	ldr	r3, [pc, #28]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800566a:	4b04      	ldr	r3, [pc, #16]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	4a03      	ldr	r2, [pc, #12]	@ (800567c <HAL_RCC_OscConfig+0xcc8>)
 8005670:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005674:	f023 0303 	bic.w	r3, r3, #3
 8005678:	6293      	str	r3, [r2, #40]	@ 0x28
 800567a:	e06f      	b.n	800575c <HAL_RCC_OscConfig+0xda8>
 800567c:	46020c00 	.word	0x46020c00
 8005680:	46020800 	.word	0x46020800
 8005684:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005688:	4b37      	ldr	r3, [pc, #220]	@ (8005768 <HAL_RCC_OscConfig+0xdb4>)
 800568a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800568e:	4b36      	ldr	r3, [pc, #216]	@ (8005768 <HAL_RCC_OscConfig+0xdb4>)
 8005690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005692:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005698:	2b01      	cmp	r3, #1
 800569a:	d039      	beq.n	8005710 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0203 	and.w	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d132      	bne.n	8005710 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d129      	bne.n	8005710 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d122      	bne.n	8005710 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d11a      	bne.n	8005710 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	0a5b      	lsrs	r3, r3, #9
 80056de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d111      	bne.n	8005710 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d108      	bne.n	8005710 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	0e1b      	lsrs	r3, r3, #24
 8005702:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800570c:	429a      	cmp	r2, r3
 800570e:	d001      	beq.n	8005714 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e024      	b.n	800575e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005714:	4b14      	ldr	r3, [pc, #80]	@ (8005768 <HAL_RCC_OscConfig+0xdb4>)
 8005716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005718:	08db      	lsrs	r3, r3, #3
 800571a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005722:	429a      	cmp	r2, r3
 8005724:	d01a      	beq.n	800575c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005726:	4b10      	ldr	r3, [pc, #64]	@ (8005768 <HAL_RCC_OscConfig+0xdb4>)
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	4a0f      	ldr	r2, [pc, #60]	@ (8005768 <HAL_RCC_OscConfig+0xdb4>)
 800572c:	f023 0310 	bic.w	r3, r3, #16
 8005730:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005732:	f7fc f889 	bl	8001848 <HAL_GetTick>
 8005736:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005738:	bf00      	nop
 800573a:	f7fc f885 	bl	8001848 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005742:	4293      	cmp	r3, r2
 8005744:	d0f9      	beq.n	800573a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574a:	4a07      	ldr	r2, [pc, #28]	@ (8005768 <HAL_RCC_OscConfig+0xdb4>)
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005750:	4b05      	ldr	r3, [pc, #20]	@ (8005768 <HAL_RCC_OscConfig+0xdb4>)
 8005752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005754:	4a04      	ldr	r2, [pc, #16]	@ (8005768 <HAL_RCC_OscConfig+0xdb4>)
 8005756:	f043 0310 	orr.w	r3, r3, #16
 800575a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3738      	adds	r7, #56	@ 0x38
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	46020c00 	.word	0x46020c00

0800576c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e1d9      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005780:	4b9b      	ldr	r3, [pc, #620]	@ (80059f0 <HAL_RCC_ClockConfig+0x284>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d910      	bls.n	80057b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578e:	4b98      	ldr	r3, [pc, #608]	@ (80059f0 <HAL_RCC_ClockConfig+0x284>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 020f 	bic.w	r2, r3, #15
 8005796:	4996      	ldr	r1, [pc, #600]	@ (80059f0 <HAL_RCC_ClockConfig+0x284>)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	4313      	orrs	r3, r2
 800579c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800579e:	4b94      	ldr	r3, [pc, #592]	@ (80059f0 <HAL_RCC_ClockConfig+0x284>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d001      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e1c1      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d010      	beq.n	80057de <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	695a      	ldr	r2, [r3, #20]
 80057c0:	4b8c      	ldr	r3, [pc, #560]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d908      	bls.n	80057de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80057cc:	4b89      	ldr	r3, [pc, #548]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	4986      	ldr	r1, [pc, #536]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d012      	beq.n	8005810 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	4b81      	ldr	r3, [pc, #516]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d909      	bls.n	8005810 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80057fc:	4b7d      	ldr	r3, [pc, #500]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	497a      	ldr	r1, [pc, #488]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 800580c:	4313      	orrs	r3, r2
 800580e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	4b74      	ldr	r3, [pc, #464]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005828:	429a      	cmp	r2, r3
 800582a:	d908      	bls.n	800583e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800582c:	4b71      	ldr	r3, [pc, #452]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	496e      	ldr	r1, [pc, #440]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 800583a:	4313      	orrs	r3, r2
 800583c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d010      	beq.n	800586c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	4b69      	ldr	r3, [pc, #420]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	429a      	cmp	r2, r3
 8005858:	d908      	bls.n	800586c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800585a:	4b66      	ldr	r3, [pc, #408]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f023 020f 	bic.w	r2, r3, #15
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	4963      	ldr	r1, [pc, #396]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 8005868:	4313      	orrs	r3, r2
 800586a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80d2 	beq.w	8005a1e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800587a:	2300      	movs	r3, #0
 800587c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b03      	cmp	r3, #3
 8005884:	d143      	bne.n	800590e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005886:	4b5b      	ldr	r3, [pc, #364]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 8005888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d110      	bne.n	80058b6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005894:	4b57      	ldr	r3, [pc, #348]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 8005896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800589a:	4a56      	ldr	r2, [pc, #344]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 800589c:	f043 0304 	orr.w	r3, r3, #4
 80058a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80058a4:	4b53      	ldr	r3, [pc, #332]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 80058a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80058b6:	f7fb ffc7 	bl	8001848 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80058bc:	4b4e      	ldr	r3, [pc, #312]	@ (80059f8 <HAL_RCC_ClockConfig+0x28c>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00f      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80058ca:	f7fb ffbd 	bl	8001848 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e12b      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80058dc:	4b46      	ldr	r3, [pc, #280]	@ (80059f8 <HAL_RCC_ClockConfig+0x28c>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0f0      	beq.n	80058ca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d107      	bne.n	80058fe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80058ee:	4b41      	ldr	r3, [pc, #260]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 80058f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058f4:	4a3f      	ldr	r2, [pc, #252]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 80058f6:	f023 0304 	bic.w	r3, r3, #4
 80058fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80058fe:	4b3d      	ldr	r3, [pc, #244]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d121      	bne.n	800594e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e112      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d107      	bne.n	8005926 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005916:	4b37      	ldr	r3, [pc, #220]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d115      	bne.n	800594e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e106      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d107      	bne.n	800593e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800592e:	4b31      	ldr	r3, [pc, #196]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e0fa      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800593e:	4b2d      	ldr	r3, [pc, #180]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e0f2      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800594e:	4b29      	ldr	r3, [pc, #164]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	f023 0203 	bic.w	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4926      	ldr	r1, [pc, #152]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 800595c:	4313      	orrs	r3, r2
 800595e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005960:	f7fb ff72 	bl	8001848 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d112      	bne.n	8005994 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800596e:	e00a      	b.n	8005986 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005970:	f7fb ff6a 	bl	8001848 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e0d6      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005986:	4b1b      	ldr	r3, [pc, #108]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d1ee      	bne.n	8005970 <HAL_RCC_ClockConfig+0x204>
 8005992:	e044      	b.n	8005a1e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b02      	cmp	r3, #2
 800599a:	d112      	bne.n	80059c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800599c:	e00a      	b.n	80059b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800599e:	f7fb ff53 	bl	8001848 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e0bf      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80059b4:	4b0f      	ldr	r3, [pc, #60]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f003 030c 	and.w	r3, r3, #12
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d1ee      	bne.n	800599e <HAL_RCC_ClockConfig+0x232>
 80059c0:	e02d      	b.n	8005a1e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d123      	bne.n	8005a12 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80059ca:	e00a      	b.n	80059e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059cc:	f7fb ff3c 	bl	8001848 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e0a8      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80059e2:	4b04      	ldr	r3, [pc, #16]	@ (80059f4 <HAL_RCC_ClockConfig+0x288>)
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f003 030c 	and.w	r3, r3, #12
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1ee      	bne.n	80059cc <HAL_RCC_ClockConfig+0x260>
 80059ee:	e016      	b.n	8005a1e <HAL_RCC_ClockConfig+0x2b2>
 80059f0:	40022000 	.word	0x40022000
 80059f4:	46020c00 	.word	0x46020c00
 80059f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fc:	f7fb ff24 	bl	8001848 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e090      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a12:	4b4a      	ldr	r3, [pc, #296]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d1ee      	bne.n	80059fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d010      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	4b43      	ldr	r3, [pc, #268]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d208      	bcs.n	8005a4c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005a3a:	4b40      	ldr	r3, [pc, #256]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	f023 020f 	bic.w	r2, r3, #15
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	493d      	ldr	r1, [pc, #244]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8005b40 <HAL_RCC_ClockConfig+0x3d4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d210      	bcs.n	8005a7c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b39      	ldr	r3, [pc, #228]	@ (8005b40 <HAL_RCC_ClockConfig+0x3d4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 020f 	bic.w	r2, r3, #15
 8005a62:	4937      	ldr	r1, [pc, #220]	@ (8005b40 <HAL_RCC_ClockConfig+0x3d4>)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b35      	ldr	r3, [pc, #212]	@ (8005b40 <HAL_RCC_ClockConfig+0x3d4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e05b      	b.n	8005b34 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d010      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d208      	bcs.n	8005aaa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005a98:	4b28      	ldr	r3, [pc, #160]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4925      	ldr	r1, [pc, #148]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d012      	beq.n	8005adc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	4b20      	ldr	r3, [pc, #128]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d209      	bcs.n	8005adc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	4919      	ldr	r1, [pc, #100]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0310 	and.w	r3, r3, #16
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d010      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	4b13      	ldr	r3, [pc, #76]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d208      	bcs.n	8005b0a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005af8:	4b10      	ldr	r3, [pc, #64]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	490d      	ldr	r1, [pc, #52]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005b0a:	f000 f821 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	4b0a      	ldr	r3, [pc, #40]	@ (8005b3c <HAL_RCC_ClockConfig+0x3d0>)
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	490a      	ldr	r1, [pc, #40]	@ (8005b44 <HAL_RCC_ClockConfig+0x3d8>)
 8005b1a:	5ccb      	ldrb	r3, [r1, r3]
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	4a09      	ldr	r2, [pc, #36]	@ (8005b48 <HAL_RCC_ClockConfig+0x3dc>)
 8005b22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b24:	4b09      	ldr	r3, [pc, #36]	@ (8005b4c <HAL_RCC_ClockConfig+0x3e0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fb fe03 	bl	8001734 <HAL_InitTick>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	73fb      	strb	r3, [r7, #15]

  return status;
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	46020c00 	.word	0x46020c00
 8005b40:	40022000 	.word	0x40022000
 8005b44:	0800c0e0 	.word	0x0800c0e0
 8005b48:	20000000 	.word	0x20000000
 8005b4c:	2000006c 	.word	0x2000006c

08005b50 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b08b      	sub	sp, #44	@ 0x2c
 8005b54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b5e:	4b78      	ldr	r3, [pc, #480]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f003 030c 	and.w	r3, r3, #12
 8005b66:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b68:	4b75      	ldr	r3, [pc, #468]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <HAL_RCC_GetSysClockFreq+0x34>
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b0c      	cmp	r3, #12
 8005b7c:	d121      	bne.n	8005bc2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d11e      	bne.n	8005bc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005b84:	4b6e      	ldr	r3, [pc, #440]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d107      	bne.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005b90:	4b6b      	ldr	r3, [pc, #428]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b96:	0b1b      	lsrs	r3, r3, #12
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9e:	e005      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005ba0:	4b67      	ldr	r3, [pc, #412]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	0f1b      	lsrs	r3, r3, #28
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005bac:	4a65      	ldr	r2, [pc, #404]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d110      	bne.n	8005bde <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bc0:	e00d      	b.n	8005bde <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bc2:	4b5f      	ldr	r3, [pc, #380]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d102      	bne.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bce:	4b5e      	ldr	r3, [pc, #376]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005bd0:	623b      	str	r3, [r7, #32]
 8005bd2:	e004      	b.n	8005bde <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d101      	bne.n	8005bde <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bda:	4b5b      	ldr	r3, [pc, #364]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005bdc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b0c      	cmp	r3, #12
 8005be2:	f040 80a5 	bne.w	8005d30 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005be6:	4b56      	ldr	r3, [pc, #344]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005bf0:	4b53      	ldr	r3, [pc, #332]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005bfe:	4b50      	ldr	r3, [pc, #320]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c0a:	4b4d      	ldr	r3, [pc, #308]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0e:	08db      	lsrs	r3, r3, #3
 8005c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	fb02 f303 	mul.w	r3, r2, r3
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c22:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d003      	beq.n	8005c34 <HAL_RCC_GetSysClockFreq+0xe4>
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d022      	beq.n	8005c78 <HAL_RCC_GetSysClockFreq+0x128>
 8005c32:	e043      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005d4c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c46:	4b3e      	ldr	r3, [pc, #248]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c56:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c5a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005d50 <HAL_RCC_GetSysClockFreq+0x200>
 8005c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c76:	e046      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c82:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005d4c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c9a:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c9e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005d50 <HAL_RCC_GetSysClockFreq+0x200>
 8005ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cba:	e024      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cdc:	ee07 3a90 	vmov	s15, r3
 8005ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ce4:	ed97 6a01 	vldr	s12, [r7, #4]
 8005ce8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005d50 <HAL_RCC_GetSysClockFreq+0x200>
 8005cec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005cf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d04:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005d06:	4b0e      	ldr	r3, [pc, #56]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d0a:	0e1b      	lsrs	r3, r3, #24
 8005d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d10:	3301      	adds	r3, #1
 8005d12:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d2a:	ee17 3a90 	vmov	r3, s15
 8005d2e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005d30:	6a3b      	ldr	r3, [r7, #32]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	372c      	adds	r7, #44	@ 0x2c
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	46020c00 	.word	0x46020c00
 8005d44:	0800c0f0 	.word	0x0800c0f0
 8005d48:	00f42400 	.word	0x00f42400
 8005d4c:	4b742400 	.word	0x4b742400
 8005d50:	46000000 	.word	0x46000000

08005d54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005d58:	f7ff fefa 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b07      	ldr	r3, [pc, #28]	@ (8005d7c <HAL_RCC_GetHCLKFreq+0x28>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	4906      	ldr	r1, [pc, #24]	@ (8005d80 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005d68:	5ccb      	ldrb	r3, [r1, r3]
 8005d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6e:	4a05      	ldr	r2, [pc, #20]	@ (8005d84 <HAL_RCC_GetHCLKFreq+0x30>)
 8005d70:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005d72:	4b04      	ldr	r3, [pc, #16]	@ (8005d84 <HAL_RCC_GetHCLKFreq+0x30>)
 8005d74:	681b      	ldr	r3, [r3, #0]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	46020c00 	.word	0x46020c00
 8005d80:	0800c0e0 	.word	0x0800c0e0
 8005d84:	20000000 	.word	0x20000000

08005d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d90:	4b3e      	ldr	r3, [pc, #248]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d9e:	f7fe fddb 	bl	8004958 <HAL_PWREx_GetVoltageRange>
 8005da2:	6178      	str	r0, [r7, #20]
 8005da4:	e019      	b.n	8005dda <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005da6:	4b39      	ldr	r3, [pc, #228]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dac:	4a37      	ldr	r2, [pc, #220]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005dae:	f043 0304 	orr.w	r3, r3, #4
 8005db2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005db6:	4b35      	ldr	r3, [pc, #212]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005dc4:	f7fe fdc8 	bl	8004958 <HAL_PWREx_GetVoltageRange>
 8005dc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005dca:	4b30      	ldr	r3, [pc, #192]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dd0:	4a2e      	ldr	r2, [pc, #184]	@ (8005e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005dd2:	f023 0304 	bic.w	r3, r3, #4
 8005dd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005de0:	d003      	beq.n	8005dea <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de8:	d109      	bne.n	8005dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005df0:	d202      	bcs.n	8005df8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005df2:	2301      	movs	r3, #1
 8005df4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005df6:	e033      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005df8:	2300      	movs	r3, #0
 8005dfa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005dfc:	e030      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e04:	d208      	bcs.n	8005e18 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e0c:	d102      	bne.n	8005e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005e0e:	2303      	movs	r3, #3
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	e025      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e035      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e1e:	d90f      	bls.n	8005e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e2c:	d902      	bls.n	8005e34 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	e015      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005e34:	2301      	movs	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	e012      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	e00f      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e46:	d109      	bne.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e4e:	d102      	bne.n	8005e56 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005e50:	2301      	movs	r3, #1
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	e004      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005e56:	2302      	movs	r3, #2
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e001      	b.n	8005e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e60:	4b0b      	ldr	r3, [pc, #44]	@ (8005e90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f023 020f 	bic.w	r2, r3, #15
 8005e68:	4909      	ldr	r1, [pc, #36]	@ (8005e90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005e70:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d001      	beq.n	8005e82 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	46020c00 	.word	0x46020c00
 8005e90:	40022000 	.word	0x40022000

08005e94 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e98:	b0b8      	sub	sp, #224	@ 0xe0
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	f002 0401 	and.w	r4, r2, #1
 8005eb8:	2500      	movs	r5, #0
 8005eba:	ea54 0305 	orrs.w	r3, r4, r5
 8005ebe:	d00b      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005ec0:	4bca      	ldr	r3, [pc, #808]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ec6:	f023 0103 	bic.w	r1, r3, #3
 8005eca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed0:	4ac6      	ldr	r2, [pc, #792]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f002 0802 	and.w	r8, r2, #2
 8005ee4:	f04f 0900 	mov.w	r9, #0
 8005ee8:	ea58 0309 	orrs.w	r3, r8, r9
 8005eec:	d00b      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005eee:	4bbf      	ldr	r3, [pc, #764]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ef4:	f023 010c 	bic.w	r1, r3, #12
 8005ef8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efe:	4abb      	ldr	r2, [pc, #748]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	f002 0a04 	and.w	sl, r2, #4
 8005f12:	f04f 0b00 	mov.w	fp, #0
 8005f16:	ea5a 030b 	orrs.w	r3, sl, fp
 8005f1a:	d00b      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005f1c:	4bb3      	ldr	r3, [pc, #716]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f22:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005f26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f2c:	4aaf      	ldr	r2, [pc, #700]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f002 0308 	and.w	r3, r2, #8
 8005f40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f44:	2300      	movs	r3, #0
 8005f46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f4a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4313      	orrs	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005f54:	4ba5      	ldr	r3, [pc, #660]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f64:	4aa1      	ldr	r2, [pc, #644]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f66:	430b      	orrs	r3, r1
 8005f68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f002 0310 	and.w	r3, r2, #16
 8005f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f86:	460b      	mov	r3, r1
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	d00b      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005f8c:	4b97      	ldr	r3, [pc, #604]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f9c:	4a93      	ldr	r2, [pc, #588]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f002 0320 	and.w	r3, r2, #32
 8005fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	d00b      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005fc4:	4b89      	ldr	r3, [pc, #548]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fca:	f023 0107 	bic.w	r1, r3, #7
 8005fce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fd4:	4a85      	ldr	r2, [pc, #532]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fec:	2300      	movs	r3, #0
 8005fee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ff2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	d00b      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005ffc:	4b7b      	ldr	r3, [pc, #492]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006002:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006006:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800600a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800600c:	4a77      	ldr	r2, [pc, #476]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800600e:	430b      	orrs	r3, r1
 8006010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006020:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006024:	2300      	movs	r3, #0
 8006026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800602a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800602e:	460b      	mov	r3, r1
 8006030:	4313      	orrs	r3, r2
 8006032:	d00b      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006034:	4b6d      	ldr	r3, [pc, #436]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800603a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800603e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006044:	4a69      	ldr	r2, [pc, #420]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006046:	430b      	orrs	r3, r1
 8006048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800604c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800605c:	2300      	movs	r3, #0
 800605e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006062:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006066:	460b      	mov	r3, r1
 8006068:	4313      	orrs	r3, r2
 800606a:	d00b      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800606c:	4b5f      	ldr	r3, [pc, #380]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800606e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006072:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006076:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800607a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607c:	4a5b      	ldr	r2, [pc, #364]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800607e:	430b      	orrs	r3, r1
 8006080:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006084:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006090:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006094:	2300      	movs	r3, #0
 8006096:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800609a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800609e:	460b      	mov	r3, r1
 80060a0:	4313      	orrs	r3, r2
 80060a2:	d00b      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80060a4:	4b51      	ldr	r3, [pc, #324]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060aa:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80060ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b4:	4a4d      	ldr	r2, [pc, #308]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060b6:	430b      	orrs	r3, r1
 80060b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80060c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060cc:	2300      	movs	r3, #0
 80060ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80060d6:	460b      	mov	r3, r1
 80060d8:	4313      	orrs	r3, r2
 80060da:	d00b      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80060dc:	4b43      	ldr	r3, [pc, #268]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060e2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80060e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060ec:	4a3f      	ldr	r2, [pc, #252]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060ee:	430b      	orrs	r3, r1
 80060f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006104:	2300      	movs	r3, #0
 8006106:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800610a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800610e:	460b      	mov	r3, r1
 8006110:	4313      	orrs	r3, r2
 8006112:	d00b      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006114:	4b35      	ldr	r3, [pc, #212]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800611a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800611e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006122:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006124:	4a31      	ldr	r2, [pc, #196]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006126:	430b      	orrs	r3, r1
 8006128:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800612c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006138:	67bb      	str	r3, [r7, #120]	@ 0x78
 800613a:	2300      	movs	r3, #0
 800613c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800613e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006142:	460b      	mov	r3, r1
 8006144:	4313      	orrs	r3, r2
 8006146:	d00c      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006148:	4b28      	ldr	r3, [pc, #160]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800614a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800614e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800615a:	4a24      	ldr	r2, [pc, #144]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800615c:	430b      	orrs	r3, r1
 800615e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006162:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800616e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006170:	2300      	movs	r3, #0
 8006172:	677b      	str	r3, [r7, #116]	@ 0x74
 8006174:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006178:	460b      	mov	r3, r1
 800617a:	4313      	orrs	r3, r2
 800617c:	d04f      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800617e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006186:	2b80      	cmp	r3, #128	@ 0x80
 8006188:	d02d      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800618a:	2b80      	cmp	r3, #128	@ 0x80
 800618c:	d827      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800618e:	2b60      	cmp	r3, #96	@ 0x60
 8006190:	d02e      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006192:	2b60      	cmp	r3, #96	@ 0x60
 8006194:	d823      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006196:	2b40      	cmp	r3, #64	@ 0x40
 8006198:	d006      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800619a:	2b40      	cmp	r3, #64	@ 0x40
 800619c:	d81f      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d011      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x336>
 80061a6:	e01a      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061a8:	4b10      	ldr	r3, [pc, #64]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ac:	4a0f      	ldr	r2, [pc, #60]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061b2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061b4:	e01d      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061ba:	3308      	adds	r3, #8
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fc0d 	bl	80069dc <RCCEx_PLL2_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061c8:	e013      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061ce:	332c      	adds	r3, #44	@ 0x2c
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fc9b 	bl	8006b0c <RCCEx_PLL3_Config>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061dc:	e009      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80061e4:	e005      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80061e6:	bf00      	nop
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80061ea:	bf00      	nop
 80061ec:	46020c00 	.word	0x46020c00
        break;
 80061f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10d      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80061fa:	4bb6      	ldr	r3, [pc, #728]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80061fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006200:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620c:	4ab1      	ldr	r2, [pc, #708]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800620e:	430b      	orrs	r3, r1
 8006210:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006214:	e003      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006216:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800621a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800621e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800622a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800622c:	2300      	movs	r3, #0
 800622e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006230:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006234:	460b      	mov	r3, r1
 8006236:	4313      	orrs	r3, r2
 8006238:	d053      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800623a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800623e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006246:	d033      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800624c:	d82c      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800624e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006252:	d02f      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006254:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006258:	d826      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800625a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800625e:	d008      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006264:	d820      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800626a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800626e:	d011      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006270:	e01a      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006272:	4b98      	ldr	r3, [pc, #608]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006276:	4a97      	ldr	r2, [pc, #604]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800627c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800627e:	e01a      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006280:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006284:	3308      	adds	r3, #8
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fba8 	bl	80069dc <RCCEx_PLL2_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006292:	e010      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006298:	332c      	adds	r3, #44	@ 0x2c
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fc36 	bl	8006b0c <RCCEx_PLL3_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062a6:	e006      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80062ae:	e002      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80062b0:	bf00      	nop
 80062b2:	e000      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80062b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10d      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80062be:	4b85      	ldr	r3, [pc, #532]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062c4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80062c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062d0:	4a80      	ldr	r2, [pc, #512]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062d2:	430b      	orrs	r3, r1
 80062d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80062d8:	e003      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062da:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062de:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80062e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80062ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80062f0:	2300      	movs	r3, #0
 80062f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80062f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80062f8:	460b      	mov	r3, r1
 80062fa:	4313      	orrs	r3, r2
 80062fc:	d046      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80062fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006306:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800630a:	d028      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800630c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006310:	d821      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006316:	d022      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800631c:	d81b      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800631e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006322:	d01c      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006324:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006328:	d815      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800632a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800632e:	d008      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006334:	d80f      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d011      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800633a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800633e:	d00e      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006340:	e009      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006346:	3308      	adds	r3, #8
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fb47 	bl	80069dc <RCCEx_PLL2_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006354:	e004      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800635c:	e000      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800635e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006360:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10d      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006368:	4b5a      	ldr	r3, [pc, #360]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800636a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800636e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006372:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006376:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800637a:	4a56      	ldr	r2, [pc, #344]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800637c:	430b      	orrs	r3, r1
 800637e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006382:	e003      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006384:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006388:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800638c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006398:	65bb      	str	r3, [r7, #88]	@ 0x58
 800639a:	2300      	movs	r3, #0
 800639c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800639e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80063a2:	460b      	mov	r3, r1
 80063a4:	4313      	orrs	r3, r2
 80063a6:	d03f      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80063a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d81e      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80063b4:	a201      	add	r2, pc, #4	@ (adr r2, 80063bc <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063fb 	.word	0x080063fb
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	080063df 	.word	0x080063df
 80063c8:	080063fb 	.word	0x080063fb
 80063cc:	080063fb 	.word	0x080063fb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063d0:	4b40      	ldr	r3, [pc, #256]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80063d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d4:	4a3f      	ldr	r2, [pc, #252]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80063d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063da:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80063dc:	e00e      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063e2:	332c      	adds	r3, #44	@ 0x2c
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fb91 	bl	8006b0c <RCCEx_PLL3_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80063f0:	e004      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80063f8:	e000      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80063fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80063fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10d      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006404:	4b33      	ldr	r3, [pc, #204]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006406:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800640a:	f023 0107 	bic.w	r1, r3, #7
 800640e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006416:	4a2f      	ldr	r2, [pc, #188]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006418:	430b      	orrs	r3, r1
 800641a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800641e:	e003      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006420:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006424:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006434:	653b      	str	r3, [r7, #80]	@ 0x50
 8006436:	2300      	movs	r3, #0
 8006438:	657b      	str	r3, [r7, #84]	@ 0x54
 800643a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800643e:	460b      	mov	r3, r1
 8006440:	4313      	orrs	r3, r2
 8006442:	d04d      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006444:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800644c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006450:	d028      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8006452:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006456:	d821      	bhi.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006458:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800645c:	d024      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800645e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006462:	d81b      	bhi.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006464:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006468:	d00e      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800646a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800646e:	d815      	bhi.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01b      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006478:	d110      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800647a:	4b16      	ldr	r3, [pc, #88]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800647c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647e:	4a15      	ldr	r2, [pc, #84]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006484:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006486:	e012      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006488:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800648c:	332c      	adds	r3, #44	@ 0x2c
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fb3c 	bl	8006b0c <RCCEx_PLL3_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800649a:	e008      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80064a2:	e004      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80064a4:	bf00      	nop
 80064a6:	e002      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80064a8:	bf00      	nop
 80064aa:	e000      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80064ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 80064ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d110      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80064b6:	4b07      	ldr	r3, [pc, #28]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80064b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80064c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064c8:	4a02      	ldr	r2, [pc, #8]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80064ca:	430b      	orrs	r3, r1
 80064cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80064d0:	e006      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80064d2:	bf00      	nop
 80064d4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064dc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80064ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ee:	2300      	movs	r3, #0
 80064f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80064f6:	460b      	mov	r3, r1
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f000 80b5 	beq.w	8006668 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064fe:	2300      	movs	r3, #0
 8006500:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006504:	4b9d      	ldr	r3, [pc, #628]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d113      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006512:	4b9a      	ldr	r3, [pc, #616]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006518:	4a98      	ldr	r2, [pc, #608]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800651a:	f043 0304 	orr.w	r3, r3, #4
 800651e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006522:	4b96      	ldr	r3, [pc, #600]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006530:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8006534:	2301      	movs	r3, #1
 8006536:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800653a:	4b91      	ldr	r3, [pc, #580]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800653c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653e:	4a90      	ldr	r2, [pc, #576]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006546:	f7fb f97f 	bl	8001848 <HAL_GetTick>
 800654a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800654e:	e00b      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006550:	f7fb f97a 	bl	8001848 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d903      	bls.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006566:	e005      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006568:	4b85      	ldr	r3, [pc, #532]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800656a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0ed      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006574:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006578:	2b00      	cmp	r3, #0
 800657a:	d165      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800657c:	4b7f      	ldr	r3, [pc, #508]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800657e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006586:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800658a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800658e:	2b00      	cmp	r3, #0
 8006590:	d023      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x746>
 8006592:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006596:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800659a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800659e:	4293      	cmp	r3, r2
 80065a0:	d01b      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065a2:	4b76      	ldr	r3, [pc, #472]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065b0:	4b72      	ldr	r3, [pc, #456]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065b6:	4a71      	ldr	r2, [pc, #452]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065c0:	4b6e      	ldr	r3, [pc, #440]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065c6:	4a6d      	ldr	r2, [pc, #436]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065d0:	4a6a      	ldr	r2, [pc, #424]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d019      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e6:	f7fb f92f 	bl	8001848 <HAL_GetTick>
 80065ea:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065ee:	e00d      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f0:	f7fb f92a 	bl	8001848 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065fa:	1ad2      	subs	r2, r2, r3
 80065fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006600:	429a      	cmp	r2, r3
 8006602:	d903      	bls.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 800660a:	e006      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800660c:	4b5b      	ldr	r3, [pc, #364]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800660e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0ea      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800661a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10d      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006622:	4b56      	ldr	r3, [pc, #344]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006628:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800662c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006630:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006634:	4a51      	ldr	r2, [pc, #324]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006636:	430b      	orrs	r3, r1
 8006638:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800663c:	e008      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800663e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006642:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8006646:	e003      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006648:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800664c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006650:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8006654:	2b01      	cmp	r3, #1
 8006656:	d107      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006658:	4b48      	ldr	r3, [pc, #288]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800665a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800665e:	4a47      	ldr	r2, [pc, #284]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006660:	f023 0304 	bic.w	r3, r3, #4
 8006664:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006674:	643b      	str	r3, [r7, #64]	@ 0x40
 8006676:	2300      	movs	r3, #0
 8006678:	647b      	str	r3, [r7, #68]	@ 0x44
 800667a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800667e:	460b      	mov	r3, r1
 8006680:	4313      	orrs	r3, r2
 8006682:	d042      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006688:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800668c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006690:	d022      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8006692:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006696:	d81b      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800669c:	d011      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800669e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066a2:	d815      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d019      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x848>
 80066a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066ac:	d110      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066b2:	3308      	adds	r3, #8
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 f991 	bl	80069dc <RCCEx_PLL2_Config>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80066c0:	e00d      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c2:	4b2e      	ldr	r3, [pc, #184]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c6:	4a2d      	ldr	r2, [pc, #180]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066cc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80066ce:	e006      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80066d6:	e002      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80066d8:	bf00      	nop
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80066dc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80066de:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80066e6:	4b25      	ldr	r3, [pc, #148]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ec:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80066f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066f8:	4a20      	ldr	r2, [pc, #128]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066fa:	430b      	orrs	r3, r1
 80066fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006700:	e003      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006702:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006706:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800670a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006716:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006718:	2300      	movs	r3, #0
 800671a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800671c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006720:	460b      	mov	r3, r1
 8006722:	4313      	orrs	r3, r2
 8006724:	d032      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006726:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800672a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800672e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006732:	d00b      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006738:	d804      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d008      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800673e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006742:	d007      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800674a:	e004      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800674c:	bf00      	nop
 800674e:	e002      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006750:	bf00      	nop
 8006752:	e000      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006754:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006756:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800675a:	2b00      	cmp	r3, #0
 800675c:	d112      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800675e:	4b07      	ldr	r3, [pc, #28]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006760:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006764:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006768:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800676c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006770:	4a02      	ldr	r2, [pc, #8]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006772:	430b      	orrs	r3, r1
 8006774:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006778:	e008      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800677a:	bf00      	nop
 800677c:	46020c00 	.word	0x46020c00
 8006780:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006784:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006788:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800678c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006798:	633b      	str	r3, [r7, #48]	@ 0x30
 800679a:	2300      	movs	r3, #0
 800679c:	637b      	str	r3, [r7, #52]	@ 0x34
 800679e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80067a2:	460b      	mov	r3, r1
 80067a4:	4313      	orrs	r3, r2
 80067a6:	d019      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80067a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067b4:	d105      	bne.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067b6:	4b88      	ldr	r3, [pc, #544]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ba:	4a87      	ldr	r2, [pc, #540]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80067c2:	4b85      	ldr	r3, [pc, #532]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067c8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80067cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067d4:	4a80      	ldr	r2, [pc, #512]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067d6:	430b      	orrs	r3, r1
 80067d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80067dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80067e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ea:	2300      	movs	r3, #0
 80067ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80067f2:	460b      	mov	r3, r1
 80067f4:	4313      	orrs	r3, r2
 80067f6:	d00c      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80067f8:	4b77      	ldr	r3, [pc, #476]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006802:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800680a:	4973      	ldr	r1, [pc, #460]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800680c:	4313      	orrs	r3, r2
 800680e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006812:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800681e:	623b      	str	r3, [r7, #32]
 8006820:	2300      	movs	r3, #0
 8006822:	627b      	str	r3, [r7, #36]	@ 0x24
 8006824:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006828:	460b      	mov	r3, r1
 800682a:	4313      	orrs	r3, r2
 800682c:	d00c      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800682e:	4b6a      	ldr	r3, [pc, #424]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006834:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006838:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800683c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006840:	4965      	ldr	r1, [pc, #404]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006842:	4313      	orrs	r3, r2
 8006844:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	2300      	movs	r3, #0
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800685e:	460b      	mov	r3, r1
 8006860:	4313      	orrs	r3, r2
 8006862:	d00c      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006864:	4b5c      	ldr	r3, [pc, #368]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800686a:	f023 0218 	bic.w	r2, r3, #24
 800686e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006872:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006876:	4958      	ldr	r1, [pc, #352]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800687e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006894:	460b      	mov	r3, r1
 8006896:	4313      	orrs	r3, r2
 8006898:	d032      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800689a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800689e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068a6:	d105      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a8:	4b4b      	ldr	r3, [pc, #300]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ac:	4a4a      	ldr	r2, [pc, #296]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068b2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80068b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068c0:	d108      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068c6:	3308      	adds	r3, #8
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 f887 	bl	80069dc <RCCEx_PLL2_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80068d4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10d      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80068dc:	4b3e      	ldr	r3, [pc, #248]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068ee:	493a      	ldr	r1, [pc, #232]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80068f6:	e003      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068fc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	2300      	movs	r3, #0
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006916:	460b      	mov	r3, r1
 8006918:	4313      	orrs	r3, r2
 800691a:	d03a      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800691c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006924:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006928:	d00e      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800692a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800692e:	d815      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d017      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006938:	d110      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693a:	4b27      	ldr	r3, [pc, #156]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800693c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693e:	4a26      	ldr	r2, [pc, #152]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006944:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006946:	e00e      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006948:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800694c:	3308      	adds	r3, #8
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f844 	bl	80069dc <RCCEx_PLL2_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800695a:	e004      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006962:	e000      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8006964:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006966:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10d      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800696e:	4b1a      	ldr	r3, [pc, #104]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006974:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800697c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006980:	4915      	ldr	r1, [pc, #84]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006988:	e003      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800698e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006992:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	2300      	movs	r3, #0
 80069a2:	607b      	str	r3, [r7, #4]
 80069a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069a8:	460b      	mov	r3, r1
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d00c      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80069ae:	4b0a      	ldr	r3, [pc, #40]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80069b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069b4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80069b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069c0:	4905      	ldr	r1, [pc, #20]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80069c8:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	37e0      	adds	r7, #224	@ 0xe0
 80069d0:	46bd      	mov	sp, r7
 80069d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d6:	bf00      	nop
 80069d8:	46020c00 	.word	0x46020c00

080069dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80069e4:	4b47      	ldr	r3, [pc, #284]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a46      	ldr	r2, [pc, #280]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 80069ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069f0:	f7fa ff2a 	bl	8001848 <HAL_GetTick>
 80069f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069f6:	e008      	b.n	8006a0a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069f8:	f7fa ff26 	bl	8001848 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e077      	b.n	8006afa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f0      	bne.n	80069f8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006a16:	4b3b      	ldr	r3, [pc, #236]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006a1e:	f023 0303 	bic.w	r3, r3, #3
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6811      	ldr	r1, [r2, #0]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6852      	ldr	r2, [r2, #4]
 8006a2a:	3a01      	subs	r2, #1
 8006a2c:	0212      	lsls	r2, r2, #8
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	4934      	ldr	r1, [pc, #208]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006a36:	4b33      	ldr	r3, [pc, #204]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a3a:	4b33      	ldr	r3, [pc, #204]	@ (8006b08 <RCCEx_PLL2_Config+0x12c>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6892      	ldr	r2, [r2, #8]
 8006a42:	3a01      	subs	r2, #1
 8006a44:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	68d2      	ldr	r2, [r2, #12]
 8006a4c:	3a01      	subs	r2, #1
 8006a4e:	0252      	lsls	r2, r2, #9
 8006a50:	b292      	uxth	r2, r2
 8006a52:	4311      	orrs	r1, r2
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6912      	ldr	r2, [r2, #16]
 8006a58:	3a01      	subs	r2, #1
 8006a5a:	0412      	lsls	r2, r2, #16
 8006a5c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006a60:	4311      	orrs	r1, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6952      	ldr	r2, [r2, #20]
 8006a66:	3a01      	subs	r2, #1
 8006a68:	0612      	lsls	r2, r2, #24
 8006a6a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	4924      	ldr	r1, [pc, #144]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006a76:	4b23      	ldr	r3, [pc, #140]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	f023 020c 	bic.w	r2, r3, #12
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	4920      	ldr	r1, [pc, #128]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006a88:	4b1e      	ldr	r3, [pc, #120]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	491c      	ldr	r1, [pc, #112]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006a96:	4b1b      	ldr	r3, [pc, #108]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006a9c:	f023 0310 	bic.w	r3, r3, #16
 8006aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006aa2:	4b18      	ldr	r3, [pc, #96]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aaa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	69d2      	ldr	r2, [r2, #28]
 8006ab2:	00d2      	lsls	r2, r2, #3
 8006ab4:	4913      	ldr	r1, [pc, #76]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006aba:	4b12      	ldr	r3, [pc, #72]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abe:	4a11      	ldr	r2, [pc, #68]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006ac0:	f043 0310 	orr.w	r3, r3, #16
 8006ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a0e      	ldr	r2, [pc, #56]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006acc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ad0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ad2:	f7fa feb9 	bl	8001848 <HAL_GetTick>
 8006ad6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ad8:	e008      	b.n	8006aec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ada:	f7fa feb5 	bl	8001848 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e006      	b.n	8006afa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006aec:	4b05      	ldr	r3, [pc, #20]	@ (8006b04 <RCCEx_PLL2_Config+0x128>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0f0      	beq.n	8006ada <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006af8:	2300      	movs	r3, #0

}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	46020c00 	.word	0x46020c00
 8006b08:	80800000 	.word	0x80800000

08006b0c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006b14:	4b47      	ldr	r3, [pc, #284]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a46      	ldr	r2, [pc, #280]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006b1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b1e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b20:	f7fa fe92 	bl	8001848 <HAL_GetTick>
 8006b24:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b26:	e008      	b.n	8006b3a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b28:	f7fa fe8e 	bl	8001848 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e077      	b.n	8006c2a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f0      	bne.n	8006b28 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006b46:	4b3b      	ldr	r3, [pc, #236]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6811      	ldr	r1, [r2, #0]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6852      	ldr	r2, [r2, #4]
 8006b5a:	3a01      	subs	r2, #1
 8006b5c:	0212      	lsls	r2, r2, #8
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	4934      	ldr	r1, [pc, #208]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	630b      	str	r3, [r1, #48]	@ 0x30
 8006b66:	4b33      	ldr	r3, [pc, #204]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b6a:	4b33      	ldr	r3, [pc, #204]	@ (8006c38 <RCCEx_PLL3_Config+0x12c>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6892      	ldr	r2, [r2, #8]
 8006b72:	3a01      	subs	r2, #1
 8006b74:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	68d2      	ldr	r2, [r2, #12]
 8006b7c:	3a01      	subs	r2, #1
 8006b7e:	0252      	lsls	r2, r2, #9
 8006b80:	b292      	uxth	r2, r2
 8006b82:	4311      	orrs	r1, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6912      	ldr	r2, [r2, #16]
 8006b88:	3a01      	subs	r2, #1
 8006b8a:	0412      	lsls	r2, r2, #16
 8006b8c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006b90:	4311      	orrs	r1, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6952      	ldr	r2, [r2, #20]
 8006b96:	3a01      	subs	r2, #1
 8006b98:	0612      	lsls	r2, r2, #24
 8006b9a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	4924      	ldr	r1, [pc, #144]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006ba6:	4b23      	ldr	r3, [pc, #140]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006baa:	f023 020c 	bic.w	r2, r3, #12
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	4920      	ldr	r1, [pc, #128]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	491c      	ldr	r1, [pc, #112]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bca:	4a1a      	ldr	r2, [pc, #104]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006bcc:	f023 0310 	bic.w	r3, r3, #16
 8006bd0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006bd2:	4b18      	ldr	r3, [pc, #96]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bda:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	69d2      	ldr	r2, [r2, #28]
 8006be2:	00d2      	lsls	r2, r2, #3
 8006be4:	4913      	ldr	r1, [pc, #76]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006bea:	4b12      	ldr	r3, [pc, #72]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bee:	4a11      	ldr	r2, [pc, #68]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006bf0:	f043 0310 	orr.w	r3, r3, #16
 8006bf4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c00:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c02:	f7fa fe21 	bl	8001848 <HAL_GetTick>
 8006c06:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c08:	e008      	b.n	8006c1c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c0a:	f7fa fe1d 	bl	8001848 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d901      	bls.n	8006c1c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e006      	b.n	8006c2a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c1c:	4b05      	ldr	r3, [pc, #20]	@ (8006c34 <RCCEx_PLL3_Config+0x128>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f0      	beq.n	8006c0a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	46020c00 	.word	0x46020c00
 8006c38:	80800000 	.word	0x80800000

08006c3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e0fb      	b.n	8006e46 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a7f      	ldr	r2, [pc, #508]	@ (8006e50 <HAL_SPI_Init+0x214>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d004      	beq.n	8006c62 <HAL_SPI_Init+0x26>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a7d      	ldr	r2, [pc, #500]	@ (8006e54 <HAL_SPI_Init+0x218>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	e000      	b.n	8006c64 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8006c62:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a78      	ldr	r2, [pc, #480]	@ (8006e50 <HAL_SPI_Init+0x214>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d004      	beq.n	8006c7e <HAL_SPI_Init+0x42>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a76      	ldr	r2, [pc, #472]	@ (8006e54 <HAL_SPI_Init+0x218>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d105      	bne.n	8006c8a <HAL_SPI_Init+0x4e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	2b0f      	cmp	r3, #15
 8006c84:	d901      	bls.n	8006c8a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e0dd      	b.n	8006e46 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fbce 	bl	800742c <SPI_GetPacketSize>
 8006c90:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a6e      	ldr	r2, [pc, #440]	@ (8006e50 <HAL_SPI_Init+0x214>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d004      	beq.n	8006ca6 <HAL_SPI_Init+0x6a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a6c      	ldr	r2, [pc, #432]	@ (8006e54 <HAL_SPI_Init+0x218>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d102      	bne.n	8006cac <HAL_SPI_Init+0x70>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d816      	bhi.n	8006cda <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006cb0:	4a69      	ldr	r2, [pc, #420]	@ (8006e58 <HAL_SPI_Init+0x21c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d00e      	beq.n	8006cd4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a68      	ldr	r2, [pc, #416]	@ (8006e5c <HAL_SPI_Init+0x220>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d009      	beq.n	8006cd4 <HAL_SPI_Init+0x98>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a66      	ldr	r2, [pc, #408]	@ (8006e60 <HAL_SPI_Init+0x224>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d004      	beq.n	8006cd4 <HAL_SPI_Init+0x98>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a65      	ldr	r2, [pc, #404]	@ (8006e64 <HAL_SPI_Init+0x228>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d104      	bne.n	8006cde <HAL_SPI_Init+0xa2>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b10      	cmp	r3, #16
 8006cd8:	d901      	bls.n	8006cde <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e0b3      	b.n	8006e46 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7f9 ff74 	bl	8000be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0201 	bic.w	r2, r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006d1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d24:	d119      	bne.n	8006d5a <HAL_SPI_Init+0x11e>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d2e:	d103      	bne.n	8006d38 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d008      	beq.n	8006d4a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10c      	bne.n	8006d5a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d48:	d107      	bne.n	8006d5a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00f      	beq.n	8006d86 <HAL_SPI_Init+0x14a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	2b06      	cmp	r3, #6
 8006d6c:	d90b      	bls.n	8006d86 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	e007      	b.n	8006d96 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69da      	ldr	r2, [r3, #28]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da8:	ea42 0103 	orr.w	r1, r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e02:	ea42 0103 	orr.w	r1, r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	46002000 	.word	0x46002000
 8006e54:	56002000 	.word	0x56002000
 8006e58:	40013000 	.word	0x40013000
 8006e5c:	50013000 	.word	0x50013000
 8006e60:	40003800 	.word	0x40003800
 8006e64:	50003800 	.word	0x50003800

08006e68 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	4613      	mov	r3, r2
 8006e76:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3320      	adds	r3, #32
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a90      	ldr	r2, [pc, #576]	@ (80070c8 <HAL_SPI_Transmit+0x260>)
 8006e86:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e88:	f7fa fcde 	bl	8001848 <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d001      	beq.n	8006e9e <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e1f4      	b.n	8007288 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <HAL_SPI_Transmit+0x42>
 8006ea4:	88fb      	ldrh	r3, [r7, #6]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e1ec      	b.n	8007288 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_SPI_Transmit+0x54>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e1e5      	b.n	8007288 <HAL_SPI_Transmit+0x420>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	88fa      	ldrh	r2, [r7, #6]
 8006ede:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	88fa      	ldrh	r2, [r7, #6]
 8006ee6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006f14:	d108      	bne.n	8006f28 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	e009      	b.n	8006f3c <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006f3a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	0c1b      	lsrs	r3, r3, #16
 8006f44:	041b      	lsls	r3, r3, #16
 8006f46:	88f9      	ldrh	r1, [r7, #6]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	6812      	ldr	r2, [r2, #0]
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0201 	orr.w	r2, r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10c      	bne.n	8006f88 <HAL_SPI_Transmit+0x120>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f76:	d107      	bne.n	8006f88 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	2b0f      	cmp	r3, #15
 8006f8e:	d95b      	bls.n	8007048 <HAL_SPI_Transmit+0x1e0>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a4d      	ldr	r2, [pc, #308]	@ (80070cc <HAL_SPI_Transmit+0x264>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d04f      	beq.n	800703a <HAL_SPI_Transmit+0x1d2>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a4c      	ldr	r2, [pc, #304]	@ (80070d0 <HAL_SPI_Transmit+0x268>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d04a      	beq.n	800703a <HAL_SPI_Transmit+0x1d2>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80070d4 <HAL_SPI_Transmit+0x26c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d045      	beq.n	800703a <HAL_SPI_Transmit+0x1d2>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a49      	ldr	r2, [pc, #292]	@ (80070d8 <HAL_SPI_Transmit+0x270>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d147      	bne.n	8007048 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006fb8:	e03f      	b.n	800703a <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d114      	bne.n	8006ff2 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fd8:	1d1a      	adds	r2, r3, #4
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006ff0:	e023      	b.n	800703a <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ff2:	f7fa fc29 	bl	8001848 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d803      	bhi.n	800700a <HAL_SPI_Transmit+0x1a2>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d102      	bne.n	8007010 <HAL_SPI_Transmit+0x1a8>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d114      	bne.n	800703a <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 f93d 	bl	8007290 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800701c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e126      	b.n	8007288 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1b9      	bne.n	8006fba <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007046:	e0f9      	b.n	800723c <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	2b07      	cmp	r3, #7
 800704e:	f240 80ee 	bls.w	800722e <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007052:	e067      	b.n	8007124 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b02      	cmp	r3, #2
 8007060:	d13c      	bne.n	80070dc <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b01      	cmp	r3, #1
 800706c:	d918      	bls.n	80070a0 <HAL_SPI_Transmit+0x238>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007072:	2b00      	cmp	r3, #0
 8007074:	d014      	beq.n	80070a0 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007086:	1d1a      	adds	r2, r3, #4
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b02      	subs	r3, #2
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800709e:	e041      	b.n	8007124 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a4:	881a      	ldrh	r2, [r3, #0]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070ae:	1c9a      	adds	r2, r3, #2
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80070c6:	e02d      	b.n	8007124 <HAL_SPI_Transmit+0x2bc>
 80070c8:	46002000 	.word	0x46002000
 80070cc:	40013000 	.word	0x40013000
 80070d0:	50013000 	.word	0x50013000
 80070d4:	40003800 	.word	0x40003800
 80070d8:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070dc:	f7fa fbb4 	bl	8001848 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d803      	bhi.n	80070f4 <HAL_SPI_Transmit+0x28c>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	d102      	bne.n	80070fa <HAL_SPI_Transmit+0x292>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d114      	bne.n	8007124 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 f8c8 	bl	8007290 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007106:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e0b1      	b.n	8007288 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800712a:	b29b      	uxth	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d191      	bne.n	8007054 <HAL_SPI_Transmit+0x1ec>
 8007130:	e084      	b.n	800723c <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b02      	cmp	r3, #2
 800713e:	d152      	bne.n	80071e6 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b03      	cmp	r3, #3
 800714a:	d918      	bls.n	800717e <HAL_SPI_Transmit+0x316>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007150:	2b40      	cmp	r3, #64	@ 0x40
 8007152:	d914      	bls.n	800717e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007164:	1d1a      	adds	r2, r3, #4
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b04      	subs	r3, #4
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800717c:	e057      	b.n	800722e <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b01      	cmp	r3, #1
 8007188:	d917      	bls.n	80071ba <HAL_SPI_Transmit+0x352>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d013      	beq.n	80071ba <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007196:	881a      	ldrh	r2, [r3, #0]
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071a0:	1c9a      	adds	r2, r3, #2
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b02      	subs	r3, #2
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80071b8:	e039      	b.n	800722e <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3320      	adds	r3, #32
 80071c4:	7812      	ldrb	r2, [r2, #0]
 80071c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80071e4:	e023      	b.n	800722e <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071e6:	f7fa fb2f 	bl	8001848 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d803      	bhi.n	80071fe <HAL_SPI_Transmit+0x396>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d102      	bne.n	8007204 <HAL_SPI_Transmit+0x39c>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d114      	bne.n	800722e <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f843 	bl	8007290 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007210:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e02c      	b.n	8007288 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	f47f af7b 	bne.w	8007132 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2200      	movs	r2, #0
 8007244:	2108      	movs	r1, #8
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f8c2 	bl	80073d0 <SPI_WaitOnFlagUntilTimeout>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007258:	f043 0220 	orr.w	r2, r3, #32
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 f814 	bl	8007290 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8007286:	2300      	movs	r3, #0
  }
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0208 	orr.w	r2, r2, #8
 80072ae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0210 	orr.w	r2, r2, #16
 80072be:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f022 0201 	bic.w	r2, r2, #1
 80072ce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80072de:	f023 0303 	bic.w	r3, r3, #3
 80072e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80072f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d014      	beq.n	800732a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00f      	beq.n	800732a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007310:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	699a      	ldr	r2, [r3, #24]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f042 0220 	orr.w	r2, r2, #32
 8007328:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b03      	cmp	r3, #3
 8007334:	d014      	beq.n	8007360 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00f      	beq.n	8007360 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007346:	f043 0204 	orr.w	r2, r3, #4
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800735e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00f      	beq.n	800738a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007370:	f043 0201 	orr.w	r2, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699a      	ldr	r2, [r3, #24]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007388:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00f      	beq.n	80073b4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800739a:	f043 0208 	orr.w	r2, r3, #8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80073c4:	bf00      	nop
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	4613      	mov	r3, r2
 80073de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80073e0:	e010      	b.n	8007404 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073e2:	f7fa fa31 	bl	8001848 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d803      	bhi.n	80073fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f8:	d102      	bne.n	8007400 <SPI_WaitOnFlagUntilTimeout+0x30>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e00f      	b.n	8007424 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	4013      	ands	r3, r2
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	429a      	cmp	r2, r3
 8007412:	bf0c      	ite	eq
 8007414:	2301      	moveq	r3, #1
 8007416:	2300      	movne	r3, #0
 8007418:	b2db      	uxtb	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	79fb      	ldrb	r3, [r7, #7]
 800741e:	429a      	cmp	r2, r3
 8007420:	d0df      	beq.n	80073e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	3301      	adds	r3, #1
 8007444:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	3307      	adds	r3, #7
 800744a:	08db      	lsrs	r3, r3, #3
 800744c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	fb02 f303 	mul.w	r3, r2, r3
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d12e      	bne.n	80074d6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800747e:	2b01      	cmp	r3, #1
 8007480:	d101      	bne.n	8007486 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007482:	2302      	movs	r3, #2
 8007484:	e028      	b.n	80074d8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80074b2:	ea42 0103 	orr.w	r1, r2, r3
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	e000      	b.n	80074d8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
  }
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e049      	b.n	800758a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d106      	bne.n	8007510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7f9 fc5e 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3304      	adds	r3, #4
 8007520:	4619      	mov	r1, r3
 8007522:	4610      	mov	r0, r2
 8007524:	f000 fa12 	bl	800794c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e049      	b.n	8007638 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f841 	bl	8007640 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f000 f9bb 	bl	800794c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800766a:	2b01      	cmp	r3, #1
 800766c:	d101      	bne.n	8007672 <HAL_TIM_OC_ConfigChannel+0x1e>
 800766e:	2302      	movs	r3, #2
 8007670:	e066      	b.n	8007740 <HAL_TIM_OC_ConfigChannel+0xec>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b14      	cmp	r3, #20
 800767e:	d857      	bhi.n	8007730 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007680:	a201      	add	r2, pc, #4	@ (adr r2, 8007688 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	080076dd 	.word	0x080076dd
 800768c:	08007731 	.word	0x08007731
 8007690:	08007731 	.word	0x08007731
 8007694:	08007731 	.word	0x08007731
 8007698:	080076eb 	.word	0x080076eb
 800769c:	08007731 	.word	0x08007731
 80076a0:	08007731 	.word	0x08007731
 80076a4:	08007731 	.word	0x08007731
 80076a8:	080076f9 	.word	0x080076f9
 80076ac:	08007731 	.word	0x08007731
 80076b0:	08007731 	.word	0x08007731
 80076b4:	08007731 	.word	0x08007731
 80076b8:	08007707 	.word	0x08007707
 80076bc:	08007731 	.word	0x08007731
 80076c0:	08007731 	.word	0x08007731
 80076c4:	08007731 	.word	0x08007731
 80076c8:	08007715 	.word	0x08007715
 80076cc:	08007731 	.word	0x08007731
 80076d0:	08007731 	.word	0x08007731
 80076d4:	08007731 	.word	0x08007731
 80076d8:	08007723 	.word	0x08007723
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fa32 	bl	8007b4c <TIM_OC1_SetConfig>
      break;
 80076e8:	e025      	b.n	8007736 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 faed 	bl	8007cd0 <TIM_OC2_SetConfig>
      break;
 80076f6:	e01e      	b.n	8007736 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fb96 	bl	8007e30 <TIM_OC3_SetConfig>
      break;
 8007704:	e017      	b.n	8007736 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fc3d 	bl	8007f8c <TIM_OC4_SetConfig>
      break;
 8007712:	e010      	b.n	8007736 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68b9      	ldr	r1, [r7, #8]
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fce6 	bl	80080ec <TIM_OC5_SetConfig>
      break;
 8007720:	e009      	b.n	8007736 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fd61 	bl	80081f0 <TIM_OC6_SetConfig>
      break;
 800772e:	e002      	b.n	8007736 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	75fb      	strb	r3, [r7, #23]
      break;
 8007734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800773e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_TIM_ConfigClockSource+0x1c>
 8007760:	2302      	movs	r3, #2
 8007762:	e0e6      	b.n	8007932 <HAL_TIM_ConfigClockSource+0x1ea>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007782:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800778e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a67      	ldr	r2, [pc, #412]	@ (800793c <HAL_TIM_ConfigClockSource+0x1f4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	f000 80b1 	beq.w	8007906 <HAL_TIM_ConfigClockSource+0x1be>
 80077a4:	4a65      	ldr	r2, [pc, #404]	@ (800793c <HAL_TIM_ConfigClockSource+0x1f4>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	f200 80b6 	bhi.w	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 80077ac:	4a64      	ldr	r2, [pc, #400]	@ (8007940 <HAL_TIM_ConfigClockSource+0x1f8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	f000 80a9 	beq.w	8007906 <HAL_TIM_ConfigClockSource+0x1be>
 80077b4:	4a62      	ldr	r2, [pc, #392]	@ (8007940 <HAL_TIM_ConfigClockSource+0x1f8>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	f200 80ae 	bhi.w	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 80077bc:	4a61      	ldr	r2, [pc, #388]	@ (8007944 <HAL_TIM_ConfigClockSource+0x1fc>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	f000 80a1 	beq.w	8007906 <HAL_TIM_ConfigClockSource+0x1be>
 80077c4:	4a5f      	ldr	r2, [pc, #380]	@ (8007944 <HAL_TIM_ConfigClockSource+0x1fc>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	f200 80a6 	bhi.w	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 80077cc:	4a5e      	ldr	r2, [pc, #376]	@ (8007948 <HAL_TIM_ConfigClockSource+0x200>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	f000 8099 	beq.w	8007906 <HAL_TIM_ConfigClockSource+0x1be>
 80077d4:	4a5c      	ldr	r2, [pc, #368]	@ (8007948 <HAL_TIM_ConfigClockSource+0x200>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	f200 809e 	bhi.w	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 80077dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80077e0:	f000 8091 	beq.w	8007906 <HAL_TIM_ConfigClockSource+0x1be>
 80077e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80077e8:	f200 8096 	bhi.w	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 80077ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077f0:	f000 8089 	beq.w	8007906 <HAL_TIM_ConfigClockSource+0x1be>
 80077f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077f8:	f200 808e 	bhi.w	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 80077fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007800:	d03e      	beq.n	8007880 <HAL_TIM_ConfigClockSource+0x138>
 8007802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007806:	f200 8087 	bhi.w	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 800780a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800780e:	f000 8086 	beq.w	800791e <HAL_TIM_ConfigClockSource+0x1d6>
 8007812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007816:	d87f      	bhi.n	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 8007818:	2b70      	cmp	r3, #112	@ 0x70
 800781a:	d01a      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x10a>
 800781c:	2b70      	cmp	r3, #112	@ 0x70
 800781e:	d87b      	bhi.n	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 8007820:	2b60      	cmp	r3, #96	@ 0x60
 8007822:	d050      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x17e>
 8007824:	2b60      	cmp	r3, #96	@ 0x60
 8007826:	d877      	bhi.n	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 8007828:	2b50      	cmp	r3, #80	@ 0x50
 800782a:	d03c      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x15e>
 800782c:	2b50      	cmp	r3, #80	@ 0x50
 800782e:	d873      	bhi.n	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 8007830:	2b40      	cmp	r3, #64	@ 0x40
 8007832:	d058      	beq.n	80078e6 <HAL_TIM_ConfigClockSource+0x19e>
 8007834:	2b40      	cmp	r3, #64	@ 0x40
 8007836:	d86f      	bhi.n	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 8007838:	2b30      	cmp	r3, #48	@ 0x30
 800783a:	d064      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x1be>
 800783c:	2b30      	cmp	r3, #48	@ 0x30
 800783e:	d86b      	bhi.n	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 8007840:	2b20      	cmp	r3, #32
 8007842:	d060      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x1be>
 8007844:	2b20      	cmp	r3, #32
 8007846:	d867      	bhi.n	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d05c      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x1be>
 800784c:	2b10      	cmp	r3, #16
 800784e:	d05a      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x1be>
 8007850:	e062      	b.n	8007918 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007862:	f000 fdc5 	bl	80083f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	609a      	str	r2, [r3, #8]
      break;
 800787e:	e04f      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007890:	f000 fdae 	bl	80083f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078a2:	609a      	str	r2, [r3, #8]
      break;
 80078a4:	e03c      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b2:	461a      	mov	r2, r3
 80078b4:	f000 fd20 	bl	80082f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2150      	movs	r1, #80	@ 0x50
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fd79 	bl	80083b6 <TIM_ITRx_SetConfig>
      break;
 80078c4:	e02c      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078d2:	461a      	mov	r2, r3
 80078d4:	f000 fd3f 	bl	8008356 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2160      	movs	r1, #96	@ 0x60
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fd69 	bl	80083b6 <TIM_ITRx_SetConfig>
      break;
 80078e4:	e01c      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078f2:	461a      	mov	r2, r3
 80078f4:	f000 fd00 	bl	80082f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2140      	movs	r1, #64	@ 0x40
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fd59 	bl	80083b6 <TIM_ITRx_SetConfig>
      break;
 8007904:	e00c      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4619      	mov	r1, r3
 8007910:	4610      	mov	r0, r2
 8007912:	f000 fd50 	bl	80083b6 <TIM_ITRx_SetConfig>
      break;
 8007916:	e003      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	73fb      	strb	r3, [r7, #15]
      break;
 800791c:	e000      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800791e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	00100070 	.word	0x00100070
 8007940:	00100040 	.word	0x00100040
 8007944:	00100030 	.word	0x00100030
 8007948:	00100020 	.word	0x00100020

0800794c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a6b      	ldr	r2, [pc, #428]	@ (8007b0c <TIM_Base_SetConfig+0x1c0>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d02b      	beq.n	80079bc <TIM_Base_SetConfig+0x70>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a6a      	ldr	r2, [pc, #424]	@ (8007b10 <TIM_Base_SetConfig+0x1c4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d027      	beq.n	80079bc <TIM_Base_SetConfig+0x70>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007972:	d023      	beq.n	80079bc <TIM_Base_SetConfig+0x70>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800797a:	d01f      	beq.n	80079bc <TIM_Base_SetConfig+0x70>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a65      	ldr	r2, [pc, #404]	@ (8007b14 <TIM_Base_SetConfig+0x1c8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d01b      	beq.n	80079bc <TIM_Base_SetConfig+0x70>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a64      	ldr	r2, [pc, #400]	@ (8007b18 <TIM_Base_SetConfig+0x1cc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d017      	beq.n	80079bc <TIM_Base_SetConfig+0x70>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a63      	ldr	r2, [pc, #396]	@ (8007b1c <TIM_Base_SetConfig+0x1d0>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <TIM_Base_SetConfig+0x70>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a62      	ldr	r2, [pc, #392]	@ (8007b20 <TIM_Base_SetConfig+0x1d4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d00f      	beq.n	80079bc <TIM_Base_SetConfig+0x70>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a61      	ldr	r2, [pc, #388]	@ (8007b24 <TIM_Base_SetConfig+0x1d8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00b      	beq.n	80079bc <TIM_Base_SetConfig+0x70>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a60      	ldr	r2, [pc, #384]	@ (8007b28 <TIM_Base_SetConfig+0x1dc>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d007      	beq.n	80079bc <TIM_Base_SetConfig+0x70>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a5f      	ldr	r2, [pc, #380]	@ (8007b2c <TIM_Base_SetConfig+0x1e0>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_Base_SetConfig+0x70>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a5e      	ldr	r2, [pc, #376]	@ (8007b30 <TIM_Base_SetConfig+0x1e4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d108      	bne.n	80079ce <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a4e      	ldr	r2, [pc, #312]	@ (8007b0c <TIM_Base_SetConfig+0x1c0>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d043      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a4d      	ldr	r2, [pc, #308]	@ (8007b10 <TIM_Base_SetConfig+0x1c4>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d03f      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079e4:	d03b      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079ec:	d037      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a48      	ldr	r2, [pc, #288]	@ (8007b14 <TIM_Base_SetConfig+0x1c8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d033      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a47      	ldr	r2, [pc, #284]	@ (8007b18 <TIM_Base_SetConfig+0x1cc>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d02f      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a46      	ldr	r2, [pc, #280]	@ (8007b1c <TIM_Base_SetConfig+0x1d0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d02b      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a45      	ldr	r2, [pc, #276]	@ (8007b20 <TIM_Base_SetConfig+0x1d4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d027      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a44      	ldr	r2, [pc, #272]	@ (8007b24 <TIM_Base_SetConfig+0x1d8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d023      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a43      	ldr	r2, [pc, #268]	@ (8007b28 <TIM_Base_SetConfig+0x1dc>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d01f      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a42      	ldr	r2, [pc, #264]	@ (8007b2c <TIM_Base_SetConfig+0x1e0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d01b      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a41      	ldr	r2, [pc, #260]	@ (8007b30 <TIM_Base_SetConfig+0x1e4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d017      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a40      	ldr	r2, [pc, #256]	@ (8007b34 <TIM_Base_SetConfig+0x1e8>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d013      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a3f      	ldr	r2, [pc, #252]	@ (8007b38 <TIM_Base_SetConfig+0x1ec>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00f      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a3e      	ldr	r2, [pc, #248]	@ (8007b3c <TIM_Base_SetConfig+0x1f0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00b      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a3d      	ldr	r2, [pc, #244]	@ (8007b40 <TIM_Base_SetConfig+0x1f4>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d007      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a3c      	ldr	r2, [pc, #240]	@ (8007b44 <TIM_Base_SetConfig+0x1f8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d003      	beq.n	8007a5e <TIM_Base_SetConfig+0x112>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a3b      	ldr	r2, [pc, #236]	@ (8007b48 <TIM_Base_SetConfig+0x1fc>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d108      	bne.n	8007a70 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a1e      	ldr	r2, [pc, #120]	@ (8007b0c <TIM_Base_SetConfig+0x1c0>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d023      	beq.n	8007ade <TIM_Base_SetConfig+0x192>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a1d      	ldr	r2, [pc, #116]	@ (8007b10 <TIM_Base_SetConfig+0x1c4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01f      	beq.n	8007ade <TIM_Base_SetConfig+0x192>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a22      	ldr	r2, [pc, #136]	@ (8007b2c <TIM_Base_SetConfig+0x1e0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01b      	beq.n	8007ade <TIM_Base_SetConfig+0x192>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a21      	ldr	r2, [pc, #132]	@ (8007b30 <TIM_Base_SetConfig+0x1e4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d017      	beq.n	8007ade <TIM_Base_SetConfig+0x192>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a20      	ldr	r2, [pc, #128]	@ (8007b34 <TIM_Base_SetConfig+0x1e8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d013      	beq.n	8007ade <TIM_Base_SetConfig+0x192>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b38 <TIM_Base_SetConfig+0x1ec>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00f      	beq.n	8007ade <TIM_Base_SetConfig+0x192>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b3c <TIM_Base_SetConfig+0x1f0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00b      	beq.n	8007ade <TIM_Base_SetConfig+0x192>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b40 <TIM_Base_SetConfig+0x1f4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d007      	beq.n	8007ade <TIM_Base_SetConfig+0x192>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b44 <TIM_Base_SetConfig+0x1f8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d003      	beq.n	8007ade <TIM_Base_SetConfig+0x192>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b48 <TIM_Base_SetConfig+0x1fc>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d103      	bne.n	8007ae6 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f043 0204 	orr.w	r2, r3, #4
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]
}
 8007afe:	bf00      	nop
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	40012c00 	.word	0x40012c00
 8007b10:	50012c00 	.word	0x50012c00
 8007b14:	40000400 	.word	0x40000400
 8007b18:	50000400 	.word	0x50000400
 8007b1c:	40000800 	.word	0x40000800
 8007b20:	50000800 	.word	0x50000800
 8007b24:	40000c00 	.word	0x40000c00
 8007b28:	50000c00 	.word	0x50000c00
 8007b2c:	40013400 	.word	0x40013400
 8007b30:	50013400 	.word	0x50013400
 8007b34:	40014000 	.word	0x40014000
 8007b38:	50014000 	.word	0x50014000
 8007b3c:	40014400 	.word	0x40014400
 8007b40:	50014400 	.word	0x50014400
 8007b44:	40014800 	.word	0x40014800
 8007b48:	50014800 	.word	0x50014800

08007b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	f023 0201 	bic.w	r2, r3, #1
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f023 0302 	bic.w	r3, r3, #2
 8007b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a40      	ldr	r2, [pc, #256]	@ (8007ca8 <TIM_OC1_SetConfig+0x15c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d023      	beq.n	8007bf4 <TIM_OC1_SetConfig+0xa8>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a3f      	ldr	r2, [pc, #252]	@ (8007cac <TIM_OC1_SetConfig+0x160>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d01f      	beq.n	8007bf4 <TIM_OC1_SetConfig+0xa8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8007cb0 <TIM_OC1_SetConfig+0x164>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d01b      	beq.n	8007bf4 <TIM_OC1_SetConfig+0xa8>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8007cb4 <TIM_OC1_SetConfig+0x168>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d017      	beq.n	8007bf4 <TIM_OC1_SetConfig+0xa8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a3c      	ldr	r2, [pc, #240]	@ (8007cb8 <TIM_OC1_SetConfig+0x16c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d013      	beq.n	8007bf4 <TIM_OC1_SetConfig+0xa8>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a3b      	ldr	r2, [pc, #236]	@ (8007cbc <TIM_OC1_SetConfig+0x170>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00f      	beq.n	8007bf4 <TIM_OC1_SetConfig+0xa8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a3a      	ldr	r2, [pc, #232]	@ (8007cc0 <TIM_OC1_SetConfig+0x174>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00b      	beq.n	8007bf4 <TIM_OC1_SetConfig+0xa8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a39      	ldr	r2, [pc, #228]	@ (8007cc4 <TIM_OC1_SetConfig+0x178>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d007      	beq.n	8007bf4 <TIM_OC1_SetConfig+0xa8>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a38      	ldr	r2, [pc, #224]	@ (8007cc8 <TIM_OC1_SetConfig+0x17c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_OC1_SetConfig+0xa8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a37      	ldr	r2, [pc, #220]	@ (8007ccc <TIM_OC1_SetConfig+0x180>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d10c      	bne.n	8007c0e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f023 0308 	bic.w	r3, r3, #8
 8007bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f023 0304 	bic.w	r3, r3, #4
 8007c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a25      	ldr	r2, [pc, #148]	@ (8007ca8 <TIM_OC1_SetConfig+0x15c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d023      	beq.n	8007c5e <TIM_OC1_SetConfig+0x112>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a24      	ldr	r2, [pc, #144]	@ (8007cac <TIM_OC1_SetConfig+0x160>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d01f      	beq.n	8007c5e <TIM_OC1_SetConfig+0x112>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a23      	ldr	r2, [pc, #140]	@ (8007cb0 <TIM_OC1_SetConfig+0x164>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01b      	beq.n	8007c5e <TIM_OC1_SetConfig+0x112>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a22      	ldr	r2, [pc, #136]	@ (8007cb4 <TIM_OC1_SetConfig+0x168>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d017      	beq.n	8007c5e <TIM_OC1_SetConfig+0x112>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a21      	ldr	r2, [pc, #132]	@ (8007cb8 <TIM_OC1_SetConfig+0x16c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d013      	beq.n	8007c5e <TIM_OC1_SetConfig+0x112>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a20      	ldr	r2, [pc, #128]	@ (8007cbc <TIM_OC1_SetConfig+0x170>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00f      	beq.n	8007c5e <TIM_OC1_SetConfig+0x112>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc0 <TIM_OC1_SetConfig+0x174>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00b      	beq.n	8007c5e <TIM_OC1_SetConfig+0x112>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1e      	ldr	r2, [pc, #120]	@ (8007cc4 <TIM_OC1_SetConfig+0x178>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d007      	beq.n	8007c5e <TIM_OC1_SetConfig+0x112>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc8 <TIM_OC1_SetConfig+0x17c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d003      	beq.n	8007c5e <TIM_OC1_SetConfig+0x112>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1c      	ldr	r2, [pc, #112]	@ (8007ccc <TIM_OC1_SetConfig+0x180>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d111      	bne.n	8007c82 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	621a      	str	r2, [r3, #32]
}
 8007c9c:	bf00      	nop
 8007c9e:	371c      	adds	r7, #28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	40012c00 	.word	0x40012c00
 8007cac:	50012c00 	.word	0x50012c00
 8007cb0:	40013400 	.word	0x40013400
 8007cb4:	50013400 	.word	0x50013400
 8007cb8:	40014000 	.word	0x40014000
 8007cbc:	50014000 	.word	0x50014000
 8007cc0:	40014400 	.word	0x40014400
 8007cc4:	50014400 	.word	0x50014400
 8007cc8:	40014800 	.word	0x40014800
 8007ccc:	50014800 	.word	0x50014800

08007cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	f023 0210 	bic.w	r2, r3, #16
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	021b      	lsls	r3, r3, #8
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f023 0320 	bic.w	r3, r3, #32
 8007d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	011b      	lsls	r3, r3, #4
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a36      	ldr	r2, [pc, #216]	@ (8007e08 <TIM_OC2_SetConfig+0x138>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00b      	beq.n	8007d4c <TIM_OC2_SetConfig+0x7c>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a35      	ldr	r2, [pc, #212]	@ (8007e0c <TIM_OC2_SetConfig+0x13c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d007      	beq.n	8007d4c <TIM_OC2_SetConfig+0x7c>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a34      	ldr	r2, [pc, #208]	@ (8007e10 <TIM_OC2_SetConfig+0x140>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_OC2_SetConfig+0x7c>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a33      	ldr	r2, [pc, #204]	@ (8007e14 <TIM_OC2_SetConfig+0x144>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d10d      	bne.n	8007d68 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a27      	ldr	r2, [pc, #156]	@ (8007e08 <TIM_OC2_SetConfig+0x138>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d023      	beq.n	8007db8 <TIM_OC2_SetConfig+0xe8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a26      	ldr	r2, [pc, #152]	@ (8007e0c <TIM_OC2_SetConfig+0x13c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d01f      	beq.n	8007db8 <TIM_OC2_SetConfig+0xe8>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a25      	ldr	r2, [pc, #148]	@ (8007e10 <TIM_OC2_SetConfig+0x140>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d01b      	beq.n	8007db8 <TIM_OC2_SetConfig+0xe8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a24      	ldr	r2, [pc, #144]	@ (8007e14 <TIM_OC2_SetConfig+0x144>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d017      	beq.n	8007db8 <TIM_OC2_SetConfig+0xe8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a23      	ldr	r2, [pc, #140]	@ (8007e18 <TIM_OC2_SetConfig+0x148>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d013      	beq.n	8007db8 <TIM_OC2_SetConfig+0xe8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a22      	ldr	r2, [pc, #136]	@ (8007e1c <TIM_OC2_SetConfig+0x14c>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d00f      	beq.n	8007db8 <TIM_OC2_SetConfig+0xe8>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a21      	ldr	r2, [pc, #132]	@ (8007e20 <TIM_OC2_SetConfig+0x150>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d00b      	beq.n	8007db8 <TIM_OC2_SetConfig+0xe8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a20      	ldr	r2, [pc, #128]	@ (8007e24 <TIM_OC2_SetConfig+0x154>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d007      	beq.n	8007db8 <TIM_OC2_SetConfig+0xe8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a1f      	ldr	r2, [pc, #124]	@ (8007e28 <TIM_OC2_SetConfig+0x158>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d003      	beq.n	8007db8 <TIM_OC2_SetConfig+0xe8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a1e      	ldr	r2, [pc, #120]	@ (8007e2c <TIM_OC2_SetConfig+0x15c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d113      	bne.n	8007de0 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	621a      	str	r2, [r3, #32]
}
 8007dfa:	bf00      	nop
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	40012c00 	.word	0x40012c00
 8007e0c:	50012c00 	.word	0x50012c00
 8007e10:	40013400 	.word	0x40013400
 8007e14:	50013400 	.word	0x50013400
 8007e18:	40014000 	.word	0x40014000
 8007e1c:	50014000 	.word	0x50014000
 8007e20:	40014400 	.word	0x40014400
 8007e24:	50014400 	.word	0x50014400
 8007e28:	40014800 	.word	0x40014800
 8007e2c:	50014800 	.word	0x50014800

08007e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0303 	bic.w	r3, r3, #3
 8007e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a35      	ldr	r2, [pc, #212]	@ (8007f64 <TIM_OC3_SetConfig+0x134>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00b      	beq.n	8007eaa <TIM_OC3_SetConfig+0x7a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a34      	ldr	r2, [pc, #208]	@ (8007f68 <TIM_OC3_SetConfig+0x138>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d007      	beq.n	8007eaa <TIM_OC3_SetConfig+0x7a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a33      	ldr	r2, [pc, #204]	@ (8007f6c <TIM_OC3_SetConfig+0x13c>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d003      	beq.n	8007eaa <TIM_OC3_SetConfig+0x7a>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a32      	ldr	r2, [pc, #200]	@ (8007f70 <TIM_OC3_SetConfig+0x140>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d10d      	bne.n	8007ec6 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	021b      	lsls	r3, r3, #8
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a26      	ldr	r2, [pc, #152]	@ (8007f64 <TIM_OC3_SetConfig+0x134>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d023      	beq.n	8007f16 <TIM_OC3_SetConfig+0xe6>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a25      	ldr	r2, [pc, #148]	@ (8007f68 <TIM_OC3_SetConfig+0x138>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d01f      	beq.n	8007f16 <TIM_OC3_SetConfig+0xe6>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a24      	ldr	r2, [pc, #144]	@ (8007f6c <TIM_OC3_SetConfig+0x13c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d01b      	beq.n	8007f16 <TIM_OC3_SetConfig+0xe6>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a23      	ldr	r2, [pc, #140]	@ (8007f70 <TIM_OC3_SetConfig+0x140>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d017      	beq.n	8007f16 <TIM_OC3_SetConfig+0xe6>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a22      	ldr	r2, [pc, #136]	@ (8007f74 <TIM_OC3_SetConfig+0x144>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <TIM_OC3_SetConfig+0xe6>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a21      	ldr	r2, [pc, #132]	@ (8007f78 <TIM_OC3_SetConfig+0x148>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00f      	beq.n	8007f16 <TIM_OC3_SetConfig+0xe6>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a20      	ldr	r2, [pc, #128]	@ (8007f7c <TIM_OC3_SetConfig+0x14c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00b      	beq.n	8007f16 <TIM_OC3_SetConfig+0xe6>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a1f      	ldr	r2, [pc, #124]	@ (8007f80 <TIM_OC3_SetConfig+0x150>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d007      	beq.n	8007f16 <TIM_OC3_SetConfig+0xe6>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a1e      	ldr	r2, [pc, #120]	@ (8007f84 <TIM_OC3_SetConfig+0x154>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d003      	beq.n	8007f16 <TIM_OC3_SetConfig+0xe6>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a1d      	ldr	r2, [pc, #116]	@ (8007f88 <TIM_OC3_SetConfig+0x158>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d113      	bne.n	8007f3e <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	621a      	str	r2, [r3, #32]
}
 8007f58:	bf00      	nop
 8007f5a:	371c      	adds	r7, #28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	40012c00 	.word	0x40012c00
 8007f68:	50012c00 	.word	0x50012c00
 8007f6c:	40013400 	.word	0x40013400
 8007f70:	50013400 	.word	0x50013400
 8007f74:	40014000 	.word	0x40014000
 8007f78:	50014000 	.word	0x50014000
 8007f7c:	40014400 	.word	0x40014400
 8007f80:	50014400 	.word	0x50014400
 8007f84:	40014800 	.word	0x40014800
 8007f88:	50014800 	.word	0x50014800

08007f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	031b      	lsls	r3, r3, #12
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a36      	ldr	r2, [pc, #216]	@ (80080c4 <TIM_OC4_SetConfig+0x138>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00b      	beq.n	8008008 <TIM_OC4_SetConfig+0x7c>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a35      	ldr	r2, [pc, #212]	@ (80080c8 <TIM_OC4_SetConfig+0x13c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d007      	beq.n	8008008 <TIM_OC4_SetConfig+0x7c>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a34      	ldr	r2, [pc, #208]	@ (80080cc <TIM_OC4_SetConfig+0x140>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d003      	beq.n	8008008 <TIM_OC4_SetConfig+0x7c>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a33      	ldr	r2, [pc, #204]	@ (80080d0 <TIM_OC4_SetConfig+0x144>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d10d      	bne.n	8008024 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800800e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	031b      	lsls	r3, r3, #12
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008022:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a27      	ldr	r2, [pc, #156]	@ (80080c4 <TIM_OC4_SetConfig+0x138>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d023      	beq.n	8008074 <TIM_OC4_SetConfig+0xe8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a26      	ldr	r2, [pc, #152]	@ (80080c8 <TIM_OC4_SetConfig+0x13c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d01f      	beq.n	8008074 <TIM_OC4_SetConfig+0xe8>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a25      	ldr	r2, [pc, #148]	@ (80080cc <TIM_OC4_SetConfig+0x140>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d01b      	beq.n	8008074 <TIM_OC4_SetConfig+0xe8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a24      	ldr	r2, [pc, #144]	@ (80080d0 <TIM_OC4_SetConfig+0x144>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d017      	beq.n	8008074 <TIM_OC4_SetConfig+0xe8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a23      	ldr	r2, [pc, #140]	@ (80080d4 <TIM_OC4_SetConfig+0x148>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d013      	beq.n	8008074 <TIM_OC4_SetConfig+0xe8>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a22      	ldr	r2, [pc, #136]	@ (80080d8 <TIM_OC4_SetConfig+0x14c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00f      	beq.n	8008074 <TIM_OC4_SetConfig+0xe8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a21      	ldr	r2, [pc, #132]	@ (80080dc <TIM_OC4_SetConfig+0x150>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00b      	beq.n	8008074 <TIM_OC4_SetConfig+0xe8>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a20      	ldr	r2, [pc, #128]	@ (80080e0 <TIM_OC4_SetConfig+0x154>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d007      	beq.n	8008074 <TIM_OC4_SetConfig+0xe8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a1f      	ldr	r2, [pc, #124]	@ (80080e4 <TIM_OC4_SetConfig+0x158>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d003      	beq.n	8008074 <TIM_OC4_SetConfig+0xe8>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a1e      	ldr	r2, [pc, #120]	@ (80080e8 <TIM_OC4_SetConfig+0x15c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d113      	bne.n	800809c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800807a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008082:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	019b      	lsls	r3, r3, #6
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	4313      	orrs	r3, r2
 800808e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	019b      	lsls	r3, r3, #6
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	621a      	str	r2, [r3, #32]
}
 80080b6:	bf00      	nop
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	40012c00 	.word	0x40012c00
 80080c8:	50012c00 	.word	0x50012c00
 80080cc:	40013400 	.word	0x40013400
 80080d0:	50013400 	.word	0x50013400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	50014000 	.word	0x50014000
 80080dc:	40014400 	.word	0x40014400
 80080e0:	50014400 	.word	0x50014400
 80080e4:	40014800 	.word	0x40014800
 80080e8:	50014800 	.word	0x50014800

080080ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800811a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	041b      	lsls	r3, r3, #16
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a21      	ldr	r2, [pc, #132]	@ (80081c8 <TIM_OC5_SetConfig+0xdc>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d023      	beq.n	800818e <TIM_OC5_SetConfig+0xa2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a20      	ldr	r2, [pc, #128]	@ (80081cc <TIM_OC5_SetConfig+0xe0>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d01f      	beq.n	800818e <TIM_OC5_SetConfig+0xa2>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a1f      	ldr	r2, [pc, #124]	@ (80081d0 <TIM_OC5_SetConfig+0xe4>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d01b      	beq.n	800818e <TIM_OC5_SetConfig+0xa2>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a1e      	ldr	r2, [pc, #120]	@ (80081d4 <TIM_OC5_SetConfig+0xe8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d017      	beq.n	800818e <TIM_OC5_SetConfig+0xa2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a1d      	ldr	r2, [pc, #116]	@ (80081d8 <TIM_OC5_SetConfig+0xec>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d013      	beq.n	800818e <TIM_OC5_SetConfig+0xa2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a1c      	ldr	r2, [pc, #112]	@ (80081dc <TIM_OC5_SetConfig+0xf0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d00f      	beq.n	800818e <TIM_OC5_SetConfig+0xa2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a1b      	ldr	r2, [pc, #108]	@ (80081e0 <TIM_OC5_SetConfig+0xf4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d00b      	beq.n	800818e <TIM_OC5_SetConfig+0xa2>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a1a      	ldr	r2, [pc, #104]	@ (80081e4 <TIM_OC5_SetConfig+0xf8>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d007      	beq.n	800818e <TIM_OC5_SetConfig+0xa2>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a19      	ldr	r2, [pc, #100]	@ (80081e8 <TIM_OC5_SetConfig+0xfc>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d003      	beq.n	800818e <TIM_OC5_SetConfig+0xa2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a18      	ldr	r2, [pc, #96]	@ (80081ec <TIM_OC5_SetConfig+0x100>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d109      	bne.n	80081a2 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008194:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	021b      	lsls	r3, r3, #8
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	4313      	orrs	r3, r2
 80081a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	621a      	str	r2, [r3, #32]
}
 80081bc:	bf00      	nop
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	40012c00 	.word	0x40012c00
 80081cc:	50012c00 	.word	0x50012c00
 80081d0:	40013400 	.word	0x40013400
 80081d4:	50013400 	.word	0x50013400
 80081d8:	40014000 	.word	0x40014000
 80081dc:	50014000 	.word	0x50014000
 80081e0:	40014400 	.word	0x40014400
 80081e4:	50014400 	.word	0x50014400
 80081e8:	40014800 	.word	0x40014800
 80081ec:	50014800 	.word	0x50014800

080081f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800821e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	051b      	lsls	r3, r3, #20
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a22      	ldr	r2, [pc, #136]	@ (80082d0 <TIM_OC6_SetConfig+0xe0>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d023      	beq.n	8008294 <TIM_OC6_SetConfig+0xa4>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a21      	ldr	r2, [pc, #132]	@ (80082d4 <TIM_OC6_SetConfig+0xe4>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d01f      	beq.n	8008294 <TIM_OC6_SetConfig+0xa4>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a20      	ldr	r2, [pc, #128]	@ (80082d8 <TIM_OC6_SetConfig+0xe8>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d01b      	beq.n	8008294 <TIM_OC6_SetConfig+0xa4>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a1f      	ldr	r2, [pc, #124]	@ (80082dc <TIM_OC6_SetConfig+0xec>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d017      	beq.n	8008294 <TIM_OC6_SetConfig+0xa4>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a1e      	ldr	r2, [pc, #120]	@ (80082e0 <TIM_OC6_SetConfig+0xf0>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d013      	beq.n	8008294 <TIM_OC6_SetConfig+0xa4>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a1d      	ldr	r2, [pc, #116]	@ (80082e4 <TIM_OC6_SetConfig+0xf4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00f      	beq.n	8008294 <TIM_OC6_SetConfig+0xa4>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a1c      	ldr	r2, [pc, #112]	@ (80082e8 <TIM_OC6_SetConfig+0xf8>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d00b      	beq.n	8008294 <TIM_OC6_SetConfig+0xa4>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a1b      	ldr	r2, [pc, #108]	@ (80082ec <TIM_OC6_SetConfig+0xfc>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d007      	beq.n	8008294 <TIM_OC6_SetConfig+0xa4>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a1a      	ldr	r2, [pc, #104]	@ (80082f0 <TIM_OC6_SetConfig+0x100>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d003      	beq.n	8008294 <TIM_OC6_SetConfig+0xa4>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a19      	ldr	r2, [pc, #100]	@ (80082f4 <TIM_OC6_SetConfig+0x104>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d109      	bne.n	80082a8 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800829a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	029b      	lsls	r3, r3, #10
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	621a      	str	r2, [r3, #32]
}
 80082c2:	bf00      	nop
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	40012c00 	.word	0x40012c00
 80082d4:	50012c00 	.word	0x50012c00
 80082d8:	40013400 	.word	0x40013400
 80082dc:	50013400 	.word	0x50013400
 80082e0:	40014000 	.word	0x40014000
 80082e4:	50014000 	.word	0x50014000
 80082e8:	40014400 	.word	0x40014400
 80082ec:	50014400 	.word	0x50014400
 80082f0:	40014800 	.word	0x40014800
 80082f4:	50014800 	.word	0x50014800

080082f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	f023 0201 	bic.w	r2, r3, #1
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	011b      	lsls	r3, r3, #4
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	4313      	orrs	r3, r2
 800832c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f023 030a 	bic.w	r3, r3, #10
 8008334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4313      	orrs	r3, r2
 800833c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	621a      	str	r2, [r3, #32]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008356:	b480      	push	{r7}
 8008358:	b087      	sub	sp, #28
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	f023 0210 	bic.w	r2, r3, #16
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	031b      	lsls	r3, r3, #12
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	4313      	orrs	r3, r2
 800838a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008392:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	011b      	lsls	r3, r3, #4
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	4313      	orrs	r3, r2
 800839c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	621a      	str	r2, [r3, #32]
}
 80083aa:	bf00      	nop
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b085      	sub	sp, #20
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80083cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f043 0307 	orr.w	r3, r3, #7
 80083dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	609a      	str	r2, [r3, #8]
}
 80083e4:	bf00      	nop
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800840a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	021a      	lsls	r2, r3, #8
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	431a      	orrs	r2, r3
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	4313      	orrs	r3, r2
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	4313      	orrs	r3, r2
 800841c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	609a      	str	r2, [r3, #8]
}
 8008424:	bf00      	nop
 8008426:	371c      	adds	r7, #28
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008440:	2b01      	cmp	r3, #1
 8008442:	d101      	bne.n	8008448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008444:	2302      	movs	r3, #2
 8008446:	e097      	b.n	8008578 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a45      	ldr	r2, [pc, #276]	@ (8008584 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d00e      	beq.n	8008490 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a44      	ldr	r2, [pc, #272]	@ (8008588 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d009      	beq.n	8008490 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a42      	ldr	r2, [pc, #264]	@ (800858c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d004      	beq.n	8008490 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a41      	ldr	r2, [pc, #260]	@ (8008590 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d108      	bne.n	80084a2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008496:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80084a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a2f      	ldr	r2, [pc, #188]	@ (8008584 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d040      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a2e      	ldr	r2, [pc, #184]	@ (8008588 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d03b      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084dc:	d036      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084e6:	d031      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a29      	ldr	r2, [pc, #164]	@ (8008594 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d02c      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a28      	ldr	r2, [pc, #160]	@ (8008598 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d027      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a26      	ldr	r2, [pc, #152]	@ (800859c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d022      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a25      	ldr	r2, [pc, #148]	@ (80085a0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d01d      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a23      	ldr	r2, [pc, #140]	@ (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d018      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a22      	ldr	r2, [pc, #136]	@ (80085a8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d013      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a18      	ldr	r2, [pc, #96]	@ (800858c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d00e      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a17      	ldr	r2, [pc, #92]	@ (8008590 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d009      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a1b      	ldr	r2, [pc, #108]	@ (80085ac <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d004      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a1a      	ldr	r2, [pc, #104]	@ (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d10c      	bne.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008552:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	4313      	orrs	r3, r2
 800855c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	40012c00 	.word	0x40012c00
 8008588:	50012c00 	.word	0x50012c00
 800858c:	40013400 	.word	0x40013400
 8008590:	50013400 	.word	0x50013400
 8008594:	40000400 	.word	0x40000400
 8008598:	50000400 	.word	0x50000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	50000800 	.word	0x50000800
 80085a4:	40000c00 	.word	0x40000c00
 80085a8:	50000c00 	.word	0x50000c00
 80085ac:	40014000 	.word	0x40014000
 80085b0:	50014000 	.word	0x50014000

080085b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d101      	bne.n	80085d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085cc:	2302      	movs	r3, #2
 80085ce:	e07d      	b.n	80086cc <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	4313      	orrs	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	041b      	lsls	r3, r3, #16
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	4313      	orrs	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a1e      	ldr	r2, [pc, #120]	@ (80086d8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d00e      	beq.n	8008680 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a1d      	ldr	r2, [pc, #116]	@ (80086dc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d009      	beq.n	8008680 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a1b      	ldr	r2, [pc, #108]	@ (80086e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d004      	beq.n	8008680 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a1a      	ldr	r2, [pc, #104]	@ (80086e4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d11c      	bne.n	80086ba <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800868a:	051b      	lsls	r3, r3, #20
 800868c:	4313      	orrs	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	4313      	orrs	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	40012c00 	.word	0x40012c00
 80086dc:	50012c00 	.word	0x50012c00
 80086e0:	40013400 	.word	0x40013400
 80086e4:	50013400 	.word	0x50013400

080086e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086e8:	b084      	sub	sp, #16
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	f107 001c 	add.w	r0, r7, #28
 80086f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 fab6 	bl	8009c78 <USB_CoreReset>
 800870c:	4603      	mov	r3, r0
 800870e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008710:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008714:	2b00      	cmp	r3, #0
 8008716:	d106      	bne.n	8008726 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	639a      	str	r2, [r3, #56]	@ 0x38
 8008724:	e005      	b.n	8008732 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800873e:	b004      	add	sp, #16
 8008740:	4770      	bx	lr
	...

08008744 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	4613      	mov	r3, r2
 8008750:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008752:	79fb      	ldrb	r3, [r7, #7]
 8008754:	2b02      	cmp	r3, #2
 8008756:	d165      	bne.n	8008824 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4a41      	ldr	r2, [pc, #260]	@ (8008860 <USB_SetTurnaroundTime+0x11c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d906      	bls.n	800876e <USB_SetTurnaroundTime+0x2a>
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	4a40      	ldr	r2, [pc, #256]	@ (8008864 <USB_SetTurnaroundTime+0x120>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d202      	bcs.n	800876e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008768:	230f      	movs	r3, #15
 800876a:	617b      	str	r3, [r7, #20]
 800876c:	e062      	b.n	8008834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	4a3c      	ldr	r2, [pc, #240]	@ (8008864 <USB_SetTurnaroundTime+0x120>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d306      	bcc.n	8008784 <USB_SetTurnaroundTime+0x40>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	4a3b      	ldr	r2, [pc, #236]	@ (8008868 <USB_SetTurnaroundTime+0x124>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d202      	bcs.n	8008784 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800877e:	230e      	movs	r3, #14
 8008780:	617b      	str	r3, [r7, #20]
 8008782:	e057      	b.n	8008834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	4a38      	ldr	r2, [pc, #224]	@ (8008868 <USB_SetTurnaroundTime+0x124>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d306      	bcc.n	800879a <USB_SetTurnaroundTime+0x56>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4a37      	ldr	r2, [pc, #220]	@ (800886c <USB_SetTurnaroundTime+0x128>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d202      	bcs.n	800879a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008794:	230d      	movs	r3, #13
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	e04c      	b.n	8008834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	4a33      	ldr	r2, [pc, #204]	@ (800886c <USB_SetTurnaroundTime+0x128>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d306      	bcc.n	80087b0 <USB_SetTurnaroundTime+0x6c>
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	4a32      	ldr	r2, [pc, #200]	@ (8008870 <USB_SetTurnaroundTime+0x12c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d802      	bhi.n	80087b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80087aa:	230c      	movs	r3, #12
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	e041      	b.n	8008834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	4a2f      	ldr	r2, [pc, #188]	@ (8008870 <USB_SetTurnaroundTime+0x12c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d906      	bls.n	80087c6 <USB_SetTurnaroundTime+0x82>
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	4a2e      	ldr	r2, [pc, #184]	@ (8008874 <USB_SetTurnaroundTime+0x130>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d802      	bhi.n	80087c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80087c0:	230b      	movs	r3, #11
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	e036      	b.n	8008834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	4a2a      	ldr	r2, [pc, #168]	@ (8008874 <USB_SetTurnaroundTime+0x130>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d906      	bls.n	80087dc <USB_SetTurnaroundTime+0x98>
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4a29      	ldr	r2, [pc, #164]	@ (8008878 <USB_SetTurnaroundTime+0x134>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d802      	bhi.n	80087dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80087d6:	230a      	movs	r3, #10
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	e02b      	b.n	8008834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	4a26      	ldr	r2, [pc, #152]	@ (8008878 <USB_SetTurnaroundTime+0x134>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d906      	bls.n	80087f2 <USB_SetTurnaroundTime+0xae>
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4a25      	ldr	r2, [pc, #148]	@ (800887c <USB_SetTurnaroundTime+0x138>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d202      	bcs.n	80087f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80087ec:	2309      	movs	r3, #9
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e020      	b.n	8008834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	4a21      	ldr	r2, [pc, #132]	@ (800887c <USB_SetTurnaroundTime+0x138>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d306      	bcc.n	8008808 <USB_SetTurnaroundTime+0xc4>
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	4a20      	ldr	r2, [pc, #128]	@ (8008880 <USB_SetTurnaroundTime+0x13c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d802      	bhi.n	8008808 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008802:	2308      	movs	r3, #8
 8008804:	617b      	str	r3, [r7, #20]
 8008806:	e015      	b.n	8008834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	4a1d      	ldr	r2, [pc, #116]	@ (8008880 <USB_SetTurnaroundTime+0x13c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d906      	bls.n	800881e <USB_SetTurnaroundTime+0xda>
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4a1c      	ldr	r2, [pc, #112]	@ (8008884 <USB_SetTurnaroundTime+0x140>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d202      	bcs.n	800881e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008818:	2307      	movs	r3, #7
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	e00a      	b.n	8008834 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800881e:	2306      	movs	r3, #6
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	e007      	b.n	8008834 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d102      	bne.n	8008830 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800882a:	2309      	movs	r3, #9
 800882c:	617b      	str	r3, [r7, #20]
 800882e:	e001      	b.n	8008834 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008830:	2309      	movs	r3, #9
 8008832:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	029b      	lsls	r3, r3, #10
 8008848:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800884c:	431a      	orrs	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	371c      	adds	r7, #28
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	00d8acbf 	.word	0x00d8acbf
 8008864:	00e4e1c0 	.word	0x00e4e1c0
 8008868:	00f42400 	.word	0x00f42400
 800886c:	01067380 	.word	0x01067380
 8008870:	011a499f 	.word	0x011a499f
 8008874:	01312cff 	.word	0x01312cff
 8008878:	014ca43f 	.word	0x014ca43f
 800887c:	016e3600 	.word	0x016e3600
 8008880:	01a6ab1f 	.word	0x01a6ab1f
 8008884:	01e84800 	.word	0x01e84800

08008888 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f043 0201 	orr.w	r2, r3, #1
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b083      	sub	sp, #12
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f023 0201 	bic.w	r2, r3, #1
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d115      	bne.n	800891a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80088fa:	200a      	movs	r0, #10
 80088fc:	f7f8 ffb0 	bl	8001860 <HAL_Delay>
      ms += 10U;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	330a      	adds	r3, #10
 8008904:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 f927 	bl	8009b5a <USB_GetMode>
 800890c:	4603      	mov	r3, r0
 800890e:	2b01      	cmp	r3, #1
 8008910:	d01e      	beq.n	8008950 <USB_SetCurrentMode+0x84>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2bc7      	cmp	r3, #199	@ 0xc7
 8008916:	d9f0      	bls.n	80088fa <USB_SetCurrentMode+0x2e>
 8008918:	e01a      	b.n	8008950 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800891a:	78fb      	ldrb	r3, [r7, #3]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d115      	bne.n	800894c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800892c:	200a      	movs	r0, #10
 800892e:	f7f8 ff97 	bl	8001860 <HAL_Delay>
      ms += 10U;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	330a      	adds	r3, #10
 8008936:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f001 f90e 	bl	8009b5a <USB_GetMode>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <USB_SetCurrentMode+0x84>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2bc7      	cmp	r3, #199	@ 0xc7
 8008948:	d9f0      	bls.n	800892c <USB_SetCurrentMode+0x60>
 800894a:	e001      	b.n	8008950 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e005      	b.n	800895c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2bc8      	cmp	r3, #200	@ 0xc8
 8008954:	d101      	bne.n	800895a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e000      	b.n	800895c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008964:	b084      	sub	sp, #16
 8008966:	b580      	push	{r7, lr}
 8008968:	b086      	sub	sp, #24
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800897e:	2300      	movs	r3, #0
 8008980:	613b      	str	r3, [r7, #16]
 8008982:	e009      	b.n	8008998 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	3340      	adds	r3, #64	@ 0x40
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	2200      	movs	r2, #0
 8008990:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	3301      	adds	r3, #1
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	2b0e      	cmp	r3, #14
 800899c:	d9f2      	bls.n	8008984 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800899e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d11c      	bne.n	80089e0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089b4:	f043 0302 	orr.w	r3, r3, #2
 80089b8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089be:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	e005      	b.n	80089ec <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089f2:	461a      	mov	r2, r3
 80089f4:	2300      	movs	r3, #0
 80089f6:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089f8:	2103      	movs	r1, #3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f95e 	bl	8008cbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a00:	2110      	movs	r1, #16
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f8fa 	bl	8008bfc <USB_FlushTxFifo>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f924 	bl	8008c60 <USB_FlushRxFifo>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a34:	461a      	mov	r2, r3
 8008a36:	2300      	movs	r3, #0
 8008a38:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a40:	461a      	mov	r2, r3
 8008a42:	2300      	movs	r3, #0
 8008a44:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a46:	2300      	movs	r3, #0
 8008a48:	613b      	str	r3, [r7, #16]
 8008a4a:	e043      	b.n	8008ad4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a62:	d118      	bne.n	8008a96 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10a      	bne.n	8008a80 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a76:	461a      	mov	r2, r3
 8008a78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	e013      	b.n	8008aa8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	e008      	b.n	8008aa8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008acc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	613b      	str	r3, [r7, #16]
 8008ad4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ad8:	461a      	mov	r2, r3
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d3b5      	bcc.n	8008a4c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	e043      	b.n	8008b6e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008af8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008afc:	d118      	bne.n	8008b30 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b10:	461a      	mov	r2, r3
 8008b12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	e013      	b.n	8008b42 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b26:	461a      	mov	r2, r3
 8008b28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	e008      	b.n	8008b42 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	2300      	movs	r3, #0
 8008b40:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b4e:	461a      	mov	r2, r3
 8008b50:	2300      	movs	r3, #0
 8008b52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b60:	461a      	mov	r2, r3
 8008b62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008b66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	613b      	str	r3, [r7, #16]
 8008b6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008b72:	461a      	mov	r2, r3
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d3b5      	bcc.n	8008ae6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b8c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008b9a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d105      	bne.n	8008bb0 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	f043 0210 	orr.w	r2, r3, #16
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	699a      	ldr	r2, [r3, #24]
 8008bb4:	4b10      	ldr	r3, [pc, #64]	@ (8008bf8 <USB_DevInit+0x294>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008bbc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d005      	beq.n	8008bd0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f043 0208 	orr.w	r2, r3, #8
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008bd0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d107      	bne.n	8008be8 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008be0:	f043 0304 	orr.w	r3, r3, #4
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bf4:	b004      	add	sp, #16
 8008bf6:	4770      	bx	lr
 8008bf8:	803c3800 	.word	0x803c3800

08008bfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c16:	d901      	bls.n	8008c1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e01b      	b.n	8008c54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	daf2      	bge.n	8008c0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	019b      	lsls	r3, r3, #6
 8008c2c:	f043 0220 	orr.w	r2, r3, #32
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3301      	adds	r3, #1
 8008c38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c40:	d901      	bls.n	8008c46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e006      	b.n	8008c54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	f003 0320 	and.w	r3, r3, #32
 8008c4e:	2b20      	cmp	r3, #32
 8008c50:	d0f0      	beq.n	8008c34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c78:	d901      	bls.n	8008c7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e018      	b.n	8008cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	daf2      	bge.n	8008c6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2210      	movs	r2, #16
 8008c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	3301      	adds	r3, #1
 8008c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c9c:	d901      	bls.n	8008ca2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e006      	b.n	8008cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	f003 0310 	and.w	r3, r3, #16
 8008caa:	2b10      	cmp	r3, #16
 8008cac:	d0f0      	beq.n	8008c90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	68f9      	ldr	r1, [r7, #12]
 8008cd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b087      	sub	sp, #28
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f003 0306 	and.w	r3, r3, #6
 8008d06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d102      	bne.n	8008d14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	75fb      	strb	r3, [r7, #23]
 8008d12:	e00a      	b.n	8008d2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d002      	beq.n	8008d20 <USB_GetDevSpeed+0x32>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b06      	cmp	r3, #6
 8008d1e:	d102      	bne.n	8008d26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d20:	2302      	movs	r3, #2
 8008d22:	75fb      	strb	r3, [r7, #23]
 8008d24:	e001      	b.n	8008d2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008d26:	230f      	movs	r3, #15
 8008d28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	371c      	adds	r7, #28
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d13a      	bne.n	8008dca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d5a:	69da      	ldr	r2, [r3, #28]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	f003 030f 	and.w	r3, r3, #15
 8008d64:	2101      	movs	r1, #1
 8008d66:	fa01 f303 	lsl.w	r3, r1, r3
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	68f9      	ldr	r1, [r7, #12]
 8008d6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d72:	4313      	orrs	r3, r2
 8008d74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d155      	bne.n	8008e38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	791b      	ldrb	r3, [r3, #4]
 8008da6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008da8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	059b      	lsls	r3, r3, #22
 8008dae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008db0:	4313      	orrs	r3, r2
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	0151      	lsls	r1, r2, #5
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	440a      	add	r2, r1
 8008dba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	e036      	b.n	8008e38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dd0:	69da      	ldr	r2, [r3, #28]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	f003 030f 	and.w	r3, r3, #15
 8008dda:	2101      	movs	r1, #1
 8008ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8008de0:	041b      	lsls	r3, r3, #16
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008de8:	4313      	orrs	r3, r2
 8008dea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d11a      	bne.n	8008e38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	791b      	ldrb	r3, [r3, #4]
 8008e1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e1e:	430b      	orrs	r3, r1
 8008e20:	4313      	orrs	r3, r2
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	0151      	lsls	r1, r2, #5
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	440a      	add	r2, r1
 8008e2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
	...

08008e48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	785b      	ldrb	r3, [r3, #1]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d161      	bne.n	8008f28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e7a:	d11f      	bne.n	8008ebc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	0151      	lsls	r1, r2, #5
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	440a      	add	r2, r1
 8008eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008eb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008eba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	f003 030f 	and.w	r3, r3, #15
 8008ecc:	2101      	movs	r1, #1
 8008ece:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	43db      	mvns	r3, r3
 8008ed6:	68f9      	ldr	r1, [r7, #12]
 8008ed8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008edc:	4013      	ands	r3, r2
 8008ede:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ee6:	69da      	ldr	r2, [r3, #28]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	f003 030f 	and.w	r3, r3, #15
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	68f9      	ldr	r1, [r7, #12]
 8008efc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f00:	4013      	ands	r3, r2
 8008f02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	0159      	lsls	r1, r3, #5
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	440b      	add	r3, r1
 8008f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4b35      	ldr	r3, [pc, #212]	@ (8008ff8 <USB_DeactivateEndpoint+0x1b0>)
 8008f22:	4013      	ands	r3, r2
 8008f24:	600b      	str	r3, [r1, #0]
 8008f26:	e060      	b.n	8008fea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f3e:	d11f      	bne.n	8008f80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	0151      	lsls	r1, r2, #5
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	440a      	add	r2, r1
 8008f56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	0151      	lsls	r1, r2, #5
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	440a      	add	r2, r1
 8008f76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	2101      	movs	r1, #1
 8008f92:	fa01 f303 	lsl.w	r3, r1, r3
 8008f96:	041b      	lsls	r3, r3, #16
 8008f98:	43db      	mvns	r3, r3
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008faa:	69da      	ldr	r2, [r3, #28]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	f003 030f 	and.w	r3, r3, #15
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fba:	041b      	lsls	r3, r3, #16
 8008fbc:	43db      	mvns	r3, r3
 8008fbe:	68f9      	ldr	r1, [r7, #12]
 8008fc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	0159      	lsls	r1, r3, #5
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	440b      	add	r3, r1
 8008fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4b05      	ldr	r3, [pc, #20]	@ (8008ffc <USB_DeactivateEndpoint+0x1b4>)
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	ec337800 	.word	0xec337800
 8008ffc:	eff37800 	.word	0xeff37800

08009000 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b08a      	sub	sp, #40	@ 0x28
 8009004:	af02      	add	r7, sp, #8
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	785b      	ldrb	r3, [r3, #1]
 800901c:	2b01      	cmp	r3, #1
 800901e:	f040 817f 	bne.w	8009320 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d132      	bne.n	8009090 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	440a      	add	r2, r1
 8009040:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009044:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009048:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800904c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	0151      	lsls	r1, r2, #5
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	440a      	add	r2, r1
 8009064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009068:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800906c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	0151      	lsls	r1, r2, #5
 8009080:	69fa      	ldr	r2, [r7, #28]
 8009082:	440a      	add	r2, r1
 8009084:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009088:	0cdb      	lsrs	r3, r3, #19
 800908a:	04db      	lsls	r3, r3, #19
 800908c:	6113      	str	r3, [r2, #16]
 800908e:	e097      	b.n	80091c0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	0151      	lsls	r1, r2, #5
 80090a2:	69fa      	ldr	r2, [r7, #28]
 80090a4:	440a      	add	r2, r1
 80090a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090aa:	0cdb      	lsrs	r3, r3, #19
 80090ac:	04db      	lsls	r3, r3, #19
 80090ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	0151      	lsls	r1, r2, #5
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	440a      	add	r2, r1
 80090c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80090ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80090d2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d11a      	bne.n	8009110 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	691a      	ldr	r2, [r3, #16]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d903      	bls.n	80090ee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	689a      	ldr	r2, [r3, #8]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	0151      	lsls	r1, r2, #5
 8009100:	69fa      	ldr	r2, [r7, #28]
 8009102:	440a      	add	r2, r1
 8009104:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009108:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800910c:	6113      	str	r3, [r2, #16]
 800910e:	e044      	b.n	800919a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	691a      	ldr	r2, [r3, #16]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	4413      	add	r3, r2
 800911a:	1e5a      	subs	r2, r3, #1
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	fbb2 f3f3 	udiv	r3, r2, r3
 8009124:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009132:	691a      	ldr	r2, [r3, #16]
 8009134:	8afb      	ldrh	r3, [r7, #22]
 8009136:	04d9      	lsls	r1, r3, #19
 8009138:	4ba4      	ldr	r3, [pc, #656]	@ (80093cc <USB_EPStartXfer+0x3cc>)
 800913a:	400b      	ands	r3, r1
 800913c:	69b9      	ldr	r1, [r7, #24]
 800913e:	0148      	lsls	r0, r1, #5
 8009140:	69f9      	ldr	r1, [r7, #28]
 8009142:	4401      	add	r1, r0
 8009144:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009148:	4313      	orrs	r3, r2
 800914a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	791b      	ldrb	r3, [r3, #4]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d122      	bne.n	800919a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	4413      	add	r3, r2
 800915c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	0151      	lsls	r1, r2, #5
 8009166:	69fa      	ldr	r2, [r7, #28]
 8009168:	440a      	add	r2, r1
 800916a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800916e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009172:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009180:	691a      	ldr	r2, [r3, #16]
 8009182:	8afb      	ldrh	r3, [r7, #22]
 8009184:	075b      	lsls	r3, r3, #29
 8009186:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800918a:	69b9      	ldr	r1, [r7, #24]
 800918c:	0148      	lsls	r0, r1, #5
 800918e:	69f9      	ldr	r1, [r7, #28]
 8009190:	4401      	add	r1, r0
 8009192:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009196:	4313      	orrs	r3, r2
 8009198:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a6:	691a      	ldr	r2, [r3, #16]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091b0:	69b9      	ldr	r1, [r7, #24]
 80091b2:	0148      	lsls	r0, r1, #5
 80091b4:	69f9      	ldr	r1, [r7, #28]
 80091b6:	4401      	add	r1, r0
 80091b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80091bc:	4313      	orrs	r3, r2
 80091be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80091c0:	79fb      	ldrb	r3, [r7, #7]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d14b      	bne.n	800925e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d009      	beq.n	80091e2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091da:	461a      	mov	r2, r3
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	791b      	ldrb	r3, [r3, #4]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d128      	bne.n	800923c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d110      	bne.n	800921c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	0151      	lsls	r1, r2, #5
 800920c:	69fa      	ldr	r2, [r7, #28]
 800920e:	440a      	add	r2, r1
 8009210:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009214:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	e00f      	b.n	800923c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	69ba      	ldr	r2, [r7, #24]
 800922c:	0151      	lsls	r1, r2, #5
 800922e:	69fa      	ldr	r2, [r7, #28]
 8009230:	440a      	add	r2, r1
 8009232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800923a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	4413      	add	r3, r2
 8009244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	0151      	lsls	r1, r2, #5
 800924e:	69fa      	ldr	r2, [r7, #28]
 8009250:	440a      	add	r2, r1
 8009252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009256:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	e166      	b.n	800952c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	015a      	lsls	r2, r3, #5
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	4413      	add	r3, r2
 8009266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	69ba      	ldr	r2, [r7, #24]
 800926e:	0151      	lsls	r1, r2, #5
 8009270:	69fa      	ldr	r2, [r7, #28]
 8009272:	440a      	add	r2, r1
 8009274:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009278:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800927c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	791b      	ldrb	r3, [r3, #4]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d015      	beq.n	80092b2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 814e 	beq.w	800952c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009296:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	2101      	movs	r1, #1
 80092a2:	fa01 f303 	lsl.w	r3, r1, r3
 80092a6:	69f9      	ldr	r1, [r7, #28]
 80092a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092ac:	4313      	orrs	r3, r2
 80092ae:	634b      	str	r3, [r1, #52]	@ 0x34
 80092b0:	e13c      	b.n	800952c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d110      	bne.n	80092e4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	0151      	lsls	r1, r2, #5
 80092d4:	69fa      	ldr	r2, [r7, #28]
 80092d6:	440a      	add	r2, r1
 80092d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	e00f      	b.n	8009304 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	0151      	lsls	r1, r2, #5
 80092f6:	69fa      	ldr	r2, [r7, #28]
 80092f8:	440a      	add	r2, r1
 80092fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009302:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	68d9      	ldr	r1, [r3, #12]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	781a      	ldrb	r2, [r3, #0]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	b298      	uxth	r0, r3
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	4603      	mov	r3, r0
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f9b9 	bl	8009690 <USB_WritePacket>
 800931e:	e105      	b.n	800952c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	0151      	lsls	r1, r2, #5
 8009332:	69fa      	ldr	r2, [r7, #28]
 8009334:	440a      	add	r2, r1
 8009336:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800933a:	0cdb      	lsrs	r3, r3, #19
 800933c:	04db      	lsls	r3, r3, #19
 800933e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	0151      	lsls	r1, r2, #5
 8009352:	69fa      	ldr	r2, [r7, #28]
 8009354:	440a      	add	r2, r1
 8009356:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800935a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800935e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009362:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d132      	bne.n	80093d0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	689a      	ldr	r2, [r3, #8]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	689a      	ldr	r2, [r3, #8]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	4413      	add	r3, r2
 800938a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800938e:	691a      	ldr	r2, [r3, #16]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009398:	69b9      	ldr	r1, [r7, #24]
 800939a:	0148      	lsls	r0, r1, #5
 800939c:	69f9      	ldr	r1, [r7, #28]
 800939e:	4401      	add	r1, r0
 80093a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093a4:	4313      	orrs	r3, r2
 80093a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	69ba      	ldr	r2, [r7, #24]
 80093b8:	0151      	lsls	r1, r2, #5
 80093ba:	69fa      	ldr	r2, [r7, #28]
 80093bc:	440a      	add	r2, r1
 80093be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80093c6:	6113      	str	r3, [r2, #16]
 80093c8:	e062      	b.n	8009490 <USB_EPStartXfer+0x490>
 80093ca:	bf00      	nop
 80093cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d123      	bne.n	8009420 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e4:	691a      	ldr	r2, [r3, #16]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093ee:	69b9      	ldr	r1, [r7, #24]
 80093f0:	0148      	lsls	r0, r1, #5
 80093f2:	69f9      	ldr	r1, [r7, #28]
 80093f4:	4401      	add	r1, r0
 80093f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093fa:	4313      	orrs	r3, r2
 80093fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	4413      	add	r3, r2
 8009406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	0151      	lsls	r1, r2, #5
 8009410:	69fa      	ldr	r2, [r7, #28]
 8009412:	440a      	add	r2, r1
 8009414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009418:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800941c:	6113      	str	r3, [r2, #16]
 800941e:	e037      	b.n	8009490 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	691a      	ldr	r2, [r3, #16]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	4413      	add	r3, r2
 800942a:	1e5a      	subs	r2, r3, #1
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	fbb2 f3f3 	udiv	r3, r2, r3
 8009434:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	8afa      	ldrh	r2, [r7, #22]
 800943c:	fb03 f202 	mul.w	r2, r3, r2
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009450:	691a      	ldr	r2, [r3, #16]
 8009452:	8afb      	ldrh	r3, [r7, #22]
 8009454:	04d9      	lsls	r1, r3, #19
 8009456:	4b38      	ldr	r3, [pc, #224]	@ (8009538 <USB_EPStartXfer+0x538>)
 8009458:	400b      	ands	r3, r1
 800945a:	69b9      	ldr	r1, [r7, #24]
 800945c:	0148      	lsls	r0, r1, #5
 800945e:	69f9      	ldr	r1, [r7, #28]
 8009460:	4401      	add	r1, r0
 8009462:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009466:	4313      	orrs	r3, r2
 8009468:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009476:	691a      	ldr	r2, [r3, #16]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	6a1b      	ldr	r3, [r3, #32]
 800947c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009480:	69b9      	ldr	r1, [r7, #24]
 8009482:	0148      	lsls	r0, r1, #5
 8009484:	69f9      	ldr	r1, [r7, #28]
 8009486:	4401      	add	r1, r0
 8009488:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800948c:	4313      	orrs	r3, r2
 800948e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d10d      	bne.n	80094b2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d009      	beq.n	80094b2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	68d9      	ldr	r1, [r3, #12]
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ae:	460a      	mov	r2, r1
 80094b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	791b      	ldrb	r3, [r3, #4]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d128      	bne.n	800950c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d110      	bne.n	80094ec <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	0151      	lsls	r1, r2, #5
 80094dc:	69fa      	ldr	r2, [r7, #28]
 80094de:	440a      	add	r2, r1
 80094e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	e00f      	b.n	800950c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	0151      	lsls	r1, r2, #5
 80094fe:	69fa      	ldr	r2, [r7, #28]
 8009500:	440a      	add	r2, r1
 8009502:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800950a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	0151      	lsls	r1, r2, #5
 800951e:	69fa      	ldr	r2, [r7, #28]
 8009520:	440a      	add	r2, r1
 8009522:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009526:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800952a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3720      	adds	r7, #32
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	1ff80000 	.word	0x1ff80000

0800953c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d14a      	bne.n	80095f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800956e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009572:	f040 8086 	bne.w	8009682 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	7812      	ldrb	r2, [r2, #0]
 800958a:	0151      	lsls	r1, r2, #5
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	440a      	add	r2, r1
 8009590:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009594:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009598:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	7812      	ldrb	r2, [r2, #0]
 80095ae:	0151      	lsls	r1, r2, #5
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	440a      	add	r2, r1
 80095b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3301      	adds	r3, #1
 80095c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d902      	bls.n	80095d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	75fb      	strb	r3, [r7, #23]
          break;
 80095d2:	e056      	b.n	8009682 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095ec:	d0e7      	beq.n	80095be <USB_EPStopXfer+0x82>
 80095ee:	e048      	b.n	8009682 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009604:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009608:	d13b      	bne.n	8009682 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	7812      	ldrb	r2, [r2, #0]
 800961e:	0151      	lsls	r1, r2, #5
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	440a      	add	r2, r1
 8009624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009628:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800962c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	7812      	ldrb	r2, [r2, #0]
 8009642:	0151      	lsls	r1, r2, #5
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	440a      	add	r2, r1
 8009648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800964c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009650:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3301      	adds	r3, #1
 8009656:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800965e:	4293      	cmp	r3, r2
 8009660:	d902      	bls.n	8009668 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	75fb      	strb	r3, [r7, #23]
          break;
 8009666:	e00c      	b.n	8009682 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800967c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009680:	d0e7      	beq.n	8009652 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009682:	7dfb      	ldrb	r3, [r7, #23]
}
 8009684:	4618      	mov	r0, r3
 8009686:	371c      	adds	r7, #28
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009690:	b480      	push	{r7}
 8009692:	b089      	sub	sp, #36	@ 0x24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	4611      	mov	r1, r2
 800969c:	461a      	mov	r2, r3
 800969e:	460b      	mov	r3, r1
 80096a0:	71fb      	strb	r3, [r7, #7]
 80096a2:	4613      	mov	r3, r2
 80096a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80096ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d123      	bne.n	80096fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80096b6:	88bb      	ldrh	r3, [r7, #4]
 80096b8:	3303      	adds	r3, #3
 80096ba:	089b      	lsrs	r3, r3, #2
 80096bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80096be:	2300      	movs	r3, #0
 80096c0:	61bb      	str	r3, [r7, #24]
 80096c2:	e018      	b.n	80096f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	031a      	lsls	r2, r3, #12
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096d0:	461a      	mov	r2, r3
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	3301      	adds	r3, #1
 80096dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	3301      	adds	r3, #1
 80096e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	3301      	adds	r3, #1
 80096e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	3301      	adds	r3, #1
 80096ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	3301      	adds	r3, #1
 80096f4:	61bb      	str	r3, [r7, #24]
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d3e2      	bcc.n	80096c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3724      	adds	r7, #36	@ 0x24
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800970c:	b480      	push	{r7}
 800970e:	b08b      	sub	sp, #44	@ 0x2c
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	4613      	mov	r3, r2
 8009718:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009722:	88fb      	ldrh	r3, [r7, #6]
 8009724:	089b      	lsrs	r3, r3, #2
 8009726:	b29b      	uxth	r3, r3
 8009728:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800972a:	88fb      	ldrh	r3, [r7, #6]
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009732:	2300      	movs	r3, #0
 8009734:	623b      	str	r3, [r7, #32]
 8009736:	e014      	b.n	8009762 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009742:	601a      	str	r2, [r3, #0]
    pDest++;
 8009744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009746:	3301      	adds	r3, #1
 8009748:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800974a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974c:	3301      	adds	r3, #1
 800974e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009752:	3301      	adds	r3, #1
 8009754:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009758:	3301      	adds	r3, #1
 800975a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	3301      	adds	r3, #1
 8009760:	623b      	str	r3, [r7, #32]
 8009762:	6a3a      	ldr	r2, [r7, #32]
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	429a      	cmp	r2, r3
 8009768:	d3e6      	bcc.n	8009738 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800976a:	8bfb      	ldrh	r3, [r7, #30]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d01e      	beq.n	80097ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800977a:	461a      	mov	r2, r3
 800977c:	f107 0310 	add.w	r3, r7, #16
 8009780:	6812      	ldr	r2, [r2, #0]
 8009782:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	fa22 f303 	lsr.w	r3, r2, r3
 8009790:	b2da      	uxtb	r2, r3
 8009792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009794:	701a      	strb	r2, [r3, #0]
      i++;
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	3301      	adds	r3, #1
 800979a:	623b      	str	r3, [r7, #32]
      pDest++;
 800979c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979e:	3301      	adds	r3, #1
 80097a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80097a2:	8bfb      	ldrh	r3, [r7, #30]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80097a8:	8bfb      	ldrh	r3, [r7, #30]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1ea      	bne.n	8009784 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80097ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	372c      	adds	r7, #44	@ 0x2c
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	785b      	ldrb	r3, [r3, #1]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d12c      	bne.n	8009832 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	db12      	blt.n	8009810 <USB_EPSetStall+0x54>
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00f      	beq.n	8009810 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	0151      	lsls	r1, r2, #5
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	440a      	add	r2, r1
 8009806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800980a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800980e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	440a      	add	r2, r1
 8009826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800982a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	e02b      	b.n	800988a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	4413      	add	r3, r2
 800983a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	db12      	blt.n	800986a <USB_EPSetStall+0xae>
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00f      	beq.n	800986a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	0151      	lsls	r1, r2, #5
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	440a      	add	r2, r1
 8009860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009864:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009868:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	0151      	lsls	r1, r2, #5
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	440a      	add	r2, r1
 8009880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009884:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009888:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	785b      	ldrb	r3, [r3, #1]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d128      	bne.n	8009906 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	0151      	lsls	r1, r2, #5
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	440a      	add	r2, r1
 80098ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80098d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	791b      	ldrb	r3, [r3, #4]
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d003      	beq.n	80098e4 <USB_EPClearStall+0x4c>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	791b      	ldrb	r3, [r3, #4]
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d138      	bne.n	8009956 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	015a      	lsls	r2, r3, #5
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4413      	add	r3, r2
 80098ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	0151      	lsls	r1, r2, #5
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	440a      	add	r2, r1
 80098fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009902:	6013      	str	r3, [r2, #0]
 8009904:	e027      	b.n	8009956 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4413      	add	r3, r2
 800990e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	0151      	lsls	r1, r2, #5
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	440a      	add	r2, r1
 800991c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009920:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009924:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	791b      	ldrb	r3, [r3, #4]
 800992a:	2b03      	cmp	r3, #3
 800992c:	d003      	beq.n	8009936 <USB_EPClearStall+0x9e>
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	791b      	ldrb	r3, [r3, #4]
 8009932:	2b02      	cmp	r3, #2
 8009934:	d10f      	bne.n	8009956 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	0151      	lsls	r1, r2, #5
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	440a      	add	r2, r1
 800994c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009954:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009982:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009986:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	011b      	lsls	r3, r3, #4
 8009994:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009998:	68f9      	ldr	r1, [r7, #12]
 800999a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800999e:	4313      	orrs	r3, r2
 80099a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80099ca:	f023 0303 	bic.w	r3, r3, #3
 80099ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099de:	f023 0302 	bic.w	r3, r3, #2
 80099e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b085      	sub	sp, #20
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009a0c:	f023 0303 	bic.w	r3, r3, #3
 8009a10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a20:	f043 0302 	orr.w	r3, r3, #2
 8009a24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	695b      	ldr	r3, [r3, #20]
 8009a40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b085      	sub	sp, #20
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a76:	69db      	ldr	r3, [r3, #28]
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	0c1b      	lsrs	r3, r3, #16
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b085      	sub	sp, #20
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aaa:	69db      	ldr	r3, [r3, #28]
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	4013      	ands	r3, r2
 8009ab0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	b29b      	uxth	r3, r3
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b085      	sub	sp, #20
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009ad2:	78fb      	ldrb	r3, [r7, #3]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	4013      	ands	r3, r2
 8009aee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009af0:	68bb      	ldr	r3, [r7, #8]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b087      	sub	sp, #28
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	460b      	mov	r3, r1
 8009b08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b20:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009b22:	78fb      	ldrb	r3, [r7, #3]
 8009b24:	f003 030f 	and.w	r3, r3, #15
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2e:	01db      	lsls	r3, r3, #7
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	4013      	ands	r3, r2
 8009b4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	371c      	adds	r7, #28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b083      	sub	sp, #12
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	f003 0301 	and.w	r3, r3, #1
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b085      	sub	sp, #20
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b90:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009b94:	f023 0307 	bic.w	r3, r3, #7
 8009b98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	333c      	adds	r3, #60	@ 0x3c
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	4a26      	ldr	r2, [pc, #152]	@ (8009c74 <USB_EP0_OutStart+0xb8>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d90a      	bls.n	8009bf6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bf0:	d101      	bne.n	8009bf6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	e037      	b.n	8009c66 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	2300      	movs	r3, #0
 8009c00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c24:	f043 0318 	orr.w	r3, r3, #24
 8009c28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c38:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009c3c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009c3e:	7afb      	ldrb	r3, [r7, #11]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d10f      	bne.n	8009c64 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c5e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009c62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	4f54300a 	.word	0x4f54300a

08009c78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3301      	adds	r3, #1
 8009c88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c90:	d901      	bls.n	8009c96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e01b      	b.n	8009cce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	daf2      	bge.n	8009c84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	f043 0201 	orr.w	r2, r3, #1
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cba:	d901      	bls.n	8009cc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e006      	b.n	8009cce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	f003 0301 	and.w	r3, r3, #1
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d0f0      	beq.n	8009cae <USB_CoreReset+0x36>

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
	...

08009cdc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4912      	ldr	r1, [pc, #72]	@ (8009d2c <MX_USB_Device_Init+0x50>)
 8009ce4:	4812      	ldr	r0, [pc, #72]	@ (8009d30 <MX_USB_Device_Init+0x54>)
 8009ce6:	f001 f85f 	bl	800ada8 <USBD_Init>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009cf0:	f7f6 fe9a 	bl	8000a28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009cf4:	490f      	ldr	r1, [pc, #60]	@ (8009d34 <MX_USB_Device_Init+0x58>)
 8009cf6:	480e      	ldr	r0, [pc, #56]	@ (8009d30 <MX_USB_Device_Init+0x54>)
 8009cf8:	f001 f886 	bl	800ae08 <USBD_RegisterClass>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009d02:	f7f6 fe91 	bl	8000a28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009d06:	490c      	ldr	r1, [pc, #48]	@ (8009d38 <MX_USB_Device_Init+0x5c>)
 8009d08:	4809      	ldr	r0, [pc, #36]	@ (8009d30 <MX_USB_Device_Init+0x54>)
 8009d0a:	f000 ffb1 	bl	800ac70 <USBD_CDC_RegisterInterface>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009d14:	f7f6 fe88 	bl	8000a28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009d18:	4805      	ldr	r0, [pc, #20]	@ (8009d30 <MX_USB_Device_Init+0x54>)
 8009d1a:	f001 f89c 	bl	800ae56 <USBD_Start>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009d24:	f7f6 fe80 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009d28:	bf00      	nop
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20000088 	.word	0x20000088
 8009d30:	2000ce88 	.word	0x2000ce88
 8009d34:	200000e8 	.word	0x200000e8
 8009d38:	20000074 	.word	0x20000074

08009d3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d40:	2200      	movs	r2, #0
 8009d42:	4905      	ldr	r1, [pc, #20]	@ (8009d58 <CDC_Init_FS+0x1c>)
 8009d44:	4805      	ldr	r0, [pc, #20]	@ (8009d5c <CDC_Init_FS+0x20>)
 8009d46:	f000 ffa8 	bl	800ac9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d4a:	4905      	ldr	r1, [pc, #20]	@ (8009d60 <CDC_Init_FS+0x24>)
 8009d4c:	4803      	ldr	r0, [pc, #12]	@ (8009d5c <CDC_Init_FS+0x20>)
 8009d4e:	f000 ffbd 	bl	800accc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	2000d958 	.word	0x2000d958
 8009d5c:	2000ce88 	.word	0x2000ce88
 8009d60:	2000d158 	.word	0x2000d158

08009d64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d64:	b480      	push	{r7}
 8009d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	6039      	str	r1, [r7, #0]
 8009d7e:	71fb      	strb	r3, [r7, #7]
 8009d80:	4613      	mov	r3, r2
 8009d82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009d84:	79fb      	ldrb	r3, [r7, #7]
 8009d86:	2b23      	cmp	r3, #35	@ 0x23
 8009d88:	d84a      	bhi.n	8009e20 <CDC_Control_FS+0xac>
 8009d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d90 <CDC_Control_FS+0x1c>)
 8009d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d90:	08009e21 	.word	0x08009e21
 8009d94:	08009e21 	.word	0x08009e21
 8009d98:	08009e21 	.word	0x08009e21
 8009d9c:	08009e21 	.word	0x08009e21
 8009da0:	08009e21 	.word	0x08009e21
 8009da4:	08009e21 	.word	0x08009e21
 8009da8:	08009e21 	.word	0x08009e21
 8009dac:	08009e21 	.word	0x08009e21
 8009db0:	08009e21 	.word	0x08009e21
 8009db4:	08009e21 	.word	0x08009e21
 8009db8:	08009e21 	.word	0x08009e21
 8009dbc:	08009e21 	.word	0x08009e21
 8009dc0:	08009e21 	.word	0x08009e21
 8009dc4:	08009e21 	.word	0x08009e21
 8009dc8:	08009e21 	.word	0x08009e21
 8009dcc:	08009e21 	.word	0x08009e21
 8009dd0:	08009e21 	.word	0x08009e21
 8009dd4:	08009e21 	.word	0x08009e21
 8009dd8:	08009e21 	.word	0x08009e21
 8009ddc:	08009e21 	.word	0x08009e21
 8009de0:	08009e21 	.word	0x08009e21
 8009de4:	08009e21 	.word	0x08009e21
 8009de8:	08009e21 	.word	0x08009e21
 8009dec:	08009e21 	.word	0x08009e21
 8009df0:	08009e21 	.word	0x08009e21
 8009df4:	08009e21 	.word	0x08009e21
 8009df8:	08009e21 	.word	0x08009e21
 8009dfc:	08009e21 	.word	0x08009e21
 8009e00:	08009e21 	.word	0x08009e21
 8009e04:	08009e21 	.word	0x08009e21
 8009e08:	08009e21 	.word	0x08009e21
 8009e0c:	08009e21 	.word	0x08009e21
 8009e10:	08009e21 	.word	0x08009e21
 8009e14:	08009e21 	.word	0x08009e21
 8009e18:	08009e21 	.word	0x08009e21
 8009e1c:	08009e21 	.word	0x08009e21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e20:	bf00      	nop
  }

  return (USBD_OK);
 8009e22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009e3a:	6879      	ldr	r1, [r7, #4]
 8009e3c:	482f      	ldr	r0, [pc, #188]	@ (8009efc <CDC_Receive_FS+0xcc>)
 8009e3e:	f000 ff45 	bl	800accc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009e42:	482e      	ldr	r0, [pc, #184]	@ (8009efc <CDC_Receive_FS+0xcc>)
 8009e44:	f000 ff86 	bl	800ad54 <USBD_CDC_ReceivePacket>

  uint32_t msg_rx = (Buf[3]<<24)|(Buf[2]<<16)|(Buf[1]<<8)|(Buf[0]);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3303      	adds	r3, #3
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	061a      	lsls	r2, r3, #24
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	3302      	adds	r3, #2
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	041b      	lsls	r3, r3, #16
 8009e58:	431a      	orrs	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	021b      	lsls	r3, r3, #8
 8009e62:	4313      	orrs	r3, r2
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	7812      	ldrb	r2, [r2, #0]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]

  uint32_t addr = (msg_rx&0x7F000000)>>24;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	0e1b      	lsrs	r3, r3, #24
 8009e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e74:	613b      	str	r3, [r7, #16]
  uint32_t data = (msg_rx&0x00FFFFFF);
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009e7c:	60fb      	str	r3, [r7, #12]
  uint32_t msg_tx = 0xdeadbeef;
 8009e7e:	4b20      	ldr	r3, [pc, #128]	@ (8009f00 <CDC_Receive_FS+0xd0>)
 8009e80:	60bb      	str	r3, [r7, #8]

  if(msg_rx&0x80000000){
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	da05      	bge.n	8009e94 <CDC_Receive_FS+0x64>
	  set_register(&device_registers,addr,data);
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	6939      	ldr	r1, [r7, #16]
 8009e8c:	481d      	ldr	r0, [pc, #116]	@ (8009f04 <CDC_Receive_FS+0xd4>)
 8009e8e:	f7f7 f9ca 	bl	8001226 <set_register>
 8009e92:	e02e      	b.n	8009ef2 <CDC_Receive_FS+0xc2>
  }
  else{
	  if(addr == DVC_FLUSH_SAMPLE_DATA_1){
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	2b64      	cmp	r3, #100	@ 0x64
 8009e98:	d105      	bne.n	8009ea6 <CDC_Receive_FS+0x76>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_1, sizeof(adc_samples_1));
 8009e9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009e9e:	481a      	ldr	r0, [pc, #104]	@ (8009f08 <CDC_Receive_FS+0xd8>)
 8009ea0:	f000 f838 	bl	8009f14 <CDC_Transmit_FS>
 8009ea4:	e025      	b.n	8009ef2 <CDC_Receive_FS+0xc2>
	  }
	  else if(addr == DVC_FLUSH_SAMPLE_DATA_2){
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	2b65      	cmp	r3, #101	@ 0x65
 8009eaa:	d105      	bne.n	8009eb8 <CDC_Receive_FS+0x88>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_2, sizeof(adc_samples_2));
 8009eac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009eb0:	4816      	ldr	r0, [pc, #88]	@ (8009f0c <CDC_Receive_FS+0xdc>)
 8009eb2:	f000 f82f 	bl	8009f14 <CDC_Transmit_FS>
 8009eb6:	e01c      	b.n	8009ef2 <CDC_Receive_FS+0xc2>
	  }
	  else if(addr == DVC_FLUSH_SAMPLE_DATA_3){
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	2b66      	cmp	r3, #102	@ 0x66
 8009ebc:	d105      	bne.n	8009eca <CDC_Receive_FS+0x9a>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_3, sizeof(adc_samples_3));
 8009ebe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009ec2:	4813      	ldr	r0, [pc, #76]	@ (8009f10 <CDC_Receive_FS+0xe0>)
 8009ec4:	f000 f826 	bl	8009f14 <CDC_Transmit_FS>
 8009ec8:	e013      	b.n	8009ef2 <CDC_Receive_FS+0xc2>
	  }
	  else{
		  data = get_register(&device_registers,addr);
 8009eca:	6939      	ldr	r1, [r7, #16]
 8009ecc:	480d      	ldr	r0, [pc, #52]	@ (8009f04 <CDC_Receive_FS+0xd4>)
 8009ece:	f7f7 f999 	bl	8001204 <get_register>
 8009ed2:	60f8      	str	r0, [r7, #12]
		  msg_tx = ((addr << 24)&0x7F000000) | (data&0x00FFFFFF);
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	061b      	lsls	r3, r3, #24
 8009ed8:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	60bb      	str	r3, [r7, #8]
		  CDC_Transmit_FS((uint8_t*)&msg_tx, sizeof(msg_tx));
 8009ee6:	f107 0308 	add.w	r3, r7, #8
 8009eea:	2104      	movs	r1, #4
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 f811 	bl	8009f14 <CDC_Transmit_FS>
	  }
  }

  return (USBD_OK);
 8009ef2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	2000ce88 	.word	0x2000ce88
 8009f00:	deadbeef 	.word	0xdeadbeef
 8009f04:	2000c978 	.word	0x2000c978
 8009f08:	20000978 	.word	0x20000978
 8009f0c:	20004978 	.word	0x20004978
 8009f10:	20008978 	.word	0x20008978

08009f14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009f24:	4b0d      	ldr	r3, [pc, #52]	@ (8009f5c <CDC_Transmit_FS+0x48>)
 8009f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e00b      	b.n	8009f52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f3a:	887b      	ldrh	r3, [r7, #2]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	4806      	ldr	r0, [pc, #24]	@ (8009f5c <CDC_Transmit_FS+0x48>)
 8009f42:	f000 feaa 	bl	800ac9a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f46:	4805      	ldr	r0, [pc, #20]	@ (8009f5c <CDC_Transmit_FS+0x48>)
 8009f48:	f000 fed4 	bl	800acf4 <USBD_CDC_TransmitPacket>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	2000ce88 	.word	0x2000ce88

08009f60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	371c      	adds	r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
	...

08009f84 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	6039      	str	r1, [r7, #0]
 8009f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	2212      	movs	r2, #18
 8009f94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009f96:	4b03      	ldr	r3, [pc, #12]	@ (8009fa4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	200000a8 	.word	0x200000a8

08009fa8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	6039      	str	r1, [r7, #0]
 8009fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2204      	movs	r2, #4
 8009fb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009fba:	4b03      	ldr	r3, [pc, #12]	@ (8009fc8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	200000bc 	.word	0x200000bc

08009fcc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	6039      	str	r1, [r7, #0]
 8009fd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fd8:	79fb      	ldrb	r3, [r7, #7]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d105      	bne.n	8009fea <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	4907      	ldr	r1, [pc, #28]	@ (800a000 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009fe2:	4808      	ldr	r0, [pc, #32]	@ (800a004 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009fe4:	f001 ff40 	bl	800be68 <USBD_GetString>
 8009fe8:	e004      	b.n	8009ff4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	4904      	ldr	r1, [pc, #16]	@ (800a000 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009fee:	4805      	ldr	r0, [pc, #20]	@ (800a004 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009ff0:	f001 ff3a 	bl	800be68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ff4:	4b02      	ldr	r3, [pc, #8]	@ (800a000 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	2000e158 	.word	0x2000e158
 800a004:	0800c098 	.word	0x0800c098

0800a008 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	6039      	str	r1, [r7, #0]
 800a012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	4904      	ldr	r1, [pc, #16]	@ (800a028 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a018:	4804      	ldr	r0, [pc, #16]	@ (800a02c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a01a:	f001 ff25 	bl	800be68 <USBD_GetString>
  return USBD_StrDesc;
 800a01e:	4b02      	ldr	r3, [pc, #8]	@ (800a028 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	2000e158 	.word	0x2000e158
 800a02c:	0800c0b0 	.word	0x0800c0b0

0800a030 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	221a      	movs	r2, #26
 800a040:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a042:	f000 f843 	bl	800a0cc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a046:	4b02      	ldr	r3, [pc, #8]	@ (800a050 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	200000c0 	.word	0x200000c0

0800a054 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	6039      	str	r1, [r7, #0]
 800a05e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a060:	79fb      	ldrb	r3, [r7, #7]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d105      	bne.n	800a072 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	4907      	ldr	r1, [pc, #28]	@ (800a088 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a06a:	4808      	ldr	r0, [pc, #32]	@ (800a08c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a06c:	f001 fefc 	bl	800be68 <USBD_GetString>
 800a070:	e004      	b.n	800a07c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	4904      	ldr	r1, [pc, #16]	@ (800a088 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a076:	4805      	ldr	r0, [pc, #20]	@ (800a08c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a078:	f001 fef6 	bl	800be68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a07c:	4b02      	ldr	r3, [pc, #8]	@ (800a088 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	2000e158 	.word	0x2000e158
 800a08c:	0800c0c4 	.word	0x0800c0c4

0800a090 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	6039      	str	r1, [r7, #0]
 800a09a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d105      	bne.n	800a0ae <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	4907      	ldr	r1, [pc, #28]	@ (800a0c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a0a6:	4808      	ldr	r0, [pc, #32]	@ (800a0c8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a0a8:	f001 fede 	bl	800be68 <USBD_GetString>
 800a0ac:	e004      	b.n	800a0b8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	4904      	ldr	r1, [pc, #16]	@ (800a0c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a0b2:	4805      	ldr	r0, [pc, #20]	@ (800a0c8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a0b4:	f001 fed8 	bl	800be68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0b8:	4b02      	ldr	r3, [pc, #8]	@ (800a0c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	2000e158 	.word	0x2000e158
 800a0c8:	0800c0d0 	.word	0x0800c0d0

0800a0cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a110 <Get_SerialNum+0x44>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a114 <Get_SerialNum+0x48>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0de:	4b0e      	ldr	r3, [pc, #56]	@ (800a118 <Get_SerialNum+0x4c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d009      	beq.n	800a106 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0f2:	2208      	movs	r2, #8
 800a0f4:	4909      	ldr	r1, [pc, #36]	@ (800a11c <Get_SerialNum+0x50>)
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 f814 	bl	800a124 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	4908      	ldr	r1, [pc, #32]	@ (800a120 <Get_SerialNum+0x54>)
 800a100:	68b8      	ldr	r0, [r7, #8]
 800a102:	f000 f80f 	bl	800a124 <IntToUnicode>
  }
}
 800a106:	bf00      	nop
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	0bfa0700 	.word	0x0bfa0700
 800a114:	0bfa0704 	.word	0x0bfa0704
 800a118:	0bfa0708 	.word	0x0bfa0708
 800a11c:	200000c2 	.word	0x200000c2
 800a120:	200000d2 	.word	0x200000d2

0800a124 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a132:	2300      	movs	r3, #0
 800a134:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a136:	2300      	movs	r3, #0
 800a138:	75fb      	strb	r3, [r7, #23]
 800a13a:	e027      	b.n	800a18c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	0f1b      	lsrs	r3, r3, #28
 800a140:	2b09      	cmp	r3, #9
 800a142:	d80b      	bhi.n	800a15c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	0f1b      	lsrs	r3, r3, #28
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	4619      	mov	r1, r3
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	440b      	add	r3, r1
 800a154:	3230      	adds	r2, #48	@ 0x30
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	701a      	strb	r2, [r3, #0]
 800a15a:	e00a      	b.n	800a172 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	0f1b      	lsrs	r3, r3, #28
 800a160:	b2da      	uxtb	r2, r3
 800a162:	7dfb      	ldrb	r3, [r7, #23]
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	4619      	mov	r1, r3
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	440b      	add	r3, r1
 800a16c:	3237      	adds	r2, #55	@ 0x37
 800a16e:	b2d2      	uxtb	r2, r2
 800a170:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	011b      	lsls	r3, r3, #4
 800a176:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	3301      	adds	r3, #1
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	4413      	add	r3, r2
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a186:	7dfb      	ldrb	r3, [r7, #23]
 800a188:	3301      	adds	r3, #1
 800a18a:	75fb      	strb	r3, [r7, #23]
 800a18c:	7dfa      	ldrb	r2, [r7, #23]
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	429a      	cmp	r2, r3
 800a192:	d3d3      	bcc.n	800a13c <IntToUnicode+0x18>
  }
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	371c      	adds	r7, #28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b082      	sub	sp, #8
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	f000 fe97 	bl	800aeec <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a1be:	bf00      	nop
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	6879      	ldr	r1, [r7, #4]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	00db      	lsls	r3, r3, #3
 800a1e0:	4413      	add	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	440b      	add	r3, r1
 800a1e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	78fb      	ldrb	r3, [r7, #3]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	f000 fed1 	bl	800af96 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a20e:	78fa      	ldrb	r2, [r7, #3]
 800a210:	6879      	ldr	r1, [r7, #4]
 800a212:	4613      	mov	r3, r2
 800a214:	00db      	lsls	r3, r3, #3
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	440b      	add	r3, r1
 800a21c:	3320      	adds	r3, #32
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	78fb      	ldrb	r3, [r7, #3]
 800a222:	4619      	mov	r1, r3
 800a224:	f000 ff1a 	bl	800b05c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 f81e 	bl	800b280 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a254:	2301      	movs	r3, #1
 800a256:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	79db      	ldrb	r3, [r3, #7]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d001      	beq.n	800a264 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a260:	f7f6 fbe2 	bl	8000a28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a26a:	7bfa      	ldrb	r2, [r7, #15]
 800a26c:	4611      	mov	r1, r2
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 ffcb 	bl	800b20a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 ff84 	bl	800b188 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a280:	bf00      	nop
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a296:	4618      	mov	r0, r3
 800a298:	f000 ffc7 	bl	800b22a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	7adb      	ldrb	r3, [r3, #11]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d005      	beq.n	800a2b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2a4:	4b04      	ldr	r3, [pc, #16]	@ (800a2b8 <HAL_PCD_SuspendCallback+0x30>)
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	4a03      	ldr	r2, [pc, #12]	@ (800a2b8 <HAL_PCD_SuspendCallback+0x30>)
 800a2aa:	f043 0306 	orr.w	r3, r3, #6
 800a2ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	e000ed00 	.word	0xe000ed00

0800a2bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	7adb      	ldrb	r3, [r3, #11]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d007      	beq.n	800a2dc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2cc:	4b08      	ldr	r3, [pc, #32]	@ (800a2f0 <HAL_PCD_ResumeCallback+0x34>)
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	4a07      	ldr	r2, [pc, #28]	@ (800a2f0 <HAL_PCD_ResumeCallback+0x34>)
 800a2d2:	f023 0306 	bic.w	r3, r3, #6
 800a2d6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a2d8:	f000 fa2a 	bl	800a730 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 ffb6 	bl	800b254 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a2e8:	bf00      	nop
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	e000ed00 	.word	0xe000ed00

0800a2f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a306:	78fa      	ldrb	r2, [r7, #3]
 800a308:	4611      	mov	r1, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 ffdf 	bl	800b2ce <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	460b      	mov	r3, r1
 800a322:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a32a:	78fa      	ldrb	r2, [r7, #3]
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 ffc0 	bl	800b2b4 <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 ffcc 	bl	800b2e8 <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a366:	4618      	mov	r0, r3
 800a368:	f000 ffc9 	bl	800b2fe <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 800a36c:	bf00      	nop
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a37c:	4a24      	ldr	r2, [pc, #144]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a22      	ldr	r2, [pc, #136]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a388:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a38c:	f7fa faf2 	bl	8004974 <HAL_PWREx_EnableVddUSB>
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    Error_Handler( );
  }
#else
  hpcd_USB_FS.Instance = USB_OTG_FS;
 800a390:	4b1f      	ldr	r3, [pc, #124]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a392:	4a20      	ldr	r2, [pc, #128]	@ (800a414 <USBD_LL_Init+0xa0>)
 800a394:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 6;
 800a396:	4b1e      	ldr	r3, [pc, #120]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a398:	2206      	movs	r2, #6
 800a39a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a39c:	4b1c      	ldr	r3, [pc, #112]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a39e:	2202      	movs	r2, #2
 800a3a0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a3a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a3a8:	4b19      	ldr	r3, [pc, #100]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a3ae:	4b18      	ldr	r3, [pc, #96]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a3b4:	4b16      	ldr	r3, [pc, #88]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_FS.Init.use_dedicated_ep1 = DISABLE;
 800a3ba:	4b15      	ldr	r3, [pc, #84]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	73da      	strb	r2, [r3, #15]
  hpcd_USB_FS.Init.vbus_sensing_enable = DISABLE;
 800a3c0:	4b13      	ldr	r3, [pc, #76]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a3c6:	4812      	ldr	r0, [pc, #72]	@ (800a410 <USBD_LL_Init+0x9c>)
 800a3c8:	f7f8 ffae 	bl	8003328 <HAL_PCD_Init>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <USBD_LL_Init+0x62>
  {
    Error_Handler();
 800a3d2:	f7f6 fb29 	bl	8000a28 <Error_Handler>
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , 0, 0xC0);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , 0, 0x110);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , 0, 0x100);
#else
  HAL_PCDEx_SetRxFiFo((PCD_HandleTypeDef*)pdev->pData, 0x80);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3dc:	2180      	movs	r1, #128	@ 0x80
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fa fa07 	bl	80047f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 0, 0x40);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3ea:	2240      	movs	r2, #64	@ 0x40
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fa f9b8 	bl	8004764 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 1, 0x80);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3fa:	2280      	movs	r2, #128	@ 0x80
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fa f9b0 	bl	8004764 <HAL_PCDEx_SetTxFiFo>
#endif
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	2000e358 	.word	0x2000e358
 800a414:	42040000 	.word	0x42040000

0800a418 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a420:	2300      	movs	r3, #0
 800a422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a42e:	4618      	mov	r0, r3
 800a430:	f7f9 f892 	bl	8003558 <HAL_PCD_Start>
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 f97e 	bl	800a73c <USBD_Get_USB_Status>
 800a440:	4603      	mov	r3, r0
 800a442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a444:	7bbb      	ldrb	r3, [r7, #14]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	4608      	mov	r0, r1
 800a458:	4611      	mov	r1, r2
 800a45a:	461a      	mov	r2, r3
 800a45c:	4603      	mov	r3, r0
 800a45e:	70fb      	strb	r3, [r7, #3]
 800a460:	460b      	mov	r3, r1
 800a462:	70bb      	strb	r3, [r7, #2]
 800a464:	4613      	mov	r3, r2
 800a466:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a476:	78bb      	ldrb	r3, [r7, #2]
 800a478:	883a      	ldrh	r2, [r7, #0]
 800a47a:	78f9      	ldrb	r1, [r7, #3]
 800a47c:	f7f9 fd8d 	bl	8003f9a <HAL_PCD_EP_Open>
 800a480:	4603      	mov	r3, r0
 800a482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a484:	7bfb      	ldrb	r3, [r7, #15]
 800a486:	4618      	mov	r0, r3
 800a488:	f000 f958 	bl	800a73c <USBD_Get_USB_Status>
 800a48c:	4603      	mov	r3, r0
 800a48e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a490:	7bbb      	ldrb	r3, [r7, #14]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4b4:	78fa      	ldrb	r2, [r7, #3]
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7f9 fdd8 	bl	800406e <HAL_PCD_EP_Close>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 f939 	bl	800a73c <USBD_Get_USB_Status>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4f2:	78fa      	ldrb	r2, [r7, #3]
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7f9 fe90 	bl	800421c <HAL_PCD_EP_SetStall>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a500:	7bfb      	ldrb	r3, [r7, #15]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 f91a 	bl	800a73c <USBD_Get_USB_Status>
 800a508:	4603      	mov	r3, r0
 800a50a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a530:	78fa      	ldrb	r2, [r7, #3]
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f7f9 fed4 	bl	80042e2 <HAL_PCD_EP_ClrStall>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	4618      	mov	r0, r3
 800a542:	f000 f8fb 	bl	800a73c <USBD_Get_USB_Status>
 800a546:	4603      	mov	r3, r0
 800a548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a566:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	da0b      	bge.n	800a588 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a576:	68f9      	ldr	r1, [r7, #12]
 800a578:	4613      	mov	r3, r2
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	4413      	add	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	440b      	add	r3, r1
 800a582:	3316      	adds	r3, #22
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	e00b      	b.n	800a5a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a588:	78fb      	ldrb	r3, [r7, #3]
 800a58a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a58e:	68f9      	ldr	r1, [r7, #12]
 800a590:	4613      	mov	r3, r2
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	4413      	add	r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	440b      	add	r3, r1
 800a59a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a59e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a5c6:	78fa      	ldrb	r2, [r7, #3]
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7f9 fcc1 	bl	8003f52 <HAL_PCD_SetAddress>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 f8b0 	bl	800a73c <USBD_Get_USB_Status>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b086      	sub	sp, #24
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	603b      	str	r3, [r7, #0]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a608:	7af9      	ldrb	r1, [r7, #11]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	f7f9 fdcb 	bl	80041a8 <HAL_PCD_EP_Transmit>
 800a612:	4603      	mov	r3, r0
 800a614:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a616:	7dfb      	ldrb	r3, [r7, #23]
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 f88f 	bl	800a73c <USBD_Get_USB_Status>
 800a61e:	4603      	mov	r3, r0
 800a620:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a622:	7dbb      	ldrb	r3, [r7, #22]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	607a      	str	r2, [r7, #4]
 800a636:	603b      	str	r3, [r7, #0]
 800a638:	460b      	mov	r3, r1
 800a63a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a64a:	7af9      	ldrb	r1, [r7, #11]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	f7f9 fd57 	bl	8004102 <HAL_PCD_EP_Receive>
 800a654:	4603      	mov	r3, r0
 800a656:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 f86e 	bl	800a73c <USBD_Get_USB_Status>
 800a660:	4603      	mov	r3, r0
 800a662:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a664:	7dbb      	ldrb	r3, [r7, #22]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3718      	adds	r7, #24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	460b      	mov	r3, r1
 800a678:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a680:	78fa      	ldrb	r2, [r7, #3]
 800a682:	4611      	mov	r1, r2
 800a684:	4618      	mov	r0, r3
 800a686:	f7f9 fd77 	bl	8004178 <HAL_PCD_EP_GetRxCount>
 800a68a:	4603      	mov	r3, r0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a6a0:	78fb      	ldrb	r3, [r7, #3]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d002      	beq.n	800a6ac <HAL_PCDEx_LPM_Callback+0x18>
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d013      	beq.n	800a6d2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a6aa:	e023      	b.n	800a6f4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	7adb      	ldrb	r3, [r3, #11]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d007      	beq.n	800a6c4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a6b4:	f000 f83c 	bl	800a730 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6b8:	4b10      	ldr	r3, [pc, #64]	@ (800a6fc <HAL_PCDEx_LPM_Callback+0x68>)
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	4a0f      	ldr	r2, [pc, #60]	@ (800a6fc <HAL_PCDEx_LPM_Callback+0x68>)
 800a6be:	f023 0306 	bic.w	r3, r3, #6
 800a6c2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fdc2 	bl	800b254 <USBD_LL_Resume>
    break;
 800a6d0:	e010      	b.n	800a6f4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 fda6 	bl	800b22a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	7adb      	ldrb	r3, [r3, #11]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d005      	beq.n	800a6f2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6e6:	4b05      	ldr	r3, [pc, #20]	@ (800a6fc <HAL_PCDEx_LPM_Callback+0x68>)
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	4a04      	ldr	r2, [pc, #16]	@ (800a6fc <HAL_PCDEx_LPM_Callback+0x68>)
 800a6ec:	f043 0306 	orr.w	r3, r3, #6
 800a6f0:	6113      	str	r3, [r2, #16]
    break;
 800a6f2:	bf00      	nop
}
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	e000ed00 	.word	0xe000ed00

0800a700 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a708:	4b03      	ldr	r3, [pc, #12]	@ (800a718 <USBD_static_malloc+0x18>)
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	370c      	adds	r7, #12
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	2000e83c 	.word	0x2000e83c

0800a71c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]

}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a734:	f7f5 fdc2 	bl	80002bc <SystemClock_Config>
}
 800a738:	bf00      	nop
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	4603      	mov	r3, r0
 800a744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a74a:	79fb      	ldrb	r3, [r7, #7]
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d817      	bhi.n	800a780 <USBD_Get_USB_Status+0x44>
 800a750:	a201      	add	r2, pc, #4	@ (adr r2, 800a758 <USBD_Get_USB_Status+0x1c>)
 800a752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a756:	bf00      	nop
 800a758:	0800a769 	.word	0x0800a769
 800a75c:	0800a76f 	.word	0x0800a76f
 800a760:	0800a775 	.word	0x0800a775
 800a764:	0800a77b 	.word	0x0800a77b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	73fb      	strb	r3, [r7, #15]
    break;
 800a76c:	e00b      	b.n	800a786 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a76e:	2303      	movs	r3, #3
 800a770:	73fb      	strb	r3, [r7, #15]
    break;
 800a772:	e008      	b.n	800a786 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a774:	2301      	movs	r3, #1
 800a776:	73fb      	strb	r3, [r7, #15]
    break;
 800a778:	e005      	b.n	800a786 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a77a:	2303      	movs	r3, #3
 800a77c:	73fb      	strb	r3, [r7, #15]
    break;
 800a77e:	e002      	b.n	800a786 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a780:	2303      	movs	r3, #3
 800a782:	73fb      	strb	r3, [r7, #15]
    break;
 800a784:	bf00      	nop
  }
  return usb_status;
 800a786:	7bfb      	ldrb	r3, [r7, #15]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a7a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a7a4:	f7ff ffac 	bl	800a700 <USBD_static_malloc>
 800a7a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d105      	bne.n	800a7bc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	e066      	b.n	800a88a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	7c1b      	ldrb	r3, [r3, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d119      	bne.n	800a800 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	2181      	movs	r1, #129	@ 0x81
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff fe3a 	bl	800a44e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a7e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7e4:	2202      	movs	r2, #2
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff fe30 	bl	800a44e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2210      	movs	r2, #16
 800a7fa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a7fe:	e016      	b.n	800a82e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a800:	2340      	movs	r3, #64	@ 0x40
 800a802:	2202      	movs	r2, #2
 800a804:	2181      	movs	r1, #129	@ 0x81
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7ff fe21 	bl	800a44e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a812:	2340      	movs	r3, #64	@ 0x40
 800a814:	2202      	movs	r2, #2
 800a816:	2101      	movs	r1, #1
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff fe18 	bl	800a44e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2210      	movs	r2, #16
 800a82a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a82e:	2308      	movs	r3, #8
 800a830:	2203      	movs	r2, #3
 800a832:	2182      	movs	r1, #130	@ 0x82
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7ff fe0a 	bl	800a44e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	7c1b      	ldrb	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d109      	bne.n	800a878 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a86a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a86e:	2101      	movs	r1, #1
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7ff fedb 	bl	800a62c <USBD_LL_PrepareReceive>
 800a876:	e007      	b.n	800a888 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a87e:	2340      	movs	r3, #64	@ 0x40
 800a880:	2101      	movs	r1, #1
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7ff fed2 	bl	800a62c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b082      	sub	sp, #8
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	460b      	mov	r3, r1
 800a89c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a89e:	2181      	movs	r1, #129	@ 0x81
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f7ff fdfa 	bl	800a49a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7ff fdf3 	bl	800a49a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a8bc:	2182      	movs	r1, #130	@ 0x82
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f7ff fdeb 	bl	800a49a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00e      	beq.n	800a8fc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7ff ff14 	bl	800a71c <USBD_static_free>
    pdev->pClassData = NULL;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a918:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a91e:	2300      	movs	r3, #0
 800a920:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d03a      	beq.n	800a9a8 <USBD_CDC_Setup+0xa0>
 800a932:	2b20      	cmp	r3, #32
 800a934:	f040 8097 	bne.w	800aa66 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	88db      	ldrh	r3, [r3, #6]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d029      	beq.n	800a994 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	b25b      	sxtb	r3, r3
 800a946:	2b00      	cmp	r3, #0
 800a948:	da11      	bge.n	800a96e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a956:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	88d2      	ldrh	r2, [r2, #6]
 800a95c:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a95e:	6939      	ldr	r1, [r7, #16]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	88db      	ldrh	r3, [r3, #6]
 800a964:	461a      	mov	r2, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f001 fade 	bl	800bf28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a96c:	e082      	b.n	800aa74 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	785a      	ldrb	r2, [r3, #1]
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	88db      	ldrh	r3, [r3, #6]
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a984:	6939      	ldr	r1, [r7, #16]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	88db      	ldrh	r3, [r3, #6]
 800a98a:	461a      	mov	r2, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 faf7 	bl	800bf80 <USBD_CtlPrepareRx>
      break;
 800a992:	e06f      	b.n	800aa74 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	7850      	ldrb	r0, [r2, #1]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	4798      	blx	r3
      break;
 800a9a6:	e065      	b.n	800aa74 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	785b      	ldrb	r3, [r3, #1]
 800a9ac:	2b0b      	cmp	r3, #11
 800a9ae:	d84f      	bhi.n	800aa50 <USBD_CDC_Setup+0x148>
 800a9b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b8 <USBD_CDC_Setup+0xb0>)
 800a9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b6:	bf00      	nop
 800a9b8:	0800a9e9 	.word	0x0800a9e9
 800a9bc:	0800aa5f 	.word	0x0800aa5f
 800a9c0:	0800aa51 	.word	0x0800aa51
 800a9c4:	0800aa51 	.word	0x0800aa51
 800a9c8:	0800aa51 	.word	0x0800aa51
 800a9cc:	0800aa51 	.word	0x0800aa51
 800a9d0:	0800aa51 	.word	0x0800aa51
 800a9d4:	0800aa51 	.word	0x0800aa51
 800a9d8:	0800aa51 	.word	0x0800aa51
 800a9dc:	0800aa51 	.word	0x0800aa51
 800a9e0:	0800aa11 	.word	0x0800aa11
 800a9e4:	0800aa39 	.word	0x0800aa39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ee:	2b03      	cmp	r3, #3
 800a9f0:	d107      	bne.n	800aa02 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a9f2:	f107 030c 	add.w	r3, r7, #12
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f001 fa94 	bl	800bf28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa00:	e030      	b.n	800aa64 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f001 fa1e 	bl	800be46 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	75fb      	strb	r3, [r7, #23]
          break;
 800aa0e:	e029      	b.n	800aa64 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d107      	bne.n	800aa2a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa1a:	f107 030f 	add.w	r3, r7, #15
 800aa1e:	2201      	movs	r2, #1
 800aa20:	4619      	mov	r1, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f001 fa80 	bl	800bf28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa28:	e01c      	b.n	800aa64 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 fa0a 	bl	800be46 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa32:	2303      	movs	r3, #3
 800aa34:	75fb      	strb	r3, [r7, #23]
          break;
 800aa36:	e015      	b.n	800aa64 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	d00f      	beq.n	800aa62 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f001 f9fe 	bl	800be46 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa4e:	e008      	b.n	800aa62 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f001 f9f7 	bl	800be46 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	75fb      	strb	r3, [r7, #23]
          break;
 800aa5c:	e002      	b.n	800aa64 <USBD_CDC_Setup+0x15c>
          break;
 800aa5e:	bf00      	nop
 800aa60:	e008      	b.n	800aa74 <USBD_CDC_Setup+0x16c>
          break;
 800aa62:	bf00      	nop
      }
      break;
 800aa64:	e006      	b.n	800aa74 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f001 f9ec 	bl	800be46 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	75fb      	strb	r3, [r7, #23]
      break;
 800aa72:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa74:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop

0800aa80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800aa92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d101      	bne.n	800aaa2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e04f      	b.n	800ab42 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aaa8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	440b      	add	r3, r1
 800aab8:	3318      	adds	r3, #24
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d029      	beq.n	800ab14 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aac0:	78fa      	ldrb	r2, [r7, #3]
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	4613      	mov	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	440b      	add	r3, r1
 800aace:	3318      	adds	r3, #24
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	78f9      	ldrb	r1, [r7, #3]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	460b      	mov	r3, r1
 800aad8:	00db      	lsls	r3, r3, #3
 800aada:	440b      	add	r3, r1
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4403      	add	r3, r0
 800aae0:	331c      	adds	r3, #28
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	fbb2 f1f3 	udiv	r1, r2, r3
 800aae8:	fb01 f303 	mul.w	r3, r1, r3
 800aaec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d110      	bne.n	800ab14 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800aaf2:	78fa      	ldrb	r2, [r7, #3]
 800aaf4:	6879      	ldr	r1, [r7, #4]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	440b      	add	r3, r1
 800ab00:	3318      	adds	r3, #24
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab06:	78f9      	ldrb	r1, [r7, #3]
 800ab08:	2300      	movs	r3, #0
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7ff fd6c 	bl	800a5ea <USBD_LL_Transmit>
 800ab12:	e015      	b.n	800ab40 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00b      	beq.n	800ab40 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ab3c:	78fa      	ldrb	r2, [r7, #3]
 800ab3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e015      	b.n	800ab98 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab6c:	78fb      	ldrb	r3, [r7, #3]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f7ff fd7c 	bl	800a66e <USBD_LL_GetRxDataSize>
 800ab76:	4602      	mov	r2, r0
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ab92:	4611      	mov	r1, r2
 800ab94:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800abae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d014      	beq.n	800abe4 <USBD_CDC_EP0_RxReady+0x44>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800abc0:	2bff      	cmp	r3, #255	@ 0xff
 800abc2:	d00f      	beq.n	800abe4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800abd2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800abda:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	22ff      	movs	r2, #255	@ 0xff
 800abe0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2243      	movs	r2, #67	@ 0x43
 800abfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800abfe:	4b03      	ldr	r3, [pc, #12]	@ (800ac0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	20000164 	.word	0x20000164

0800ac10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2243      	movs	r2, #67	@ 0x43
 800ac1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ac1e:	4b03      	ldr	r3, [pc, #12]	@ (800ac2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	20000120 	.word	0x20000120

0800ac30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2243      	movs	r2, #67	@ 0x43
 800ac3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ac3e:	4b03      	ldr	r3, [pc, #12]	@ (800ac4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	200001a8 	.word	0x200001a8

0800ac50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	220a      	movs	r2, #10
 800ac5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ac5e:	4b03      	ldr	r3, [pc, #12]	@ (800ac6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	200000dc 	.word	0x200000dc

0800ac70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d101      	bne.n	800ac84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e004      	b.n	800ac8e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	370c      	adds	r7, #12
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b087      	sub	sp, #28
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	60b9      	str	r1, [r7, #8]
 800aca4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800acac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	371c      	adds	r7, #28
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800acdc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ad04:	2301      	movs	r3, #1
 800ad06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e01a      	b.n	800ad4c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d114      	bne.n	800ad4a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ad3e:	2181      	movs	r1, #129	@ 0x81
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7ff fc52 	bl	800a5ea <USBD_LL_Transmit>

    ret = USBD_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e016      	b.n	800ada0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	7c1b      	ldrb	r3, [r3, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d109      	bne.n	800ad8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad84:	2101      	movs	r1, #1
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff fc50 	bl	800a62c <USBD_LL_PrepareReceive>
 800ad8c:	e007      	b.n	800ad9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad94:	2340      	movs	r3, #64	@ 0x40
 800ad96:	2101      	movs	r1, #1
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff fc47 	bl	800a62c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	4613      	mov	r3, r2
 800adb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e01f      	b.n	800ae00 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d003      	beq.n	800ade6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2201      	movs	r2, #1
 800adea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	79fa      	ldrb	r2, [r7, #7]
 800adf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7ff fabd 	bl	800a374 <USBD_LL_Init>
 800adfa:	4603      	mov	r3, r0
 800adfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800adfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae12:	2300      	movs	r3, #0
 800ae14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d101      	bne.n	800ae20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	e016      	b.n	800ae4e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00b      	beq.n	800ae4c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae3c:	f107 020e 	add.w	r2, r7, #14
 800ae40:	4610      	mov	r0, r2
 800ae42:	4798      	blx	r3
 800ae44:	4602      	mov	r2, r0
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b082      	sub	sp, #8
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7ff fada 	bl	800a418 <USBD_LL_Start>
 800ae64:	4603      	mov	r3, r0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae90:	2303      	movs	r3, #3
 800ae92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d009      	beq.n	800aeb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	78fa      	ldrb	r2, [r7, #3]
 800aea8:	4611      	mov	r1, r2
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	4798      	blx	r3
 800aeae:	4603      	mov	r3, r0
 800aeb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d007      	beq.n	800aee2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	78fa      	ldrb	r2, [r7, #3]
 800aedc:	4611      	mov	r1, r2
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	4798      	blx	r3
  }

  return USBD_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 ff67 	bl	800bdd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800af12:	461a      	mov	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800af20:	f003 031f 	and.w	r3, r3, #31
 800af24:	2b02      	cmp	r3, #2
 800af26:	d01a      	beq.n	800af5e <USBD_LL_SetupStage+0x72>
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d822      	bhi.n	800af72 <USBD_LL_SetupStage+0x86>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <USBD_LL_SetupStage+0x4a>
 800af30:	2b01      	cmp	r3, #1
 800af32:	d00a      	beq.n	800af4a <USBD_LL_SetupStage+0x5e>
 800af34:	e01d      	b.n	800af72 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fa18 	bl	800b374 <USBD_StdDevReq>
 800af44:	4603      	mov	r3, r0
 800af46:	73fb      	strb	r3, [r7, #15]
      break;
 800af48:	e020      	b.n	800af8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af50:	4619      	mov	r1, r3
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 fa7c 	bl	800b450 <USBD_StdItfReq>
 800af58:	4603      	mov	r3, r0
 800af5a:	73fb      	strb	r3, [r7, #15]
      break;
 800af5c:	e016      	b.n	800af8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af64:	4619      	mov	r1, r3
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 faba 	bl	800b4e0 <USBD_StdEPReq>
 800af6c:	4603      	mov	r3, r0
 800af6e:	73fb      	strb	r3, [r7, #15]
      break;
 800af70:	e00c      	b.n	800af8c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800af78:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff faa9 	bl	800a4d8 <USBD_LL_StallEP>
 800af86:	4603      	mov	r3, r0
 800af88:	73fb      	strb	r3, [r7, #15]
      break;
 800af8a:	bf00      	nop
  }

  return ret;
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b086      	sub	sp, #24
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	60f8      	str	r0, [r7, #12]
 800af9e:	460b      	mov	r3, r1
 800afa0:	607a      	str	r2, [r7, #4]
 800afa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800afa4:	7afb      	ldrb	r3, [r7, #11]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d137      	bne.n	800b01a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800afb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800afb8:	2b03      	cmp	r3, #3
 800afba:	d14a      	bne.n	800b052 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	689a      	ldr	r2, [r3, #8]
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d913      	bls.n	800aff0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	1ad2      	subs	r2, r2, r3
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	68da      	ldr	r2, [r3, #12]
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	4293      	cmp	r3, r2
 800afe0:	bf28      	it	cs
 800afe2:	4613      	movcs	r3, r2
 800afe4:	461a      	mov	r2, r3
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 ffe6 	bl	800bfba <USBD_CtlContinueRx>
 800afee:	e030      	b.n	800b052 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00a      	beq.n	800b012 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b002:	2b03      	cmp	r3, #3
 800b004:	d105      	bne.n	800b012 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f000 ffe2 	bl	800bfdc <USBD_CtlSendStatus>
 800b018:	e01b      	b.n	800b052 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d013      	beq.n	800b04e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d10e      	bne.n	800b04e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	7afa      	ldrb	r2, [r7, #11]
 800b03a:	4611      	mov	r1, r2
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	4798      	blx	r3
 800b040:	4603      	mov	r3, r0
 800b042:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b044:	7dfb      	ldrb	r3, [r7, #23]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	e002      	b.n	800b054 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b04e:	2303      	movs	r3, #3
 800b050:	e000      	b.n	800b054 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	460b      	mov	r3, r1
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b06a:	7afb      	ldrb	r3, [r7, #11]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d16a      	bne.n	800b146 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3314      	adds	r3, #20
 800b074:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d155      	bne.n	800b12c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d914      	bls.n	800b0b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	689a      	ldr	r2, [r3, #8]
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	1ad2      	subs	r2, r2, r3
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	6879      	ldr	r1, [r7, #4]
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 ff5b 	bl	800bf5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f7ff fabc 	bl	800a62c <USBD_LL_PrepareReceive>
 800b0b4:	e03a      	b.n	800b12c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	68da      	ldr	r2, [r3, #12]
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d11c      	bne.n	800b0fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d316      	bcc.n	800b0fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	685a      	ldr	r2, [r3, #4]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d20f      	bcs.n	800b0fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2100      	movs	r1, #0
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 ff3c 	bl	800bf5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f7ff fa99 	bl	800a62c <USBD_LL_PrepareReceive>
 800b0fa:	e017      	b.n	800b12c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00a      	beq.n	800b11e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b10e:	2b03      	cmp	r3, #3
 800b110:	d105      	bne.n	800b11e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b11e:	2180      	movs	r1, #128	@ 0x80
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f7ff f9d9 	bl	800a4d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f000 ff6b 	bl	800c002 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b132:	2b01      	cmp	r3, #1
 800b134:	d123      	bne.n	800b17e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f7ff fe99 	bl	800ae6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b144:	e01b      	b.n	800b17e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d013      	beq.n	800b17a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b158:	2b03      	cmp	r3, #3
 800b15a:	d10e      	bne.n	800b17a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	7afa      	ldrb	r2, [r7, #11]
 800b166:	4611      	mov	r1, r2
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	4798      	blx	r3
 800b16c:	4603      	mov	r3, r0
 800b16e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b170:	7dfb      	ldrb	r3, [r7, #23]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b176:	7dfb      	ldrb	r3, [r7, #23]
 800b178:	e002      	b.n	800b180 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b17a:	2303      	movs	r3, #3
 800b17c:	e000      	b.n	800b180 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d009      	beq.n	800b1cc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	6852      	ldr	r2, [r2, #4]
 800b1c4:	b2d2      	uxtb	r2, r2
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1cc:	2340      	movs	r3, #64	@ 0x40
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff f93b 	bl	800a44e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2240      	movs	r2, #64	@ 0x40
 800b1e4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1e8:	2340      	movs	r3, #64	@ 0x40
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	2180      	movs	r1, #128	@ 0x80
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f7ff f92d 	bl	800a44e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2240      	movs	r2, #64	@ 0x40
 800b1fe:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	460b      	mov	r3, r1
 800b214:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	78fa      	ldrb	r2, [r7, #3]
 800b21a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b083      	sub	sp, #12
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2204      	movs	r2, #4
 800b242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b262:	2b04      	cmp	r3, #4
 800b264:	d105      	bne.n	800b272 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d10b      	bne.n	800b2aa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d005      	beq.n	800b2aa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b082      	sub	sp, #8
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b314:	2b00      	cmp	r3, #0
 800b316:	d009      	beq.n	800b32c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	6852      	ldr	r2, [r2, #4]
 800b324:	b2d2      	uxtb	r2, r2
 800b326:	4611      	mov	r1, r2
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	4798      	blx	r3
  }

  return USBD_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b336:	b480      	push	{r7}
 800b338:	b087      	sub	sp, #28
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	3301      	adds	r3, #1
 800b34c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b354:	8a3b      	ldrh	r3, [r7, #16]
 800b356:	021b      	lsls	r3, r3, #8
 800b358:	b21a      	sxth	r2, r3
 800b35a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b35e:	4313      	orrs	r3, r2
 800b360:	b21b      	sxth	r3, r3
 800b362:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b364:	89fb      	ldrh	r3, [r7, #14]
}
 800b366:	4618      	mov	r0, r3
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
	...

0800b374 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b38a:	2b40      	cmp	r3, #64	@ 0x40
 800b38c:	d005      	beq.n	800b39a <USBD_StdDevReq+0x26>
 800b38e:	2b40      	cmp	r3, #64	@ 0x40
 800b390:	d853      	bhi.n	800b43a <USBD_StdDevReq+0xc6>
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00b      	beq.n	800b3ae <USBD_StdDevReq+0x3a>
 800b396:	2b20      	cmp	r3, #32
 800b398:	d14f      	bne.n	800b43a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	4798      	blx	r3
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ac:	e04a      	b.n	800b444 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	785b      	ldrb	r3, [r3, #1]
 800b3b2:	2b09      	cmp	r3, #9
 800b3b4:	d83b      	bhi.n	800b42e <USBD_StdDevReq+0xba>
 800b3b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3bc <USBD_StdDevReq+0x48>)
 800b3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3bc:	0800b411 	.word	0x0800b411
 800b3c0:	0800b425 	.word	0x0800b425
 800b3c4:	0800b42f 	.word	0x0800b42f
 800b3c8:	0800b41b 	.word	0x0800b41b
 800b3cc:	0800b42f 	.word	0x0800b42f
 800b3d0:	0800b3ef 	.word	0x0800b3ef
 800b3d4:	0800b3e5 	.word	0x0800b3e5
 800b3d8:	0800b42f 	.word	0x0800b42f
 800b3dc:	0800b407 	.word	0x0800b407
 800b3e0:	0800b3f9 	.word	0x0800b3f9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f9da 	bl	800b7a0 <USBD_GetDescriptor>
      break;
 800b3ec:	e024      	b.n	800b438 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fb69 	bl	800bac8 <USBD_SetAddress>
      break;
 800b3f6:	e01f      	b.n	800b438 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fba8 	bl	800bb50 <USBD_SetConfig>
 800b400:	4603      	mov	r3, r0
 800b402:	73fb      	strb	r3, [r7, #15]
      break;
 800b404:	e018      	b.n	800b438 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fc45 	bl	800bc98 <USBD_GetConfig>
      break;
 800b40e:	e013      	b.n	800b438 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fc75 	bl	800bd02 <USBD_GetStatus>
      break;
 800b418:	e00e      	b.n	800b438 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fca3 	bl	800bd68 <USBD_SetFeature>
      break;
 800b422:	e009      	b.n	800b438 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fcb2 	bl	800bd90 <USBD_ClrFeature>
      break;
 800b42c:	e004      	b.n	800b438 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b42e:	6839      	ldr	r1, [r7, #0]
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fd08 	bl	800be46 <USBD_CtlError>
      break;
 800b436:	bf00      	nop
    }
    break;
 800b438:	e004      	b.n	800b444 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fd02 	bl	800be46 <USBD_CtlError>
    break;
 800b442:	bf00      	nop
  }

  return ret;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop

0800b450 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b466:	2b40      	cmp	r3, #64	@ 0x40
 800b468:	d005      	beq.n	800b476 <USBD_StdItfReq+0x26>
 800b46a:	2b40      	cmp	r3, #64	@ 0x40
 800b46c:	d82e      	bhi.n	800b4cc <USBD_StdItfReq+0x7c>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <USBD_StdItfReq+0x26>
 800b472:	2b20      	cmp	r3, #32
 800b474:	d12a      	bne.n	800b4cc <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b47c:	3b01      	subs	r3, #1
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d81d      	bhi.n	800b4be <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	889b      	ldrh	r3, [r3, #4]
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d813      	bhi.n	800b4b4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	4798      	blx	r3
 800b49a:	4603      	mov	r3, r0
 800b49c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	88db      	ldrh	r3, [r3, #6]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d110      	bne.n	800b4c8 <USBD_StdItfReq+0x78>
 800b4a6:	7bfb      	ldrb	r3, [r7, #15]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10d      	bne.n	800b4c8 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fd95 	bl	800bfdc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b4b2:	e009      	b.n	800b4c8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fcc5 	bl	800be46 <USBD_CtlError>
      break;
 800b4bc:	e004      	b.n	800b4c8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800b4be:	6839      	ldr	r1, [r7, #0]
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 fcc0 	bl	800be46 <USBD_CtlError>
      break;
 800b4c6:	e000      	b.n	800b4ca <USBD_StdItfReq+0x7a>
      break;
 800b4c8:	bf00      	nop
    }
    break;
 800b4ca:	e004      	b.n	800b4d6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fcb9 	bl	800be46 <USBD_CtlError>
    break;
 800b4d4:	bf00      	nop
  }

  return ret;
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	889b      	ldrh	r3, [r3, #4]
 800b4f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b4fc:	2b40      	cmp	r3, #64	@ 0x40
 800b4fe:	d007      	beq.n	800b510 <USBD_StdEPReq+0x30>
 800b500:	2b40      	cmp	r3, #64	@ 0x40
 800b502:	f200 8142 	bhi.w	800b78a <USBD_StdEPReq+0x2aa>
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00c      	beq.n	800b524 <USBD_StdEPReq+0x44>
 800b50a:	2b20      	cmp	r3, #32
 800b50c:	f040 813d 	bne.w	800b78a <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	4798      	blx	r3
 800b51e:	4603      	mov	r3, r0
 800b520:	73fb      	strb	r3, [r7, #15]
    break;
 800b522:	e137      	b.n	800b794 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	785b      	ldrb	r3, [r3, #1]
 800b528:	2b03      	cmp	r3, #3
 800b52a:	d007      	beq.n	800b53c <USBD_StdEPReq+0x5c>
 800b52c:	2b03      	cmp	r3, #3
 800b52e:	f300 8126 	bgt.w	800b77e <USBD_StdEPReq+0x29e>
 800b532:	2b00      	cmp	r3, #0
 800b534:	d07d      	beq.n	800b632 <USBD_StdEPReq+0x152>
 800b536:	2b01      	cmp	r3, #1
 800b538:	d03b      	beq.n	800b5b2 <USBD_StdEPReq+0xd2>
 800b53a:	e120      	b.n	800b77e <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b542:	2b02      	cmp	r3, #2
 800b544:	d002      	beq.n	800b54c <USBD_StdEPReq+0x6c>
 800b546:	2b03      	cmp	r3, #3
 800b548:	d016      	beq.n	800b578 <USBD_StdEPReq+0x98>
 800b54a:	e02c      	b.n	800b5a6 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b54c:	7bbb      	ldrb	r3, [r7, #14]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00d      	beq.n	800b56e <USBD_StdEPReq+0x8e>
 800b552:	7bbb      	ldrb	r3, [r7, #14]
 800b554:	2b80      	cmp	r3, #128	@ 0x80
 800b556:	d00a      	beq.n	800b56e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b558:	7bbb      	ldrb	r3, [r7, #14]
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f7fe ffbb 	bl	800a4d8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b562:	2180      	movs	r1, #128	@ 0x80
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7fe ffb7 	bl	800a4d8 <USBD_LL_StallEP>
 800b56a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b56c:	e020      	b.n	800b5b0 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fc68 	bl	800be46 <USBD_CtlError>
        break;
 800b576:	e01b      	b.n	800b5b0 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	885b      	ldrh	r3, [r3, #2]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10e      	bne.n	800b59e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b580:	7bbb      	ldrb	r3, [r7, #14]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00b      	beq.n	800b59e <USBD_StdEPReq+0xbe>
 800b586:	7bbb      	ldrb	r3, [r7, #14]
 800b588:	2b80      	cmp	r3, #128	@ 0x80
 800b58a:	d008      	beq.n	800b59e <USBD_StdEPReq+0xbe>
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	88db      	ldrh	r3, [r3, #6]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d104      	bne.n	800b59e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b594:	7bbb      	ldrb	r3, [r7, #14]
 800b596:	4619      	mov	r1, r3
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7fe ff9d 	bl	800a4d8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fd1c 	bl	800bfdc <USBD_CtlSendStatus>

        break;
 800b5a4:	e004      	b.n	800b5b0 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fc4c 	bl	800be46 <USBD_CtlError>
        break;
 800b5ae:	bf00      	nop
      }
      break;
 800b5b0:	e0ea      	b.n	800b788 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d002      	beq.n	800b5c2 <USBD_StdEPReq+0xe2>
 800b5bc:	2b03      	cmp	r3, #3
 800b5be:	d016      	beq.n	800b5ee <USBD_StdEPReq+0x10e>
 800b5c0:	e030      	b.n	800b624 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5c2:	7bbb      	ldrb	r3, [r7, #14]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00d      	beq.n	800b5e4 <USBD_StdEPReq+0x104>
 800b5c8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ca:	2b80      	cmp	r3, #128	@ 0x80
 800b5cc:	d00a      	beq.n	800b5e4 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7fe ff80 	bl	800a4d8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5d8:	2180      	movs	r1, #128	@ 0x80
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7fe ff7c 	bl	800a4d8 <USBD_LL_StallEP>
 800b5e0:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b5e2:	e025      	b.n	800b630 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800b5e4:	6839      	ldr	r1, [r7, #0]
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fc2d 	bl	800be46 <USBD_CtlError>
        break;
 800b5ec:	e020      	b.n	800b630 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	885b      	ldrh	r3, [r3, #2]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d11b      	bne.n	800b62e <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b5f6:	7bbb      	ldrb	r3, [r7, #14]
 800b5f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d004      	beq.n	800b60a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b600:	7bbb      	ldrb	r3, [r7, #14]
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7fe ff86 	bl	800a516 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fce6 	bl	800bfdc <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	6839      	ldr	r1, [r7, #0]
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	4798      	blx	r3
 800b61e:	4603      	mov	r3, r0
 800b620:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b622:	e004      	b.n	800b62e <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fc0d 	bl	800be46 <USBD_CtlError>
        break;
 800b62c:	e000      	b.n	800b630 <USBD_StdEPReq+0x150>
        break;
 800b62e:	bf00      	nop
      }
      break;
 800b630:	e0aa      	b.n	800b788 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d002      	beq.n	800b642 <USBD_StdEPReq+0x162>
 800b63c:	2b03      	cmp	r3, #3
 800b63e:	d032      	beq.n	800b6a6 <USBD_StdEPReq+0x1c6>
 800b640:	e097      	b.n	800b772 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b642:	7bbb      	ldrb	r3, [r7, #14]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d007      	beq.n	800b658 <USBD_StdEPReq+0x178>
 800b648:	7bbb      	ldrb	r3, [r7, #14]
 800b64a:	2b80      	cmp	r3, #128	@ 0x80
 800b64c:	d004      	beq.n	800b658 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fbf8 	bl	800be46 <USBD_CtlError>
          break;
 800b656:	e091      	b.n	800b77c <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	da0b      	bge.n	800b678 <USBD_StdEPReq+0x198>
 800b660:	7bbb      	ldrb	r3, [r7, #14]
 800b662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b666:	4613      	mov	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	3310      	adds	r3, #16
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	4413      	add	r3, r2
 800b674:	3304      	adds	r3, #4
 800b676:	e00b      	b.n	800b690 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b678:	7bbb      	ldrb	r3, [r7, #14]
 800b67a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b67e:	4613      	mov	r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	4413      	add	r3, r2
 800b68e:	3304      	adds	r3, #4
 800b690:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	2202      	movs	r2, #2
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fc42 	bl	800bf28 <USBD_CtlSendData>
        break;
 800b6a4:	e06a      	b.n	800b77c <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b6a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	da11      	bge.n	800b6d2 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6ae:	7bbb      	ldrb	r3, [r7, #14]
 800b6b0:	f003 020f 	and.w	r2, r3, #15
 800b6b4:	6879      	ldr	r1, [r7, #4]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	440b      	add	r3, r1
 800b6c0:	3324      	adds	r3, #36	@ 0x24
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d117      	bne.n	800b6f8 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fbbb 	bl	800be46 <USBD_CtlError>
            break;
 800b6d0:	e054      	b.n	800b77c <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6d2:	7bbb      	ldrb	r3, [r7, #14]
 800b6d4:	f003 020f 	and.w	r2, r3, #15
 800b6d8:	6879      	ldr	r1, [r7, #4]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	440b      	add	r3, r1
 800b6e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b6e8:	881b      	ldrh	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d104      	bne.n	800b6f8 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fba8 	bl	800be46 <USBD_CtlError>
            break;
 800b6f6:	e041      	b.n	800b77c <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	da0b      	bge.n	800b718 <USBD_StdEPReq+0x238>
 800b700:	7bbb      	ldrb	r3, [r7, #14]
 800b702:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b706:	4613      	mov	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	3310      	adds	r3, #16
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	4413      	add	r3, r2
 800b714:	3304      	adds	r3, #4
 800b716:	e00b      	b.n	800b730 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b718:	7bbb      	ldrb	r3, [r7, #14]
 800b71a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b71e:	4613      	mov	r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	4413      	add	r3, r2
 800b72e:	3304      	adds	r3, #4
 800b730:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b732:	7bbb      	ldrb	r3, [r7, #14]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <USBD_StdEPReq+0x25e>
 800b738:	7bbb      	ldrb	r3, [r7, #14]
 800b73a:	2b80      	cmp	r3, #128	@ 0x80
 800b73c:	d103      	bne.n	800b746 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	2200      	movs	r2, #0
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	e00e      	b.n	800b764 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b746:	7bbb      	ldrb	r3, [r7, #14]
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7fe ff02 	bl	800a554 <USBD_LL_IsStallEP>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2201      	movs	r2, #1
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	e002      	b.n	800b764 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2200      	movs	r2, #0
 800b762:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2202      	movs	r2, #2
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fbdc 	bl	800bf28 <USBD_CtlSendData>
          break;
 800b770:	e004      	b.n	800b77c <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fb66 	bl	800be46 <USBD_CtlError>
        break;
 800b77a:	bf00      	nop
      }
      break;
 800b77c:	e004      	b.n	800b788 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fb60 	bl	800be46 <USBD_CtlError>
      break;
 800b786:	bf00      	nop
    }
    break;
 800b788:	e004      	b.n	800b794 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fb5a 	bl	800be46 <USBD_CtlError>
    break;
 800b792:	bf00      	nop
  }

  return ret;
 800b794:	7bfb      	ldrb	r3, [r7, #15]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
	...

0800b7a0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	885b      	ldrh	r3, [r3, #2]
 800b7ba:	0a1b      	lsrs	r3, r3, #8
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	2b0e      	cmp	r3, #14
 800b7c2:	f200 8152 	bhi.w	800ba6a <USBD_GetDescriptor+0x2ca>
 800b7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b7cc <USBD_GetDescriptor+0x2c>)
 800b7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7cc:	0800b83d 	.word	0x0800b83d
 800b7d0:	0800b855 	.word	0x0800b855
 800b7d4:	0800b895 	.word	0x0800b895
 800b7d8:	0800ba6b 	.word	0x0800ba6b
 800b7dc:	0800ba6b 	.word	0x0800ba6b
 800b7e0:	0800ba0b 	.word	0x0800ba0b
 800b7e4:	0800ba37 	.word	0x0800ba37
 800b7e8:	0800ba6b 	.word	0x0800ba6b
 800b7ec:	0800ba6b 	.word	0x0800ba6b
 800b7f0:	0800ba6b 	.word	0x0800ba6b
 800b7f4:	0800ba6b 	.word	0x0800ba6b
 800b7f8:	0800ba6b 	.word	0x0800ba6b
 800b7fc:	0800ba6b 	.word	0x0800ba6b
 800b800:	0800ba6b 	.word	0x0800ba6b
 800b804:	0800b809 	.word	0x0800b809
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b80e:	69db      	ldr	r3, [r3, #28]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00b      	beq.n	800b82c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b81a:	69db      	ldr	r3, [r3, #28]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	7c12      	ldrb	r2, [r2, #16]
 800b820:	f107 0108 	add.w	r1, r7, #8
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
 800b828:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b82a:	e126      	b.n	800ba7a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fb09 	bl	800be46 <USBD_CtlError>
      err++;
 800b834:	7afb      	ldrb	r3, [r7, #11]
 800b836:	3301      	adds	r3, #1
 800b838:	72fb      	strb	r3, [r7, #11]
    break;
 800b83a:	e11e      	b.n	800ba7a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	7c12      	ldrb	r2, [r2, #16]
 800b848:	f107 0108 	add.w	r1, r7, #8
 800b84c:	4610      	mov	r0, r2
 800b84e:	4798      	blx	r3
 800b850:	60f8      	str	r0, [r7, #12]
    break;
 800b852:	e112      	b.n	800ba7a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	7c1b      	ldrb	r3, [r3, #16]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10d      	bne.n	800b878 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b864:	f107 0208 	add.w	r2, r7, #8
 800b868:	4610      	mov	r0, r2
 800b86a:	4798      	blx	r3
 800b86c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3301      	adds	r3, #1
 800b872:	2202      	movs	r2, #2
 800b874:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b876:	e100      	b.n	800ba7a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b880:	f107 0208 	add.w	r2, r7, #8
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3301      	adds	r3, #1
 800b88e:	2202      	movs	r2, #2
 800b890:	701a      	strb	r2, [r3, #0]
    break;
 800b892:	e0f2      	b.n	800ba7a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	885b      	ldrh	r3, [r3, #2]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b05      	cmp	r3, #5
 800b89c:	f200 80ac 	bhi.w	800b9f8 <USBD_GetDescriptor+0x258>
 800b8a0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8a8 <USBD_GetDescriptor+0x108>)
 800b8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a6:	bf00      	nop
 800b8a8:	0800b8c1 	.word	0x0800b8c1
 800b8ac:	0800b8f5 	.word	0x0800b8f5
 800b8b0:	0800b929 	.word	0x0800b929
 800b8b4:	0800b95d 	.word	0x0800b95d
 800b8b8:	0800b991 	.word	0x0800b991
 800b8bc:	0800b9c5 	.word	0x0800b9c5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00b      	beq.n	800b8e4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	7c12      	ldrb	r2, [r2, #16]
 800b8d8:	f107 0108 	add.w	r1, r7, #8
 800b8dc:	4610      	mov	r0, r2
 800b8de:	4798      	blx	r3
 800b8e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8e2:	e091      	b.n	800ba08 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 faad 	bl	800be46 <USBD_CtlError>
        err++;
 800b8ec:	7afb      	ldrb	r3, [r7, #11]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	72fb      	strb	r3, [r7, #11]
      break;
 800b8f2:	e089      	b.n	800ba08 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00b      	beq.n	800b918 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	7c12      	ldrb	r2, [r2, #16]
 800b90c:	f107 0108 	add.w	r1, r7, #8
 800b910:	4610      	mov	r0, r2
 800b912:	4798      	blx	r3
 800b914:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b916:	e077      	b.n	800ba08 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b918:	6839      	ldr	r1, [r7, #0]
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fa93 	bl	800be46 <USBD_CtlError>
        err++;
 800b920:	7afb      	ldrb	r3, [r7, #11]
 800b922:	3301      	adds	r3, #1
 800b924:	72fb      	strb	r3, [r7, #11]
      break;
 800b926:	e06f      	b.n	800ba08 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00b      	beq.n	800b94c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	7c12      	ldrb	r2, [r2, #16]
 800b940:	f107 0108 	add.w	r1, r7, #8
 800b944:	4610      	mov	r0, r2
 800b946:	4798      	blx	r3
 800b948:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b94a:	e05d      	b.n	800ba08 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 fa79 	bl	800be46 <USBD_CtlError>
        err++;
 800b954:	7afb      	ldrb	r3, [r7, #11]
 800b956:	3301      	adds	r3, #1
 800b958:	72fb      	strb	r3, [r7, #11]
      break;
 800b95a:	e055      	b.n	800ba08 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00b      	beq.n	800b980 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	7c12      	ldrb	r2, [r2, #16]
 800b974:	f107 0108 	add.w	r1, r7, #8
 800b978:	4610      	mov	r0, r2
 800b97a:	4798      	blx	r3
 800b97c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b97e:	e043      	b.n	800ba08 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fa5f 	bl	800be46 <USBD_CtlError>
        err++;
 800b988:	7afb      	ldrb	r3, [r7, #11]
 800b98a:	3301      	adds	r3, #1
 800b98c:	72fb      	strb	r3, [r7, #11]
      break;
 800b98e:	e03b      	b.n	800ba08 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b996:	695b      	ldr	r3, [r3, #20]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00b      	beq.n	800b9b4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	7c12      	ldrb	r2, [r2, #16]
 800b9a8:	f107 0108 	add.w	r1, r7, #8
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	4798      	blx	r3
 800b9b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9b2:	e029      	b.n	800ba08 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fa45 	bl	800be46 <USBD_CtlError>
        err++;
 800b9bc:	7afb      	ldrb	r3, [r7, #11]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	72fb      	strb	r3, [r7, #11]
      break;
 800b9c2:	e021      	b.n	800ba08 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	7c12      	ldrb	r2, [r2, #16]
 800b9dc:	f107 0108 	add.w	r1, r7, #8
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4798      	blx	r3
 800b9e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9e6:	e00f      	b.n	800ba08 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fa2b 	bl	800be46 <USBD_CtlError>
        err++;
 800b9f0:	7afb      	ldrb	r3, [r7, #11]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	72fb      	strb	r3, [r7, #11]
      break;
 800b9f6:	e007      	b.n	800ba08 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fa23 	bl	800be46 <USBD_CtlError>
      err++;
 800ba00:	7afb      	ldrb	r3, [r7, #11]
 800ba02:	3301      	adds	r3, #1
 800ba04:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ba06:	bf00      	nop
    }
    break;
 800ba08:	e037      	b.n	800ba7a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	7c1b      	ldrb	r3, [r3, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d109      	bne.n	800ba26 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba1a:	f107 0208 	add.w	r2, r7, #8
 800ba1e:	4610      	mov	r0, r2
 800ba20:	4798      	blx	r3
 800ba22:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ba24:	e029      	b.n	800ba7a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fa0c 	bl	800be46 <USBD_CtlError>
      err++;
 800ba2e:	7afb      	ldrb	r3, [r7, #11]
 800ba30:	3301      	adds	r3, #1
 800ba32:	72fb      	strb	r3, [r7, #11]
    break;
 800ba34:	e021      	b.n	800ba7a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	7c1b      	ldrb	r3, [r3, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10d      	bne.n	800ba5a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba46:	f107 0208 	add.w	r2, r7, #8
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	4798      	blx	r3
 800ba4e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	3301      	adds	r3, #1
 800ba54:	2207      	movs	r2, #7
 800ba56:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ba58:	e00f      	b.n	800ba7a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f9f2 	bl	800be46 <USBD_CtlError>
      err++;
 800ba62:	7afb      	ldrb	r3, [r7, #11]
 800ba64:	3301      	adds	r3, #1
 800ba66:	72fb      	strb	r3, [r7, #11]
    break;
 800ba68:	e007      	b.n	800ba7a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f9ea 	bl	800be46 <USBD_CtlError>
    err++;
 800ba72:	7afb      	ldrb	r3, [r7, #11]
 800ba74:	3301      	adds	r3, #1
 800ba76:	72fb      	strb	r3, [r7, #11]
    break;
 800ba78:	bf00      	nop
  }

  if (err != 0U)
 800ba7a:	7afb      	ldrb	r3, [r7, #11]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d11e      	bne.n	800babe <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	88db      	ldrh	r3, [r3, #6]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d016      	beq.n	800bab6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800ba88:	893b      	ldrh	r3, [r7, #8]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00e      	beq.n	800baac <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	88da      	ldrh	r2, [r3, #6]
 800ba92:	893b      	ldrh	r3, [r7, #8]
 800ba94:	4293      	cmp	r3, r2
 800ba96:	bf28      	it	cs
 800ba98:	4613      	movcs	r3, r2
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba9e:	893b      	ldrh	r3, [r7, #8]
 800baa0:	461a      	mov	r2, r3
 800baa2:	68f9      	ldr	r1, [r7, #12]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fa3f 	bl	800bf28 <USBD_CtlSendData>
 800baaa:	e009      	b.n	800bac0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800baac:	6839      	ldr	r1, [r7, #0]
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f9c9 	bl	800be46 <USBD_CtlError>
 800bab4:	e004      	b.n	800bac0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fa90 	bl	800bfdc <USBD_CtlSendStatus>
 800babc:	e000      	b.n	800bac0 <USBD_GetDescriptor+0x320>
    return;
 800babe:	bf00      	nop
    }
  }
}
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop

0800bac8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	889b      	ldrh	r3, [r3, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d130      	bne.n	800bb3c <USBD_SetAddress+0x74>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	88db      	ldrh	r3, [r3, #6]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d12c      	bne.n	800bb3c <USBD_SetAddress+0x74>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	885b      	ldrh	r3, [r3, #2]
 800bae6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bae8:	d828      	bhi.n	800bb3c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	885b      	ldrh	r3, [r3, #2]
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bafc:	2b03      	cmp	r3, #3
 800bafe:	d104      	bne.n	800bb0a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f99f 	bl	800be46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb08:	e01d      	b.n	800bb46 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	7bfa      	ldrb	r2, [r7, #15]
 800bb0e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	4619      	mov	r1, r3
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7fe fd48 	bl	800a5ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fa5d 	bl	800bfdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb22:	7bfb      	ldrb	r3, [r7, #15]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d004      	beq.n	800bb32 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb30:	e009      	b.n	800bb46 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb3a:	e004      	b.n	800bb46 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb3c:	6839      	ldr	r1, [r7, #0]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f981 	bl	800be46 <USBD_CtlError>
  }
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
	...

0800bb50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	885b      	ldrh	r3, [r3, #2]
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	4b4b      	ldr	r3, [pc, #300]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bb66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb68:	4b4a      	ldr	r3, [pc, #296]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d905      	bls.n	800bb7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f967 	bl	800be46 <USBD_CtlError>
    return USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e087      	b.n	800bc8c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d002      	beq.n	800bb8c <USBD_SetConfig+0x3c>
 800bb86:	2b03      	cmp	r3, #3
 800bb88:	d025      	beq.n	800bbd6 <USBD_SetConfig+0x86>
 800bb8a:	e071      	b.n	800bc70 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800bb8c:	4b41      	ldr	r3, [pc, #260]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d01c      	beq.n	800bbce <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800bb94:	4b3f      	ldr	r3, [pc, #252]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb9e:	4b3d      	ldr	r3, [pc, #244]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7ff f96d 	bl	800ae84 <USBD_SetClassConfig>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800bbae:	7bfb      	ldrb	r3, [r7, #15]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d004      	beq.n	800bbbe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800bbb4:	6839      	ldr	r1, [r7, #0]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f945 	bl	800be46 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800bbbc:	e065      	b.n	800bc8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fa0c 	bl	800bfdc <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2203      	movs	r2, #3
 800bbc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800bbcc:	e05d      	b.n	800bc8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fa04 	bl	800bfdc <USBD_CtlSendStatus>
    break;
 800bbd4:	e059      	b.n	800bc8a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800bbd6:	4b2f      	ldr	r3, [pc, #188]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d112      	bne.n	800bc04 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 800bbe6:	4b2b      	ldr	r3, [pc, #172]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	461a      	mov	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbf0:	4b28      	ldr	r3, [pc, #160]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7ff f960 	bl	800aebc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 f9ed 	bl	800bfdc <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800bc02:	e042      	b.n	800bc8a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800bc04:	4b23      	ldr	r3, [pc, #140]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d02a      	beq.n	800bc68 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	4619      	mov	r1, r3
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7ff f94e 	bl	800aebc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800bc20:	4b1c      	ldr	r3, [pc, #112]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	461a      	mov	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc2a:	4b1a      	ldr	r3, [pc, #104]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	4619      	mov	r1, r3
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f7ff f927 	bl	800ae84 <USBD_SetClassConfig>
 800bc36:	4603      	mov	r3, r0
 800bc38:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00f      	beq.n	800bc60 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f8ff 	bl	800be46 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7ff f933 	bl	800aebc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2202      	movs	r2, #2
 800bc5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800bc5e:	e014      	b.n	800bc8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 f9bb 	bl	800bfdc <USBD_CtlSendStatus>
    break;
 800bc66:	e010      	b.n	800bc8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f9b7 	bl	800bfdc <USBD_CtlSendStatus>
    break;
 800bc6e:	e00c      	b.n	800bc8a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f8e7 	bl	800be46 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc78:	4b06      	ldr	r3, [pc, #24]	@ (800bc94 <USBD_SetConfig+0x144>)
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f7ff f91c 	bl	800aebc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800bc84:	2303      	movs	r3, #3
 800bc86:	73fb      	strb	r3, [r7, #15]
    break;
 800bc88:	bf00      	nop
  }

  return ret;
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	2000ea5c 	.word	0x2000ea5c

0800bc98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	88db      	ldrh	r3, [r3, #6]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d004      	beq.n	800bcb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bcaa:	6839      	ldr	r1, [r7, #0]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 f8ca 	bl	800be46 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800bcb2:	e022      	b.n	800bcfa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	dc02      	bgt.n	800bcc4 <USBD_GetConfig+0x2c>
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	dc03      	bgt.n	800bcca <USBD_GetConfig+0x32>
 800bcc2:	e015      	b.n	800bcf0 <USBD_GetConfig+0x58>
 800bcc4:	2b03      	cmp	r3, #3
 800bcc6:	d00b      	beq.n	800bce0 <USBD_GetConfig+0x48>
 800bcc8:	e012      	b.n	800bcf0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	3308      	adds	r3, #8
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 f925 	bl	800bf28 <USBD_CtlSendData>
      break;
 800bcde:	e00c      	b.n	800bcfa <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3304      	adds	r3, #4
 800bce4:	2201      	movs	r2, #1
 800bce6:	4619      	mov	r1, r3
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f91d 	bl	800bf28 <USBD_CtlSendData>
      break;
 800bcee:	e004      	b.n	800bcfa <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800bcf0:	6839      	ldr	r1, [r7, #0]
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 f8a7 	bl	800be46 <USBD_CtlError>
      break;
 800bcf8:	bf00      	nop
}
 800bcfa:	bf00      	nop
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b082      	sub	sp, #8
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd12:	3b01      	subs	r3, #1
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d81e      	bhi.n	800bd56 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	88db      	ldrh	r3, [r3, #6]
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d004      	beq.n	800bd2a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f88f 	bl	800be46 <USBD_CtlError>
      break;
 800bd28:	e01a      	b.n	800bd60 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d005      	beq.n	800bd46 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	f043 0202 	orr.w	r2, r3, #2
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	330c      	adds	r3, #12
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f8ea 	bl	800bf28 <USBD_CtlSendData>
    break;
 800bd54:	e004      	b.n	800bd60 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800bd56:	6839      	ldr	r1, [r7, #0]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f874 	bl	800be46 <USBD_CtlError>
    break;
 800bd5e:	bf00      	nop
  }
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	885b      	ldrh	r3, [r3, #2]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d106      	bne.n	800bd88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 f92a 	bl	800bfdc <USBD_CtlSendStatus>
  }
}
 800bd88:	bf00      	nop
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bda0:	3b01      	subs	r3, #1
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d80b      	bhi.n	800bdbe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	885b      	ldrh	r3, [r3, #2]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d10c      	bne.n	800bdc8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f910 	bl	800bfdc <USBD_CtlSendStatus>
      }
      break;
 800bdbc:	e004      	b.n	800bdc8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f840 	bl	800be46 <USBD_CtlError>
      break;
 800bdc6:	e000      	b.n	800bdca <USBD_ClrFeature+0x3a>
      break;
 800bdc8:	bf00      	nop
  }
}
 800bdca:	bf00      	nop
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b084      	sub	sp, #16
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	781a      	ldrb	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	3301      	adds	r3, #1
 800bdec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	781a      	ldrb	r2, [r3, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f7ff fa9a 	bl	800b336 <SWAPBYTE>
 800be02:	4603      	mov	r3, r0
 800be04:	461a      	mov	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	3301      	adds	r3, #1
 800be0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3301      	adds	r3, #1
 800be14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f7ff fa8d 	bl	800b336 <SWAPBYTE>
 800be1c:	4603      	mov	r3, r0
 800be1e:	461a      	mov	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	3301      	adds	r3, #1
 800be28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	3301      	adds	r3, #1
 800be2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f7ff fa80 	bl	800b336 <SWAPBYTE>
 800be36:	4603      	mov	r3, r0
 800be38:	461a      	mov	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	80da      	strh	r2, [r3, #6]
}
 800be3e:	bf00      	nop
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b082      	sub	sp, #8
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
 800be4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be50:	2180      	movs	r1, #128	@ 0x80
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7fe fb40 	bl	800a4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be58:	2100      	movs	r1, #0
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7fe fb3c 	bl	800a4d8 <USBD_LL_StallEP>
}
 800be60:	bf00      	nop
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b086      	sub	sp, #24
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be74:	2300      	movs	r3, #0
 800be76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d036      	beq.n	800beec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800be82:	6938      	ldr	r0, [r7, #16]
 800be84:	f000 f836 	bl	800bef4 <USBD_GetLen>
 800be88:	4603      	mov	r3, r0
 800be8a:	3301      	adds	r3, #1
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	005b      	lsls	r3, r3, #1
 800be90:	b29a      	uxth	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800be96:	7dfb      	ldrb	r3, [r7, #23]
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	4413      	add	r3, r2
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	7812      	ldrb	r2, [r2, #0]
 800bea0:	701a      	strb	r2, [r3, #0]
  idx++;
 800bea2:	7dfb      	ldrb	r3, [r7, #23]
 800bea4:	3301      	adds	r3, #1
 800bea6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	4413      	add	r3, r2
 800beae:	2203      	movs	r2, #3
 800beb0:	701a      	strb	r2, [r3, #0]
  idx++;
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
 800beb4:	3301      	adds	r3, #1
 800beb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800beb8:	e013      	b.n	800bee2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800beba:	7dfb      	ldrb	r3, [r7, #23]
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	4413      	add	r3, r2
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	7812      	ldrb	r2, [r2, #0]
 800bec4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	3301      	adds	r3, #1
 800beca:	613b      	str	r3, [r7, #16]
    idx++;
 800becc:	7dfb      	ldrb	r3, [r7, #23]
 800bece:	3301      	adds	r3, #1
 800bed0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	4413      	add	r3, r2
 800bed8:	2200      	movs	r2, #0
 800beda:	701a      	strb	r2, [r3, #0]
    idx++;
 800bedc:	7dfb      	ldrb	r3, [r7, #23]
 800bede:	3301      	adds	r3, #1
 800bee0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1e7      	bne.n	800beba <USBD_GetString+0x52>
 800beea:	e000      	b.n	800beee <USBD_GetString+0x86>
    return;
 800beec:	bf00      	nop
  }
}
 800beee:	3718      	adds	r7, #24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800befc:	2300      	movs	r3, #0
 800befe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bf04:	e005      	b.n	800bf12 <USBD_GetLen+0x1e>
  {
    len++;
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1f5      	bne.n	800bf06 <USBD_GetLen+0x12>
  }

  return len;
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3714      	adds	r7, #20
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2202      	movs	r2, #2
 800bf38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f7fe fb4b 	bl	800a5ea <USBD_LL_Transmit>

  return USBD_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b084      	sub	sp, #16
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	60f8      	str	r0, [r7, #12]
 800bf66:	60b9      	str	r1, [r7, #8]
 800bf68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68ba      	ldr	r2, [r7, #8]
 800bf6e:	2100      	movs	r1, #0
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f7fe fb3a 	bl	800a5ea <USBD_LL_Transmit>

  return USBD_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2203      	movs	r2, #3
 800bf90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  pdev->ep_out[0].rem_length = len;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f7fe fb3e 	bl	800a62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b084      	sub	sp, #16
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	60f8      	str	r0, [r7, #12]
 800bfc2:	60b9      	str	r1, [r7, #8]
 800bfc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	2100      	movs	r1, #0
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f7fe fb2d 	bl	800a62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2204      	movs	r2, #4
 800bfe8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bfec:	2300      	movs	r3, #0
 800bfee:	2200      	movs	r2, #0
 800bff0:	2100      	movs	r1, #0
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7fe faf9 	bl	800a5ea <USBD_LL_Transmit>

  return USBD_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2205      	movs	r2, #5
 800c00e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c012:	2300      	movs	r3, #0
 800c014:	2200      	movs	r2, #0
 800c016:	2100      	movs	r1, #0
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7fe fb07 	bl	800a62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <memset>:
 800c028:	4402      	add	r2, r0
 800c02a:	4603      	mov	r3, r0
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d100      	bne.n	800c032 <memset+0xa>
 800c030:	4770      	bx	lr
 800c032:	f803 1b01 	strb.w	r1, [r3], #1
 800c036:	e7f9      	b.n	800c02c <memset+0x4>

0800c038 <__libc_init_array>:
 800c038:	b570      	push	{r4, r5, r6, lr}
 800c03a:	4d0d      	ldr	r5, [pc, #52]	@ (800c070 <__libc_init_array+0x38>)
 800c03c:	2600      	movs	r6, #0
 800c03e:	4c0d      	ldr	r4, [pc, #52]	@ (800c074 <__libc_init_array+0x3c>)
 800c040:	1b64      	subs	r4, r4, r5
 800c042:	10a4      	asrs	r4, r4, #2
 800c044:	42a6      	cmp	r6, r4
 800c046:	d109      	bne.n	800c05c <__libc_init_array+0x24>
 800c048:	4d0b      	ldr	r5, [pc, #44]	@ (800c078 <__libc_init_array+0x40>)
 800c04a:	2600      	movs	r6, #0
 800c04c:	4c0b      	ldr	r4, [pc, #44]	@ (800c07c <__libc_init_array+0x44>)
 800c04e:	f000 f817 	bl	800c080 <_init>
 800c052:	1b64      	subs	r4, r4, r5
 800c054:	10a4      	asrs	r4, r4, #2
 800c056:	42a6      	cmp	r6, r4
 800c058:	d105      	bne.n	800c066 <__libc_init_array+0x2e>
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c060:	3601      	adds	r6, #1
 800c062:	4798      	blx	r3
 800c064:	e7ee      	b.n	800c044 <__libc_init_array+0xc>
 800c066:	f855 3b04 	ldr.w	r3, [r5], #4
 800c06a:	3601      	adds	r6, #1
 800c06c:	4798      	blx	r3
 800c06e:	e7f2      	b.n	800c056 <__libc_init_array+0x1e>
 800c070:	0800c1b0 	.word	0x0800c1b0
 800c074:	0800c1b0 	.word	0x0800c1b0
 800c078:	0800c1b0 	.word	0x0800c1b0
 800c07c:	0800c1b4 	.word	0x0800c1b4

0800c080 <_init>:
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c082:	bf00      	nop
 800c084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c086:	bc08      	pop	{r3}
 800c088:	469e      	mov	lr, r3
 800c08a:	4770      	bx	lr

0800c08c <_fini>:
 800c08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08e:	bf00      	nop
 800c090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c092:	bc08      	pop	{r3}
 800c094:	469e      	mov	lr, r3
 800c096:	4770      	bx	lr
