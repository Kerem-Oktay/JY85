
DeviceProcessor04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa3c  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800fc78  0800fc78  00010c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800fdc0  0800fdc0  00010dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800fdc4  0800fdc4  00010dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000258  20000000  0800fdc8  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000eabc  20000258  08010020  00011258  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000ed14  08010020  00011d14  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00011258  2**0
                  CONTENTS, READONLY
  9 .debug_info   00024cde  00000000  00000000  0001128e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000051f4  00000000  00000000  00035f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001e30  00000000  00000000  0003b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001723  00000000  00000000  0003cf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037ff7  00000000  00000000  0003e6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002a5fa  00000000  00000000  000766aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014c501  00000000  00000000  000a0ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ed1a5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000085b8  00000000  00000000  001ed1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001f57a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000258 	.word	0x20000258
 8000254:	00000000 	.word	0x00000000
 8000258:	0800fc5c 	.word	0x0800fc5c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000025c 	.word	0x2000025c
 8000274:	0800fc5c 	.word	0x0800fc5c

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	@ 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f002 fe62 	bl	800390c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f81c 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f000 fb00 	bl	8001250 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000c50:	f000 f87c 	bl	8000d4c <MX_GPDMA1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c54:	f000 faca 	bl	80011ec <MX_USB_OTG_FS_PCD_Init>
  MX_ICACHE_Init();
 8000c58:	f000 f924 	bl	8000ea4 <MX_ICACHE_Init>
  MX_TIM8_Init();
 8000c5c:	f000 fa16 	bl	800108c <MX_TIM8_Init>
  MX_I2C3_Init();
 8000c60:	f000 f8e2 	bl	8000e28 <MX_I2C3_Init>
  MX_SPI2_Init();
 8000c64:	f000 f9a2 	bl	8000fac <MX_SPI2_Init>
  MX_SPI1_Init();
 8000c68:	f000 f930 	bl	8000ecc <MX_SPI1_Init>
  MX_I2C1_Init();
 8000c6c:	f000 f89e 	bl	8000dac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 8000c70:	f00b fe66 	bl	800c940 <MX_USB_Device_Init>
  HAL_Delay(2000);
 8000c74:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c78:	f002 ff0e 	bl	8003a98 <HAL_Delay>
  run_device();
 8000c7c:	f002 fa80 	bl	8003180 <run_device>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <main+0x40>

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09e      	sub	sp, #120	@ 0x78
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	2260      	movs	r2, #96	@ 0x60
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00e f80a 	bl	800ecac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
 8000ca6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ca8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000cac:	f005 ff76 	bl	8006b9c <HAL_PWREx_ControlVoltageScaling>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000cb6:	f000 fbdf 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI
 8000cba:	2370      	movs	r3, #112	@ 0x70
 8000cbc:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 8000cd0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cec:	230a      	movs	r3, #10
 8000cee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f005 fff3 	bl	8006cf4 <HAL_RCC_OscConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d14:	f000 fbb0 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d18:	231f      	movs	r3, #31
 8000d1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	2104      	movs	r1, #4
 8000d34:	4618      	mov	r0, r3
 8000d36:	f006 feb9 	bl	8007aac <HAL_RCC_ClockConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d40:	f000 fb9a 	bl	8001478 <Error_Handler>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3778      	adds	r7, #120	@ 0x78
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <MX_GPDMA1_Init+0x5c>)
 8000d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d58:	4a13      	ldr	r2, [pc, #76]	@ (8000da8 <MX_GPDMA1_Init+0x5c>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <MX_GPDMA1_Init+0x5c>)
 8000d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2054      	movs	r0, #84	@ 0x54
 8000d76:	f002 ff6b 	bl	8003c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8000d7a:	2054      	movs	r0, #84	@ 0x54
 8000d7c:	f002 ff82 	bl	8003c84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2055      	movs	r0, #85	@ 0x55
 8000d86:	f002 ff63 	bl	8003c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 8000d8a:	2055      	movs	r0, #85	@ 0x55
 8000d8c:	f002 ff7a 	bl	8003c84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel14_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	2056      	movs	r0, #86	@ 0x56
 8000d96:	f002 ff5b 	bl	8003c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel14_IRQn);
 8000d9a:	2056      	movs	r0, #86	@ 0x56
 8000d9c:	f002 ff72 	bl	8003c84 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	46020c00 	.word	0x46020c00

08000dac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000db2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e24 <MX_I2C1_Init+0x78>)
 8000db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000db8:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000dbc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dd0:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de8:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dea:	f003 ffcb 	bl	8004d84 <HAL_I2C_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000df4:	f000 fb40 	bl	8001478 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000dfc:	f004 fb6c 	bl	80054d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e06:	f000 fb37 	bl	8001478 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4804      	ldr	r0, [pc, #16]	@ (8000e20 <MX_I2C1_Init+0x74>)
 8000e0e:	f004 fbae 	bl	800556e <HAL_I2CEx_ConfigDigitalFilter>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e18:	f000 fb2e 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000274 	.word	0x20000274
 8000e24:	40005400 	.word	0x40005400

08000e28 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea0 <MX_I2C3_Init+0x78>)
 8000e30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e34:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000e38:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e4c:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e52:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e64:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e66:	f003 ff8d 	bl	8004d84 <HAL_I2C_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e70:	f000 fb02 	bl	8001478 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e74:	2100      	movs	r1, #0
 8000e76:	4809      	ldr	r0, [pc, #36]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e78:	f004 fb2e 	bl	80054d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000e82:	f000 faf9 	bl	8001478 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e86:	2100      	movs	r1, #0
 8000e88:	4804      	ldr	r0, [pc, #16]	@ (8000e9c <MX_I2C3_Init+0x74>)
 8000e8a:	f004 fb70 	bl	800556e <HAL_I2CEx_ConfigDigitalFilter>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000e94:	f000 faf0 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200002c8 	.word	0x200002c8
 8000ea0:	46002800 	.word	0x46002800

08000ea4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f004 fbad 	bl	8005608 <HAL_ICACHE_ConfigAssociativityMode>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000eb4:	f000 fae0 	bl	8001478 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000eb8:	f004 fbc6 	bl	8005648 <HAL_ICACHE_Enable>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000ec2:	f000 fad9 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000edc:	4b31      	ldr	r3, [pc, #196]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000ede:	4a32      	ldr	r2, [pc, #200]	@ (8000fa8 <MX_SPI1_Init+0xdc>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee2:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000ee4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eea:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000ef8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000efc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efe:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f04:	4b27      	ldr	r3, [pc, #156]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f06:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f0c:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f12:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f18:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000f24:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f26:	2207      	movs	r2, #7
 8000f28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f30:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f44:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f68:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f6a:	f008 f807 	bl	8008f7c <HAL_SPI_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8000f74:	f000 fa80 	bl	8001478 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000f7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <MX_SPI1_Init+0xd8>)
 8000f8c:	f008 fc09 	bl	80097a2 <HAL_SPIEx_SetConfigAutonomousMode>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8000f96:	f000 fa6f 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000031c 	.word	0x2000031c
 8000fa8:	40013000 	.word	0x40013000

08000fac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fbc:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8000fbe:	4a32      	ldr	r2, [pc, #200]	@ (8001088 <MX_SPI2_Init+0xdc>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fc2:	4b30      	ldr	r3, [pc, #192]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8000fc4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fca:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8000fd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fdc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fde:	4b29      	ldr	r3, [pc, #164]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fe4:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8000fe6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fec:	4b25      	ldr	r3, [pc, #148]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff2:	4b24      	ldr	r3, [pc, #144]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff8:	4b22      	ldr	r3, [pc, #136]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8001000:	2200      	movs	r2, #0
 8001002:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8001006:	2207      	movs	r2, #7
 8001008:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800100a:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <MX_SPI2_Init+0xd8>)
 800100c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001010:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001012:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8001014:	2200      	movs	r2, #0
 8001016:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001018:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <MX_SPI2_Init+0xd8>)
 800101a:	2200      	movs	r2, #0
 800101c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800101e:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8001020:	2200      	movs	r2, #0
 8001022:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8001026:	2200      	movs	r2, #0
 8001028:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800102a:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <MX_SPI2_Init+0xd8>)
 800102c:	2200      	movs	r2, #0
 800102e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8001032:	2200      	movs	r2, #0
 8001034:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8001038:	2200      	movs	r2, #0
 800103a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_SPI2_Init+0xd8>)
 800103e:	2200      	movs	r2, #0
 8001040:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001042:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <MX_SPI2_Init+0xd8>)
 8001044:	2200      	movs	r2, #0
 8001046:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001048:	480e      	ldr	r0, [pc, #56]	@ (8001084 <MX_SPI2_Init+0xd8>)
 800104a:	f007 ff97 	bl	8008f7c <HAL_SPI_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8001054:	f000 fa10 	bl	8001478 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800105c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001060:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	@ (8001084 <MX_SPI2_Init+0xd8>)
 800106c:	f008 fb99 	bl	80097a2 <HAL_SPIEx_SetConfigAutonomousMode>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 8001076:	f000 f9ff 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200003ac 	.word	0x200003ac
 8001088:	40003800 	.word	0x40003800

0800108c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b09c      	sub	sp, #112	@ 0x70
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]
 80010be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2234      	movs	r2, #52	@ 0x34
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00d fdf0 	bl	800ecac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010cc:	4b45      	ldr	r3, [pc, #276]	@ (80011e4 <MX_TIM8_Init+0x158>)
 80010ce:	4a46      	ldr	r2, [pc, #280]	@ (80011e8 <MX_TIM8_Init+0x15c>)
 80010d0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80010d2:	4b44      	ldr	r3, [pc, #272]	@ (80011e4 <MX_TIM8_Init+0x158>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b42      	ldr	r3, [pc, #264]	@ (80011e4 <MX_TIM8_Init+0x158>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 31;
 80010de:	4b41      	ldr	r3, [pc, #260]	@ (80011e4 <MX_TIM8_Init+0x158>)
 80010e0:	221f      	movs	r2, #31
 80010e2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b3f      	ldr	r3, [pc, #252]	@ (80011e4 <MX_TIM8_Init+0x158>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010ea:	4b3e      	ldr	r3, [pc, #248]	@ (80011e4 <MX_TIM8_Init+0x158>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010f0:	4b3c      	ldr	r3, [pc, #240]	@ (80011e4 <MX_TIM8_Init+0x158>)
 80010f2:	2280      	movs	r2, #128	@ 0x80
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010f6:	483b      	ldr	r0, [pc, #236]	@ (80011e4 <MX_TIM8_Init+0x158>)
 80010f8:	f008 fb94 	bl	8009824 <HAL_TIM_Base_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001102:	f000 f9b9 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001106:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800110a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800110c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001110:	4619      	mov	r1, r3
 8001112:	4834      	ldr	r0, [pc, #208]	@ (80011e4 <MX_TIM8_Init+0x158>)
 8001114:	f009 f8ac 	bl	800a270 <HAL_TIM_ConfigClockSource>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800111e:	f000 f9ab 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001122:	4830      	ldr	r0, [pc, #192]	@ (80011e4 <MX_TIM8_Init+0x158>)
 8001124:	f008 fbd5 	bl	80098d2 <HAL_TIM_PWM_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800112e:	f000 f9a3 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001132:	2320      	movs	r3, #32
 8001134:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800113e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001142:	4619      	mov	r1, r3
 8001144:	4827      	ldr	r0, [pc, #156]	@ (80011e4 <MX_TIM8_Init+0x158>)
 8001146:	f009 ff5f 	bl	800b008 <HAL_TIMEx_MasterConfigSynchronization>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001150:	f000 f992 	bl	8001478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001154:	2360      	movs	r3, #96	@ 0x60
 8001156:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115c:	2300      	movs	r3, #0
 800115e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001160:	2300      	movs	r3, #0
 8001162:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001170:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001174:	2204      	movs	r2, #4
 8001176:	4619      	mov	r1, r3
 8001178:	481a      	ldr	r0, [pc, #104]	@ (80011e4 <MX_TIM8_Init+0x158>)
 800117a:	f008 ff65 	bl	800a048 <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001184:	f000 f978 	bl	8001478 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800119c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <MX_TIM8_Init+0x158>)
 80011c6:	f009 ffe1 	bl	800b18c <HAL_TIMEx_ConfigBreakDeadTime>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80011d0:	f000 f952 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <MX_TIM8_Init+0x158>)
 80011d6:	f000 fc0f 	bl	80019f8 <HAL_TIM_MspPostInit>

}
 80011da:	bf00      	nop
 80011dc:	3770      	adds	r7, #112	@ 0x70
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000043c 	.word	0x2000043c
 80011e8:	40013400 	.word	0x40013400

080011ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011f0:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011f2:	4a16      	ldr	r2, [pc, #88]	@ (800124c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80011f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011f6:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011f8:	2206      	movs	r2, #6
 80011fa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011fe:	2202      	movs	r2, #2
 8001200:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001204:	2202      	movs	r2, #2
 8001206:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800120a:	2200      	movs	r2, #0
 800120c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001210:	2200      	movs	r2, #0
 8001212:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001216:	2200      	movs	r2, #0
 8001218:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800121c:	2200      	movs	r2, #0
 800121e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001222:	2200      	movs	r2, #0
 8001224:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001228:	2200      	movs	r2, #0
 800122a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800122e:	2200      	movs	r2, #0
 8001230:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001234:	f004 fa18 	bl	8005668 <HAL_PCD_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800123e:	f000 f91b 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200005f0 	.word	0x200005f0
 800124c:	42040000 	.word	0x42040000

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	@ 0x30
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	4b7d      	ldr	r3, [pc, #500]	@ (800145c <MX_GPIO_Init+0x20c>)
 8001268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800126c:	4a7b      	ldr	r2, [pc, #492]	@ (800145c <MX_GPIO_Init+0x20c>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001276:	4b79      	ldr	r3, [pc, #484]	@ (800145c <MX_GPIO_Init+0x20c>)
 8001278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001284:	4b75      	ldr	r3, [pc, #468]	@ (800145c <MX_GPIO_Init+0x20c>)
 8001286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800128a:	4a74      	ldr	r2, [pc, #464]	@ (800145c <MX_GPIO_Init+0x20c>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001294:	4b71      	ldr	r3, [pc, #452]	@ (800145c <MX_GPIO_Init+0x20c>)
 8001296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012a2:	4b6e      	ldr	r3, [pc, #440]	@ (800145c <MX_GPIO_Init+0x20c>)
 80012a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a8:	4a6c      	ldr	r2, [pc, #432]	@ (800145c <MX_GPIO_Init+0x20c>)
 80012aa:	f043 0320 	orr.w	r3, r3, #32
 80012ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012b2:	4b6a      	ldr	r3, [pc, #424]	@ (800145c <MX_GPIO_Init+0x20c>)
 80012b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b66      	ldr	r3, [pc, #408]	@ (800145c <MX_GPIO_Init+0x20c>)
 80012c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c6:	4a65      	ldr	r2, [pc, #404]	@ (800145c <MX_GPIO_Init+0x20c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012d0:	4b62      	ldr	r3, [pc, #392]	@ (800145c <MX_GPIO_Init+0x20c>)
 80012d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b5f      	ldr	r3, [pc, #380]	@ (800145c <MX_GPIO_Init+0x20c>)
 80012e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e4:	4a5d      	ldr	r2, [pc, #372]	@ (800145c <MX_GPIO_Init+0x20c>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ee:	4b5b      	ldr	r3, [pc, #364]	@ (800145c <MX_GPIO_Init+0x20c>)
 80012f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012fc:	4b57      	ldr	r3, [pc, #348]	@ (800145c <MX_GPIO_Init+0x20c>)
 80012fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001302:	4a56      	ldr	r2, [pc, #344]	@ (800145c <MX_GPIO_Init+0x20c>)
 8001304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001308:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800130c:	4b53      	ldr	r3, [pc, #332]	@ (800145c <MX_GPIO_Init+0x20c>)
 800130e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	4b50      	ldr	r3, [pc, #320]	@ (800145c <MX_GPIO_Init+0x20c>)
 800131c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001320:	4a4e      	ldr	r2, [pc, #312]	@ (800145c <MX_GPIO_Init+0x20c>)
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800132a:	4b4c      	ldr	r3, [pc, #304]	@ (800145c <MX_GPIO_Init+0x20c>)
 800132c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED_Pin|SWTCH_RLY_21_Pin|SWTCH_RLY_22_Pin|SWTCH_RLY_17_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f242 0138 	movw	r1, #8248	@ 0x2038
 800133e:	4848      	ldr	r0, [pc, #288]	@ (8001460 <MX_GPIO_Init+0x210>)
 8001340:	f003 fd08 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SWTCH_RLY_01_Pin|SWTCH_RLY_02_Pin|SWTCH_RLY_03_Pin|SWTCH_RLY_04_Pin
 8001344:	2200      	movs	r2, #0
 8001346:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800134a:	4846      	ldr	r0, [pc, #280]	@ (8001464 <MX_GPIO_Init+0x214>)
 800134c:	f003 fd02 	bl	8004d54 <HAL_GPIO_WritePin>
                          |SWTCH_RLY_05_Pin|SWTCH_RLY_06_Pin|SWTCH_RLY_07_Pin|SWTCH_RLY_08_Pin
                          |SWTCH_RLY_09_Pin|SWTCH_RLY_10_Pin|SWTCH_RLY_11_Pin|SWTCH_RLY_12_Pin
                          |SWTCH_RLY_13_Pin|SWTCH_RLY_14_Pin|SWTCH_RLY_15_Pin|SWTCH_RLY_16_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SWTCH_RLY_18_Pin|SWTCH_RLY_19_Pin|SWTCH_RLY_20_Pin|SWTCH_RLY_23_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f241 0107 	movw	r1, #4103	@ 0x1007
 8001356:	4844      	ldr	r0, [pc, #272]	@ (8001468 <MX_GPIO_Init+0x218>)
 8001358:	f003 fcfc 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC1_D02_Pin ADC1_D03_Pin ADC1_D04_Pin ADC1_D05_Pin
                           ADC1_D06_Pin ADC1_D07_Pin ADC1_D08_Pin ADC1_D09_Pin
                           ADC1_D10_Pin ADC1_D11_Pin ADC1_OTR_Pin ADC1_D00_Pin
                           ADC1_D01_Pin */
  GPIO_InitStruct.Pin = ADC1_D02_Pin|ADC1_D03_Pin|ADC1_D04_Pin|ADC1_D05_Pin
 800135c:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001360:	61fb      	str	r3, [r7, #28]
                          |ADC1_D06_Pin|ADC1_D07_Pin|ADC1_D08_Pin|ADC1_D09_Pin
                          |ADC1_D10_Pin|ADC1_D11_Pin|ADC1_OTR_Pin|ADC1_D00_Pin
                          |ADC1_D01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	483e      	ldr	r0, [pc, #248]	@ (800146c <MX_GPIO_Init+0x21c>)
 8001372:	f003 fb17 	bl	80049a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin SWTCH_RLY_21_Pin SWTCH_RLY_22_Pin SWTCH_RLY_17_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SWTCH_RLY_21_Pin|SWTCH_RLY_22_Pin|SWTCH_RLY_17_Pin;
 8001376:	f242 0338 	movw	r3, #8248	@ 0x2038
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4834      	ldr	r0, [pc, #208]	@ (8001460 <MX_GPIO_Init+0x210>)
 8001390:	f003 fb08 	bl	80049a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWTCH_RLY_01_Pin SWTCH_RLY_02_Pin SWTCH_RLY_03_Pin SWTCH_RLY_04_Pin
                           SWTCH_RLY_05_Pin SWTCH_RLY_06_Pin SWTCH_RLY_07_Pin SWTCH_RLY_08_Pin
                           SWTCH_RLY_09_Pin SWTCH_RLY_10_Pin SWTCH_RLY_11_Pin SWTCH_RLY_12_Pin
                           SWTCH_RLY_13_Pin SWTCH_RLY_14_Pin SWTCH_RLY_15_Pin SWTCH_RLY_16_Pin */
  GPIO_InitStruct.Pin = SWTCH_RLY_01_Pin|SWTCH_RLY_02_Pin|SWTCH_RLY_03_Pin|SWTCH_RLY_04_Pin
 8001394:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001398:	61fb      	str	r3, [r7, #28]
                          |SWTCH_RLY_05_Pin|SWTCH_RLY_06_Pin|SWTCH_RLY_07_Pin|SWTCH_RLY_08_Pin
                          |SWTCH_RLY_09_Pin|SWTCH_RLY_10_Pin|SWTCH_RLY_11_Pin|SWTCH_RLY_12_Pin
                          |SWTCH_RLY_13_Pin|SWTCH_RLY_14_Pin|SWTCH_RLY_15_Pin|SWTCH_RLY_16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	482d      	ldr	r0, [pc, #180]	@ (8001464 <MX_GPIO_Init+0x214>)
 80013ae:	f003 faf9 	bl	80049a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWTCH_RLY_18_Pin SWTCH_RLY_19_Pin SWTCH_RLY_20_Pin SWTCH_RLY_23_Pin */
  GPIO_InitStruct.Pin = SWTCH_RLY_18_Pin|SWTCH_RLY_19_Pin|SWTCH_RLY_20_Pin|SWTCH_RLY_23_Pin;
 80013b2:	f241 0307 	movw	r3, #4103	@ 0x1007
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4827      	ldr	r0, [pc, #156]	@ (8001468 <MX_GPIO_Init+0x218>)
 80013cc:	f003 faea 	bl	80049a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_D00_Pin ADC3_D01_Pin ADC3_D02_Pin ADC3_D03_Pin
                           ADC3_D04_Pin ADC3_D05_Pin ADC3_D06_Pin ADC3_D07_Pin
                           ADC3_D08_Pin ADC3_D09_Pin ADC3_D10_Pin ADC3_D11_Pin
                           ADC3_OTR_Pin */
  GPIO_InitStruct.Pin = ADC3_D00_Pin|ADC3_D01_Pin|ADC3_D02_Pin|ADC3_D03_Pin
 80013d0:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80013d4:	61fb      	str	r3, [r7, #28]
                          |ADC3_D04_Pin|ADC3_D05_Pin|ADC3_D06_Pin|ADC3_D07_Pin
                          |ADC3_D08_Pin|ADC3_D09_Pin|ADC3_D10_Pin|ADC3_D11_Pin
                          |ADC3_OTR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4822      	ldr	r0, [pc, #136]	@ (8001470 <MX_GPIO_Init+0x220>)
 80013e6:	f003 fadd 	bl	80049a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_D13_Pin ADC1_D14_Pin ADC1_D15_Pin */
  GPIO_InitStruct.Pin = ADC1_D13_Pin|ADC1_D14_Pin|ADC1_D15_Pin;
 80013ea:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013f4:	2302      	movs	r3, #2
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	481b      	ldr	r0, [pc, #108]	@ (800146c <MX_GPIO_Init+0x21c>)
 8001400:	f003 fad0 	bl	80049a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC2_D08_Pin ADC2_D09_Pin ADC2_D10_Pin ADC2_D11_Pin
                           ADC2_OTR_Pin ADC2_D00_Pin ADC2_D01_Pin ADC2_D02_Pin
                           ADC2_D03_Pin ADC2_D04_Pin ADC2_D05_Pin ADC2_D06_Pin
                           ADC2_D07_Pin */
  GPIO_InitStruct.Pin = ADC2_D08_Pin|ADC2_D09_Pin|ADC2_D10_Pin|ADC2_D11_Pin
 8001404:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001408:	61fb      	str	r3, [r7, #28]
                          |ADC2_OTR_Pin|ADC2_D00_Pin|ADC2_D01_Pin|ADC2_D02_Pin
                          |ADC2_D03_Pin|ADC2_D04_Pin|ADC2_D05_Pin|ADC2_D06_Pin
                          |ADC2_D07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4816      	ldr	r0, [pc, #88]	@ (8001474 <MX_GPIO_Init+0x224>)
 800141a:	f003 fac3 	bl	80049a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC2_D13_Pin ADC2_D14_Pin ADC2_D15_Pin */
  GPIO_InitStruct.Pin = ADC2_D13_Pin|ADC2_D14_Pin|ADC2_D15_Pin;
 800141e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001428:	2302      	movs	r3, #2
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	4810      	ldr	r0, [pc, #64]	@ (8001474 <MX_GPIO_Init+0x224>)
 8001434:	f003 fab6 	bl	80049a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_D13_Pin ADC3_D14_Pin ADC3_D15_Pin */
  GPIO_InitStruct.Pin = ADC3_D13_Pin|ADC3_D14_Pin|ADC3_D15_Pin;
 8001438:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001442:	2302      	movs	r3, #2
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4808      	ldr	r0, [pc, #32]	@ (8001470 <MX_GPIO_Init+0x220>)
 800144e:	f003 faa9 	bl	80049a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001452:	bf00      	nop
 8001454:	3730      	adds	r7, #48	@ 0x30
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	46020c00 	.word	0x46020c00
 8001460:	42020800 	.word	0x42020800
 8001464:	42021400 	.word	0x42021400
 8001468:	42020400 	.word	0x42020400
 800146c:	42021000 	.word	0x42021000
 8001470:	42021800 	.word	0x42021800
 8001474:	42020c00 	.word	0x42020c00

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <Error_Handler+0x8>

08001484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_MspInit+0x34>)
 800148c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001490:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <HAL_MspInit+0x34>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800149a:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <HAL_MspInit+0x34>)
 800149c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 80014a8:	f005 fc04 	bl	8006cb4 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 80014ac:	f005 fc12 	bl	8006cd4 <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	46020c00 	.word	0x46020c00

080014bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0bc      	sub	sp, #240	@ 0xf0
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	22c0      	movs	r2, #192	@ 0xc0
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f00d fbe5 	bl	800ecac <memset>
  if(hi2c->Instance==I2C1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a4d      	ldr	r2, [pc, #308]	@ (800161c <HAL_I2C_MspInit+0x160>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d147      	bne.n	800157c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014ec:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_MSIK;
 80014f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	4618      	mov	r0, r3
 8001506:	f006 fe65 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001510:	f7ff ffb2 	bl	8001478 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b42      	ldr	r3, [pc, #264]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 8001516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800151a:	4a41      	ldr	r2, [pc, #260]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001524:	4b3e      	ldr	r3, [pc, #248]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 8001526:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C_DAC1_POT_SDA_Pin|I2C_DAC1_POT_SCL_Pin;
 8001532:	2348      	movs	r3, #72	@ 0x48
 8001534:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001538:	2312      	movs	r3, #18
 800153a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800154a:	2304      	movs	r3, #4
 800154c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001554:	4619      	mov	r1, r3
 8001556:	4833      	ldr	r0, [pc, #204]	@ (8001624 <HAL_I2C_MspInit+0x168>)
 8001558:	f003 fa24 	bl	80049a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800155c:	4b30      	ldr	r3, [pc, #192]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 800155e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001562:	4a2f      	ldr	r2, [pc, #188]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 8001564:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001568:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800156c:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 800156e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001572:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800157a:	e04a      	b.n	8001612 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C3)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <HAL_I2C_MspInit+0x16c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d145      	bne.n	8001612 <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001586:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_MSIK;
 8001592:	23c0      	movs	r3, #192	@ 0xc0
 8001594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001598:	f107 0318 	add.w	r3, r7, #24
 800159c:	4618      	mov	r0, r3
 800159e:	f006 fe19 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80015a8:	f7ff ff66 	bl	8001478 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 80015ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 80015be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_DAC2_CURMR_POT_SCL_Pin|I2C_DAC2_CURMR_POT_SDA_Pin;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d0:	2312      	movs	r3, #18
 80015d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015e2:	2304      	movs	r3, #4
 80015e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015ec:	4619      	mov	r1, r3
 80015ee:	480f      	ldr	r0, [pc, #60]	@ (800162c <HAL_I2C_MspInit+0x170>)
 80015f0:	f003 f9d8 	bl	80049a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 80015f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80015fa:	4a09      	ldr	r2, [pc, #36]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001600:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_I2C_MspInit+0x164>)
 8001606:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800160a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
}
 8001612:	bf00      	nop
 8001614:	37f0      	adds	r7, #240	@ 0xf0
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40005400 	.word	0x40005400
 8001620:	46020c00 	.word	0x46020c00
 8001624:	42020400 	.word	0x42020400
 8001628:	46002800 	.word	0x46002800
 800162c:	42020800 	.word	0x42020800

08001630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0be      	sub	sp, #248	@ 0xf8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	22c0      	movs	r2, #192	@ 0xc0
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f00d fb2b 	bl	800ecac <memset>
  if(hspi->Instance==SPI1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a60      	ldr	r2, [pc, #384]	@ (80017dc <HAL_SPI_MspInit+0x1ac>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d147      	bne.n	80016f0 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001660:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_MSIK;
 800166c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	4618      	mov	r0, r3
 800167a:	f006 fdab 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001684:	f7ff fef8 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001688:	4b55      	ldr	r3, [pc, #340]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 800168a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800168e:	4a54      	ldr	r2, [pc, #336]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 8001690:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001694:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001698:	4b51      	ldr	r3, [pc, #324]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 800169a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800169e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b4e      	ldr	r3, [pc, #312]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 80016a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ac:	4a4c      	ldr	r2, [pc, #304]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016b6:	4b4a      	ldr	r3, [pc, #296]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 80016b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_DAC2_SCK_Pin|SPI_DAC2_NSS_Pin|SPI_DAC2_MISO_Pin|SPI_DAC2_MOSI_Pin;
 80016c4:	23d2      	movs	r3, #210	@ 0xd2
 80016c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016dc:	2305      	movs	r3, #5
 80016de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80016e6:	4619      	mov	r1, r3
 80016e8:	483e      	ldr	r0, [pc, #248]	@ (80017e4 <HAL_SPI_MspInit+0x1b4>)
 80016ea:	f003 f95b 	bl	80049a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016ee:	e070      	b.n	80017d2 <HAL_SPI_MspInit+0x1a2>
  else if(hspi->Instance==SPI2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a3c      	ldr	r2, [pc, #240]	@ (80017e8 <HAL_SPI_MspInit+0x1b8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d16b      	bne.n	80017d2 <HAL_SPI_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80016fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_MSIK;
 8001706:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800170a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	4618      	mov	r0, r3
 8001714:	f006 fd5e 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 800171e:	f7ff feab 	bl	8001478 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001722:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 8001724:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001728:	4a2d      	ldr	r2, [pc, #180]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 800172a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001732:	4b2b      	ldr	r3, [pc, #172]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 8001734:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 8001742:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001746:	4a26      	ldr	r2, [pc, #152]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 8001752:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 8001760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001764:	4a1e      	ldr	r2, [pc, #120]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <HAL_SPI_MspInit+0x1b0>)
 8001770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI_DAC1_MISO_Pin;
 800177c:	2304      	movs	r3, #4
 800177e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001794:	2305      	movs	r3, #5
 8001796:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_MISO_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800179e:	4619      	mov	r1, r3
 80017a0:	4812      	ldr	r0, [pc, #72]	@ (80017ec <HAL_SPI_MspInit+0x1bc>)
 80017a2:	f003 f8ff 	bl	80049a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_SCK_Pin|SPI_DAC1_MOSI_Pin|SPI_DAC1_NSS_Pin;
 80017a6:	f44f 4322 	mov.w	r3, #41472	@ 0xa200
 80017aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017c0:	2305      	movs	r3, #5
 80017c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4808      	ldr	r0, [pc, #32]	@ (80017f0 <HAL_SPI_MspInit+0x1c0>)
 80017ce:	f003 f8e9 	bl	80049a4 <HAL_GPIO_Init>
}
 80017d2:	bf00      	nop
 80017d4:	37f8      	adds	r7, #248	@ 0xf8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40013000 	.word	0x40013000
 80017e0:	46020c00 	.word	0x46020c00
 80017e4:	42020000 	.word	0x42020000
 80017e8:	40003800 	.word	0x40003800
 80017ec:	42020800 	.word	0x42020800
 80017f0:	42020400 	.word	0x42020400

080017f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a75      	ldr	r2, [pc, #468]	@ (80019d8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	f040 80e3 	bne.w	80019ce <HAL_TIM_Base_MspInit+0x1da>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001808:	4b74      	ldr	r3, [pc, #464]	@ (80019dc <HAL_TIM_Base_MspInit+0x1e8>)
 800180a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800180e:	4a73      	ldr	r2, [pc, #460]	@ (80019dc <HAL_TIM_Base_MspInit+0x1e8>)
 8001810:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001814:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001818:	4b70      	ldr	r3, [pc, #448]	@ (80019dc <HAL_TIM_Base_MspInit+0x1e8>)
 800181a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800181e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* GPDMA1_REQUEST_TIM8_UP Init */
    handle_GPDMA1_Channel14.Instance = GPDMA1_Channel14;
 8001826:	4b6e      	ldr	r3, [pc, #440]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001828:	4a6e      	ldr	r2, [pc, #440]	@ (80019e4 <HAL_TIM_Base_MspInit+0x1f0>)
 800182a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel14.Init.Request = GPDMA1_REQUEST_TIM8_UP;
 800182c:	4b6c      	ldr	r3, [pc, #432]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800182e:	2235      	movs	r2, #53	@ 0x35
 8001830:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel14.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001832:	4b6b      	ldr	r3, [pc, #428]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel14.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001838:	4b69      	ldr	r3, [pc, #420]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel14.Init.SrcInc = DMA_SINC_FIXED;
 800183e:	4b68      	ldr	r3, [pc, #416]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel14.Init.DestInc = DMA_DINC_INCREMENTED;
 8001844:	4b66      	ldr	r3, [pc, #408]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001846:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800184a:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel14.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800184c:	4b64      	ldr	r3, [pc, #400]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800184e:	2201      	movs	r2, #1
 8001850:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel14.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001852:	4b63      	ldr	r3, [pc, #396]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001854:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001858:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel14.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800185a:	4b61      	ldr	r3, [pc, #388]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800185c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001860:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel14.Init.SrcBurstLength = 1;
 8001862:	4b5f      	ldr	r3, [pc, #380]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001864:	2201      	movs	r2, #1
 8001866:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel14.Init.DestBurstLength = 1;
 8001868:	4b5d      	ldr	r3, [pc, #372]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800186a:	2201      	movs	r2, #1
 800186c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel14.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800186e:	4b5c      	ldr	r3, [pc, #368]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001870:	2200      	movs	r2, #0
 8001872:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel14.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001874:	4b5a      	ldr	r3, [pc, #360]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001876:	2200      	movs	r2, #0
 8001878:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel14.Init.Mode = DMA_NORMAL;
 800187a:	4b59      	ldr	r3, [pc, #356]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800187c:	2200      	movs	r2, #0
 800187e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel14) != HAL_OK)
 8001880:	4857      	ldr	r0, [pc, #348]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001882:	f002 fac1 	bl	8003e08 <HAL_DMA_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_TIM_Base_MspInit+0x9c>
    {
      Error_Handler();
 800188c:	f7ff fdf4 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel14);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a53      	ldr	r2, [pc, #332]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001894:	621a      	str	r2, [r3, #32]
 8001896:	4a52      	ldr	r2, [pc, #328]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel14, DMA_CHANNEL_NPRIV) != HAL_OK)
 800189c:	2110      	movs	r1, #16
 800189e:	4850      	ldr	r0, [pc, #320]	@ (80019e0 <HAL_TIM_Base_MspInit+0x1ec>)
 80018a0:	f002 fd9f 	bl	80043e2 <HAL_DMA_ConfigChannelAttributes>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_TIM_Base_MspInit+0xba>
    {
      Error_Handler();
 80018aa:	f7ff fde5 	bl	8001478 <Error_Handler>
    }

    /* GPDMA1_REQUEST_TIM8_UP Init */
    handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 80018ae:	4b4e      	ldr	r3, [pc, #312]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018b0:	4a4e      	ldr	r2, [pc, #312]	@ (80019ec <HAL_TIM_Base_MspInit+0x1f8>)
 80018b2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel13.Init.Request = GPDMA1_REQUEST_TIM8_UP;
 80018b4:	4b4c      	ldr	r3, [pc, #304]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018b6:	2235      	movs	r2, #53	@ 0x35
 80018b8:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel13.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80018ba:	4b4b      	ldr	r3, [pc, #300]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel13.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c0:	4b49      	ldr	r3, [pc, #292]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel13.Init.SrcInc = DMA_SINC_FIXED;
 80018c6:	4b48      	ldr	r3, [pc, #288]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel13.Init.DestInc = DMA_DINC_INCREMENTED;
 80018cc:	4b46      	ldr	r3, [pc, #280]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018ce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018d2:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel13.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80018d4:	4b44      	ldr	r3, [pc, #272]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel13.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80018da:	4b43      	ldr	r3, [pc, #268]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018e0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel13.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80018e2:	4b41      	ldr	r3, [pc, #260]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018e8:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel13.Init.SrcBurstLength = 1;
 80018ea:	4b3f      	ldr	r3, [pc, #252]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel13.Init.DestBurstLength = 1;
 80018f0:	4b3d      	ldr	r3, [pc, #244]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel13.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80018f6:	4b3c      	ldr	r3, [pc, #240]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel13.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80018fc:	4b3a      	ldr	r3, [pc, #232]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel13.Init.Mode = DMA_NORMAL;
 8001902:	4b39      	ldr	r3, [pc, #228]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 8001904:	2200      	movs	r2, #0
 8001906:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 8001908:	4837      	ldr	r0, [pc, #220]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 800190a:	f002 fa7d 	bl	8003e08 <HAL_DMA_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_TIM_Base_MspInit+0x124>
    {
      Error_Handler();
 8001914:	f7ff fdb0 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel13);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a33      	ldr	r2, [pc, #204]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 800191c:	621a      	str	r2, [r3, #32]
 800191e:	4a32      	ldr	r2, [pc, #200]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001924:	2110      	movs	r1, #16
 8001926:	4830      	ldr	r0, [pc, #192]	@ (80019e8 <HAL_TIM_Base_MspInit+0x1f4>)
 8001928:	f002 fd5b 	bl	80043e2 <HAL_DMA_ConfigChannelAttributes>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_TIM_Base_MspInit+0x142>
    {
      Error_Handler();
 8001932:	f7ff fda1 	bl	8001478 <Error_Handler>
    }

    /* GPDMA1_REQUEST_TIM8_UP Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8001936:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 8001938:	4a2e      	ldr	r2, [pc, #184]	@ (80019f4 <HAL_TIM_Base_MspInit+0x200>)
 800193a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_TIM8_UP;
 800193c:	4b2c      	ldr	r3, [pc, #176]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 800193e:	2235      	movs	r2, #53	@ 0x35
 8001940:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001942:	4b2b      	ldr	r3, [pc, #172]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001948:	4b29      	ldr	r3, [pc, #164]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 800194e:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 8001956:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800195a:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800195c:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 800195e:	2201      	movs	r2, #1
 8001960:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001962:	4b23      	ldr	r3, [pc, #140]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 8001964:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001968:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800196a:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 800196c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001970:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 8001972:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 8001974:	2201      	movs	r2, #1
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 8001978:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 800197a:	2201      	movs	r2, #1
 800197c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800197e:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 8001980:	2200      	movs	r2, #0
 8001982:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001984:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 8001986:	2200      	movs	r2, #0
 8001988:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 800198a:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 800198c:	2200      	movs	r2, #0
 800198e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8001990:	4817      	ldr	r0, [pc, #92]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 8001992:	f002 fa39 	bl	8003e08 <HAL_DMA_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_TIM_Base_MspInit+0x1ac>
    {
      Error_Handler();
 800199c:	f7ff fd6c 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel12);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a13      	ldr	r2, [pc, #76]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 80019a4:	621a      	str	r2, [r3, #32]
 80019a6:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 80019ac:	2110      	movs	r1, #16
 80019ae:	4810      	ldr	r0, [pc, #64]	@ (80019f0 <HAL_TIM_Base_MspInit+0x1fc>)
 80019b0:	f002 fd17 	bl	80043e2 <HAL_DMA_ConfigChannelAttributes>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_TIM_Base_MspInit+0x1ca>
    {
      Error_Handler();
 80019ba:	f7ff fd5d 	bl	8001478 <Error_Handler>
    }

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2034      	movs	r0, #52	@ 0x34
 80019c4:	f002 f944 	bl	8003c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80019c8:	2034      	movs	r0, #52	@ 0x34
 80019ca:	f002 f95b 	bl	8003c84 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40013400 	.word	0x40013400
 80019dc:	46020c00 	.word	0x46020c00
 80019e0:	20000488 	.word	0x20000488
 80019e4:	40020750 	.word	0x40020750
 80019e8:	20000500 	.word	0x20000500
 80019ec:	400206d0 	.word	0x400206d0
 80019f0:	20000578 	.word	0x20000578
 80019f4:	40020650 	.word	0x40020650

080019f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <HAL_TIM_MspPostInit+0x68>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d11e      	bne.n	8001a58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_TIM_MspPostInit+0x6c>)
 8001a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a20:	4a10      	ldr	r2, [pc, #64]	@ (8001a64 <HAL_TIM_MspPostInit+0x6c>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <HAL_TIM_MspPostInit+0x6c>)
 8001a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ADC_CLK_Pin;
 8001a38:	2380      	movs	r3, #128	@ 0x80
 8001a3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	4619      	mov	r1, r3
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <HAL_TIM_MspPostInit+0x70>)
 8001a54:	f002 ffa6 	bl	80049a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40013400 	.word	0x40013400
 8001a64:	46020c00 	.word	0x46020c00
 8001a68:	42020800 	.word	0x42020800

08001a6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0bc      	sub	sp, #240	@ 0xf0
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	22c0      	movs	r2, #192	@ 0xc0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00d f90d 	bl	800ecac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a3c      	ldr	r2, [pc, #240]	@ (8001b88 <HAL_PCD_MspInit+0x11c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d171      	bne.n	8001b80 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001a9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aae:	f107 0318 	add.w	r3, r7, #24
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f006 fb8e 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001abe:	f7ff fcdb 	bl	8001478 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b32      	ldr	r3, [pc, #200]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac8:	4a30      	ldr	r2, [pc, #192]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ae0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ae4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001afa:	230a      	movs	r3, #10
 8001afc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b04:	4619      	mov	r1, r3
 8001b06:	4822      	ldr	r0, [pc, #136]	@ (8001b90 <HAL_PCD_MspInit+0x124>)
 8001b08:	f002 ff4c 	bl	80049a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b12:	4a1e      	ldr	r2, [pc, #120]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b18:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2a:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d119      	bne.n	8001b6c <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b3e:	4a13      	ldr	r2, [pc, #76]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b48:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001b56:	f005 f8ad 	bl	8006cb4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b60:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <HAL_PCD_MspInit+0x120>)
 8001b62:	f023 0304 	bic.w	r3, r3, #4
 8001b66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b6a:	e001      	b.n	8001b70 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001b6c:	f005 f8a2 	bl	8006cb4 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2049      	movs	r0, #73	@ 0x49
 8001b76:	f002 f86b 	bl	8003c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001b7a:	2049      	movs	r0, #73	@ 0x49
 8001b7c:	f002 f882 	bl	8003c84 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001b80:	bf00      	nop
 8001b82:	37f0      	adds	r7, #240	@ 0xf0
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	42040000 	.word	0x42040000
 8001b8c:	46020c00 	.word	0x46020c00
 8001b90:	42020000 	.word	0x42020000

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <NMI_Handler+0x4>

08001b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <MemManage_Handler+0x4>

08001bac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bea:	f001 ff35 	bl	8003a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 Update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <TIM8_UP_IRQHandler+0x10>)
 8001bfa:	f008 f8d5 	bl	8009da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000043c 	.word	0x2000043c

08001c08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
//  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c0c:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <OTG_FS_IRQHandler+0x10>)
 8001c0e:	f003 fe72 	bl	80058f6 <HAL_PCD_IRQHandler>
  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000e4d4 	.word	0x2000e4d4

08001c1c <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <GPDMA1_Channel12_IRQHandler+0x10>)
 8001c22:	f002 fa7d 	bl	8004120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000578 	.word	0x20000578

08001c30 <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <GPDMA1_Channel13_IRQHandler+0x10>)
 8001c36:	f002 fa73 	bl	8004120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000500 	.word	0x20000500

08001c44 <GPDMA1_Channel14_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 14 global interrupt.
  */
void GPDMA1_Channel14_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 0 */

  /* USER CODE END GPDMA1_Channel14_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel14);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <GPDMA1_Channel14_IRQHandler+0x10>)
 8001c4a:	f002 fa69 	bl	8004120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 1 */

  /* USER CODE END GPDMA1_Channel14_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000488 	.word	0x20000488

08001c58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <SystemInit+0x68>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c62:	4a17      	ldr	r2, [pc, #92]	@ (8001cc0 <SystemInit+0x68>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <SystemInit+0x6c>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001c72:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <SystemInit+0x6c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <SystemInit+0x6c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <SystemInit+0x6c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <SystemInit+0x6c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc4 <SystemInit+0x6c>)
 8001c8a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001c8e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001c92:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <SystemInit+0x6c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <SystemInit+0x6c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a09      	ldr	r2, [pc, #36]	@ (8001cc4 <SystemInit+0x6c>)
 8001ca0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <SystemInit+0x6c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <SystemInit+0x68>)
 8001cae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001cb2:	609a      	str	r2, [r3, #8]
  #endif
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00
 8001cc4:	46020c00 	.word	0x46020c00

08001cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d00 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ccc:	f7ff ffc4 	bl	8001c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cd2:	e003      	b.n	8001cdc <LoopCopyDataInit>

08001cd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cda:	3104      	adds	r1, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cdc:	480a      	ldr	r0, [pc, #40]	@ (8001d08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ce0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ce2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ce4:	d3f6      	bcc.n	8001cd4 <CopyDataInit>
	ldr	r2, =_sbss
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ce8:	e002      	b.n	8001cf0 <LoopFillZerobss>

08001cea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001cec:	f842 3b04 	str.w	r3, [r2], #4

08001cf0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <LoopForever+0x16>)
	cmp	r2, r3
 8001cf2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cf4:	d3f9      	bcc.n	8001cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f00c ffe7 	bl	800ecc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cfa:	f7fe ffa1 	bl	8000c40 <main>

08001cfe <LoopForever>:

LoopForever:
    b LoopForever
 8001cfe:	e7fe      	b.n	8001cfe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d00:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001d04:	0800fdc8 	.word	0x0800fdc8
	ldr	r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d0c:	20000258 	.word	0x20000258
	ldr	r2, =_sbss
 8001d10:	20000258 	.word	0x20000258
	ldr	r3, = _ebss
 8001d14:	2000ed14 	.word	0x2000ed14

08001d18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_IRQHandler>
	...

08001d1c <set_adc_sampling_freq>:

void dma_adc_1_cplt_callback(DMA_HandleTypeDef *hdma);
void dma_adc_2_cplt_callback(DMA_HandleTypeDef *hdma);
void dma_adc_3_cplt_callback(DMA_HandleTypeDef *hdma);

void set_adc_sampling_freq(uint32_t sample_freq){
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	uint32_t sample_freq_div;
	sample_freq_div = 160000000UL / sample_freq;
 8001d24:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <set_adc_sampling_freq+0x34>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	60fb      	str	r3, [r7, #12]
//	TIM8->ARR = sample_freq_div-1;
//	TIM8->CCR1 = TIM8->ARR/2;
	TIM8->CCR2 = TIM8->ARR/2;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <set_adc_sampling_freq+0x38>)
 8001d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d32:	4a08      	ldr	r2, [pc, #32]	@ (8001d54 <set_adc_sampling_freq+0x38>)
 8001d34:	085b      	lsrs	r3, r3, #1
 8001d36:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM8->DIER |= TIM_DIER_UDE;
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <set_adc_sampling_freq+0x38>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <set_adc_sampling_freq+0x38>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d42:	60d3      	str	r3, [r2, #12]
//		}
//		else{
//			dma_trig_test[i] = (1 << (12 + 16));
//		}
//	}
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	09896800 	.word	0x09896800
 8001d54:	40013400 	.word	0x40013400

08001d58 <set_adc_dma_callback_routines>:

void set_adc_dma_callback_routines(void){
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	adc_1_busy = 0;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <set_adc_dma_callback_routines+0x44>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
	adc_2_busy = 0;
 8001d62:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <set_adc_dma_callback_routines+0x48>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
	adc_3_busy = 0;
 8001d68:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <set_adc_dma_callback_routines+0x4c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
	adc_1_full = 0;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <set_adc_dma_callback_routines+0x50>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
	adc_2_full = 0;
 8001d74:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <set_adc_dma_callback_routines+0x54>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
	adc_3_full = 0;
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <set_adc_dma_callback_routines+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
	handle_GPDMA1_Channel12.XferCpltCallback = &dma_adc_1_cplt_callback;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <set_adc_dma_callback_routines+0x5c>)
 8001d82:	4a0d      	ldr	r2, [pc, #52]	@ (8001db8 <set_adc_dma_callback_routines+0x60>)
 8001d84:	661a      	str	r2, [r3, #96]	@ 0x60
	handle_GPDMA1_Channel13.XferCpltCallback = &dma_adc_2_cplt_callback;
 8001d86:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <set_adc_dma_callback_routines+0x64>)
 8001d88:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc0 <set_adc_dma_callback_routines+0x68>)
 8001d8a:	661a      	str	r2, [r3, #96]	@ 0x60
	handle_GPDMA1_Channel14.XferCpltCallback = &dma_adc_3_cplt_callback;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <set_adc_dma_callback_routines+0x6c>)
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc8 <set_adc_dma_callback_routines+0x70>)
 8001d90:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	20000ad4 	.word	0x20000ad4
 8001da0:	20000ad5 	.word	0x20000ad5
 8001da4:	20000ad6 	.word	0x20000ad6
 8001da8:	20000ad7 	.word	0x20000ad7
 8001dac:	20000ad8 	.word	0x20000ad8
 8001db0:	20000ad9 	.word	0x20000ad9
 8001db4:	20000578 	.word	0x20000578
 8001db8:	08001ea9 	.word	0x08001ea9
 8001dbc:	20000500 	.word	0x20000500
 8001dc0:	08001ed1 	.word	0x08001ed1
 8001dc4:	20000488 	.word	0x20000488
 8001dc8:	08001ef9 	.word	0x08001ef9

08001dcc <collect_adc_samples_it>:
        HAL_DMA_Abort(dma_ptr);
    }
	return result;
}

HAL_StatusTypeDef collect_adc_samples_it(uint8_t adc_num){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result1, result2, result3;
	result1 = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
	result2 = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73bb      	strb	r3, [r7, #14]
	result3 = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	737b      	strb	r3, [r7, #13]
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8001de2:	2104      	movs	r1, #4
 8001de4:	4823      	ldr	r0, [pc, #140]	@ (8001e74 <collect_adc_samples_it+0xa8>)
 8001de6:	f007 ff27 	bl	8009c38 <HAL_TIM_PWM_Stop>
	HAL_Delay(100);
 8001dea:	2064      	movs	r0, #100	@ 0x64
 8001dec:	f001 fe54 	bl	8003a98 <HAL_Delay>
	if(adc_num & 0x1){
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <collect_adc_samples_it+0x46>
		adc_1_busy = 1;
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <collect_adc_samples_it+0xac>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
//		HAL_TIM_Base_Start(&htim8);
		result1 = HAL_DMA_Start_IT(&handle_GPDMA1_Channel12,(uint32_t)&GPIOE->IDR,(uint32_t)adc_samples_1,DVC_MAX_NUM_ADC_SAMPLES*sizeof(uint16_t));
 8001e00:	4a1e      	ldr	r2, [pc, #120]	@ (8001e7c <collect_adc_samples_it+0xb0>)
 8001e02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e06:	491e      	ldr	r1, [pc, #120]	@ (8001e80 <collect_adc_samples_it+0xb4>)
 8001e08:	481e      	ldr	r0, [pc, #120]	@ (8001e84 <collect_adc_samples_it+0xb8>)
 8001e0a:	f002 f929 	bl	8004060 <HAL_DMA_Start_IT>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	73fb      	strb	r3, [r7, #15]
	}
	if(adc_num & 0x2){
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <collect_adc_samples_it+0x68>
		adc_2_busy = 1;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <collect_adc_samples_it+0xbc>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
//		HAL_TIM_Base_Start(&htim8);
		result2 = HAL_DMA_Start_IT(&handle_GPDMA1_Channel13,(uint32_t)&GPIOD->IDR,(uint32_t)adc_samples_2,DVC_MAX_NUM_ADC_SAMPLES*sizeof(uint16_t));
 8001e22:	4a1a      	ldr	r2, [pc, #104]	@ (8001e8c <collect_adc_samples_it+0xc0>)
 8001e24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e28:	4919      	ldr	r1, [pc, #100]	@ (8001e90 <collect_adc_samples_it+0xc4>)
 8001e2a:	481a      	ldr	r0, [pc, #104]	@ (8001e94 <collect_adc_samples_it+0xc8>)
 8001e2c:	f002 f918 	bl	8004060 <HAL_DMA_Start_IT>
 8001e30:	4603      	mov	r3, r0
 8001e32:	73bb      	strb	r3, [r7, #14]
	}
	if(adc_num & 0x4){
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <collect_adc_samples_it+0x8a>
		adc_3_busy = 1;
 8001e3e:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <collect_adc_samples_it+0xcc>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
//		HAL_TIM_Base_Start(&htim8);
		result3 = HAL_DMA_Start_IT(&handle_GPDMA1_Channel14,(uint32_t)&GPIOG->IDR,(uint32_t)adc_samples_3,DVC_MAX_NUM_ADC_SAMPLES*sizeof(uint16_t));
 8001e44:	4a15      	ldr	r2, [pc, #84]	@ (8001e9c <collect_adc_samples_it+0xd0>)
 8001e46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e4a:	4915      	ldr	r1, [pc, #84]	@ (8001ea0 <collect_adc_samples_it+0xd4>)
 8001e4c:	4815      	ldr	r0, [pc, #84]	@ (8001ea4 <collect_adc_samples_it+0xd8>)
 8001e4e:	f002 f907 	bl	8004060 <HAL_DMA_Start_IT>
 8001e52:	4603      	mov	r3, r0
 8001e54:	737b      	strb	r3, [r7, #13]
	}
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001e56:	2104      	movs	r1, #4
 8001e58:	4806      	ldr	r0, [pc, #24]	@ (8001e74 <collect_adc_samples_it+0xa8>)
 8001e5a:	f007 fd9b 	bl	8009994 <HAL_TIM_PWM_Start>
	return result1 | result2 | result3;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	7bbb      	ldrb	r3, [r7, #14]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	7b7b      	ldrb	r3, [r7, #13]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b2db      	uxtb	r3, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2000043c 	.word	0x2000043c
 8001e78:	20000ad4 	.word	0x20000ad4
 8001e7c:	20000adc 	.word	0x20000adc
 8001e80:	42021010 	.word	0x42021010
 8001e84:	20000578 	.word	0x20000578
 8001e88:	20000ad5 	.word	0x20000ad5
 8001e8c:	20004adc 	.word	0x20004adc
 8001e90:	42020c10 	.word	0x42020c10
 8001e94:	20000500 	.word	0x20000500
 8001e98:	20000ad6 	.word	0x20000ad6
 8001e9c:	20008adc 	.word	0x20008adc
 8001ea0:	42021810 	.word	0x42021810
 8001ea4:	20000488 	.word	0x20000488

08001ea8 <dma_adc_1_cplt_callback>:
    for (size_t i = 0; i < size; i++) {
        buffer[i] = reverse_bits_16(buffer[i]);
    }
}

void dma_adc_1_cplt_callback(DMA_HandleTypeDef *hdma){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	adc_1_busy = 0;
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <dma_adc_1_cplt_callback+0x20>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
	adc_1_full = 1;
 8001eb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <dma_adc_1_cplt_callback+0x24>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	20000ad4 	.word	0x20000ad4
 8001ecc:	20000ad7 	.word	0x20000ad7

08001ed0 <dma_adc_2_cplt_callback>:

void dma_adc_2_cplt_callback(DMA_HandleTypeDef *hdma){
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	adc_2_busy = 0;
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <dma_adc_2_cplt_callback+0x20>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
	adc_2_full = 1;
 8001ede:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <dma_adc_2_cplt_callback+0x24>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	20000ad5 	.word	0x20000ad5
 8001ef4:	20000ad8 	.word	0x20000ad8

08001ef8 <dma_adc_3_cplt_callback>:

void dma_adc_3_cplt_callback(DMA_HandleTypeDef *hdma){
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	adc_3_busy = 0;
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <dma_adc_3_cplt_callback+0x20>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
	adc_3_full = 1;
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <dma_adc_3_cplt_callback+0x24>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	20000ad6 	.word	0x20000ad6
 8001f1c:	20000ad9 	.word	0x20000ad9

08001f20 <init_register_map>:
 *      Author: User
 */

#include "../Inc/device_registers.h"

void init_register_map(RegisterMap_TypeDef* RegMap){
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e007      	b.n	8001f3e <init_register_map+0x1e>
		RegMap->RegisterArray[i].RegData = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	2100      	movs	r1, #0
 8001f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2bff      	cmp	r3, #255	@ 0xff
 8001f42:	ddf4      	ble.n	8001f2e <init_register_map+0xe>
	}
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <get_register>:

uint32_t get_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr){
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
	return (REG_DATA_MASK & RegMap->RegisterArray[reg_addr].RegData);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <set_register>:

void set_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr, uint32_t data){
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	RegMap->RegisterArray[reg_addr].RegData = (REG_DATA_MASK & data);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <set_ad9833_dds_buffer>:
extern I2C_HandleTypeDef hi2c3;

extern SPI_HandleTypeDef hspi1;
extern SPI_HandleTypeDef hspi2;

void set_ad9833_dds_buffer(uint8_t *buffer, uint32_t freq_28b) {
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
	// Combine 14 MSBs and 14 LSBs
//    uint32_t freq_28b = ((freq_14msb & 0x3FFF) << 14) | (freq_14lsb & 0x3FFF);
    // Populate the buffer according to the command sequence
    buffer[0] = 0x21; buffer[1] = 0x00; // Control Register
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2221      	movs	r2, #33	@ 0x21
 8001fa8:	701a      	strb	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3301      	adds	r3, #1
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x40 | ((freq_28b >> 8) & 0x3F); // Frequency Register 0 LSB
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
    buffer[3] = freq_28b & 0xFF;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3303      	adds	r3, #3
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x40 | ((freq_28b >> 22) & 0x3F); // Frequency Register 0 MSB
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	0d9b      	lsrs	r3, r3, #22
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]
    buffer[5] = (freq_28b >> 14) & 0xFF;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	0b9a      	lsrs	r2, r3, #14
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3305      	adds	r3, #5
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	701a      	strb	r2, [r3, #0]
    buffer[6] = 0xC0; buffer[7] = 0x00; // Phase Register 0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3306      	adds	r3, #6
 8001ffc:	22c0      	movs	r2, #192	@ 0xc0
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3307      	adds	r3, #7
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
    buffer[8] = 0x20; buffer[9] = 0x00; // Exit Reset
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3308      	adds	r3, #8
 800200c:	2220      	movs	r2, #32
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3309      	adds	r3, #9
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <set_pot_buffer>:

void set_pot_buffer(uint8_t *buffer, uint32_t cmd, uint32_t value) {
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
    buffer[0] = cmd;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	701a      	strb	r2, [r3, #0]
    buffer[1] = value;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <calculate_pot_value_curr_mirr>:

int calculate_pot_value_curr_mirr(float Current) {
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	ed2d 8b02 	vpush	{d8}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	ed87 0a01 	vstr	s0, [r7, #4]
	// Function to calculate pot_value
    // Define the constants
//    const float constant = 10.319;
//    const float exponent = -1.031;
//    const float offset = 255;
    const float constant = 15.682;
 800205e:	4b27      	ldr	r3, [pc, #156]	@ (80020fc <calculate_pot_value_curr_mirr+0xac>)
 8002060:	617b      	str	r3, [r7, #20]
    const float exponent = -0.9434;
 8002062:	4b27      	ldr	r3, [pc, #156]	@ (8002100 <calculate_pot_value_curr_mirr+0xb0>)
 8002064:	613b      	str	r3, [r7, #16]
    const float offset = 255;
 8002066:	4b27      	ldr	r3, [pc, #156]	@ (8002104 <calculate_pot_value_curr_mirr+0xb4>)
 8002068:	60fb      	str	r3, [r7, #12]
    // Calculate pot_value using the provided formula
    float pot_value = offset - pow(Current/constant/1000.0, exponent);
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7fe fa68 	bl	8000540 <__aeabi_f2d>
 8002070:	4604      	mov	r4, r0
 8002072:	460d      	mov	r5, r1
 8002074:	ed97 7a01 	vldr	s14, [r7, #4]
 8002078:	edd7 7a05 	vldr	s15, [r7, #20]
 800207c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002080:	ee16 0a90 	vmov	r0, s13
 8002084:	f7fe fa5c 	bl	8000540 <__aeabi_f2d>
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	4b1e      	ldr	r3, [pc, #120]	@ (8002108 <calculate_pot_value_curr_mirr+0xb8>)
 800208e:	f7fe fbd9 	bl	8000844 <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	ec43 2b18 	vmov	d8, r2, r3
 800209a:	6938      	ldr	r0, [r7, #16]
 800209c:	f7fe fa50 	bl	8000540 <__aeabi_f2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	ec43 2b11 	vmov	d1, r2, r3
 80020a8:	eeb0 0a48 	vmov.f32	s0, s16
 80020ac:	eef0 0a68 	vmov.f32	s1, s17
 80020b0:	f00c fe2e 	bl	800ed10 <pow>
 80020b4:	ec53 2b10 	vmov	r2, r3, d0
 80020b8:	4620      	mov	r0, r4
 80020ba:	4629      	mov	r1, r5
 80020bc:	f7fe f8e0 	bl	8000280 <__aeabi_dsub>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7fe fd6a 	bl	8000ba0 <__aeabi_d2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	60bb      	str	r3, [r7, #8]

    // Return the calculated pot_value
    return (int)round(pot_value);
 80020d0:	68b8      	ldr	r0, [r7, #8]
 80020d2:	f7fe fa35 	bl	8000540 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	ec43 2b10 	vmov	d0, r2, r3
 80020de:	f00c fe93 	bl	800ee08 <round>
 80020e2:	ec53 2b10 	vmov	r2, r3, d0
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7fe fd31 	bl	8000b50 <__aeabi_d2iz>
 80020ee:	4603      	mov	r3, r0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	ecbd 8b02 	vpop	{d8}
 80020fa:	bdb0      	pop	{r4, r5, r7, pc}
 80020fc:	417ae979 	.word	0x417ae979
 8002100:	bf7182aa 	.word	0xbf7182aa
 8002104:	437f0000 	.word	0x437f0000
 8002108:	408f4000 	.word	0x408f4000

0800210c <calculate_pot_value_volt_offset>:

int calculate_pot_value_volt_offset(float voltage) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	ed87 0a01 	vstr	s0, [r7, #4]
	// Function to calculate pot_value
    // Define the constants
    const float constant = 4.8155;
 8002116:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <calculate_pot_value_volt_offset+0x54>)
 8002118:	617b      	str	r3, [r7, #20]
    const float divisor = 0.038;
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <calculate_pot_value_volt_offset+0x58>)
 800211c:	613b      	str	r3, [r7, #16]

    // Calculate pot_value using the provided formula
    float pot_value = (constant - voltage)/divisor;
 800211e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002122:	edd7 7a01 	vldr	s15, [r7, #4]
 8002126:	ee77 6a67 	vsub.f32	s13, s14, s15
 800212a:	ed97 7a04 	vldr	s14, [r7, #16]
 800212e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002132:	edc7 7a03 	vstr	s15, [r7, #12]

    // Return the calculated pot_value
    return (int)round(pot_value);
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f7fe fa02 	bl	8000540 <__aeabi_f2d>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	ec43 2b10 	vmov	d0, r2, r3
 8002144:	f00c fe60 	bl	800ee08 <round>
 8002148:	ec53 2b10 	vmov	r2, r3, d0
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	f7fe fcfe 	bl	8000b50 <__aeabi_d2iz>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	409a1893 	.word	0x409a1893
 8002164:	3d1ba5e3 	.word	0x3d1ba5e3

08002168 <calculate_pot_value_volt_gain>:

int calculate_pot_value_volt_gain(float voltage) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	ed87 0a01 	vstr	s0, [r7, #4]
	// Function to calculate pot_value
    // Define the constants
    const float constant = 4.2703;
 8002172:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <calculate_pot_value_volt_gain+0x54>)
 8002174:	617b      	str	r3, [r7, #20]
    const float divisor = 0.0315;
 8002176:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <calculate_pot_value_volt_gain+0x58>)
 8002178:	613b      	str	r3, [r7, #16]

    // Calculate pot_value using the provided formula
    float pot_value = (constant - voltage)/divisor;
 800217a:	ed97 7a05 	vldr	s14, [r7, #20]
 800217e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002182:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002186:	ed97 7a04 	vldr	s14, [r7, #16]
 800218a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218e:	edc7 7a03 	vstr	s15, [r7, #12]

    // Return the calculated pot_value
    return (int)round(pot_value);
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7fe f9d4 	bl	8000540 <__aeabi_f2d>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	ec43 2b10 	vmov	d0, r2, r3
 80021a0:	f00c fe32 	bl	800ee08 <round>
 80021a4:	ec53 2b10 	vmov	r2, r3, d0
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fcd0 	bl	8000b50 <__aeabi_d2iz>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	4088a64c 	.word	0x4088a64c
 80021c0:	3d010625 	.word	0x3d010625

080021c4 <config_dds_freq>:

HAL_StatusTypeDef config_dds_freq(SPI_HandleTypeDef *hspi, uint8_t *buffer){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	result = HAL_SPI_Transmit(hspi, buffer, 10, 1000);
 80021ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d2:	220a      	movs	r2, #10
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f006 ffe6 	bl	80091a8 <HAL_SPI_Transmit>
 80021dc:	4603      	mov	r3, r0
 80021de:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 80021e0:	2064      	movs	r0, #100	@ 0x64
 80021e2:	f001 fc59 	bl	8003a98 <HAL_Delay>
	return result;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <config_volt_src_gain>:

HAL_StatusTypeDef config_volt_src_gain(I2C_HandleTypeDef *hi2c, uint16_t pot_addr, uint8_t *buffer){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	460b      	mov	r3, r1
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
 80021fe:	8979      	ldrh	r1, [r7, #10]
 8002200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2302      	movs	r3, #2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f002 fe56 	bl	8004ebc <HAL_I2C_Master_Transmit>
 8002210:	4603      	mov	r3, r0
 8002212:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8002214:	2064      	movs	r0, #100	@ 0x64
 8002216:	f001 fc3f 	bl	8003a98 <HAL_Delay>
	return result;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <config_volt_src_offset>:

HAL_StatusTypeDef config_volt_src_offset(I2C_HandleTypeDef *hi2c, uint16_t pot_addr, uint8_t *buffer){
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	460b      	mov	r3, r1
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2302      	movs	r3, #2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f002 fe3c 	bl	8004ebc <HAL_I2C_Master_Transmit>
 8002244:	4603      	mov	r3, r0
 8002246:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8002248:	2064      	movs	r0, #100	@ 0x64
 800224a:	f001 fc25 	bl	8003a98 <HAL_Delay>
	return result;
 800224e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <config_current_mirror>:

HAL_StatusTypeDef config_current_mirror(I2C_HandleTypeDef *hi2c, uint16_t pot_addr, uint8_t *buffer){
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	460b      	mov	r3, r1
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
 8002266:	8979      	ldrh	r1, [r7, #10]
 8002268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2302      	movs	r3, #2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f002 fe22 	bl	8004ebc <HAL_I2C_Master_Transmit>
 8002278:	4603      	mov	r3, r0
 800227a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 800227c:	2064      	movs	r0, #100	@ 0x64
 800227e:	f001 fc0b 	bl	8003a98 <HAL_Delay>
	return result;
 8002282:	7dfb      	ldrb	r3, [r7, #23]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <dvc_exec_msr_dc_resistance_2p>:

extern volatile uint8_t adc_1_full;
extern volatile uint8_t adc_2_full;
extern volatile uint8_t adc_3_full;

void dvc_exec_msr_dc_resistance_2p(void){
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
	uint32_t pot_val;
	float current_val;
	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 8002292:	2101      	movs	r1, #1
 8002294:	482a      	ldr	r0, [pc, #168]	@ (8002340 <dvc_exec_msr_dc_resistance_2p+0xb4>)
 8002296:	f7ff fe5c 	bl	8001f52 <get_register>
 800229a:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	461a      	mov	r2, r3
 80022a2:	2101      	movs	r1, #1
 80022a4:	4826      	ldr	r0, [pc, #152]	@ (8002340 <dvc_exec_msr_dc_resistance_2p+0xb4>)
 80022a6:	f7ff fe65 	bl	8001f74 <set_register>

	// get potentiometer value to configure current mirror
	current_val = get_register(&device_registers,DVC_2PM_DCRESISTANCE_1);
 80022aa:	2103      	movs	r1, #3
 80022ac:	4824      	ldr	r0, [pc, #144]	@ (8002340 <dvc_exec_msr_dc_resistance_2p+0xb4>)
 80022ae:	f7ff fe50 	bl	8001f52 <get_register>
 80022b2:	ee07 0a90 	vmov	s15, r0
 80022b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ba:	edc7 7a01 	vstr	s15, [r7, #4]

	// calculate the potentiometer value
	pot_val = calculate_pot_value_curr_mirr(current_val);
 80022be:	ed97 0a01 	vldr	s0, [r7, #4]
 80022c2:	f7ff fec5 	bl	8002050 <calculate_pot_value_curr_mirr>
 80022c6:	4603      	mov	r3, r0
 80022c8:	603b      	str	r3, [r7, #0]

	// prepare buffer for potentiometer I2C tx
	set_pot_buffer(curr_mrr_i2c_tx_buf,DVC_POT_AD5245_WP_WR_CMD,pot_val);
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	2100      	movs	r1, #0
 80022ce:	481d      	ldr	r0, [pc, #116]	@ (8002344 <dvc_exec_msr_dc_resistance_2p+0xb8>)
 80022d0:	f7ff fea8 	bl	8002024 <set_pot_buffer>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 80022d4:	2102      	movs	r1, #2
 80022d6:	481a      	ldr	r0, [pc, #104]	@ (8002340 <dvc_exec_msr_dc_resistance_2p+0xb4>)
 80022d8:	f7ff fe3b 	bl	8001f52 <get_register>
 80022dc:	4603      	mov	r3, r0
 80022de:	4619      	mov	r1, r3
 80022e0:	4819      	ldr	r0, [pc, #100]	@ (8002348 <dvc_exec_msr_dc_resistance_2p+0xbc>)
 80022e2:	f001 f90d 	bl	8003500 <map_switch_network>
	set_switch_network(&device_switch_network);
 80022e6:	4818      	ldr	r0, [pc, #96]	@ (8002348 <dvc_exec_msr_dc_resistance_2p+0xbc>)
 80022e8:	f001 f8d4 	bl	8003494 <set_switch_network>
	HAL_Delay(1000);
 80022ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022f0:	f001 fbd2 	bl	8003a98 <HAL_Delay>
	// configure the current mirror (2 seconds delay for stabilization)
	config_current_mirror(&hi2c3,DVC_CURR_MRR_POT_I2C_ADDR,curr_mrr_i2c_tx_buf);
 80022f4:	4a13      	ldr	r2, [pc, #76]	@ (8002344 <dvc_exec_msr_dc_resistance_2p+0xb8>)
 80022f6:	2158      	movs	r1, #88	@ 0x58
 80022f8:	4814      	ldr	r0, [pc, #80]	@ (800234c <dvc_exec_msr_dc_resistance_2p+0xc0>)
 80022fa:	f7ff ffad 	bl	8002258 <config_current_mirror>
	HAL_Delay(2000);
 80022fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002302:	f001 fbc9 	bl	8003a98 <HAL_Delay>

	// collect ADC samples
	collect_adc_samples_it(DVC_USE_ADC_1_SAMPLING);
 8002306:	2001      	movs	r0, #1
 8002308:	f7ff fd60 	bl	8001dcc <collect_adc_samples_it>

	// wait for adc dma to complete
	while(adc_1_busy);
 800230c:	bf00      	nop
 800230e:	4b10      	ldr	r3, [pc, #64]	@ (8002350 <dvc_exec_msr_dc_resistance_2p+0xc4>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1fa      	bne.n	800230e <dvc_exec_msr_dc_resistance_2p+0x82>

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 8002318:	480b      	ldr	r0, [pc, #44]	@ (8002348 <dvc_exec_msr_dc_resistance_2p+0xbc>)
 800231a:	f001 f881 	bl	8003420 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 800231e:	2101      	movs	r1, #1
 8002320:	4807      	ldr	r0, [pc, #28]	@ (8002340 <dvc_exec_msr_dc_resistance_2p+0xb4>)
 8002322:	f7ff fe16 	bl	8001f52 <get_register>
 8002326:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002328:	f023 0304 	bic.w	r3, r3, #4
 800232c:	461a      	mov	r2, r3
 800232e:	2101      	movs	r1, #1
 8002330:	4803      	ldr	r0, [pc, #12]	@ (8002340 <dvc_exec_msr_dc_resistance_2p+0xb4>)
 8002332:	f7ff fe1f 	bl	8001f74 <set_register>

}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000cadc 	.word	0x2000cadc
 8002344:	20000018 	.word	0x20000018
 8002348:	2000cedc 	.word	0x2000cedc
 800234c:	200002c8 	.word	0x200002c8
 8002350:	20000ad4 	.word	0x20000ad4

08002354 <dvc_exec_msr_current_voltage>:

void dvc_exec_msr_current_voltage(void){
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	@ 0x28
 8002358:	af00      	add	r7, sp, #0
	uint32_t pot_val_gain, pot_val_offset, pot_val_curr_mirr, method_sel, dds_freq_val;
	uint32_t start_param, end_param, incr_param;

	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 800235a:	2101      	movs	r1, #1
 800235c:	4870      	ldr	r0, [pc, #448]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 800235e:	f7ff fdf8 	bl	8001f52 <get_register>
 8002362:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	461a      	mov	r2, r3
 800236a:	2101      	movs	r1, #1
 800236c:	486c      	ldr	r0, [pc, #432]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 800236e:	f7ff fe01 	bl	8001f74 <set_register>

	// grab the measurement parameters from the registers;
	method_sel = get_register(&device_registers,DVC_2PM_CURRVOLT_1) & 0x3;
 8002372:	2104      	movs	r1, #4
 8002374:	486a      	ldr	r0, [pc, #424]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 8002376:	f7ff fdec 	bl	8001f52 <get_register>
 800237a:	4603      	mov	r3, r0
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	623b      	str	r3, [r7, #32]
	start_param = get_register(&device_registers,DVC_2PM_CURRVOLT_2);
 8002382:	2105      	movs	r1, #5
 8002384:	4866      	ldr	r0, [pc, #408]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 8002386:	f7ff fde4 	bl	8001f52 <get_register>
 800238a:	61f8      	str	r0, [r7, #28]
	end_param = get_register(&device_registers,DVC_2PM_CURRVOLT_3);
 800238c:	2106      	movs	r1, #6
 800238e:	4864      	ldr	r0, [pc, #400]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 8002390:	f7ff fddf 	bl	8001f52 <get_register>
 8002394:	61b8      	str	r0, [r7, #24]
	incr_param = get_register(&device_registers,DVC_2PM_CURRVOLT_4);
 8002396:	2107      	movs	r1, #7
 8002398:	4861      	ldr	r0, [pc, #388]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 800239a:	f7ff fdda 	bl	8001f52 <get_register>
 800239e:	6178      	str	r0, [r7, #20]

	// configure the basic DC voltage source with 0Hz
	dds_freq_val = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
	pot_val_gain = 64;
 80023a4:	2340      	movs	r3, #64	@ 0x40
 80023a6:	60fb      	str	r3, [r7, #12]
	set_ad9833_dds_buffer(volt_src_dds_spi_tx_buf,dds_freq_val);
 80023a8:	6939      	ldr	r1, [r7, #16]
 80023aa:	485e      	ldr	r0, [pc, #376]	@ (8002524 <dvc_exec_msr_current_voltage+0x1d0>)
 80023ac:	f7ff fdf5 	bl	8001f9a <set_ad9833_dds_buffer>
	set_pot_buffer(volt_src_gain_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_gain);
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	2100      	movs	r1, #0
 80023b4:	485c      	ldr	r0, [pc, #368]	@ (8002528 <dvc_exec_msr_current_voltage+0x1d4>)
 80023b6:	f7ff fe35 	bl	8002024 <set_pot_buffer>
	config_volt_src_gain(&hi2c1,DVC_VOLT_SRC_1_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 80023ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002528 <dvc_exec_msr_current_voltage+0x1d4>)
 80023bc:	215e      	movs	r1, #94	@ 0x5e
 80023be:	485b      	ldr	r0, [pc, #364]	@ (800252c <dvc_exec_msr_current_voltage+0x1d8>)
 80023c0:	f7ff ff16 	bl	80021f0 <config_volt_src_gain>
	config_dds_freq(&hspi2,volt_src_dds_spi_tx_buf);
 80023c4:	4957      	ldr	r1, [pc, #348]	@ (8002524 <dvc_exec_msr_current_voltage+0x1d0>)
 80023c6:	485a      	ldr	r0, [pc, #360]	@ (8002530 <dvc_exec_msr_current_voltage+0x1dc>)
 80023c8:	f7ff fefc 	bl	80021c4 <config_dds_freq>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 80023cc:	2102      	movs	r1, #2
 80023ce:	4854      	ldr	r0, [pc, #336]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 80023d0:	f7ff fdbf 	bl	8001f52 <get_register>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4619      	mov	r1, r3
 80023d8:	4856      	ldr	r0, [pc, #344]	@ (8002534 <dvc_exec_msr_current_voltage+0x1e0>)
 80023da:	f001 f891 	bl	8003500 <map_switch_network>
	set_switch_network(&device_switch_network);
 80023de:	4855      	ldr	r0, [pc, #340]	@ (8002534 <dvc_exec_msr_current_voltage+0x1e0>)
 80023e0:	f001 f858 	bl	8003494 <set_switch_network>

	for(int param = start_param; param <= end_param; param += incr_param){
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e8:	e082      	b.n	80024f0 <dvc_exec_msr_current_voltage+0x19c>
		if(method_sel == DVC_CUR_VOLT_2P_SEL_VOLT){
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d138      	bne.n	8002462 <dvc_exec_msr_current_voltage+0x10e>
			pot_val_offset = calculate_pot_value_volt_offset((float)param/1000.0);
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002538 <dvc_exec_msr_current_voltage+0x1e4>
 80023fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002402:	eeb0 0a47 	vmov.f32	s0, s14
 8002406:	f7ff fe81 	bl	800210c <calculate_pot_value_volt_offset>
 800240a:	4603      	mov	r3, r0
 800240c:	607b      	str	r3, [r7, #4]
			set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset);
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	2100      	movs	r1, #0
 8002412:	484a      	ldr	r0, [pc, #296]	@ (800253c <dvc_exec_msr_current_voltage+0x1e8>)
 8002414:	f7ff fe06 	bl	8002024 <set_pot_buffer>
			config_volt_src_offset(&hi2c1,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8002418:	4a48      	ldr	r2, [pc, #288]	@ (800253c <dvc_exec_msr_current_voltage+0x1e8>)
 800241a:	215c      	movs	r1, #92	@ 0x5c
 800241c:	4843      	ldr	r0, [pc, #268]	@ (800252c <dvc_exec_msr_current_voltage+0x1d8>)
 800241e:	f7ff ff01 	bl	8002224 <config_volt_src_offset>
			HAL_Delay(2000);
 8002422:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002426:	f001 fb37 	bl	8003a98 <HAL_Delay>
			// collect ADC samples
			collect_adc_samples_it(DVC_USE_ADC_3_SAMPLING);
 800242a:	2004      	movs	r0, #4
 800242c:	f7ff fcce 	bl	8001dcc <collect_adc_samples_it>

			// wait for adc dma to complete
			while(adc_3_busy);
 8002430:	bf00      	nop
 8002432:	4b43      	ldr	r3, [pc, #268]	@ (8002540 <dvc_exec_msr_current_voltage+0x1ec>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1fa      	bne.n	8002432 <dvc_exec_msr_current_voltage+0xde>

			// clear busy flag to indicate a measurement is complete
			set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
						 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 800243c:	2101      	movs	r1, #1
 800243e:	4838      	ldr	r0, [pc, #224]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 8002440:	f7ff fd87 	bl	8001f52 <get_register>
 8002444:	4603      	mov	r3, r0
			set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002446:	f023 0304 	bic.w	r3, r3, #4
 800244a:	461a      	mov	r2, r3
 800244c:	2101      	movs	r1, #1
 800244e:	4834      	ldr	r0, [pc, #208]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 8002450:	f7ff fd90 	bl	8001f74 <set_register>

			// wait for python to grab the data
			while(adc_3_full);
 8002454:	bf00      	nop
 8002456:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <dvc_exec_msr_current_voltage+0x1f0>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1fa      	bne.n	8002456 <dvc_exec_msr_current_voltage+0x102>
 8002460:	e036      	b.n	80024d0 <dvc_exec_msr_current_voltage+0x17c>
		}
		else if (method_sel == DVC_CUR_VOLT_2P_SEL_CURR){
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d133      	bne.n	80024d0 <dvc_exec_msr_current_voltage+0x17c>
			pot_val_curr_mirr = calculate_pot_value_curr_mirr((float)param);
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002472:	eeb0 0a67 	vmov.f32	s0, s15
 8002476:	f7ff fdeb 	bl	8002050 <calculate_pot_value_curr_mirr>
 800247a:	4603      	mov	r3, r0
 800247c:	60bb      	str	r3, [r7, #8]
			set_pot_buffer(curr_mrr_i2c_tx_buf,DVC_POT_AD5245_WP_WR_CMD,pot_val_curr_mirr);
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	2100      	movs	r1, #0
 8002482:	4831      	ldr	r0, [pc, #196]	@ (8002548 <dvc_exec_msr_current_voltage+0x1f4>)
 8002484:	f7ff fdce 	bl	8002024 <set_pot_buffer>
			config_current_mirror(&hi2c3,DVC_CURR_MRR_POT_I2C_ADDR,curr_mrr_i2c_tx_buf);
 8002488:	4a2f      	ldr	r2, [pc, #188]	@ (8002548 <dvc_exec_msr_current_voltage+0x1f4>)
 800248a:	2158      	movs	r1, #88	@ 0x58
 800248c:	482f      	ldr	r0, [pc, #188]	@ (800254c <dvc_exec_msr_current_voltage+0x1f8>)
 800248e:	f7ff fee3 	bl	8002258 <config_current_mirror>
			HAL_Delay(2000);
 8002492:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002496:	f001 faff 	bl	8003a98 <HAL_Delay>

			// collect ADC samples
			collect_adc_samples_it(DVC_USE_ADC_1_SAMPLING);
 800249a:	2001      	movs	r0, #1
 800249c:	f7ff fc96 	bl	8001dcc <collect_adc_samples_it>

			// wait for adc dma to complete
			while(adc_1_busy);
 80024a0:	bf00      	nop
 80024a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002550 <dvc_exec_msr_current_voltage+0x1fc>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1fa      	bne.n	80024a2 <dvc_exec_msr_current_voltage+0x14e>

			// clear busy flag to indicate a measurement is complete
			set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
						 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 80024ac:	2101      	movs	r1, #1
 80024ae:	481c      	ldr	r0, [pc, #112]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 80024b0:	f7ff fd4f 	bl	8001f52 <get_register>
 80024b4:	4603      	mov	r3, r0
			set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 80024b6:	f023 0304 	bic.w	r3, r3, #4
 80024ba:	461a      	mov	r2, r3
 80024bc:	2101      	movs	r1, #1
 80024be:	4818      	ldr	r0, [pc, #96]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 80024c0:	f7ff fd58 	bl	8001f74 <set_register>

			// wait for python to grab the data
			while(adc_1_full);
 80024c4:	bf00      	nop
 80024c6:	4b23      	ldr	r3, [pc, #140]	@ (8002554 <dvc_exec_msr_current_voltage+0x200>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1fa      	bne.n	80024c6 <dvc_exec_msr_current_voltage+0x172>
		}

		// set busy flag to indicate a measurement is in progress
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 80024d0:	2101      	movs	r1, #1
 80024d2:	4813      	ldr	r0, [pc, #76]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 80024d4:	f7ff fd3d 	bl	8001f52 <get_register>
 80024d8:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	461a      	mov	r2, r3
 80024e0:	2101      	movs	r1, #1
 80024e2:	480f      	ldr	r0, [pc, #60]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 80024e4:	f7ff fd46 	bl	8001f74 <set_register>
	for(int param = start_param; param <= end_param; param += incr_param){
 80024e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	4413      	add	r3, r2
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f4bf af78 	bcs.w	80023ea <dvc_exec_msr_current_voltage+0x96>
	}

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 80024fa:	480e      	ldr	r0, [pc, #56]	@ (8002534 <dvc_exec_msr_current_voltage+0x1e0>)
 80024fc:	f000 ff90 	bl	8003420 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 8002500:	2101      	movs	r1, #1
 8002502:	4807      	ldr	r0, [pc, #28]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 8002504:	f7ff fd25 	bl	8001f52 <get_register>
 8002508:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 800250a:	f023 0304 	bic.w	r3, r3, #4
 800250e:	461a      	mov	r2, r3
 8002510:	2101      	movs	r1, #1
 8002512:	4803      	ldr	r0, [pc, #12]	@ (8002520 <dvc_exec_msr_current_voltage+0x1cc>)
 8002514:	f7ff fd2e 	bl	8001f74 <set_register>
}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	@ 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	2000cadc 	.word	0x2000cadc
 8002524:	20000004 	.word	0x20000004
 8002528:	20000010 	.word	0x20000010
 800252c:	20000274 	.word	0x20000274
 8002530:	200003ac 	.word	0x200003ac
 8002534:	2000cedc 	.word	0x2000cedc
 8002538:	447a0000 	.word	0x447a0000
 800253c:	20000014 	.word	0x20000014
 8002540:	20000ad6 	.word	0x20000ad6
 8002544:	20000ad9 	.word	0x20000ad9
 8002548:	20000018 	.word	0x20000018
 800254c:	200002c8 	.word	0x200002c8
 8002550:	20000ad4 	.word	0x20000ad4
 8002554:	20000ad7 	.word	0x20000ad7

08002558 <dvc_exec_msr_capacitance_voltage_2p>:

void dvc_exec_msr_capacitance_voltage_2p(void){
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	uint32_t pot_val_gain, pot_val_offset;

	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 800255e:	2101      	movs	r1, #1
 8002560:	4857      	ldr	r0, [pc, #348]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 8002562:	f7ff fcf6 	bl	8001f52 <get_register>
 8002566:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	461a      	mov	r2, r3
 800256e:	2101      	movs	r1, #1
 8002570:	4853      	ldr	r0, [pc, #332]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 8002572:	f7ff fcff 	bl	8001f74 <set_register>

	// grab the measurement parameters from the registers;
	uint32_t start_volt_offset = get_register(&device_registers,DVC_2PM_CAPVOLT_1);
 8002576:	2108      	movs	r1, #8
 8002578:	4851      	ldr	r0, [pc, #324]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 800257a:	f7ff fcea 	bl	8001f52 <get_register>
 800257e:	61b8      	str	r0, [r7, #24]
	uint32_t end_volt_offset = get_register(&device_registers,DVC_2PM_CAPVOLT_2);
 8002580:	2109      	movs	r1, #9
 8002582:	484f      	ldr	r0, [pc, #316]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 8002584:	f7ff fce5 	bl	8001f52 <get_register>
 8002588:	6178      	str	r0, [r7, #20]
	uint32_t incr_volt_offset = get_register(&device_registers,DVC_2PM_CAPVOLT_3);
 800258a:	210a      	movs	r1, #10
 800258c:	484c      	ldr	r0, [pc, #304]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 800258e:	f7ff fce0 	bl	8001f52 <get_register>
 8002592:	6138      	str	r0, [r7, #16]

	// configure the basic DC voltage source with 10kHz
	uint32_t freq_28b = 107374;
 8002594:	4b4b      	ldr	r3, [pc, #300]	@ (80026c4 <dvc_exec_msr_capacitance_voltage_2p+0x16c>)
 8002596:	60fb      	str	r3, [r7, #12]

	float amp_volt = 400;
 8002598:	4b4b      	ldr	r3, [pc, #300]	@ (80026c8 <dvc_exec_msr_capacitance_voltage_2p+0x170>)
 800259a:	60bb      	str	r3, [r7, #8]
	pot_val_gain = calculate_pot_value_volt_gain(amp_volt/1000.0);
 800259c:	edd7 7a02 	vldr	s15, [r7, #8]
 80025a0:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80026cc <dvc_exec_msr_capacitance_voltage_2p+0x174>
 80025a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025a8:	eeb0 0a47 	vmov.f32	s0, s14
 80025ac:	f7ff fddc 	bl	8002168 <calculate_pot_value_volt_gain>
 80025b0:	4603      	mov	r3, r0
 80025b2:	607b      	str	r3, [r7, #4]
	set_pot_buffer(volt_src_gain_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_gain);
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	2100      	movs	r1, #0
 80025b8:	4845      	ldr	r0, [pc, #276]	@ (80026d0 <dvc_exec_msr_capacitance_voltage_2p+0x178>)
 80025ba:	f7ff fd33 	bl	8002024 <set_pot_buffer>
	config_volt_src_gain(&hi2c1,DVC_VOLT_SRC_1_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 80025be:	4a44      	ldr	r2, [pc, #272]	@ (80026d0 <dvc_exec_msr_capacitance_voltage_2p+0x178>)
 80025c0:	215e      	movs	r1, #94	@ 0x5e
 80025c2:	4844      	ldr	r0, [pc, #272]	@ (80026d4 <dvc_exec_msr_capacitance_voltage_2p+0x17c>)
 80025c4:	f7ff fe14 	bl	80021f0 <config_volt_src_gain>

	set_ad9833_dds_buffer(volt_src_dds_spi_tx_buf,freq_28b);
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	4843      	ldr	r0, [pc, #268]	@ (80026d8 <dvc_exec_msr_capacitance_voltage_2p+0x180>)
 80025cc:	f7ff fce5 	bl	8001f9a <set_ad9833_dds_buffer>
	config_dds_freq(&hspi2,volt_src_dds_spi_tx_buf);
 80025d0:	4941      	ldr	r1, [pc, #260]	@ (80026d8 <dvc_exec_msr_capacitance_voltage_2p+0x180>)
 80025d2:	4842      	ldr	r0, [pc, #264]	@ (80026dc <dvc_exec_msr_capacitance_voltage_2p+0x184>)
 80025d4:	f7ff fdf6 	bl	80021c4 <config_dds_freq>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 80025d8:	2102      	movs	r1, #2
 80025da:	4839      	ldr	r0, [pc, #228]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 80025dc:	f7ff fcb9 	bl	8001f52 <get_register>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4619      	mov	r1, r3
 80025e4:	483e      	ldr	r0, [pc, #248]	@ (80026e0 <dvc_exec_msr_capacitance_voltage_2p+0x188>)
 80025e6:	f000 ff8b 	bl	8003500 <map_switch_network>
	set_switch_network(&device_switch_network);
 80025ea:	483d      	ldr	r0, [pc, #244]	@ (80026e0 <dvc_exec_msr_capacitance_voltage_2p+0x188>)
 80025ec:	f000 ff52 	bl	8003494 <set_switch_network>

	for(int param = start_volt_offset; param <= end_volt_offset; param += incr_volt_offset){
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	e04d      	b.n	8002692 <dvc_exec_msr_capacitance_voltage_2p+0x13a>
		pot_val_offset = calculate_pot_value_volt_offset(param/1000.0);
 80025f6:	69f8      	ldr	r0, [r7, #28]
 80025f8:	f7fd ff90 	bl	800051c <__aeabi_i2d>
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	4b38      	ldr	r3, [pc, #224]	@ (80026e4 <dvc_exec_msr_capacitance_voltage_2p+0x18c>)
 8002602:	f7fe f91f 	bl	8000844 <__aeabi_ddiv>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe fac7 	bl	8000ba0 <__aeabi_d2f>
 8002612:	4603      	mov	r3, r0
 8002614:	ee00 3a10 	vmov	s0, r3
 8002618:	f7ff fd78 	bl	800210c <calculate_pot_value_volt_offset>
 800261c:	4603      	mov	r3, r0
 800261e:	603b      	str	r3, [r7, #0]
		set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset);
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	2100      	movs	r1, #0
 8002624:	4830      	ldr	r0, [pc, #192]	@ (80026e8 <dvc_exec_msr_capacitance_voltage_2p+0x190>)
 8002626:	f7ff fcfd 	bl	8002024 <set_pot_buffer>
		config_volt_src_offset(&hi2c1,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 800262a:	4a2f      	ldr	r2, [pc, #188]	@ (80026e8 <dvc_exec_msr_capacitance_voltage_2p+0x190>)
 800262c:	215c      	movs	r1, #92	@ 0x5c
 800262e:	4829      	ldr	r0, [pc, #164]	@ (80026d4 <dvc_exec_msr_capacitance_voltage_2p+0x17c>)
 8002630:	f7ff fdf8 	bl	8002224 <config_volt_src_offset>
		HAL_Delay(2000);
 8002634:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002638:	f001 fa2e 	bl	8003a98 <HAL_Delay>

		// collect ADC samples
		collect_adc_samples_it(DVC_USE_ADC_3_SAMPLING);
 800263c:	2004      	movs	r0, #4
 800263e:	f7ff fbc5 	bl	8001dcc <collect_adc_samples_it>

		// wait for adc dma to complete
		while(adc_3_busy);
 8002642:	bf00      	nop
 8002644:	4b29      	ldr	r3, [pc, #164]	@ (80026ec <dvc_exec_msr_capacitance_voltage_2p+0x194>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1fa      	bne.n	8002644 <dvc_exec_msr_capacitance_voltage_2p+0xec>

		// clear busy flag to indicate a measurement is complete
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 800264e:	2101      	movs	r1, #1
 8002650:	481b      	ldr	r0, [pc, #108]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 8002652:	f7ff fc7e 	bl	8001f52 <get_register>
 8002656:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	461a      	mov	r2, r3
 800265e:	2101      	movs	r1, #1
 8002660:	4817      	ldr	r0, [pc, #92]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 8002662:	f7ff fc87 	bl	8001f74 <set_register>

		// wait for python to grab the data
		while(adc_3_full);
 8002666:	bf00      	nop
 8002668:	4b21      	ldr	r3, [pc, #132]	@ (80026f0 <dvc_exec_msr_capacitance_voltage_2p+0x198>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1fa      	bne.n	8002668 <dvc_exec_msr_capacitance_voltage_2p+0x110>

		// set busy flag to indicate a measurement is in progress
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 8002672:	2101      	movs	r1, #1
 8002674:	4812      	ldr	r0, [pc, #72]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 8002676:	f7ff fc6c 	bl	8001f52 <get_register>
 800267a:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	461a      	mov	r2, r3
 8002682:	2101      	movs	r1, #1
 8002684:	480e      	ldr	r0, [pc, #56]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 8002686:	f7ff fc75 	bl	8001f74 <set_register>
	for(int param = start_volt_offset; param <= end_volt_offset; param += incr_volt_offset){
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	429a      	cmp	r2, r3
 8002698:	d2ad      	bcs.n	80025f6 <dvc_exec_msr_capacitance_voltage_2p+0x9e>
	}

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 800269a:	4811      	ldr	r0, [pc, #68]	@ (80026e0 <dvc_exec_msr_capacitance_voltage_2p+0x188>)
 800269c:	f000 fec0 	bl	8003420 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 80026a0:	2101      	movs	r1, #1
 80026a2:	4807      	ldr	r0, [pc, #28]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 80026a4:	f7ff fc55 	bl	8001f52 <get_register>
 80026a8:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	461a      	mov	r2, r3
 80026b0:	2101      	movs	r1, #1
 80026b2:	4803      	ldr	r0, [pc, #12]	@ (80026c0 <dvc_exec_msr_capacitance_voltage_2p+0x168>)
 80026b4:	f7ff fc5e 	bl	8001f74 <set_register>
}
 80026b8:	bf00      	nop
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	2000cadc 	.word	0x2000cadc
 80026c4:	0001a36e 	.word	0x0001a36e
 80026c8:	43c80000 	.word	0x43c80000
 80026cc:	447a0000 	.word	0x447a0000
 80026d0:	20000010 	.word	0x20000010
 80026d4:	20000274 	.word	0x20000274
 80026d8:	20000004 	.word	0x20000004
 80026dc:	200003ac 	.word	0x200003ac
 80026e0:	2000cedc 	.word	0x2000cedc
 80026e4:	408f4000 	.word	0x408f4000
 80026e8:	20000014 	.word	0x20000014
 80026ec:	20000ad6 	.word	0x20000ad6
 80026f0:	20000ad9 	.word	0x20000ad9

080026f4 <dvc_exec_msr_impedance_spectroscopy_2p>:

void dvc_exec_msr_impedance_spectroscopy_2p(void){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b090      	sub	sp, #64	@ 0x40
 80026f8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	uint32_t pot_val_gain, pot_val_offset;

	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 80026fa:	2101      	movs	r1, #1
 80026fc:	487b      	ldr	r0, [pc, #492]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 80026fe:	f7ff fc28 	bl	8001f52 <get_register>
 8002702:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	461a      	mov	r2, r3
 800270a:	2101      	movs	r1, #1
 800270c:	4877      	ldr	r0, [pc, #476]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 800270e:	f7ff fc31 	bl	8001f74 <set_register>

	// grab the measurement parameters from the registers;
	uint32_t start_freq_l14b = get_register(&device_registers,DVC_2PM_IMPSPEC_1);
 8002712:	210b      	movs	r1, #11
 8002714:	4875      	ldr	r0, [pc, #468]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 8002716:	f7ff fc1c 	bl	8001f52 <get_register>
 800271a:	63b8      	str	r0, [r7, #56]	@ 0x38
	uint32_t start_freq_u14b = get_register(&device_registers,DVC_2PM_IMPSPEC_2);
 800271c:	210c      	movs	r1, #12
 800271e:	4873      	ldr	r0, [pc, #460]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 8002720:	f7ff fc17 	bl	8001f52 <get_register>
 8002724:	6378      	str	r0, [r7, #52]	@ 0x34
	uint32_t end_freq_l14b = get_register(&device_registers,DVC_2PM_IMPSPEC_3);
 8002726:	210d      	movs	r1, #13
 8002728:	4870      	ldr	r0, [pc, #448]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 800272a:	f7ff fc12 	bl	8001f52 <get_register>
 800272e:	6338      	str	r0, [r7, #48]	@ 0x30
	uint32_t end_freq_u14b = get_register(&device_registers,DVC_2PM_IMPSPEC_4);
 8002730:	210e      	movs	r1, #14
 8002732:	486e      	ldr	r0, [pc, #440]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 8002734:	f7ff fc0d 	bl	8001f52 <get_register>
 8002738:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uint32_t incr_freq_l14b = get_register(&device_registers,DVC_2PM_IMPSPEC_5);
 800273a:	210f      	movs	r1, #15
 800273c:	486b      	ldr	r0, [pc, #428]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 800273e:	f7ff fc08 	bl	8001f52 <get_register>
 8002742:	62b8      	str	r0, [r7, #40]	@ 0x28
	uint32_t incr_freq_u14b = get_register(&device_registers,DVC_2PM_IMPSPEC_6);
 8002744:	2110      	movs	r1, #16
 8002746:	4869      	ldr	r0, [pc, #420]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 8002748:	f7ff fc03 	bl	8001f52 <get_register>
 800274c:	6278      	str	r0, [r7, #36]	@ 0x24
	uint32_t max_volt = get_register(&device_registers,DVC_2PM_IMPSPEC_7);
 800274e:	2111      	movs	r1, #17
 8002750:	4866      	ldr	r0, [pc, #408]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 8002752:	f7ff fbfe 	bl	8001f52 <get_register>
 8002756:	6238      	str	r0, [r7, #32]
	uint32_t min_volt = get_register(&device_registers,DVC_2PM_IMPSPEC_8);
 8002758:	2112      	movs	r1, #18
 800275a:	4864      	ldr	r0, [pc, #400]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 800275c:	f7ff fbf9 	bl	8001f52 <get_register>
 8002760:	61f8      	str	r0, [r7, #28]

	// configure the basic DC voltage source with 0Hz
	uint32_t start_freq_28b = (start_freq_u14b << 14) | start_freq_l14b;
 8002762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002764:	039b      	lsls	r3, r3, #14
 8002766:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
	uint32_t end_freq_28b = (end_freq_u14b << 14) | end_freq_l14b;
 800276c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276e:	039b      	lsls	r3, r3, #14
 8002770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]
	uint32_t incr_freq_28b = (incr_freq_u14b << 14) | incr_freq_l14b;
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	039b      	lsls	r3, r3, #14
 800277a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]

	float mid_volt = ((float)max_volt+(float)min_volt)/2;
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002798:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800279c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027a0:	edc7 7a03 	vstr	s15, [r7, #12]
	float amp_volt = ((float)max_volt-(float)min_volt);
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	ee07 3a90 	vmov	s15, r3
 80027b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027bc:	edc7 7a02 	vstr	s15, [r7, #8]

	pot_val_offset = calculate_pot_value_volt_offset(mid_volt/1000.0);
 80027c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80027c4:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80028f0 <dvc_exec_msr_impedance_spectroscopy_2p+0x1fc>
 80027c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027cc:	eeb0 0a47 	vmov.f32	s0, s14
 80027d0:	f7ff fc9c 	bl	800210c <calculate_pot_value_volt_offset>
 80027d4:	4603      	mov	r3, r0
 80027d6:	607b      	str	r3, [r7, #4]
	pot_val_gain = calculate_pot_value_volt_gain(amp_volt/1000.0);
 80027d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027dc:	eddf 6a44 	vldr	s13, [pc, #272]	@ 80028f0 <dvc_exec_msr_impedance_spectroscopy_2p+0x1fc>
 80027e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027e4:	eeb0 0a47 	vmov.f32	s0, s14
 80027e8:	f7ff fcbe 	bl	8002168 <calculate_pot_value_volt_gain>
 80027ec:	4603      	mov	r3, r0
 80027ee:	603b      	str	r3, [r7, #0]

	set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset);
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	2100      	movs	r1, #0
 80027f4:	483f      	ldr	r0, [pc, #252]	@ (80028f4 <dvc_exec_msr_impedance_spectroscopy_2p+0x200>)
 80027f6:	f7ff fc15 	bl	8002024 <set_pot_buffer>
	set_pot_buffer(volt_src_gain_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_gain);
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	2100      	movs	r1, #0
 80027fe:	483e      	ldr	r0, [pc, #248]	@ (80028f8 <dvc_exec_msr_impedance_spectroscopy_2p+0x204>)
 8002800:	f7ff fc10 	bl	8002024 <set_pot_buffer>

	config_volt_src_offset(&hi2c1,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8002804:	4a3b      	ldr	r2, [pc, #236]	@ (80028f4 <dvc_exec_msr_impedance_spectroscopy_2p+0x200>)
 8002806:	215c      	movs	r1, #92	@ 0x5c
 8002808:	483c      	ldr	r0, [pc, #240]	@ (80028fc <dvc_exec_msr_impedance_spectroscopy_2p+0x208>)
 800280a:	f7ff fd0b 	bl	8002224 <config_volt_src_offset>
	config_volt_src_gain(&hi2c1,DVC_VOLT_SRC_1_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 800280e:	4a3a      	ldr	r2, [pc, #232]	@ (80028f8 <dvc_exec_msr_impedance_spectroscopy_2p+0x204>)
 8002810:	215e      	movs	r1, #94	@ 0x5e
 8002812:	483a      	ldr	r0, [pc, #232]	@ (80028fc <dvc_exec_msr_impedance_spectroscopy_2p+0x208>)
 8002814:	f7ff fcec 	bl	80021f0 <config_volt_src_gain>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 8002818:	2102      	movs	r1, #2
 800281a:	4834      	ldr	r0, [pc, #208]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 800281c:	f7ff fb99 	bl	8001f52 <get_register>
 8002820:	4603      	mov	r3, r0
 8002822:	4619      	mov	r1, r3
 8002824:	4836      	ldr	r0, [pc, #216]	@ (8002900 <dvc_exec_msr_impedance_spectroscopy_2p+0x20c>)
 8002826:	f000 fe6b 	bl	8003500 <map_switch_network>
	set_switch_network(&device_switch_network);
 800282a:	4835      	ldr	r0, [pc, #212]	@ (8002900 <dvc_exec_msr_impedance_spectroscopy_2p+0x20c>)
 800282c:	f000 fe32 	bl	8003494 <set_switch_network>

	for(int param = start_freq_28b; param <= end_freq_28b+5; param += incr_freq_28b){
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002834:	e041      	b.n	80028ba <dvc_exec_msr_impedance_spectroscopy_2p+0x1c6>
		set_ad9833_dds_buffer(volt_src_dds_spi_tx_buf,param);
 8002836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002838:	4619      	mov	r1, r3
 800283a:	4832      	ldr	r0, [pc, #200]	@ (8002904 <dvc_exec_msr_impedance_spectroscopy_2p+0x210>)
 800283c:	f7ff fbad 	bl	8001f9a <set_ad9833_dds_buffer>
		config_dds_freq(&hspi2,volt_src_dds_spi_tx_buf);
 8002840:	4930      	ldr	r1, [pc, #192]	@ (8002904 <dvc_exec_msr_impedance_spectroscopy_2p+0x210>)
 8002842:	4831      	ldr	r0, [pc, #196]	@ (8002908 <dvc_exec_msr_impedance_spectroscopy_2p+0x214>)
 8002844:	f7ff fcbe 	bl	80021c4 <config_dds_freq>
		HAL_Delay(2000);
 8002848:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800284c:	f001 f924 	bl	8003a98 <HAL_Delay>

		// collect ADC samples
		collect_adc_samples_it(DVC_USE_ADC_1_SAMPLING | DVC_USE_ADC_3_SAMPLING);
 8002850:	2005      	movs	r0, #5
 8002852:	f7ff fabb 	bl	8001dcc <collect_adc_samples_it>

		// wait for adc dma to complete
		while(adc_1_busy | adc_3_busy);
 8002856:	bf00      	nop
 8002858:	4b2c      	ldr	r3, [pc, #176]	@ (800290c <dvc_exec_msr_impedance_spectroscopy_2p+0x218>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4b2c      	ldr	r3, [pc, #176]	@ (8002910 <dvc_exec_msr_impedance_spectroscopy_2p+0x21c>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4313      	orrs	r3, r2
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f5      	bne.n	8002858 <dvc_exec_msr_impedance_spectroscopy_2p+0x164>

		// clear busy flag to indicate a measurement is complete
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 800286c:	2101      	movs	r1, #1
 800286e:	481f      	ldr	r0, [pc, #124]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 8002870:	f7ff fb6f 	bl	8001f52 <get_register>
 8002874:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002876:	f023 0304 	bic.w	r3, r3, #4
 800287a:	461a      	mov	r2, r3
 800287c:	2101      	movs	r1, #1
 800287e:	481b      	ldr	r0, [pc, #108]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 8002880:	f7ff fb78 	bl	8001f74 <set_register>

		// wait for python to grab the data
		while(adc_1_full | adc_3_full);
 8002884:	bf00      	nop
 8002886:	4b23      	ldr	r3, [pc, #140]	@ (8002914 <dvc_exec_msr_impedance_spectroscopy_2p+0x220>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b22      	ldr	r3, [pc, #136]	@ (8002918 <dvc_exec_msr_impedance_spectroscopy_2p+0x224>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4313      	orrs	r3, r2
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f5      	bne.n	8002886 <dvc_exec_msr_impedance_spectroscopy_2p+0x192>

		// set busy flag to indicate a measurement is in progress
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 800289a:	2101      	movs	r1, #1
 800289c:	4813      	ldr	r0, [pc, #76]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 800289e:	f7ff fb58 	bl	8001f52 <get_register>
 80028a2:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	461a      	mov	r2, r3
 80028aa:	2101      	movs	r1, #1
 80028ac:	480f      	ldr	r0, [pc, #60]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 80028ae:	f7ff fb61 	bl	8001f74 <set_register>
	for(int param = start_freq_28b; param <= end_freq_28b+5; param += incr_freq_28b){
 80028b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	1d5a      	adds	r2, r3, #5
 80028be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d2b8      	bcs.n	8002836 <dvc_exec_msr_impedance_spectroscopy_2p+0x142>
	}

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 80028c4:	480e      	ldr	r0, [pc, #56]	@ (8002900 <dvc_exec_msr_impedance_spectroscopy_2p+0x20c>)
 80028c6:	f000 fdab 	bl	8003420 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 80028ca:	2101      	movs	r1, #1
 80028cc:	4807      	ldr	r0, [pc, #28]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 80028ce:	f7ff fb40 	bl	8001f52 <get_register>
 80028d2:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	461a      	mov	r2, r3
 80028da:	2101      	movs	r1, #1
 80028dc:	4803      	ldr	r0, [pc, #12]	@ (80028ec <dvc_exec_msr_impedance_spectroscopy_2p+0x1f8>)
 80028de:	f7ff fb49 	bl	8001f74 <set_register>
}
 80028e2:	bf00      	nop
 80028e4:	3740      	adds	r7, #64	@ 0x40
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2000cadc 	.word	0x2000cadc
 80028f0:	447a0000 	.word	0x447a0000
 80028f4:	20000014 	.word	0x20000014
 80028f8:	20000010 	.word	0x20000010
 80028fc:	20000274 	.word	0x20000274
 8002900:	2000cedc 	.word	0x2000cedc
 8002904:	20000004 	.word	0x20000004
 8002908:	200003ac 	.word	0x200003ac
 800290c:	20000ad4 	.word	0x20000ad4
 8002910:	20000ad6 	.word	0x20000ad6
 8002914:	20000ad7 	.word	0x20000ad7
 8002918:	20000ad9 	.word	0x20000ad9

0800291c <dvc_exec_msr_transfer_characteristics>:

void dvc_exec_msr_transfer_characteristics(void){
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	@ 0x30
 8002920:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	uint32_t pot_val_gain, pot_val_offset_drain, pot_val_offset_gate;

	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 8002922:	2101      	movs	r1, #1
 8002924:	4893      	ldr	r0, [pc, #588]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 8002926:	f7ff fb14 	bl	8001f52 <get_register>
 800292a:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	461a      	mov	r2, r3
 8002932:	2101      	movs	r1, #1
 8002934:	488f      	ldr	r0, [pc, #572]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 8002936:	f7ff fb1d 	bl	8001f74 <set_register>

	// grab the measurement parameters from the registers;
	uint32_t probe_sel = get_register(&device_registers,DVC_3PM_TRANSCHAR_1);
 800293a:	2113      	movs	r1, #19
 800293c:	488d      	ldr	r0, [pc, #564]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 800293e:	f7ff fb08 	bl	8001f52 <get_register>
 8002942:	62b8      	str	r0, [r7, #40]	@ 0x28
	uint32_t drain_volt = get_register(&device_registers,DVC_3PM_TRANSCHAR_2);
 8002944:	2114      	movs	r1, #20
 8002946:	488b      	ldr	r0, [pc, #556]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 8002948:	f7ff fb03 	bl	8001f52 <get_register>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24
	uint32_t gate_volt_start = get_register(&device_registers,DVC_3PM_TRANSCHAR_3);
 800294e:	2115      	movs	r1, #21
 8002950:	4888      	ldr	r0, [pc, #544]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 8002952:	f7ff fafe 	bl	8001f52 <get_register>
 8002956:	6238      	str	r0, [r7, #32]
	uint32_t gate_volt_end = get_register(&device_registers,DVC_3PM_TRANSCHAR_4);
 8002958:	2116      	movs	r1, #22
 800295a:	4886      	ldr	r0, [pc, #536]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 800295c:	f7ff faf9 	bl	8001f52 <get_register>
 8002960:	61f8      	str	r0, [r7, #28]
	uint32_t gate_volt_incr = get_register(&device_registers,DVC_3PM_TRANSCHAR_5);
 8002962:	2117      	movs	r1, #23
 8002964:	4883      	ldr	r0, [pc, #524]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 8002966:	f7ff faf4 	bl	8001f52 <get_register>
 800296a:	61b8      	str	r0, [r7, #24]

	uint32_t drain_probe_sel = (probe_sel >> 4) & 0xF;
 800296c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	617b      	str	r3, [r7, #20]
	uint32_t gate_probe_sel = (probe_sel) & 0xF;
 8002976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	613b      	str	r3, [r7, #16]

	// configure the basic DC voltage source with 0Hz
	uint32_t freq_28b = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
	pot_val_gain = 64;
 8002982:	2340      	movs	r3, #64	@ 0x40
 8002984:	60bb      	str	r3, [r7, #8]

	set_ad9833_dds_buffer(volt_src_dds_spi_tx_buf,freq_28b);
 8002986:	68f9      	ldr	r1, [r7, #12]
 8002988:	487b      	ldr	r0, [pc, #492]	@ (8002b78 <dvc_exec_msr_transfer_characteristics+0x25c>)
 800298a:	f7ff fb06 	bl	8001f9a <set_ad9833_dds_buffer>
	config_dds_freq(&hspi2,volt_src_dds_spi_tx_buf);
 800298e:	497a      	ldr	r1, [pc, #488]	@ (8002b78 <dvc_exec_msr_transfer_characteristics+0x25c>)
 8002990:	487a      	ldr	r0, [pc, #488]	@ (8002b7c <dvc_exec_msr_transfer_characteristics+0x260>)
 8002992:	f7ff fc17 	bl	80021c4 <config_dds_freq>
	config_dds_freq(&hspi1,volt_src_dds_spi_tx_buf);
 8002996:	4978      	ldr	r1, [pc, #480]	@ (8002b78 <dvc_exec_msr_transfer_characteristics+0x25c>)
 8002998:	4879      	ldr	r0, [pc, #484]	@ (8002b80 <dvc_exec_msr_transfer_characteristics+0x264>)
 800299a:	f7ff fc13 	bl	80021c4 <config_dds_freq>

	set_pot_buffer(volt_src_gain_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_gain);
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	2100      	movs	r1, #0
 80029a2:	4878      	ldr	r0, [pc, #480]	@ (8002b84 <dvc_exec_msr_transfer_characteristics+0x268>)
 80029a4:	f7ff fb3e 	bl	8002024 <set_pot_buffer>
	config_volt_src_gain(&hi2c1,DVC_VOLT_SRC_1_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 80029a8:	4a76      	ldr	r2, [pc, #472]	@ (8002b84 <dvc_exec_msr_transfer_characteristics+0x268>)
 80029aa:	215e      	movs	r1, #94	@ 0x5e
 80029ac:	4876      	ldr	r0, [pc, #472]	@ (8002b88 <dvc_exec_msr_transfer_characteristics+0x26c>)
 80029ae:	f7ff fc1f 	bl	80021f0 <config_volt_src_gain>
	config_volt_src_gain(&hi2c3,DVC_VOLT_SRC_2_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 80029b2:	4a74      	ldr	r2, [pc, #464]	@ (8002b84 <dvc_exec_msr_transfer_characteristics+0x268>)
 80029b4:	215c      	movs	r1, #92	@ 0x5c
 80029b6:	4875      	ldr	r0, [pc, #468]	@ (8002b8c <dvc_exec_msr_transfer_characteristics+0x270>)
 80029b8:	f7ff fc1a 	bl	80021f0 <config_volt_src_gain>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 80029bc:	2102      	movs	r1, #2
 80029be:	486d      	ldr	r0, [pc, #436]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 80029c0:	f7ff fac7 	bl	8001f52 <get_register>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4619      	mov	r1, r3
 80029c8:	4871      	ldr	r0, [pc, #452]	@ (8002b90 <dvc_exec_msr_transfer_characteristics+0x274>)
 80029ca:	f000 fd99 	bl	8003500 <map_switch_network>
	set_switch_network(&device_switch_network);
 80029ce:	4870      	ldr	r0, [pc, #448]	@ (8002b90 <dvc_exec_msr_transfer_characteristics+0x274>)
 80029d0:	f000 fd60 	bl	8003494 <set_switch_network>

	for(int param = gate_volt_start; param <= gate_volt_end; param += gate_volt_incr){
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029d8:	e0b3      	b.n	8002b42 <dvc_exec_msr_transfer_characteristics+0x226>
		if(drain_probe_sel < gate_probe_sel){
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d242      	bcs.n	8002a68 <dvc_exec_msr_transfer_characteristics+0x14c>
			pot_val_offset_drain = calculate_pot_value_volt_offset(drain_volt/1000.0);
 80029e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029e4:	f7fd fd8a 	bl	80004fc <__aeabi_ui2d>
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	4b69      	ldr	r3, [pc, #420]	@ (8002b94 <dvc_exec_msr_transfer_characteristics+0x278>)
 80029ee:	f7fd ff29 	bl	8000844 <__aeabi_ddiv>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	f7fe f8d1 	bl	8000ba0 <__aeabi_d2f>
 80029fe:	4603      	mov	r3, r0
 8002a00:	ee00 3a10 	vmov	s0, r3
 8002a04:	f7ff fb82 	bl	800210c <calculate_pot_value_volt_offset>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	607b      	str	r3, [r7, #4]
			set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset_drain);
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4861      	ldr	r0, [pc, #388]	@ (8002b98 <dvc_exec_msr_transfer_characteristics+0x27c>)
 8002a12:	f7ff fb07 	bl	8002024 <set_pot_buffer>
			config_volt_src_offset(&hi2c1,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8002a16:	4a60      	ldr	r2, [pc, #384]	@ (8002b98 <dvc_exec_msr_transfer_characteristics+0x27c>)
 8002a18:	215c      	movs	r1, #92	@ 0x5c
 8002a1a:	485b      	ldr	r0, [pc, #364]	@ (8002b88 <dvc_exec_msr_transfer_characteristics+0x26c>)
 8002a1c:	f7ff fc02 	bl	8002224 <config_volt_src_offset>

			pot_val_offset_gate = calculate_pot_value_volt_offset(param/1000.0);
 8002a20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a22:	f7fd fd7b 	bl	800051c <__aeabi_i2d>
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002b94 <dvc_exec_msr_transfer_characteristics+0x278>)
 8002a2c:	f7fd ff0a 	bl	8000844 <__aeabi_ddiv>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f7fe f8b2 	bl	8000ba0 <__aeabi_d2f>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	ee00 3a10 	vmov	s0, r3
 8002a42:	f7ff fb63 	bl	800210c <calculate_pot_value_volt_offset>
 8002a46:	4603      	mov	r3, r0
 8002a48:	603b      	str	r3, [r7, #0]
			set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset_gate);
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4852      	ldr	r0, [pc, #328]	@ (8002b98 <dvc_exec_msr_transfer_characteristics+0x27c>)
 8002a50:	f7ff fae8 	bl	8002024 <set_pot_buffer>
			config_volt_src_offset(&hi2c3,DVC_VOLT_SRC_2_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8002a54:	4a50      	ldr	r2, [pc, #320]	@ (8002b98 <dvc_exec_msr_transfer_characteristics+0x27c>)
 8002a56:	215e      	movs	r1, #94	@ 0x5e
 8002a58:	484c      	ldr	r0, [pc, #304]	@ (8002b8c <dvc_exec_msr_transfer_characteristics+0x270>)
 8002a5a:	f7ff fbe3 	bl	8002224 <config_volt_src_offset>
			HAL_Delay(2000);
 8002a5e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a62:	f001 f819 	bl	8003a98 <HAL_Delay>
 8002a66:	e041      	b.n	8002aec <dvc_exec_msr_transfer_characteristics+0x1d0>
		}
		else{
			pot_val_offset_drain = calculate_pot_value_volt_offset(drain_volt/1000.0);
 8002a68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a6a:	f7fd fd47 	bl	80004fc <__aeabi_ui2d>
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	4b48      	ldr	r3, [pc, #288]	@ (8002b94 <dvc_exec_msr_transfer_characteristics+0x278>)
 8002a74:	f7fd fee6 	bl	8000844 <__aeabi_ddiv>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f88e 	bl	8000ba0 <__aeabi_d2f>
 8002a84:	4603      	mov	r3, r0
 8002a86:	ee00 3a10 	vmov	s0, r3
 8002a8a:	f7ff fb3f 	bl	800210c <calculate_pot_value_volt_offset>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	607b      	str	r3, [r7, #4]
			set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset_drain);
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	2100      	movs	r1, #0
 8002a96:	4840      	ldr	r0, [pc, #256]	@ (8002b98 <dvc_exec_msr_transfer_characteristics+0x27c>)
 8002a98:	f7ff fac4 	bl	8002024 <set_pot_buffer>
			config_volt_src_offset(&hi2c3,DVC_VOLT_SRC_2_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8002a9c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b98 <dvc_exec_msr_transfer_characteristics+0x27c>)
 8002a9e:	215e      	movs	r1, #94	@ 0x5e
 8002aa0:	483a      	ldr	r0, [pc, #232]	@ (8002b8c <dvc_exec_msr_transfer_characteristics+0x270>)
 8002aa2:	f7ff fbbf 	bl	8002224 <config_volt_src_offset>

			pot_val_offset_gate = calculate_pot_value_volt_offset(param/1000.0);
 8002aa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002aa8:	f7fd fd38 	bl	800051c <__aeabi_i2d>
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	4b38      	ldr	r3, [pc, #224]	@ (8002b94 <dvc_exec_msr_transfer_characteristics+0x278>)
 8002ab2:	f7fd fec7 	bl	8000844 <__aeabi_ddiv>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	f7fe f86f 	bl	8000ba0 <__aeabi_d2f>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	ee00 3a10 	vmov	s0, r3
 8002ac8:	f7ff fb20 	bl	800210c <calculate_pot_value_volt_offset>
 8002acc:	4603      	mov	r3, r0
 8002ace:	603b      	str	r3, [r7, #0]
			set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset_gate);
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4830      	ldr	r0, [pc, #192]	@ (8002b98 <dvc_exec_msr_transfer_characteristics+0x27c>)
 8002ad6:	f7ff faa5 	bl	8002024 <set_pot_buffer>
			config_volt_src_offset(&hi2c1,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8002ada:	4a2f      	ldr	r2, [pc, #188]	@ (8002b98 <dvc_exec_msr_transfer_characteristics+0x27c>)
 8002adc:	215c      	movs	r1, #92	@ 0x5c
 8002ade:	482a      	ldr	r0, [pc, #168]	@ (8002b88 <dvc_exec_msr_transfer_characteristics+0x26c>)
 8002ae0:	f7ff fba0 	bl	8002224 <config_volt_src_offset>
			HAL_Delay(2000);
 8002ae4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ae8:	f000 ffd6 	bl	8003a98 <HAL_Delay>
		}

		// collect ADC samples
		collect_adc_samples_it(DVC_USE_ADC_3_SAMPLING);
 8002aec:	2004      	movs	r0, #4
 8002aee:	f7ff f96d 	bl	8001dcc <collect_adc_samples_it>

		// wait for adc dma to complete
		while(adc_3_busy);
 8002af2:	bf00      	nop
 8002af4:	4b29      	ldr	r3, [pc, #164]	@ (8002b9c <dvc_exec_msr_transfer_characteristics+0x280>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1fa      	bne.n	8002af4 <dvc_exec_msr_transfer_characteristics+0x1d8>

		// clear busy flag to indicate a measurement is complete
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 8002afe:	2101      	movs	r1, #1
 8002b00:	481c      	ldr	r0, [pc, #112]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 8002b02:	f7ff fa26 	bl	8001f52 <get_register>
 8002b06:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4818      	ldr	r0, [pc, #96]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 8002b12:	f7ff fa2f 	bl	8001f74 <set_register>

		// wait for python to grab the data
		while(adc_3_full);
 8002b16:	bf00      	nop
 8002b18:	4b21      	ldr	r3, [pc, #132]	@ (8002ba0 <dvc_exec_msr_transfer_characteristics+0x284>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1fa      	bne.n	8002b18 <dvc_exec_msr_transfer_characteristics+0x1fc>

		// set busy flag to indicate a measurement is in progress
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 8002b22:	2101      	movs	r1, #1
 8002b24:	4813      	ldr	r0, [pc, #76]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 8002b26:	f7ff fa14 	bl	8001f52 <get_register>
 8002b2a:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	461a      	mov	r2, r3
 8002b32:	2101      	movs	r1, #1
 8002b34:	480f      	ldr	r0, [pc, #60]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 8002b36:	f7ff fa1d 	bl	8001f74 <set_register>
	for(int param = gate_volt_start; param <= gate_volt_end; param += gate_volt_incr){
 8002b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4413      	add	r3, r2
 8002b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	f4bf af47 	bcs.w	80029da <dvc_exec_msr_transfer_characteristics+0xbe>
	}

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 8002b4c:	4810      	ldr	r0, [pc, #64]	@ (8002b90 <dvc_exec_msr_transfer_characteristics+0x274>)
 8002b4e:	f000 fc67 	bl	8003420 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 8002b52:	2101      	movs	r1, #1
 8002b54:	4807      	ldr	r0, [pc, #28]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 8002b56:	f7ff f9fc 	bl	8001f52 <get_register>
 8002b5a:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002b5c:	f023 0304 	bic.w	r3, r3, #4
 8002b60:	461a      	mov	r2, r3
 8002b62:	2101      	movs	r1, #1
 8002b64:	4803      	ldr	r0, [pc, #12]	@ (8002b74 <dvc_exec_msr_transfer_characteristics+0x258>)
 8002b66:	f7ff fa05 	bl	8001f74 <set_register>
}
 8002b6a:	bf00      	nop
 8002b6c:	3730      	adds	r7, #48	@ 0x30
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000cadc 	.word	0x2000cadc
 8002b78:	20000004 	.word	0x20000004
 8002b7c:	200003ac 	.word	0x200003ac
 8002b80:	2000031c 	.word	0x2000031c
 8002b84:	20000010 	.word	0x20000010
 8002b88:	20000274 	.word	0x20000274
 8002b8c:	200002c8 	.word	0x200002c8
 8002b90:	2000cedc 	.word	0x2000cedc
 8002b94:	408f4000 	.word	0x408f4000
 8002b98:	20000014 	.word	0x20000014
 8002b9c:	20000ad6 	.word	0x20000ad6
 8002ba0:	20000ad9 	.word	0x20000ad9

08002ba4 <dvc_exec_msr_output_characteristics>:

void dvc_exec_msr_output_characteristics(void){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	@ 0x30
 8002ba8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	uint32_t pot_val_gain, pot_val_offset_drain, pot_val_offset_gate;

	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 8002baa:	2101      	movs	r1, #1
 8002bac:	4893      	ldr	r0, [pc, #588]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002bae:	f7ff f9d0 	bl	8001f52 <get_register>
 8002bb2:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2101      	movs	r1, #1
 8002bbc:	488f      	ldr	r0, [pc, #572]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002bbe:	f7ff f9d9 	bl	8001f74 <set_register>

	// grab the measurement parameters from the registers;
	uint32_t probe_sel = get_register(&device_registers,DVC_3PM_OUTCHAR_1);
 8002bc2:	2118      	movs	r1, #24
 8002bc4:	488d      	ldr	r0, [pc, #564]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002bc6:	f7ff f9c4 	bl	8001f52 <get_register>
 8002bca:	62b8      	str	r0, [r7, #40]	@ 0x28
	uint32_t gate_volt = get_register(&device_registers,DVC_3PM_OUTCHAR_2);
 8002bcc:	2119      	movs	r1, #25
 8002bce:	488b      	ldr	r0, [pc, #556]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002bd0:	f7ff f9bf 	bl	8001f52 <get_register>
 8002bd4:	6278      	str	r0, [r7, #36]	@ 0x24
	uint32_t drain_volt_start = get_register(&device_registers,DVC_3PM_OUTCHAR_3);
 8002bd6:	211a      	movs	r1, #26
 8002bd8:	4888      	ldr	r0, [pc, #544]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002bda:	f7ff f9ba 	bl	8001f52 <get_register>
 8002bde:	6238      	str	r0, [r7, #32]
	uint32_t drain_volt_end = get_register(&device_registers,DVC_3PM_OUTCHAR_4);
 8002be0:	211b      	movs	r1, #27
 8002be2:	4886      	ldr	r0, [pc, #536]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002be4:	f7ff f9b5 	bl	8001f52 <get_register>
 8002be8:	61f8      	str	r0, [r7, #28]
	uint32_t drain_volt_incr = get_register(&device_registers,DVC_3PM_OUTCHAR_5);
 8002bea:	211c      	movs	r1, #28
 8002bec:	4883      	ldr	r0, [pc, #524]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002bee:	f7ff f9b0 	bl	8001f52 <get_register>
 8002bf2:	61b8      	str	r0, [r7, #24]

	uint32_t drain_probe_sel = (probe_sel >> 4) & 0xF;
 8002bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	617b      	str	r3, [r7, #20]
	uint32_t gate_probe_sel = (probe_sel) & 0xF;
 8002bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	613b      	str	r3, [r7, #16]

	// configure the basic DC voltage source with 0Hz
	uint32_t freq_28b = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
	pot_val_gain = 64;
 8002c0a:	2340      	movs	r3, #64	@ 0x40
 8002c0c:	60bb      	str	r3, [r7, #8]

	set_ad9833_dds_buffer(volt_src_dds_spi_tx_buf,freq_28b);
 8002c0e:	68f9      	ldr	r1, [r7, #12]
 8002c10:	487b      	ldr	r0, [pc, #492]	@ (8002e00 <dvc_exec_msr_output_characteristics+0x25c>)
 8002c12:	f7ff f9c2 	bl	8001f9a <set_ad9833_dds_buffer>
	config_dds_freq(&hspi2,volt_src_dds_spi_tx_buf);
 8002c16:	497a      	ldr	r1, [pc, #488]	@ (8002e00 <dvc_exec_msr_output_characteristics+0x25c>)
 8002c18:	487a      	ldr	r0, [pc, #488]	@ (8002e04 <dvc_exec_msr_output_characteristics+0x260>)
 8002c1a:	f7ff fad3 	bl	80021c4 <config_dds_freq>
	config_dds_freq(&hspi1,volt_src_dds_spi_tx_buf);
 8002c1e:	4978      	ldr	r1, [pc, #480]	@ (8002e00 <dvc_exec_msr_output_characteristics+0x25c>)
 8002c20:	4879      	ldr	r0, [pc, #484]	@ (8002e08 <dvc_exec_msr_output_characteristics+0x264>)
 8002c22:	f7ff facf 	bl	80021c4 <config_dds_freq>

	set_pot_buffer(volt_src_gain_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_gain);
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4878      	ldr	r0, [pc, #480]	@ (8002e0c <dvc_exec_msr_output_characteristics+0x268>)
 8002c2c:	f7ff f9fa 	bl	8002024 <set_pot_buffer>
	config_volt_src_gain(&hi2c1,DVC_VOLT_SRC_1_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 8002c30:	4a76      	ldr	r2, [pc, #472]	@ (8002e0c <dvc_exec_msr_output_characteristics+0x268>)
 8002c32:	215e      	movs	r1, #94	@ 0x5e
 8002c34:	4876      	ldr	r0, [pc, #472]	@ (8002e10 <dvc_exec_msr_output_characteristics+0x26c>)
 8002c36:	f7ff fadb 	bl	80021f0 <config_volt_src_gain>
	config_volt_src_gain(&hi2c3,DVC_VOLT_SRC_2_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 8002c3a:	4a74      	ldr	r2, [pc, #464]	@ (8002e0c <dvc_exec_msr_output_characteristics+0x268>)
 8002c3c:	215c      	movs	r1, #92	@ 0x5c
 8002c3e:	4875      	ldr	r0, [pc, #468]	@ (8002e14 <dvc_exec_msr_output_characteristics+0x270>)
 8002c40:	f7ff fad6 	bl	80021f0 <config_volt_src_gain>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 8002c44:	2102      	movs	r1, #2
 8002c46:	486d      	ldr	r0, [pc, #436]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002c48:	f7ff f983 	bl	8001f52 <get_register>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4871      	ldr	r0, [pc, #452]	@ (8002e18 <dvc_exec_msr_output_characteristics+0x274>)
 8002c52:	f000 fc55 	bl	8003500 <map_switch_network>
	set_switch_network(&device_switch_network);
 8002c56:	4870      	ldr	r0, [pc, #448]	@ (8002e18 <dvc_exec_msr_output_characteristics+0x274>)
 8002c58:	f000 fc1c 	bl	8003494 <set_switch_network>

	for(int param = drain_volt_start; param <= drain_volt_end; param += drain_volt_incr){
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c60:	e0b3      	b.n	8002dca <dvc_exec_msr_output_characteristics+0x226>
		if(drain_probe_sel < gate_probe_sel){
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d242      	bcs.n	8002cf0 <dvc_exec_msr_output_characteristics+0x14c>
			pot_val_offset_drain = calculate_pot_value_volt_offset(param/1000.0);
 8002c6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c6c:	f7fd fc56 	bl	800051c <__aeabi_i2d>
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	4b69      	ldr	r3, [pc, #420]	@ (8002e1c <dvc_exec_msr_output_characteristics+0x278>)
 8002c76:	f7fd fde5 	bl	8000844 <__aeabi_ddiv>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	f7fd ff8d 	bl	8000ba0 <__aeabi_d2f>
 8002c86:	4603      	mov	r3, r0
 8002c88:	ee00 3a10 	vmov	s0, r3
 8002c8c:	f7ff fa3e 	bl	800210c <calculate_pot_value_volt_offset>
 8002c90:	4603      	mov	r3, r0
 8002c92:	607b      	str	r3, [r7, #4]
			set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset_drain);
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	2100      	movs	r1, #0
 8002c98:	4861      	ldr	r0, [pc, #388]	@ (8002e20 <dvc_exec_msr_output_characteristics+0x27c>)
 8002c9a:	f7ff f9c3 	bl	8002024 <set_pot_buffer>
			config_volt_src_offset(&hi2c1,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8002c9e:	4a60      	ldr	r2, [pc, #384]	@ (8002e20 <dvc_exec_msr_output_characteristics+0x27c>)
 8002ca0:	215c      	movs	r1, #92	@ 0x5c
 8002ca2:	485b      	ldr	r0, [pc, #364]	@ (8002e10 <dvc_exec_msr_output_characteristics+0x26c>)
 8002ca4:	f7ff fabe 	bl	8002224 <config_volt_src_offset>

			pot_val_offset_gate = calculate_pot_value_volt_offset(gate_volt/1000.0);
 8002ca8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002caa:	f7fd fc27 	bl	80004fc <__aeabi_ui2d>
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	4b5a      	ldr	r3, [pc, #360]	@ (8002e1c <dvc_exec_msr_output_characteristics+0x278>)
 8002cb4:	f7fd fdc6 	bl	8000844 <__aeabi_ddiv>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f7fd ff6e 	bl	8000ba0 <__aeabi_d2f>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	ee00 3a10 	vmov	s0, r3
 8002cca:	f7ff fa1f 	bl	800210c <calculate_pot_value_volt_offset>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	603b      	str	r3, [r7, #0]
			set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset_gate);
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4852      	ldr	r0, [pc, #328]	@ (8002e20 <dvc_exec_msr_output_characteristics+0x27c>)
 8002cd8:	f7ff f9a4 	bl	8002024 <set_pot_buffer>
			config_volt_src_offset(&hi2c3,DVC_VOLT_SRC_2_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8002cdc:	4a50      	ldr	r2, [pc, #320]	@ (8002e20 <dvc_exec_msr_output_characteristics+0x27c>)
 8002cde:	215e      	movs	r1, #94	@ 0x5e
 8002ce0:	484c      	ldr	r0, [pc, #304]	@ (8002e14 <dvc_exec_msr_output_characteristics+0x270>)
 8002ce2:	f7ff fa9f 	bl	8002224 <config_volt_src_offset>
			HAL_Delay(2000);
 8002ce6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002cea:	f000 fed5 	bl	8003a98 <HAL_Delay>
 8002cee:	e041      	b.n	8002d74 <dvc_exec_msr_output_characteristics+0x1d0>
		}
		else{
			pot_val_offset_drain = calculate_pot_value_volt_offset(param/1000.0);
 8002cf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cf2:	f7fd fc13 	bl	800051c <__aeabi_i2d>
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <dvc_exec_msr_output_characteristics+0x278>)
 8002cfc:	f7fd fda2 	bl	8000844 <__aeabi_ddiv>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	f7fd ff4a 	bl	8000ba0 <__aeabi_d2f>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	ee00 3a10 	vmov	s0, r3
 8002d12:	f7ff f9fb 	bl	800210c <calculate_pot_value_volt_offset>
 8002d16:	4603      	mov	r3, r0
 8002d18:	607b      	str	r3, [r7, #4]
			set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset_drain);
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4840      	ldr	r0, [pc, #256]	@ (8002e20 <dvc_exec_msr_output_characteristics+0x27c>)
 8002d20:	f7ff f980 	bl	8002024 <set_pot_buffer>
			config_volt_src_offset(&hi2c3,DVC_VOLT_SRC_2_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8002d24:	4a3e      	ldr	r2, [pc, #248]	@ (8002e20 <dvc_exec_msr_output_characteristics+0x27c>)
 8002d26:	215e      	movs	r1, #94	@ 0x5e
 8002d28:	483a      	ldr	r0, [pc, #232]	@ (8002e14 <dvc_exec_msr_output_characteristics+0x270>)
 8002d2a:	f7ff fa7b 	bl	8002224 <config_volt_src_offset>

			pot_val_offset_gate = calculate_pot_value_volt_offset(gate_volt/1000.0);
 8002d2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d30:	f7fd fbe4 	bl	80004fc <__aeabi_ui2d>
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	4b38      	ldr	r3, [pc, #224]	@ (8002e1c <dvc_exec_msr_output_characteristics+0x278>)
 8002d3a:	f7fd fd83 	bl	8000844 <__aeabi_ddiv>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7fd ff2b 	bl	8000ba0 <__aeabi_d2f>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	ee00 3a10 	vmov	s0, r3
 8002d50:	f7ff f9dc 	bl	800210c <calculate_pot_value_volt_offset>
 8002d54:	4603      	mov	r3, r0
 8002d56:	603b      	str	r3, [r7, #0]
			set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset_gate);
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4830      	ldr	r0, [pc, #192]	@ (8002e20 <dvc_exec_msr_output_characteristics+0x27c>)
 8002d5e:	f7ff f961 	bl	8002024 <set_pot_buffer>
			config_volt_src_offset(&hi2c1,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8002d62:	4a2f      	ldr	r2, [pc, #188]	@ (8002e20 <dvc_exec_msr_output_characteristics+0x27c>)
 8002d64:	215c      	movs	r1, #92	@ 0x5c
 8002d66:	482a      	ldr	r0, [pc, #168]	@ (8002e10 <dvc_exec_msr_output_characteristics+0x26c>)
 8002d68:	f7ff fa5c 	bl	8002224 <config_volt_src_offset>
			HAL_Delay(2000);
 8002d6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d70:	f000 fe92 	bl	8003a98 <HAL_Delay>
		}

		// collect ADC samples
		collect_adc_samples_it(DVC_USE_ADC_3_SAMPLING);
 8002d74:	2004      	movs	r0, #4
 8002d76:	f7ff f829 	bl	8001dcc <collect_adc_samples_it>

		// wait for adc dma to complete
		while(adc_3_busy);
 8002d7a:	bf00      	nop
 8002d7c:	4b29      	ldr	r3, [pc, #164]	@ (8002e24 <dvc_exec_msr_output_characteristics+0x280>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1fa      	bne.n	8002d7c <dvc_exec_msr_output_characteristics+0x1d8>

		// clear busy flag to indicate a measurement is complete
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 8002d86:	2101      	movs	r1, #1
 8002d88:	481c      	ldr	r0, [pc, #112]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002d8a:	f7ff f8e2 	bl	8001f52 <get_register>
 8002d8e:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	461a      	mov	r2, r3
 8002d96:	2101      	movs	r1, #1
 8002d98:	4818      	ldr	r0, [pc, #96]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002d9a:	f7ff f8eb 	bl	8001f74 <set_register>

		// wait for python to grab the data
		while(adc_3_full);
 8002d9e:	bf00      	nop
 8002da0:	4b21      	ldr	r3, [pc, #132]	@ (8002e28 <dvc_exec_msr_output_characteristics+0x284>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1fa      	bne.n	8002da0 <dvc_exec_msr_output_characteristics+0x1fc>

		// set busy flag to indicate a measurement is in progress
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 8002daa:	2101      	movs	r1, #1
 8002dac:	4813      	ldr	r0, [pc, #76]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002dae:	f7ff f8d0 	bl	8001f52 <get_register>
 8002db2:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002db4:	f043 0304 	orr.w	r3, r3, #4
 8002db8:	461a      	mov	r2, r3
 8002dba:	2101      	movs	r1, #1
 8002dbc:	480f      	ldr	r0, [pc, #60]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002dbe:	f7ff f8d9 	bl	8001f74 <set_register>
	for(int param = drain_volt_start; param <= drain_volt_end; param += drain_volt_incr){
 8002dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	f4bf af47 	bcs.w	8002c62 <dvc_exec_msr_output_characteristics+0xbe>
	}

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 8002dd4:	4810      	ldr	r0, [pc, #64]	@ (8002e18 <dvc_exec_msr_output_characteristics+0x274>)
 8002dd6:	f000 fb23 	bl	8003420 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4807      	ldr	r0, [pc, #28]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002dde:	f7ff f8b8 	bl	8001f52 <get_register>
 8002de2:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002de4:	f023 0304 	bic.w	r3, r3, #4
 8002de8:	461a      	mov	r2, r3
 8002dea:	2101      	movs	r1, #1
 8002dec:	4803      	ldr	r0, [pc, #12]	@ (8002dfc <dvc_exec_msr_output_characteristics+0x258>)
 8002dee:	f7ff f8c1 	bl	8001f74 <set_register>
}
 8002df2:	bf00      	nop
 8002df4:	3730      	adds	r7, #48	@ 0x30
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000cadc 	.word	0x2000cadc
 8002e00:	20000004 	.word	0x20000004
 8002e04:	200003ac 	.word	0x200003ac
 8002e08:	2000031c 	.word	0x2000031c
 8002e0c:	20000010 	.word	0x20000010
 8002e10:	20000274 	.word	0x20000274
 8002e14:	200002c8 	.word	0x200002c8
 8002e18:	2000cedc 	.word	0x2000cedc
 8002e1c:	408f4000 	.word	0x408f4000
 8002e20:	20000014 	.word	0x20000014
 8002e24:	20000ad6 	.word	0x20000ad6
 8002e28:	20000ad9 	.word	0x20000ad9

08002e2c <dvc_exec_msr_capacitance_voltage_3p>:

void dvc_exec_msr_capacitance_voltage_3p(void){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	uint32_t pot_val_gain, pot_val_offset;

	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 8002e32:	2101      	movs	r1, #1
 8002e34:	4857      	ldr	r0, [pc, #348]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002e36:	f7ff f88c 	bl	8001f52 <get_register>
 8002e3a:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	461a      	mov	r2, r3
 8002e42:	2101      	movs	r1, #1
 8002e44:	4853      	ldr	r0, [pc, #332]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002e46:	f7ff f895 	bl	8001f74 <set_register>

	// grab the measurement parameters from the registers;
	uint32_t start_volt_offset = get_register(&device_registers,DVC_2PM_CAPVOLT_1);
 8002e4a:	2108      	movs	r1, #8
 8002e4c:	4851      	ldr	r0, [pc, #324]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002e4e:	f7ff f880 	bl	8001f52 <get_register>
 8002e52:	61b8      	str	r0, [r7, #24]
	uint32_t end_volt_offset = get_register(&device_registers,DVC_2PM_CAPVOLT_2);
 8002e54:	2109      	movs	r1, #9
 8002e56:	484f      	ldr	r0, [pc, #316]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002e58:	f7ff f87b 	bl	8001f52 <get_register>
 8002e5c:	6178      	str	r0, [r7, #20]
	uint32_t incr_volt_offset = get_register(&device_registers,DVC_2PM_CAPVOLT_3);
 8002e5e:	210a      	movs	r1, #10
 8002e60:	484c      	ldr	r0, [pc, #304]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002e62:	f7ff f876 	bl	8001f52 <get_register>
 8002e66:	6138      	str	r0, [r7, #16]

	// configure the basic DC voltage source with 1MHz
	uint32_t freq_28b = 10737418;
 8002e68:	4b4b      	ldr	r3, [pc, #300]	@ (8002f98 <dvc_exec_msr_capacitance_voltage_3p+0x16c>)
 8002e6a:	60fb      	str	r3, [r7, #12]

	float amp_volt = 3000;
 8002e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f9c <dvc_exec_msr_capacitance_voltage_3p+0x170>)
 8002e6e:	60bb      	str	r3, [r7, #8]
	pot_val_gain = calculate_pot_value_volt_gain(amp_volt/1000.0);
 8002e70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e74:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8002fa0 <dvc_exec_msr_capacitance_voltage_3p+0x174>
 8002e78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e7c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e80:	f7ff f972 	bl	8002168 <calculate_pot_value_volt_gain>
 8002e84:	4603      	mov	r3, r0
 8002e86:	607b      	str	r3, [r7, #4]
	set_pot_buffer(volt_src_gain_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_gain);
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4845      	ldr	r0, [pc, #276]	@ (8002fa4 <dvc_exec_msr_capacitance_voltage_3p+0x178>)
 8002e8e:	f7ff f8c9 	bl	8002024 <set_pot_buffer>
	config_volt_src_gain(&hi2c1,DVC_VOLT_SRC_1_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 8002e92:	4a44      	ldr	r2, [pc, #272]	@ (8002fa4 <dvc_exec_msr_capacitance_voltage_3p+0x178>)
 8002e94:	215e      	movs	r1, #94	@ 0x5e
 8002e96:	4844      	ldr	r0, [pc, #272]	@ (8002fa8 <dvc_exec_msr_capacitance_voltage_3p+0x17c>)
 8002e98:	f7ff f9aa 	bl	80021f0 <config_volt_src_gain>

	set_ad9833_dds_buffer(volt_src_dds_spi_tx_buf,freq_28b);
 8002e9c:	68f9      	ldr	r1, [r7, #12]
 8002e9e:	4843      	ldr	r0, [pc, #268]	@ (8002fac <dvc_exec_msr_capacitance_voltage_3p+0x180>)
 8002ea0:	f7ff f87b 	bl	8001f9a <set_ad9833_dds_buffer>
	config_dds_freq(&hspi2,volt_src_dds_spi_tx_buf);
 8002ea4:	4941      	ldr	r1, [pc, #260]	@ (8002fac <dvc_exec_msr_capacitance_voltage_3p+0x180>)
 8002ea6:	4842      	ldr	r0, [pc, #264]	@ (8002fb0 <dvc_exec_msr_capacitance_voltage_3p+0x184>)
 8002ea8:	f7ff f98c 	bl	80021c4 <config_dds_freq>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 8002eac:	2102      	movs	r1, #2
 8002eae:	4839      	ldr	r0, [pc, #228]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002eb0:	f7ff f84f 	bl	8001f52 <get_register>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	483e      	ldr	r0, [pc, #248]	@ (8002fb4 <dvc_exec_msr_capacitance_voltage_3p+0x188>)
 8002eba:	f000 fb21 	bl	8003500 <map_switch_network>
	set_switch_network(&device_switch_network);
 8002ebe:	483d      	ldr	r0, [pc, #244]	@ (8002fb4 <dvc_exec_msr_capacitance_voltage_3p+0x188>)
 8002ec0:	f000 fae8 	bl	8003494 <set_switch_network>

	for(int param = start_volt_offset; param <= end_volt_offset; param += incr_volt_offset){
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	e04d      	b.n	8002f66 <dvc_exec_msr_capacitance_voltage_3p+0x13a>
		pot_val_offset = calculate_pot_value_volt_offset(param/1000.0);
 8002eca:	69f8      	ldr	r0, [r7, #28]
 8002ecc:	f7fd fb26 	bl	800051c <__aeabi_i2d>
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	4b38      	ldr	r3, [pc, #224]	@ (8002fb8 <dvc_exec_msr_capacitance_voltage_3p+0x18c>)
 8002ed6:	f7fd fcb5 	bl	8000844 <__aeabi_ddiv>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f7fd fe5d 	bl	8000ba0 <__aeabi_d2f>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	ee00 3a10 	vmov	s0, r3
 8002eec:	f7ff f90e 	bl	800210c <calculate_pot_value_volt_offset>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	603b      	str	r3, [r7, #0]
		set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset);
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4830      	ldr	r0, [pc, #192]	@ (8002fbc <dvc_exec_msr_capacitance_voltage_3p+0x190>)
 8002efa:	f7ff f893 	bl	8002024 <set_pot_buffer>
		config_volt_src_offset(&hi2c1,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8002efe:	4a2f      	ldr	r2, [pc, #188]	@ (8002fbc <dvc_exec_msr_capacitance_voltage_3p+0x190>)
 8002f00:	215c      	movs	r1, #92	@ 0x5c
 8002f02:	4829      	ldr	r0, [pc, #164]	@ (8002fa8 <dvc_exec_msr_capacitance_voltage_3p+0x17c>)
 8002f04:	f7ff f98e 	bl	8002224 <config_volt_src_offset>
		HAL_Delay(2000);
 8002f08:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002f0c:	f000 fdc4 	bl	8003a98 <HAL_Delay>

		// collect ADC samples
		collect_adc_samples_it(DVC_USE_ADC_3_SAMPLING);
 8002f10:	2004      	movs	r0, #4
 8002f12:	f7fe ff5b 	bl	8001dcc <collect_adc_samples_it>

		// wait for adc dma to complete
		while(adc_3_busy);
 8002f16:	bf00      	nop
 8002f18:	4b29      	ldr	r3, [pc, #164]	@ (8002fc0 <dvc_exec_msr_capacitance_voltage_3p+0x194>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1fa      	bne.n	8002f18 <dvc_exec_msr_capacitance_voltage_3p+0xec>

		// clear busy flag to indicate a measurement is complete
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 8002f22:	2101      	movs	r1, #1
 8002f24:	481b      	ldr	r0, [pc, #108]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002f26:	f7ff f814 	bl	8001f52 <get_register>
 8002f2a:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	461a      	mov	r2, r3
 8002f32:	2101      	movs	r1, #1
 8002f34:	4817      	ldr	r0, [pc, #92]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002f36:	f7ff f81d 	bl	8001f74 <set_register>

		// wait for python to grab the data
		while(adc_3_full);
 8002f3a:	bf00      	nop
 8002f3c:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <dvc_exec_msr_capacitance_voltage_3p+0x198>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1fa      	bne.n	8002f3c <dvc_exec_msr_capacitance_voltage_3p+0x110>

		// set busy flag to indicate a measurement is in progress
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 8002f46:	2101      	movs	r1, #1
 8002f48:	4812      	ldr	r0, [pc, #72]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002f4a:	f7ff f802 	bl	8001f52 <get_register>
 8002f4e:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002f50:	f043 0304 	orr.w	r3, r3, #4
 8002f54:	461a      	mov	r2, r3
 8002f56:	2101      	movs	r1, #1
 8002f58:	480e      	ldr	r0, [pc, #56]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002f5a:	f7ff f80b 	bl	8001f74 <set_register>
	for(int param = start_volt_offset; param <= end_volt_offset; param += incr_volt_offset){
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d2ad      	bcs.n	8002eca <dvc_exec_msr_capacitance_voltage_3p+0x9e>
	}

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 8002f6e:	4811      	ldr	r0, [pc, #68]	@ (8002fb4 <dvc_exec_msr_capacitance_voltage_3p+0x188>)
 8002f70:	f000 fa56 	bl	8003420 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 8002f74:	2101      	movs	r1, #1
 8002f76:	4807      	ldr	r0, [pc, #28]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002f78:	f7fe ffeb 	bl	8001f52 <get_register>
 8002f7c:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002f7e:	f023 0304 	bic.w	r3, r3, #4
 8002f82:	461a      	mov	r2, r3
 8002f84:	2101      	movs	r1, #1
 8002f86:	4803      	ldr	r0, [pc, #12]	@ (8002f94 <dvc_exec_msr_capacitance_voltage_3p+0x168>)
 8002f88:	f7fe fff4 	bl	8001f74 <set_register>
}
 8002f8c:	bf00      	nop
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	2000cadc 	.word	0x2000cadc
 8002f98:	00a3d70a 	.word	0x00a3d70a
 8002f9c:	453b8000 	.word	0x453b8000
 8002fa0:	447a0000 	.word	0x447a0000
 8002fa4:	20000010 	.word	0x20000010
 8002fa8:	20000274 	.word	0x20000274
 8002fac:	20000004 	.word	0x20000004
 8002fb0:	200003ac 	.word	0x200003ac
 8002fb4:	2000cedc 	.word	0x2000cedc
 8002fb8:	408f4000 	.word	0x408f4000
 8002fbc:	20000014 	.word	0x20000014
 8002fc0:	20000ad6 	.word	0x20000ad6
 8002fc4:	20000ad9 	.word	0x20000ad9

08002fc8 <dvc_exec_msr_electrochemical>:

void dvc_exec_msr_electrochemical(void){
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0

}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <dvc_exec_msr_low_resistance>:

void dvc_exec_msr_low_resistance(void){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
	uint32_t pot_val, current_val;
	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 8002fde:	2101      	movs	r1, #1
 8002fe0:	482a      	ldr	r0, [pc, #168]	@ (800308c <dvc_exec_msr_low_resistance+0xb4>)
 8002fe2:	f7fe ffb6 	bl	8001f52 <get_register>
 8002fe6:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	461a      	mov	r2, r3
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4826      	ldr	r0, [pc, #152]	@ (800308c <dvc_exec_msr_low_resistance+0xb4>)
 8002ff2:	f7fe ffbf 	bl	8001f74 <set_register>

	// get potentiometer value to configure current mirror
	current_val = get_register(&device_registers,DVC_2PM_LOWRESISTANCE_1);
 8002ff6:	2126      	movs	r1, #38	@ 0x26
 8002ff8:	4824      	ldr	r0, [pc, #144]	@ (800308c <dvc_exec_msr_low_resistance+0xb4>)
 8002ffa:	f7fe ffaa 	bl	8001f52 <get_register>
 8002ffe:	6078      	str	r0, [r7, #4]

	// calculate the potentiometer value
	pot_val = calculate_pot_value_curr_mirr(current_val);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300a:	eeb0 0a67 	vmov.f32	s0, s15
 800300e:	f7ff f81f 	bl	8002050 <calculate_pot_value_curr_mirr>
 8003012:	4603      	mov	r3, r0
 8003014:	603b      	str	r3, [r7, #0]

	// prepare buffer for potentiometer I2C tx
	set_pot_buffer(curr_mrr_i2c_tx_buf,DVC_POT_AD5245_WP_WR_CMD,pot_val);
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	2100      	movs	r1, #0
 800301a:	481d      	ldr	r0, [pc, #116]	@ (8003090 <dvc_exec_msr_low_resistance+0xb8>)
 800301c:	f7ff f802 	bl	8002024 <set_pot_buffer>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 8003020:	2102      	movs	r1, #2
 8003022:	481a      	ldr	r0, [pc, #104]	@ (800308c <dvc_exec_msr_low_resistance+0xb4>)
 8003024:	f7fe ff95 	bl	8001f52 <get_register>
 8003028:	4603      	mov	r3, r0
 800302a:	4619      	mov	r1, r3
 800302c:	4819      	ldr	r0, [pc, #100]	@ (8003094 <dvc_exec_msr_low_resistance+0xbc>)
 800302e:	f000 fa67 	bl	8003500 <map_switch_network>
	set_switch_network(&device_switch_network);
 8003032:	4818      	ldr	r0, [pc, #96]	@ (8003094 <dvc_exec_msr_low_resistance+0xbc>)
 8003034:	f000 fa2e 	bl	8003494 <set_switch_network>

	// configure the current mirror (2 seconds delay for stabilization)
	config_current_mirror(&hi2c3,DVC_CURR_MRR_POT_I2C_ADDR,curr_mrr_i2c_tx_buf);
 8003038:	4a15      	ldr	r2, [pc, #84]	@ (8003090 <dvc_exec_msr_low_resistance+0xb8>)
 800303a:	2158      	movs	r1, #88	@ 0x58
 800303c:	4816      	ldr	r0, [pc, #88]	@ (8003098 <dvc_exec_msr_low_resistance+0xc0>)
 800303e:	f7ff f90b 	bl	8002258 <config_current_mirror>
	HAL_Delay(2000);
 8003042:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003046:	f000 fd27 	bl	8003a98 <HAL_Delay>

	// collect ADC samples
	collect_adc_samples_it(DVC_USE_ADC_1_SAMPLING | DVC_USE_ADC_2_SAMPLING);
 800304a:	2003      	movs	r0, #3
 800304c:	f7fe febe 	bl	8001dcc <collect_adc_samples_it>

	// wait for adc dma to complete
	while(adc_1_busy || adc_2_busy);
 8003050:	bf00      	nop
 8003052:	4b12      	ldr	r3, [pc, #72]	@ (800309c <dvc_exec_msr_low_resistance+0xc4>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1fa      	bne.n	8003052 <dvc_exec_msr_low_resistance+0x7a>
 800305c:	4b10      	ldr	r3, [pc, #64]	@ (80030a0 <dvc_exec_msr_low_resistance+0xc8>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f5      	bne.n	8003052 <dvc_exec_msr_low_resistance+0x7a>

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 8003066:	480b      	ldr	r0, [pc, #44]	@ (8003094 <dvc_exec_msr_low_resistance+0xbc>)
 8003068:	f000 f9da 	bl	8003420 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 800306c:	2101      	movs	r1, #1
 800306e:	4807      	ldr	r0, [pc, #28]	@ (800308c <dvc_exec_msr_low_resistance+0xb4>)
 8003070:	f7fe ff6f 	bl	8001f52 <get_register>
 8003074:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8003076:	f023 0304 	bic.w	r3, r3, #4
 800307a:	461a      	mov	r2, r3
 800307c:	2101      	movs	r1, #1
 800307e:	4803      	ldr	r0, [pc, #12]	@ (800308c <dvc_exec_msr_low_resistance+0xb4>)
 8003080:	f7fe ff78 	bl	8001f74 <set_register>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	2000cadc 	.word	0x2000cadc
 8003090:	20000018 	.word	0x20000018
 8003094:	2000cedc 	.word	0x2000cedc
 8003098:	200002c8 	.word	0x200002c8
 800309c:	20000ad4 	.word	0x20000ad4
 80030a0:	20000ad5 	.word	0x20000ad5

080030a4 <dvc_exec_msr_dc_resistance_4p>:

void dvc_exec_msr_dc_resistance_4p(void){
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
	uint32_t pot_val, current_val;
	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 80030aa:	2101      	movs	r1, #1
 80030ac:	482a      	ldr	r0, [pc, #168]	@ (8003158 <dvc_exec_msr_dc_resistance_4p+0xb4>)
 80030ae:	f7fe ff50 	bl	8001f52 <get_register>
 80030b2:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	461a      	mov	r2, r3
 80030ba:	2101      	movs	r1, #1
 80030bc:	4826      	ldr	r0, [pc, #152]	@ (8003158 <dvc_exec_msr_dc_resistance_4p+0xb4>)
 80030be:	f7fe ff59 	bl	8001f74 <set_register>

	// get potentiometer value to configure current mirror
	current_val = get_register(&device_registers,DVC_4PM_PROBERESISTANCE_1);
 80030c2:	2125      	movs	r1, #37	@ 0x25
 80030c4:	4824      	ldr	r0, [pc, #144]	@ (8003158 <dvc_exec_msr_dc_resistance_4p+0xb4>)
 80030c6:	f7fe ff44 	bl	8001f52 <get_register>
 80030ca:	6078      	str	r0, [r7, #4]

	// calculate the potentiometer value
	pot_val = calculate_pot_value_curr_mirr(current_val);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d6:	eeb0 0a67 	vmov.f32	s0, s15
 80030da:	f7fe ffb9 	bl	8002050 <calculate_pot_value_curr_mirr>
 80030de:	4603      	mov	r3, r0
 80030e0:	603b      	str	r3, [r7, #0]

	// prepare buffer for potentiometer I2C tx
	set_pot_buffer(curr_mrr_i2c_tx_buf,DVC_POT_AD5245_WP_WR_CMD,pot_val);
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	2100      	movs	r1, #0
 80030e6:	481d      	ldr	r0, [pc, #116]	@ (800315c <dvc_exec_msr_dc_resistance_4p+0xb8>)
 80030e8:	f7fe ff9c 	bl	8002024 <set_pot_buffer>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 80030ec:	2102      	movs	r1, #2
 80030ee:	481a      	ldr	r0, [pc, #104]	@ (8003158 <dvc_exec_msr_dc_resistance_4p+0xb4>)
 80030f0:	f7fe ff2f 	bl	8001f52 <get_register>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4619      	mov	r1, r3
 80030f8:	4819      	ldr	r0, [pc, #100]	@ (8003160 <dvc_exec_msr_dc_resistance_4p+0xbc>)
 80030fa:	f000 fa01 	bl	8003500 <map_switch_network>
	set_switch_network(&device_switch_network);
 80030fe:	4818      	ldr	r0, [pc, #96]	@ (8003160 <dvc_exec_msr_dc_resistance_4p+0xbc>)
 8003100:	f000 f9c8 	bl	8003494 <set_switch_network>

	// configure the current mirror (2 seconds delay for stabilization)
	config_current_mirror(&hi2c3,DVC_CURR_MRR_POT_I2C_ADDR,curr_mrr_i2c_tx_buf);
 8003104:	4a15      	ldr	r2, [pc, #84]	@ (800315c <dvc_exec_msr_dc_resistance_4p+0xb8>)
 8003106:	2158      	movs	r1, #88	@ 0x58
 8003108:	4816      	ldr	r0, [pc, #88]	@ (8003164 <dvc_exec_msr_dc_resistance_4p+0xc0>)
 800310a:	f7ff f8a5 	bl	8002258 <config_current_mirror>
	HAL_Delay(2000);
 800310e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003112:	f000 fcc1 	bl	8003a98 <HAL_Delay>

	// collect ADC samples
	collect_adc_samples_it(DVC_USE_ADC_1_SAMPLING | DVC_USE_ADC_2_SAMPLING);
 8003116:	2003      	movs	r0, #3
 8003118:	f7fe fe58 	bl	8001dcc <collect_adc_samples_it>

	// wait for adc dma to complete
	while(adc_1_busy || adc_2_busy);
 800311c:	bf00      	nop
 800311e:	4b12      	ldr	r3, [pc, #72]	@ (8003168 <dvc_exec_msr_dc_resistance_4p+0xc4>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1fa      	bne.n	800311e <dvc_exec_msr_dc_resistance_4p+0x7a>
 8003128:	4b10      	ldr	r3, [pc, #64]	@ (800316c <dvc_exec_msr_dc_resistance_4p+0xc8>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f5      	bne.n	800311e <dvc_exec_msr_dc_resistance_4p+0x7a>

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 8003132:	480b      	ldr	r0, [pc, #44]	@ (8003160 <dvc_exec_msr_dc_resistance_4p+0xbc>)
 8003134:	f000 f974 	bl	8003420 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 8003138:	2101      	movs	r1, #1
 800313a:	4807      	ldr	r0, [pc, #28]	@ (8003158 <dvc_exec_msr_dc_resistance_4p+0xb4>)
 800313c:	f7fe ff09 	bl	8001f52 <get_register>
 8003140:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8003142:	f023 0304 	bic.w	r3, r3, #4
 8003146:	461a      	mov	r2, r3
 8003148:	2101      	movs	r1, #1
 800314a:	4803      	ldr	r0, [pc, #12]	@ (8003158 <dvc_exec_msr_dc_resistance_4p+0xb4>)
 800314c:	f7fe ff12 	bl	8001f74 <set_register>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000cadc 	.word	0x2000cadc
 800315c:	20000018 	.word	0x20000018
 8003160:	2000cedc 	.word	0x2000cedc
 8003164:	200002c8 	.word	0x200002c8
 8003168:	20000ad4 	.word	0x20000ad4
 800316c:	20000ad5 	.word	0x20000ad5

08003170 <dvc_exec_msr_impedance_spectroscopy_4p>:

void dvc_exec_msr_impedance_spectroscopy_4p(void){
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0

}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <run_device>:
uint8_t spi_tx_buf_dac_2_freq[] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};

RegisterMap_TypeDef device_registers;
SwitchNetwork_TypeDef device_switch_network;

void run_device(){
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,USER_LED_Pin,GPIO_PIN_SET); // Alive LED
 8003186:	2201      	movs	r2, #1
 8003188:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800318c:	485c      	ldr	r0, [pc, #368]	@ (8003300 <run_device+0x180>)
 800318e:	f001 fde1 	bl	8004d54 <HAL_GPIO_WritePin>
	MeasurementCfg_Type measurement_type = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	70fb      	strb	r3, [r7, #3]

	init_register_map(&device_registers);
 8003196:	485b      	ldr	r0, [pc, #364]	@ (8003304 <run_device+0x184>)
 8003198:	f7fe fec2 	bl	8001f20 <init_register_map>
	init_switch_network(&device_switch_network);
 800319c:	485a      	ldr	r0, [pc, #360]	@ (8003308 <run_device+0x188>)
 800319e:	f000 f8bd 	bl	800331c <init_switch_network>
	clear_switch_network(&device_switch_network);
 80031a2:	4859      	ldr	r0, [pc, #356]	@ (8003308 <run_device+0x188>)
 80031a4:	f000 f93c 	bl	8003420 <clear_switch_network>
//	pot_val_test();
	set_adc_sampling_freq(10000000UL);
 80031a8:	4858      	ldr	r0, [pc, #352]	@ (800330c <run_device+0x18c>)
 80031aa:	f7fe fdb7 	bl	8001d1c <set_adc_sampling_freq>
	set_adc_dma_callback_routines();
 80031ae:	f7fe fdd3 	bl	8001d58 <set_adc_dma_callback_routines>
	for(int i = 0; i < DVC_MAX_NUM_ADC_SAMPLES; i++){
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	e014      	b.n	80031e2 <run_device+0x62>
		adc_samples_1[i] = 0xdead;
 80031b8:	4a55      	ldr	r2, [pc, #340]	@ (8003310 <run_device+0x190>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 80031c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_samples_2[i] = 0xdead;
 80031c4:	4a53      	ldr	r2, [pc, #332]	@ (8003314 <run_device+0x194>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 80031cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_samples_3[i] = 0xdead;
 80031d0:	4a51      	ldr	r2, [pc, #324]	@ (8003318 <run_device+0x198>)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 80031d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < DVC_MAX_NUM_ADC_SAMPLES; i++){
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3301      	adds	r3, #1
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031e8:	dbe6      	blt.n	80031b8 <run_device+0x38>
	}

	while(1){
		if(get_register(&device_registers,DVC_MEASUREMENT_CONFIG)%2){
 80031ea:	2101      	movs	r1, #1
 80031ec:	4845      	ldr	r0, [pc, #276]	@ (8003304 <run_device+0x184>)
 80031ee:	f7fe feb0 	bl	8001f52 <get_register>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f6      	beq.n	80031ea <run_device+0x6a>
			measurement_type = (get_register(&device_registers,DVC_MEASUREMENT_CONFIG)>>6) & 0xF;
 80031fc:	2101      	movs	r1, #1
 80031fe:	4841      	ldr	r0, [pc, #260]	@ (8003304 <run_device+0x184>)
 8003200:	f7fe fea7 	bl	8001f52 <get_register>
 8003204:	4603      	mov	r3, r0
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	70fb      	strb	r3, [r7, #3]
			switch (measurement_type) {
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	3b01      	subs	r3, #1
 8003214:	2b0a      	cmp	r3, #10
 8003216:	d871      	bhi.n	80032fc <run_device+0x17c>
 8003218:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <run_device+0xa0>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	0800324d 	.word	0x0800324d
 8003224:	0800325d 	.word	0x0800325d
 8003228:	0800326d 	.word	0x0800326d
 800322c:	0800327d 	.word	0x0800327d
 8003230:	0800328d 	.word	0x0800328d
 8003234:	0800329d 	.word	0x0800329d
 8003238:	080032ad 	.word	0x080032ad
 800323c:	080032bd 	.word	0x080032bd
 8003240:	080032cd 	.word	0x080032cd
 8003244:	080032dd 	.word	0x080032dd
 8003248:	080032ed 	.word	0x080032ed
				case DC_RESISTANCE:
					dvc_exec_msr_dc_resistance_2p();
 800324c:	f7ff f81e 	bl	800228c <dvc_exec_msr_dc_resistance_2p>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 8003250:	2200      	movs	r2, #0
 8003252:	2101      	movs	r1, #1
 8003254:	482b      	ldr	r0, [pc, #172]	@ (8003304 <run_device+0x184>)
 8003256:	f7fe fe8d 	bl	8001f74 <set_register>
					break;
 800325a:	e050      	b.n	80032fe <run_device+0x17e>
				case CURRENT_VOLTAGE:
					dvc_exec_msr_current_voltage();
 800325c:	f7ff f87a 	bl	8002354 <dvc_exec_msr_current_voltage>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 8003260:	2200      	movs	r2, #0
 8003262:	2101      	movs	r1, #1
 8003264:	4827      	ldr	r0, [pc, #156]	@ (8003304 <run_device+0x184>)
 8003266:	f7fe fe85 	bl	8001f74 <set_register>
					break;
 800326a:	e048      	b.n	80032fe <run_device+0x17e>
				case CAPACITANCE_VOLTAGE_2P:
					dvc_exec_msr_capacitance_voltage_2p();
 800326c:	f7ff f974 	bl	8002558 <dvc_exec_msr_capacitance_voltage_2p>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 8003270:	2200      	movs	r2, #0
 8003272:	2101      	movs	r1, #1
 8003274:	4823      	ldr	r0, [pc, #140]	@ (8003304 <run_device+0x184>)
 8003276:	f7fe fe7d 	bl	8001f74 <set_register>
					break;
 800327a:	e040      	b.n	80032fe <run_device+0x17e>
				case IMPEDANCE_SPECTROSCOPY_2P:
					dvc_exec_msr_impedance_spectroscopy_2p();
 800327c:	f7ff fa3a 	bl	80026f4 <dvc_exec_msr_impedance_spectroscopy_2p>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 8003280:	2200      	movs	r2, #0
 8003282:	2101      	movs	r1, #1
 8003284:	481f      	ldr	r0, [pc, #124]	@ (8003304 <run_device+0x184>)
 8003286:	f7fe fe75 	bl	8001f74 <set_register>
					break;
 800328a:	e038      	b.n	80032fe <run_device+0x17e>
				case TRANSFER_CHARACTERISTICS:
					dvc_exec_msr_transfer_characteristics();
 800328c:	f7ff fb46 	bl	800291c <dvc_exec_msr_transfer_characteristics>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 8003290:	2200      	movs	r2, #0
 8003292:	2101      	movs	r1, #1
 8003294:	481b      	ldr	r0, [pc, #108]	@ (8003304 <run_device+0x184>)
 8003296:	f7fe fe6d 	bl	8001f74 <set_register>
					break;
 800329a:	e030      	b.n	80032fe <run_device+0x17e>
				case OUTPUT_CHARACTERISTICS:
					dvc_exec_msr_output_characteristics();
 800329c:	f7ff fc82 	bl	8002ba4 <dvc_exec_msr_output_characteristics>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 80032a0:	2200      	movs	r2, #0
 80032a2:	2101      	movs	r1, #1
 80032a4:	4817      	ldr	r0, [pc, #92]	@ (8003304 <run_device+0x184>)
 80032a6:	f7fe fe65 	bl	8001f74 <set_register>
					break;
 80032aa:	e028      	b.n	80032fe <run_device+0x17e>
				case CAPACITANCE_VOLTAGE_3P:
					dvc_exec_msr_capacitance_voltage_3p();
 80032ac:	f7ff fdbe 	bl	8002e2c <dvc_exec_msr_capacitance_voltage_3p>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2101      	movs	r1, #1
 80032b4:	4813      	ldr	r0, [pc, #76]	@ (8003304 <run_device+0x184>)
 80032b6:	f7fe fe5d 	bl	8001f74 <set_register>
					break;
 80032ba:	e020      	b.n	80032fe <run_device+0x17e>
				case ELECTROCHEMICAL:
					dvc_exec_msr_electrochemical();
 80032bc:	f7ff fe84 	bl	8002fc8 <dvc_exec_msr_electrochemical>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2101      	movs	r1, #1
 80032c4:	480f      	ldr	r0, [pc, #60]	@ (8003304 <run_device+0x184>)
 80032c6:	f7fe fe55 	bl	8001f74 <set_register>
					break;
 80032ca:	e018      	b.n	80032fe <run_device+0x17e>
				case LOW_RESISTANCE:
					dvc_exec_msr_low_resistance();
 80032cc:	f7ff fe84 	bl	8002fd8 <dvc_exec_msr_low_resistance>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2101      	movs	r1, #1
 80032d4:	480b      	ldr	r0, [pc, #44]	@ (8003304 <run_device+0x184>)
 80032d6:	f7fe fe4d 	bl	8001f74 <set_register>
					break;
 80032da:	e010      	b.n	80032fe <run_device+0x17e>
				case PROBE_RESISTANCE:
					dvc_exec_msr_dc_resistance_4p();
 80032dc:	f7ff fee2 	bl	80030a4 <dvc_exec_msr_dc_resistance_4p>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2101      	movs	r1, #1
 80032e4:	4807      	ldr	r0, [pc, #28]	@ (8003304 <run_device+0x184>)
 80032e6:	f7fe fe45 	bl	8001f74 <set_register>
					break;
 80032ea:	e008      	b.n	80032fe <run_device+0x17e>
				case IMPEDANCE_SPECTROSCOPY_4P:
					dvc_exec_msr_impedance_spectroscopy_4p();
 80032ec:	f7ff ff40 	bl	8003170 <dvc_exec_msr_impedance_spectroscopy_4p>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2101      	movs	r1, #1
 80032f4:	4803      	ldr	r0, [pc, #12]	@ (8003304 <run_device+0x184>)
 80032f6:	f7fe fe3d 	bl	8001f74 <set_register>
					break;
 80032fa:	e000      	b.n	80032fe <run_device+0x17e>
				default:
					break;
 80032fc:	bf00      	nop
		if(get_register(&device_registers,DVC_MEASUREMENT_CONFIG)%2){
 80032fe:	e774      	b.n	80031ea <run_device+0x6a>
 8003300:	42020800 	.word	0x42020800
 8003304:	2000cadc 	.word	0x2000cadc
 8003308:	2000cedc 	.word	0x2000cedc
 800330c:	00989680 	.word	0x00989680
 8003310:	20000adc 	.word	0x20000adc
 8003314:	20004adc 	.word	0x20004adc
 8003318:	20008adc 	.word	0x20008adc

0800331c <init_switch_network>:
        ,SWTCH_RLY_09_Pin,SWTCH_RLY_10_Pin,SWTCH_RLY_11_Pin,SWTCH_RLY_12_Pin
        ,SWTCH_RLY_13_Pin,SWTCH_RLY_14_Pin,SWTCH_RLY_15_Pin,SWTCH_RLY_16_Pin
		,SWTCH_RLY_17_Pin,SWTCH_RLY_18_Pin,SWTCH_RLY_19_Pin,SWTCH_RLY_20_Pin
		,SWTCH_RLY_21_Pin,SWTCH_RLY_22_Pin,SWTCH_RLY_23_Pin};

void init_switch_network(SwitchNetwork_TypeDef* switch_network){
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8003324:	2301      	movs	r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e069      	b.n	80033fe <init_switch_network+0xe2>
		switch_network->Relays[i].RelayId = i;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	b2d8      	uxtb	r0, r3
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	4602      	mov	r2, r0
 800333e:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].AssociatedProbe = 0;
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3301      	adds	r3, #1
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].RelayState = GPIO_PIN_RESET;
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	3302      	adds	r3, #2
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
		if(i < 17){
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b10      	cmp	r3, #16
 800336c:	dc0a      	bgt.n	8003384 <init_switch_network+0x68>
			switch_network->Relays[i].AssociatedGPIOPort = GPIOF;
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	3304      	adds	r3, #4
 800337e:	4a24      	ldr	r2, [pc, #144]	@ (8003410 <init_switch_network+0xf4>)
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	e029      	b.n	80033d8 <init_switch_network+0xbc>
		}
		else if(i == 18 || i == 19 || i == 20 || i == 23){
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b12      	cmp	r3, #18
 8003388:	d008      	beq.n	800339c <init_switch_network+0x80>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b13      	cmp	r3, #19
 800338e:	d005      	beq.n	800339c <init_switch_network+0x80>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b14      	cmp	r3, #20
 8003394:	d002      	beq.n	800339c <init_switch_network+0x80>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b17      	cmp	r3, #23
 800339a:	d10a      	bne.n	80033b2 <init_switch_network+0x96>
			switch_network->Relays[i].AssociatedGPIOPort = GPIOB;
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3304      	adds	r3, #4
 80033ac:	4a19      	ldr	r2, [pc, #100]	@ (8003414 <init_switch_network+0xf8>)
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e012      	b.n	80033d8 <init_switch_network+0xbc>
		}
		else if(i == 17 || i == 21 || i == 22){
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b11      	cmp	r3, #17
 80033b6:	d005      	beq.n	80033c4 <init_switch_network+0xa8>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b15      	cmp	r3, #21
 80033bc:	d002      	beq.n	80033c4 <init_switch_network+0xa8>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b16      	cmp	r3, #22
 80033c2:	d109      	bne.n	80033d8 <init_switch_network+0xbc>
			switch_network->Relays[i].AssociatedGPIOPort = GPIOC;
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3304      	adds	r3, #4
 80033d4:	4a10      	ldr	r2, [pc, #64]	@ (8003418 <init_switch_network+0xfc>)
 80033d6:	601a      	str	r2, [r3, #0]
		}
		switch_network->Relays[i].AssociatedGPIO = swnt_pin_list[i-1];
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3b01      	subs	r3, #1
 80033dc:	4a0f      	ldr	r2, [pc, #60]	@ (800341c <init_switch_network+0x100>)
 80033de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e2:	b298      	uxth	r0, r3
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	3308      	adds	r3, #8
 80033f4:	4602      	mov	r2, r0
 80033f6:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b17      	cmp	r3, #23
 8003402:	dd92      	ble.n	800332a <init_switch_network+0xe>
	}
	return;
 8003404:	bf00      	nop
}
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	42021400 	.word	0x42021400
 8003414:	42020400 	.word	0x42020400
 8003418:	42020800 	.word	0x42020800
 800341c:	2000001c 	.word	0x2000001c

08003420 <clear_switch_network>:

void clear_switch_network(SwitchNetwork_TypeDef* switch_network){
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8003428:	2301      	movs	r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e02b      	b.n	8003486 <clear_switch_network+0x66>
		switch_network->Relays[i].RelayState = GPIO_PIN_RESET;
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	3302      	adds	r3, #2
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(switch_network->Relays[i].AssociatedGPIOPort,
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	3304      	adds	r3, #4
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4613      	mov	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3308      	adds	r3, #8
 8003464:	881c      	ldrh	r4, [r3, #0]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	3302      	adds	r3, #2
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	4621      	mov	r1, r4
 800347c:	f001 fc6a 	bl	8004d54 <HAL_GPIO_WritePin>
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3301      	adds	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b17      	cmp	r3, #23
 800348a:	ddd0      	ble.n	800342e <clear_switch_network+0xe>
						  switch_network->Relays[i].AssociatedGPIO,
						  switch_network->Relays[i].RelayState);
	}
	return;
 800348c:	bf00      	nop
}
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	bd90      	pop	{r4, r7, pc}

08003494 <set_switch_network>:

void set_switch_network(SwitchNetwork_TypeDef* switch_network){
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	if(!switch_network->ValidSwitchNetwork) return;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d028      	beq.n	80034f8 <set_switch_network+0x64>
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 80034a6:	2301      	movs	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e021      	b.n	80034f0 <set_switch_network+0x5c>
		HAL_GPIO_WritePin(switch_network->Relays[i].AssociatedGPIOPort,
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4613      	mov	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3304      	adds	r3, #4
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4613      	mov	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	3308      	adds	r3, #8
 80034ce:	881c      	ldrh	r4, [r3, #0]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3302      	adds	r3, #2
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	4621      	mov	r1, r4
 80034e6:	f001 fc35 	bl	8004d54 <HAL_GPIO_WritePin>
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3301      	adds	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b17      	cmp	r3, #23
 80034f4:	ddda      	ble.n	80034ac <set_switch_network+0x18>
						  switch_network->Relays[i].AssociatedGPIO,
						  switch_network->Relays[i].RelayState);
	}
	return;
 80034f6:	e000      	b.n	80034fa <set_switch_network+0x66>
	if(!switch_network->ValidSwitchNetwork) return;
 80034f8:	bf00      	nop
}
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd90      	pop	{r4, r7, pc}

08003500 <map_switch_network>:
					  switch_network->Relays[20].AssociatedGPIO);
	HAL_Delay(2000);
	return;
}

void map_switch_network(SwitchNetwork_TypeDef* switch_network, uint32_t switch_network_config){
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
	MeasurementCfg_Type measurement_type = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	777b      	strb	r3, [r7, #29]
	measurement_type = (get_register(&device_registers,DVC_MEASUREMENT_CONFIG)>>6) & 0xF;
 800350e:	2101      	movs	r1, #1
 8003510:	48a0      	ldr	r0, [pc, #640]	@ (8003794 <map_switch_network+0x294>)
 8003512:	f7fe fd1e 	bl	8001f52 <get_register>
 8003516:	4603      	mov	r3, r0
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	777b      	strb	r3, [r7, #29]
	// set the basic flags
	switch_network->ValidSwitchNetwork = 1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	uint8_t volt_src_1_used = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	77fb      	strb	r3, [r7, #31]
	uint8_t adc_1_used = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	77bb      	strb	r3, [r7, #30]
	uint8_t adc_2_used = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	773b      	strb	r3, [r7, #28]
	uint8_t adc_3_used = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	76fb      	strb	r3, [r7, #27]
	uint8_t used_probes = switch_network_config & 0x0F;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	76bb      	strb	r3, [r7, #26]

	// decode configuration values
	uint8_t probe_1_cfg = (switch_network_config >> 4) & 0x1F;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	767b      	strb	r3, [r7, #25]
	uint8_t probe_2_cfg = (switch_network_config >> 9) & 0x1F;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	0a5b      	lsrs	r3, r3, #9
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	763b      	strb	r3, [r7, #24]
	uint8_t probe_3_cfg = (switch_network_config >> 14)& 0x1F;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	0b9b      	lsrs	r3, r3, #14
 8003560:	b2db      	uxtb	r3, r3
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	75fb      	strb	r3, [r7, #23]
	uint8_t probe_4_cfg = (switch_network_config >> 19)& 0x1F;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	0cdb      	lsrs	r3, r3, #19
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	75bb      	strb	r3, [r7, #22]

	// decode source configurations
	uint8_t probe_1_cfg_src = (probe_1_cfg >> 2) & 0x07;
 8003574:	7e7b      	ldrb	r3, [r7, #25]
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	757b      	strb	r3, [r7, #21]
	uint8_t probe_2_cfg_src = (probe_2_cfg >> 2) & 0x07;
 8003580:	7e3b      	ldrb	r3, [r7, #24]
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	753b      	strb	r3, [r7, #20]
	uint8_t probe_3_cfg_src = (probe_3_cfg >> 2) & 0x07;
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	74fb      	strb	r3, [r7, #19]
	uint8_t probe_4_cfg_src = (probe_4_cfg >> 2) & 0x07;
 8003598:	7dbb      	ldrb	r3, [r7, #22]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	74bb      	strb	r3, [r7, #18]

	// decode monitor configurations
	uint8_t probe_1_cfg_mon = (probe_1_cfg) & 0x03;
 80035a4:	7e7b      	ldrb	r3, [r7, #25]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	747b      	strb	r3, [r7, #17]
	uint8_t probe_2_cfg_mon = (probe_2_cfg) & 0x03;
 80035ac:	7e3b      	ldrb	r3, [r7, #24]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	743b      	strb	r3, [r7, #16]
	uint8_t probe_3_cfg_mon = (probe_3_cfg) & 0x03;
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	73fb      	strb	r3, [r7, #15]
	uint8_t probe_4_cfg_mon = (probe_4_cfg) & 0x03;
 80035bc:	7dbb      	ldrb	r3, [r7, #22]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	73bb      	strb	r3, [r7, #14]

	// --------------------------------------------------------------------
	// PROBE 1 CFG
	if(used_probes & 0x01){
 80035c4:	7ebb      	ldrb	r3, [r7, #26]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d053      	beq.n	8003676 <map_switch_network+0x176>
		if(probe_1_cfg_src == 0){}
 80035ce:	7d7b      	ldrb	r3, [r7, #21]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d025      	beq.n	8003620 <map_switch_network+0x120>
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_DCV || probe_1_cfg_src == DVC_PROBE_SUPPLY_ACV){
 80035d4:	7d7b      	ldrb	r3, [r7, #21]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d002      	beq.n	80035e0 <map_switch_network+0xe0>
 80035da:	7d7b      	ldrb	r3, [r7, #21]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d10c      	bne.n	80035fa <map_switch_network+0xfa>
			if(!volt_src_1_used){
 80035e0:	7ffb      	ldrb	r3, [r7, #31]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <map_switch_network+0xf2>
				switch_network->Relays[1].RelayState = GPIO_PIN_SET;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	739a      	strb	r2, [r3, #14]
				volt_src_1_used = 1;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
			if(!volt_src_1_used){
 80035f0:	e016      	b.n	8003620 <map_switch_network+0x120>
			}
			else{
				switch_network->Relays[2].RelayState = GPIO_PIN_SET;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	769a      	strb	r2, [r3, #26]
			if(!volt_src_1_used){
 80035f8:	e012      	b.n	8003620 <map_switch_network+0x120>
			}
		}
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_DCI){
 80035fa:	7d7b      	ldrb	r3, [r7, #21]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d104      	bne.n	800360a <map_switch_network+0x10a>
			switch_network->Relays[3].RelayState = GPIO_PIN_SET;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8003608:	e00a      	b.n	8003620 <map_switch_network+0x120>
		}
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_ACI){
 800360a:	7d7b      	ldrb	r3, [r7, #21]
 800360c:	2b04      	cmp	r3, #4
 800360e:	d107      	bne.n	8003620 <map_switch_network+0x120>
			switch_network->Relays[3].RelayState = GPIO_PIN_SET;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		}
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_GND){}

		if(probe_1_cfg_mon == 0){}
 8003620:	7c7b      	ldrb	r3, [r7, #17]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d027      	beq.n	8003676 <map_switch_network+0x176>
		else if(probe_1_cfg_mon == DVC_PROBE_MEASURE_VOL){
 8003626:	7c7b      	ldrb	r3, [r7, #17]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d102      	bne.n	8003632 <map_switch_network+0x132>
			adc_1_used = 1;
 800362c:	2301      	movs	r3, #1
 800362e:	77bb      	strb	r3, [r7, #30]
 8003630:	e021      	b.n	8003676 <map_switch_network+0x176>
		}
		else if(probe_1_cfg_mon == DVC_PROBE_MEASURE_CUR){
 8003632:	7c7b      	ldrb	r3, [r7, #17]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d11e      	bne.n	8003676 <map_switch_network+0x176>
			switch_network->Relays[4].RelayState = GPIO_PIN_SET;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
			if(measurement_type == CAPACITANCE_VOLTAGE_2P || measurement_type == CAPACITANCE_VOLTAGE_3P || measurement_type == IMPEDANCE_SPECTROSCOPY_2P ){
 8003640:	7f7b      	ldrb	r3, [r7, #29]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d005      	beq.n	8003652 <map_switch_network+0x152>
 8003646:	7f7b      	ldrb	r3, [r7, #29]
 8003648:	2b07      	cmp	r3, #7
 800364a:	d002      	beq.n	8003652 <map_switch_network+0x152>
 800364c:	7f7b      	ldrb	r3, [r7, #29]
 800364e:	2b04      	cmp	r3, #4
 8003650:	d107      	bne.n	8003662 <map_switch_network+0x162>
				switch_network->Relays[22].RelayState = GPIO_PIN_SET;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
				switch_network->Relays[23].RelayState = GPIO_PIN_SET;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
			}
			if(measurement_type == TRANSFER_CHARACTERISTICS || measurement_type == OUTPUT_CHARACTERISTICS){
 8003662:	7f7b      	ldrb	r3, [r7, #29]
 8003664:	2b05      	cmp	r3, #5
 8003666:	d002      	beq.n	800366e <map_switch_network+0x16e>
 8003668:	7f7b      	ldrb	r3, [r7, #29]
 800366a:	2b06      	cmp	r3, #6
 800366c:	d103      	bne.n	8003676 <map_switch_network+0x176>
				switch_network->Relays[23].RelayState = GPIO_PIN_SET;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
	}
	// --------------------------------------------------------------------

	// --------------------------------------------------------------------
	// PROBE 2 CFG
	if(used_probes & 0x02){
 8003676:	7ebb      	ldrb	r3, [r7, #26]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d063      	beq.n	8003748 <map_switch_network+0x248>
		if(probe_2_cfg_src == 0){}
 8003680:	7d3b      	ldrb	r3, [r7, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d027      	beq.n	80036d6 <map_switch_network+0x1d6>
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_DCV || probe_2_cfg_src == DVC_PROBE_SUPPLY_ACV){
 8003686:	7d3b      	ldrb	r3, [r7, #20]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d002      	beq.n	8003692 <map_switch_network+0x192>
 800368c:	7d3b      	ldrb	r3, [r7, #20]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d10e      	bne.n	80036b0 <map_switch_network+0x1b0>
			if(!volt_src_1_used){
 8003692:	7ffb      	ldrb	r3, [r7, #31]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <map_switch_network+0x1a6>
				switch_network->Relays[5].RelayState = GPIO_PIN_SET;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
				volt_src_1_used = 1;
 80036a0:	2301      	movs	r3, #1
 80036a2:	77fb      	strb	r3, [r7, #31]
			if(!volt_src_1_used){
 80036a4:	e017      	b.n	80036d6 <map_switch_network+0x1d6>
			}
			else{
				switch_network->Relays[6].RelayState = GPIO_PIN_SET;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
			if(!volt_src_1_used){
 80036ae:	e012      	b.n	80036d6 <map_switch_network+0x1d6>
			}
		}
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_DCI){
 80036b0:	7d3b      	ldrb	r3, [r7, #20]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d104      	bne.n	80036c0 <map_switch_network+0x1c0>
			switch_network->Relays[7].RelayState = GPIO_PIN_SET;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
 80036be:	e00a      	b.n	80036d6 <map_switch_network+0x1d6>
		}
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_ACI){
 80036c0:	7d3b      	ldrb	r3, [r7, #20]
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d107      	bne.n	80036d6 <map_switch_network+0x1d6>
			switch_network->Relays[7].RelayState = GPIO_PIN_SET;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		}
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_GND){}

		if(probe_2_cfg_mon == 0){}
 80036d6:	7c3b      	ldrb	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d035      	beq.n	8003748 <map_switch_network+0x248>
		else if(probe_2_cfg_mon == DVC_PROBE_MEASURE_VOL){
 80036dc:	7c3b      	ldrb	r3, [r7, #16]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d110      	bne.n	8003704 <map_switch_network+0x204>
			if(adc_1_used){
 80036e2:	7fbb      	ldrb	r3, [r7, #30]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d006      	beq.n	80036f6 <map_switch_network+0x1f6>
				switch_network->Relays[18].RelayState = GPIO_PIN_SET;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				adc_2_used = 1;
 80036f0:	2301      	movs	r3, #1
 80036f2:	773b      	strb	r3, [r7, #28]
 80036f4:	e028      	b.n	8003748 <map_switch_network+0x248>
			}
			else{
				switch_network->Relays[17].RelayState = GPIO_PIN_SET;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
				adc_1_used = 1;
 80036fe:	2301      	movs	r3, #1
 8003700:	77bb      	strb	r3, [r7, #30]
 8003702:	e021      	b.n	8003748 <map_switch_network+0x248>
			}
		}
		else if(probe_2_cfg_mon == DVC_PROBE_MEASURE_CUR){
 8003704:	7c3b      	ldrb	r3, [r7, #16]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d11e      	bne.n	8003748 <map_switch_network+0x248>
			switch_network->Relays[8].RelayState = GPIO_PIN_SET;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
			if(measurement_type == CAPACITANCE_VOLTAGE_2P || measurement_type == CAPACITANCE_VOLTAGE_3P || measurement_type == IMPEDANCE_SPECTROSCOPY_2P ){
 8003712:	7f7b      	ldrb	r3, [r7, #29]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d005      	beq.n	8003724 <map_switch_network+0x224>
 8003718:	7f7b      	ldrb	r3, [r7, #29]
 800371a:	2b07      	cmp	r3, #7
 800371c:	d002      	beq.n	8003724 <map_switch_network+0x224>
 800371e:	7f7b      	ldrb	r3, [r7, #29]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d107      	bne.n	8003734 <map_switch_network+0x234>
				switch_network->Relays[22].RelayState = GPIO_PIN_SET;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
				switch_network->Relays[23].RelayState = GPIO_PIN_SET;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
			}
			if(measurement_type == TRANSFER_CHARACTERISTICS || measurement_type == OUTPUT_CHARACTERISTICS){
 8003734:	7f7b      	ldrb	r3, [r7, #29]
 8003736:	2b05      	cmp	r3, #5
 8003738:	d002      	beq.n	8003740 <map_switch_network+0x240>
 800373a:	7f7b      	ldrb	r3, [r7, #29]
 800373c:	2b06      	cmp	r3, #6
 800373e:	d103      	bne.n	8003748 <map_switch_network+0x248>
				switch_network->Relays[23].RelayState = GPIO_PIN_SET;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
	}
	// --------------------------------------------------------------------

	// --------------------------------------------------------------------
	// PROBE 3 CFG
	if(used_probes & 0x04){
 8003748:	7ebb      	ldrb	r3, [r7, #26]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d066      	beq.n	8003820 <map_switch_network+0x320>
		if(probe_3_cfg_src == 0){}
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d02a      	beq.n	80037ae <map_switch_network+0x2ae>
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_DCV || probe_3_cfg_src == DVC_PROBE_SUPPLY_ACV){
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d002      	beq.n	8003764 <map_switch_network+0x264>
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d10e      	bne.n	8003782 <map_switch_network+0x282>
			if(!volt_src_1_used){
 8003764:	7ffb      	ldrb	r3, [r7, #31]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <map_switch_network+0x278>
				switch_network->Relays[9].RelayState = GPIO_PIN_SET;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
				volt_src_1_used = 1;
 8003772:	2301      	movs	r3, #1
 8003774:	77fb      	strb	r3, [r7, #31]
			if(!volt_src_1_used){
 8003776:	e01a      	b.n	80037ae <map_switch_network+0x2ae>
			}
			else{
				switch_network->Relays[10].RelayState = GPIO_PIN_SET;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
			if(!volt_src_1_used){
 8003780:	e015      	b.n	80037ae <map_switch_network+0x2ae>
			}
		}
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_DCI){
 8003782:	7cfb      	ldrb	r3, [r7, #19]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d107      	bne.n	8003798 <map_switch_network+0x298>
			switch_network->Relays[11].RelayState = GPIO_PIN_SET;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8003790:	e00d      	b.n	80037ae <map_switch_network+0x2ae>
 8003792:	bf00      	nop
 8003794:	2000cadc 	.word	0x2000cadc
		}
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_ACI){
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	2b04      	cmp	r3, #4
 800379c:	d107      	bne.n	80037ae <map_switch_network+0x2ae>
			switch_network->Relays[11].RelayState = GPIO_PIN_SET;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		}
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_GND){}

		if(probe_3_cfg_mon == 0){}
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d035      	beq.n	8003820 <map_switch_network+0x320>
		else if(probe_3_cfg_mon == DVC_PROBE_MEASURE_VOL){
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d110      	bne.n	80037dc <map_switch_network+0x2dc>
			if(adc_1_used){
 80037ba:	7fbb      	ldrb	r3, [r7, #30]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <map_switch_network+0x2ce>
				switch_network->Relays[20].RelayState = GPIO_PIN_SET;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
				adc_2_used = 1;
 80037c8:	2301      	movs	r3, #1
 80037ca:	773b      	strb	r3, [r7, #28]
 80037cc:	e028      	b.n	8003820 <map_switch_network+0x320>
			}
			else{
				switch_network->Relays[19].RelayState = GPIO_PIN_SET;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
				adc_1_used = 1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	77bb      	strb	r3, [r7, #30]
 80037da:	e021      	b.n	8003820 <map_switch_network+0x320>
			}
		}
		else if(probe_3_cfg_mon == DVC_PROBE_MEASURE_CUR){
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d11e      	bne.n	8003820 <map_switch_network+0x320>
			switch_network->Relays[12].RelayState = GPIO_PIN_SET;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
			if(measurement_type == CAPACITANCE_VOLTAGE_2P || measurement_type == CAPACITANCE_VOLTAGE_3P || measurement_type == IMPEDANCE_SPECTROSCOPY_2P ){
 80037ea:	7f7b      	ldrb	r3, [r7, #29]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d005      	beq.n	80037fc <map_switch_network+0x2fc>
 80037f0:	7f7b      	ldrb	r3, [r7, #29]
 80037f2:	2b07      	cmp	r3, #7
 80037f4:	d002      	beq.n	80037fc <map_switch_network+0x2fc>
 80037f6:	7f7b      	ldrb	r3, [r7, #29]
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d107      	bne.n	800380c <map_switch_network+0x30c>
				switch_network->Relays[22].RelayState = GPIO_PIN_SET;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
				switch_network->Relays[23].RelayState = GPIO_PIN_SET;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
			}
			if(measurement_type == TRANSFER_CHARACTERISTICS || measurement_type == OUTPUT_CHARACTERISTICS){
 800380c:	7f7b      	ldrb	r3, [r7, #29]
 800380e:	2b05      	cmp	r3, #5
 8003810:	d002      	beq.n	8003818 <map_switch_network+0x318>
 8003812:	7f7b      	ldrb	r3, [r7, #29]
 8003814:	2b06      	cmp	r3, #6
 8003816:	d103      	bne.n	8003820 <map_switch_network+0x320>
				switch_network->Relays[23].RelayState = GPIO_PIN_SET;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
	}
	// --------------------------------------------------------------------

	// --------------------------------------------------------------------
	// PROBE 4 CFG
	if(used_probes & 0x08){
 8003820:	7ebb      	ldrb	r3, [r7, #26]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d06c      	beq.n	8003904 <map_switch_network+0x404>
		if(probe_4_cfg_src == 0){}
 800382a:	7cbb      	ldrb	r3, [r7, #18]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d027      	beq.n	8003880 <map_switch_network+0x380>
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_DCV || probe_4_cfg_src == DVC_PROBE_SUPPLY_ACV){
 8003830:	7cbb      	ldrb	r3, [r7, #18]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d002      	beq.n	800383c <map_switch_network+0x33c>
 8003836:	7cbb      	ldrb	r3, [r7, #18]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d10e      	bne.n	800385a <map_switch_network+0x35a>
			if(!volt_src_1_used){
 800383c:	7ffb      	ldrb	r3, [r7, #31]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <map_switch_network+0x350>
				switch_network->Relays[13].RelayState = GPIO_PIN_SET;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
				volt_src_1_used = 1;
 800384a:	2301      	movs	r3, #1
 800384c:	77fb      	strb	r3, [r7, #31]
			if(!volt_src_1_used){
 800384e:	e017      	b.n	8003880 <map_switch_network+0x380>
			}
			else{
				switch_network->Relays[14].RelayState = GPIO_PIN_SET;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
			if(!volt_src_1_used){
 8003858:	e012      	b.n	8003880 <map_switch_network+0x380>
			}
		}
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_DCI){
 800385a:	7cbb      	ldrb	r3, [r7, #18]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d104      	bne.n	800386a <map_switch_network+0x36a>
			switch_network->Relays[15].RelayState = GPIO_PIN_SET;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
 8003868:	e00a      	b.n	8003880 <map_switch_network+0x380>
		}
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_ACI){
 800386a:	7cbb      	ldrb	r3, [r7, #18]
 800386c:	2b04      	cmp	r3, #4
 800386e:	d107      	bne.n	8003880 <map_switch_network+0x380>
			switch_network->Relays[15].RelayState = GPIO_PIN_SET;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		}
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_GND){}

		if(probe_4_cfg_mon == 0){}
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03e      	beq.n	8003904 <map_switch_network+0x404>
		else if(probe_4_cfg_mon == DVC_PROBE_MEASURE_VOL){
 8003886:	7bbb      	ldrb	r3, [r7, #14]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d118      	bne.n	80038be <map_switch_network+0x3be>
			if(adc_1_used){
 800388c:	7fbb      	ldrb	r3, [r7, #30]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <map_switch_network+0x3a8>
				switch_network->Relays[20].RelayState = GPIO_PIN_SET;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
				switch_network->Relays[18].RelayState = GPIO_PIN_SET;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				adc_2_used = 1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	773b      	strb	r3, [r7, #28]
				switch_network->Relays[23].RelayState = GPIO_PIN_SET;
			}
		}
	}
	// --------------------------------------------------------------------
	return;
 80038a6:	e02d      	b.n	8003904 <map_switch_network+0x404>
				switch_network->Relays[19].RelayState = GPIO_PIN_SET;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
				switch_network->Relays[17].RelayState = GPIO_PIN_SET;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
				adc_1_used = 1;
 80038b8:	2301      	movs	r3, #1
 80038ba:	77bb      	strb	r3, [r7, #30]
	return;
 80038bc:	e022      	b.n	8003904 <map_switch_network+0x404>
		else if(probe_4_cfg_mon == DVC_PROBE_MEASURE_CUR){
 80038be:	7bbb      	ldrb	r3, [r7, #14]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d11f      	bne.n	8003904 <map_switch_network+0x404>
			switch_network->Relays[16].RelayState = GPIO_PIN_SET;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
			if(measurement_type == CAPACITANCE_VOLTAGE_2P || measurement_type == CAPACITANCE_VOLTAGE_3P || measurement_type == IMPEDANCE_SPECTROSCOPY_2P ){
 80038cc:	7f7b      	ldrb	r3, [r7, #29]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d005      	beq.n	80038de <map_switch_network+0x3de>
 80038d2:	7f7b      	ldrb	r3, [r7, #29]
 80038d4:	2b07      	cmp	r3, #7
 80038d6:	d002      	beq.n	80038de <map_switch_network+0x3de>
 80038d8:	7f7b      	ldrb	r3, [r7, #29]
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d107      	bne.n	80038ee <map_switch_network+0x3ee>
				switch_network->Relays[22].RelayState = GPIO_PIN_SET;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
				switch_network->Relays[23].RelayState = GPIO_PIN_SET;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
			if(measurement_type == TRANSFER_CHARACTERISTICS || measurement_type == OUTPUT_CHARACTERISTICS){
 80038ee:	7f7b      	ldrb	r3, [r7, #29]
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	d002      	beq.n	80038fa <map_switch_network+0x3fa>
 80038f4:	7f7b      	ldrb	r3, [r7, #29]
 80038f6:	2b06      	cmp	r3, #6
 80038f8:	d104      	bne.n	8003904 <map_switch_network+0x404>
				switch_network->Relays[23].RelayState = GPIO_PIN_SET;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
	return;
 8003902:	bf00      	nop
 8003904:	bf00      	nop
}
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003910:	4b12      	ldr	r3, [pc, #72]	@ (800395c <HAL_Init+0x50>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a11      	ldr	r2, [pc, #68]	@ (800395c <HAL_Init+0x50>)
 8003916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800391a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800391c:	2003      	movs	r0, #3
 800391e:	f000 f98c 	bl	8003c3a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003922:	f004 fab5 	bl	8007e90 <HAL_RCC_GetSysClockFreq>
 8003926:	4602      	mov	r2, r0
 8003928:	4b0d      	ldr	r3, [pc, #52]	@ (8003960 <HAL_Init+0x54>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	490c      	ldr	r1, [pc, #48]	@ (8003964 <HAL_Init+0x58>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
 8003938:	4a0b      	ldr	r2, [pc, #44]	@ (8003968 <HAL_Init+0x5c>)
 800393a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800393c:	2004      	movs	r0, #4
 800393e:	f000 f9d1 	bl	8003ce4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003942:	200f      	movs	r0, #15
 8003944:	f000 f812 	bl	800396c <HAL_InitTick>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e002      	b.n	8003958 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003952:	f7fd fd97 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40022000 	.word	0x40022000
 8003960:	46020c00 	.word	0x46020c00
 8003964:	0800fcc0 	.word	0x0800fcc0
 8003968:	20000000 	.word	0x20000000

0800396c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003978:	4b33      	ldr	r3, [pc, #204]	@ (8003a48 <HAL_InitTick+0xdc>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e05c      	b.n	8003a3e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003984:	4b31      	ldr	r3, [pc, #196]	@ (8003a4c <HAL_InitTick+0xe0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b04      	cmp	r3, #4
 800398e:	d10c      	bne.n	80039aa <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003990:	4b2f      	ldr	r3, [pc, #188]	@ (8003a50 <HAL_InitTick+0xe4>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b2c      	ldr	r3, [pc, #176]	@ (8003a48 <HAL_InitTick+0xdc>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800399e:	fbb3 f3f1 	udiv	r3, r3, r1
 80039a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e037      	b.n	8003a1a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80039aa:	f000 f9f3 	bl	8003d94 <HAL_SYSTICK_GetCLKSourceConfig>
 80039ae:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d023      	beq.n	80039fe <HAL_InitTick+0x92>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d82d      	bhi.n	8003a18 <HAL_InitTick+0xac>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_InitTick+0x5e>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d00d      	beq.n	80039e4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80039c8:	e026      	b.n	8003a18 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80039ca:	4b21      	ldr	r3, [pc, #132]	@ (8003a50 <HAL_InitTick+0xe4>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003a48 <HAL_InitTick+0xdc>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	4619      	mov	r1, r3
 80039d4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80039d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	60fb      	str	r3, [r7, #12]
        break;
 80039e2:	e01a      	b.n	8003a1a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80039e4:	4b18      	ldr	r3, [pc, #96]	@ (8003a48 <HAL_InitTick+0xdc>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80039f2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	60fb      	str	r3, [r7, #12]
        break;
 80039fc:	e00d      	b.n	8003a1a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80039fe:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <HAL_InitTick+0xdc>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a0c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	60fb      	str	r3, [r7, #12]
        break;
 8003a16:	e000      	b.n	8003a1a <HAL_InitTick+0xae>
        break;
 8003a18:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f940 	bl	8003ca0 <HAL_SYSTICK_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e009      	b.n	8003a3e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a32:	f000 f90d 	bl	8003c50 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003a36:	4a07      	ldr	r2, [pc, #28]	@ (8003a54 <HAL_InitTick+0xe8>)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	2000007c 	.word	0x2000007c
 8003a4c:	e000e010 	.word	0xe000e010
 8003a50:	20000000 	.word	0x20000000
 8003a54:	20000078 	.word	0x20000078

08003a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a5c:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <HAL_IncTick+0x20>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <HAL_IncTick+0x24>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4413      	add	r3, r2
 8003a68:	4a04      	ldr	r2, [pc, #16]	@ (8003a7c <HAL_IncTick+0x24>)
 8003a6a:	6013      	str	r3, [r2, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	2000007c 	.word	0x2000007c
 8003a7c:	2000d000 	.word	0x2000d000

08003a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return uwTick;
 8003a84:	4b03      	ldr	r3, [pc, #12]	@ (8003a94 <HAL_GetTick+0x14>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	2000d000 	.word	0x2000d000

08003a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aa0:	f7ff ffee 	bl	8003a80 <HAL_GetTick>
 8003aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d005      	beq.n	8003abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <HAL_Delay+0x44>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003abe:	bf00      	nop
 8003ac0:	f7ff ffde 	bl	8003a80 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d8f7      	bhi.n	8003ac0 <HAL_Delay+0x28>
  {
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	2000007c 	.word	0x2000007c

08003ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003afc:	4013      	ands	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b12:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	60d3      	str	r3, [r2, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b2c:	4b04      	ldr	r3, [pc, #16]	@ (8003b40 <__NVIC_GetPriorityGrouping+0x18>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	f003 0307 	and.w	r3, r3, #7
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	db0b      	blt.n	8003b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	4907      	ldr	r1, [pc, #28]	@ (8003b7c <__NVIC_EnableIRQ+0x38>)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2001      	movs	r0, #1
 8003b66:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000e100 	.word	0xe000e100

08003b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	6039      	str	r1, [r7, #0]
 8003b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	db0a      	blt.n	8003baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	490c      	ldr	r1, [pc, #48]	@ (8003bcc <__NVIC_SetPriority+0x4c>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	0112      	lsls	r2, r2, #4
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba8:	e00a      	b.n	8003bc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4908      	ldr	r1, [pc, #32]	@ (8003bd0 <__NVIC_SetPriority+0x50>)
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	3b04      	subs	r3, #4
 8003bb8:	0112      	lsls	r2, r2, #4
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	761a      	strb	r2, [r3, #24]
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	e000e100 	.word	0xe000e100
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	@ 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f1c3 0307 	rsb	r3, r3, #7
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	bf28      	it	cs
 8003bf2:	2304      	movcs	r3, #4
 8003bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2b06      	cmp	r3, #6
 8003bfc:	d902      	bls.n	8003c04 <NVIC_EncodePriority+0x30>
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3b03      	subs	r3, #3
 8003c02:	e000      	b.n	8003c06 <NVIC_EncodePriority+0x32>
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	401a      	ands	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	43d9      	mvns	r1, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	4313      	orrs	r3, r2
         );
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3724      	adds	r7, #36	@ 0x24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff ff4c 	bl	8003ae0 <__NVIC_SetPriorityGrouping>
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c5e:	f7ff ff63 	bl	8003b28 <__NVIC_GetPriorityGrouping>
 8003c62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	6978      	ldr	r0, [r7, #20]
 8003c6a:	f7ff ffb3 	bl	8003bd4 <NVIC_EncodePriority>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff ff82 	bl	8003b80 <__NVIC_SetPriority>
}
 8003c7c:	bf00      	nop
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ff56 	bl	8003b44 <__NVIC_EnableIRQ>
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cb0:	d301      	bcc.n	8003cb6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e00d      	b.n	8003cd2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce0 <HAL_SYSTICK_Config+0x40>)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003cbe:	4b08      	ldr	r3, [pc, #32]	@ (8003ce0 <HAL_SYSTICK_Config+0x40>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003cc4:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <HAL_SYSTICK_Config+0x40>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a05      	ldr	r2, [pc, #20]	@ (8003ce0 <HAL_SYSTICK_Config+0x40>)
 8003cca:	f043 0303 	orr.w	r3, r3, #3
 8003cce:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	e000e010 	.word	0xe000e010

08003ce4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d844      	bhi.n	8003d7c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf8:	08003d1b 	.word	0x08003d1b
 8003cfc:	08003d39 	.word	0x08003d39
 8003d00:	08003d5b 	.word	0x08003d5b
 8003d04:	08003d7d 	.word	0x08003d7d
 8003d08:	08003d0d 	.word	0x08003d0d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d8c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1e      	ldr	r2, [pc, #120]	@ (8003d8c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	6013      	str	r3, [r2, #0]
      break;
 8003d18:	e031      	b.n	8003d7e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d8c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d8c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003d26:	4b1a      	ldr	r3, [pc, #104]	@ (8003d90 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d2c:	4a18      	ldr	r2, [pc, #96]	@ (8003d90 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d2e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003d32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003d36:	e022      	b.n	8003d7e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003d38:	4b14      	ldr	r3, [pc, #80]	@ (8003d8c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	@ (8003d8c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d3e:	f023 0304 	bic.w	r3, r3, #4
 8003d42:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003d44:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d4a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003d4e:	4a10      	ldr	r2, [pc, #64]	@ (8003d90 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003d58:	e011      	b.n	8003d7e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a0b      	ldr	r2, [pc, #44]	@ (8003d8c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d6c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003d70:	4a07      	ldr	r2, [pc, #28]	@ (8003d90 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003d7a:	e000      	b.n	8003d7e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003d7c:	bf00      	nop
  }
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	e000e010 	.word	0xe000e010
 8003d90:	46020c00 	.word	0x46020c00

08003d94 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003d9a:	4b19      	ldr	r3, [pc, #100]	@ (8003e00 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003da6:	2304      	movs	r3, #4
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	e021      	b.n	8003df0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8003dac:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8003dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003db2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003db6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dbe:	d011      	beq.n	8003de4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dc6:	d810      	bhi.n	8003dea <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd4:	d003      	beq.n	8003dde <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003dd6:	e008      	b.n	8003dea <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	607b      	str	r3, [r7, #4]
        break;
 8003ddc:	e008      	b.n	8003df0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003dde:	2301      	movs	r3, #1
 8003de0:	607b      	str	r3, [r7, #4]
        break;
 8003de2:	e005      	b.n	8003df0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003de4:	2302      	movs	r3, #2
 8003de6:	607b      	str	r3, [r7, #4]
        break;
 8003de8:	e002      	b.n	8003df0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003dea:	2300      	movs	r3, #0
 8003dec:	607b      	str	r3, [r7, #4]
        break;
 8003dee:	bf00      	nop
    }
  }
  return systick_source;
 8003df0:	687b      	ldr	r3, [r7, #4]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000e010 	.word	0xe000e010
 8003e04:	46020c00 	.word	0x46020c00

08003e08 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003e10:	f7ff fe36 	bl	8003a80 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0db      	b.n	8003fd8 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe0 <HAL_DMA_Init+0x1d8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f000 809f 	beq.w	8003f6a <HAL_DMA_Init+0x162>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6c      	ldr	r2, [pc, #432]	@ (8003fe4 <HAL_DMA_Init+0x1dc>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	f000 8099 	beq.w	8003f6a <HAL_DMA_Init+0x162>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003fe8 <HAL_DMA_Init+0x1e0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	f000 8093 	beq.w	8003f6a <HAL_DMA_Init+0x162>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a68      	ldr	r2, [pc, #416]	@ (8003fec <HAL_DMA_Init+0x1e4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	f000 808d 	beq.w	8003f6a <HAL_DMA_Init+0x162>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a66      	ldr	r2, [pc, #408]	@ (8003ff0 <HAL_DMA_Init+0x1e8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	f000 8087 	beq.w	8003f6a <HAL_DMA_Init+0x162>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a64      	ldr	r2, [pc, #400]	@ (8003ff4 <HAL_DMA_Init+0x1ec>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	f000 8081 	beq.w	8003f6a <HAL_DMA_Init+0x162>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a62      	ldr	r2, [pc, #392]	@ (8003ff8 <HAL_DMA_Init+0x1f0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d07b      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a61      	ldr	r2, [pc, #388]	@ (8003ffc <HAL_DMA_Init+0x1f4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d076      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a5f      	ldr	r2, [pc, #380]	@ (8004000 <HAL_DMA_Init+0x1f8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d071      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8004004 <HAL_DMA_Init+0x1fc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d06c      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a5c      	ldr	r2, [pc, #368]	@ (8004008 <HAL_DMA_Init+0x200>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d067      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800400c <HAL_DMA_Init+0x204>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d062      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a59      	ldr	r2, [pc, #356]	@ (8004010 <HAL_DMA_Init+0x208>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d05d      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a58      	ldr	r2, [pc, #352]	@ (8004014 <HAL_DMA_Init+0x20c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d058      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a56      	ldr	r2, [pc, #344]	@ (8004018 <HAL_DMA_Init+0x210>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d053      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a55      	ldr	r2, [pc, #340]	@ (800401c <HAL_DMA_Init+0x214>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d04e      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a53      	ldr	r2, [pc, #332]	@ (8004020 <HAL_DMA_Init+0x218>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d049      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a52      	ldr	r2, [pc, #328]	@ (8004024 <HAL_DMA_Init+0x21c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d044      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a50      	ldr	r2, [pc, #320]	@ (8004028 <HAL_DMA_Init+0x220>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d03f      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a4f      	ldr	r2, [pc, #316]	@ (800402c <HAL_DMA_Init+0x224>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d03a      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a4d      	ldr	r2, [pc, #308]	@ (8004030 <HAL_DMA_Init+0x228>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d035      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a4c      	ldr	r2, [pc, #304]	@ (8004034 <HAL_DMA_Init+0x22c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d030      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a4a      	ldr	r2, [pc, #296]	@ (8004038 <HAL_DMA_Init+0x230>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d02b      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a49      	ldr	r2, [pc, #292]	@ (800403c <HAL_DMA_Init+0x234>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d026      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a47      	ldr	r2, [pc, #284]	@ (8004040 <HAL_DMA_Init+0x238>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d021      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a46      	ldr	r2, [pc, #280]	@ (8004044 <HAL_DMA_Init+0x23c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d01c      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a44      	ldr	r2, [pc, #272]	@ (8004048 <HAL_DMA_Init+0x240>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d017      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a43      	ldr	r2, [pc, #268]	@ (800404c <HAL_DMA_Init+0x244>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d012      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a41      	ldr	r2, [pc, #260]	@ (8004050 <HAL_DMA_Init+0x248>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00d      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a40      	ldr	r2, [pc, #256]	@ (8004054 <HAL_DMA_Init+0x24c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d008      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a3e      	ldr	r2, [pc, #248]	@ (8004058 <HAL_DMA_Init+0x250>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <HAL_DMA_Init+0x162>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a3d      	ldr	r2, [pc, #244]	@ (800405c <HAL_DMA_Init+0x254>)
 8003f68:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0206 	orr.w	r2, r2, #6
 8003f88:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003f8a:	e00f      	b.n	8003fac <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003f8c:	f7ff fd78 	bl	8003a80 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d908      	bls.n	8003fac <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e015      	b.n	8003fd8 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e8      	bne.n	8003f8c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fa72 	bl	80044a4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40020050 	.word	0x40020050
 8003fe4:	50020050 	.word	0x50020050
 8003fe8:	400200d0 	.word	0x400200d0
 8003fec:	500200d0 	.word	0x500200d0
 8003ff0:	40020150 	.word	0x40020150
 8003ff4:	50020150 	.word	0x50020150
 8003ff8:	400201d0 	.word	0x400201d0
 8003ffc:	500201d0 	.word	0x500201d0
 8004000:	40020250 	.word	0x40020250
 8004004:	50020250 	.word	0x50020250
 8004008:	400202d0 	.word	0x400202d0
 800400c:	500202d0 	.word	0x500202d0
 8004010:	40020350 	.word	0x40020350
 8004014:	50020350 	.word	0x50020350
 8004018:	400203d0 	.word	0x400203d0
 800401c:	500203d0 	.word	0x500203d0
 8004020:	40020450 	.word	0x40020450
 8004024:	50020450 	.word	0x50020450
 8004028:	400204d0 	.word	0x400204d0
 800402c:	500204d0 	.word	0x500204d0
 8004030:	40020550 	.word	0x40020550
 8004034:	50020550 	.word	0x50020550
 8004038:	400205d0 	.word	0x400205d0
 800403c:	500205d0 	.word	0x500205d0
 8004040:	40020650 	.word	0x40020650
 8004044:	50020650 	.word	0x50020650
 8004048:	400206d0 	.word	0x400206d0
 800404c:	500206d0 	.word	0x500206d0
 8004050:	40020750 	.word	0x40020750
 8004054:	50020750 	.word	0x50020750
 8004058:	400207d0 	.word	0x400207d0
 800405c:	500207d0 	.word	0x500207d0

08004060 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e04f      	b.n	8004118 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_DMA_Start_IT+0x26>
 8004082:	2302      	movs	r3, #2
 8004084:	e048      	b.n	8004118 <HAL_DMA_Start_IT+0xb8>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d136      	bne.n	8004108 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2202      	movs	r2, #2
 800409e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f9d3 	bl	800445a <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80040c2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040da:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040f2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e007      	b.n	8004118 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2240      	movs	r2, #64	@ 0x40
 800410c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004130:	f023 030f 	bic.w	r3, r3, #15
 8004134:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413e:	3b50      	subs	r3, #80	@ 0x50
 8004140:	09db      	lsrs	r3, r3, #7
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	2201      	movs	r2, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 813b 	beq.w	80043d6 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416a:	2b00      	cmp	r3, #0
 800416c:	d011      	beq.n	8004192 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004184:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418a:	f043 0201 	orr.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800419c:	2b00      	cmp	r3, #0
 800419e:	d011      	beq.n	80041c4 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041b6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041bc:	f043 0202 	orr.w	r2, r3, #2
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d011      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80041e8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ee:	f043 0204 	orr.w	r2, r3, #4
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d011      	beq.n	8004228 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800421a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004220:	f043 0208 	orr.w	r2, r3, #8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004232:	2b00      	cmp	r3, #0
 8004234:	d013      	beq.n	800425e <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00c      	beq.n	800425e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800424c:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d04c      	beq.n	8004306 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d045      	beq.n	8004306 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004282:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b04      	cmp	r3, #4
 800428e:	d12e      	bne.n	80042ee <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800429e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0202 	orr.w	r2, r2, #2
 80042ae:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c8:	2201      	movs	r2, #1
 80042ca:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2200      	movs	r2, #0
 80042d2:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d07a      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
        }

        return;
 80042ec:	e075      	b.n	80043da <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2205      	movs	r2, #5
 80042f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d039      	beq.n	8004388 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d032      	beq.n	8004388 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800432a:	2b00      	cmp	r3, #0
 800432c:	d012      	beq.n	8004354 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d116      	bne.n	8004366 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433e:	2b00      	cmp	r3, #0
 8004340:	d111      	bne.n	8004366 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800434e:	2201      	movs	r2, #1
 8004350:	731a      	strb	r2, [r3, #12]
 8004352:	e008      	b.n	8004366 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800436e:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438c:	2b00      	cmp	r3, #0
 800438e:	d025      	beq.n	80043dc <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0202 	orr.w	r2, r2, #2
 800439e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b8:	2201      	movs	r2, #1
 80043ba:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d007      	beq.n	80043dc <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
 80043d4:	e002      	b.n	80043dc <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <HAL_DMA_IRQHandler+0x2bc>
        return;
 80043da:	bf00      	nop
    }
  }
}
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e02b      	b.n	800444e <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80043fe:	f023 030f 	bic.w	r3, r3, #15
 8004402:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800440c:	3b50      	subs	r3, #80	@ 0x50
 800440e:	09db      	lsrs	r3, r3, #7
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2201      	movs	r2, #1
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b00      	cmp	r3, #0
 8004424:	d012      	beq.n	800444c <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	f003 0311 	and.w	r3, r3, #17
 800442c:	2b11      	cmp	r3, #17
 800442e:	d106      	bne.n	800443e <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	431a      	orrs	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	e006      	b.n	800444c <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	43db      	mvns	r3, r3
 8004446:	401a      	ands	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800445a:	b480      	push	{r7}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	b291      	uxth	r1, r2
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	430b      	orrs	r3, r1
 800447c:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004486:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a53      	ldr	r2, [pc, #332]	@ (8004630 <DMA_Init+0x18c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	f000 80a0 	beq.w	800462a <DMA_Init+0x186>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a51      	ldr	r2, [pc, #324]	@ (8004634 <DMA_Init+0x190>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	f000 809a 	beq.w	800462a <DMA_Init+0x186>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a4f      	ldr	r2, [pc, #316]	@ (8004638 <DMA_Init+0x194>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	f000 8094 	beq.w	800462a <DMA_Init+0x186>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a4d      	ldr	r2, [pc, #308]	@ (800463c <DMA_Init+0x198>)
 8004508:	4293      	cmp	r3, r2
 800450a:	f000 808e 	beq.w	800462a <DMA_Init+0x186>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a4b      	ldr	r2, [pc, #300]	@ (8004640 <DMA_Init+0x19c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	f000 8088 	beq.w	800462a <DMA_Init+0x186>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a49      	ldr	r2, [pc, #292]	@ (8004644 <DMA_Init+0x1a0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	f000 8082 	beq.w	800462a <DMA_Init+0x186>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a47      	ldr	r2, [pc, #284]	@ (8004648 <DMA_Init+0x1a4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d07c      	beq.n	800462a <DMA_Init+0x186>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a45      	ldr	r2, [pc, #276]	@ (800464c <DMA_Init+0x1a8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d077      	beq.n	800462a <DMA_Init+0x186>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a44      	ldr	r2, [pc, #272]	@ (8004650 <DMA_Init+0x1ac>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d072      	beq.n	800462a <DMA_Init+0x186>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a42      	ldr	r2, [pc, #264]	@ (8004654 <DMA_Init+0x1b0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d06d      	beq.n	800462a <DMA_Init+0x186>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a41      	ldr	r2, [pc, #260]	@ (8004658 <DMA_Init+0x1b4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d068      	beq.n	800462a <DMA_Init+0x186>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a3f      	ldr	r2, [pc, #252]	@ (800465c <DMA_Init+0x1b8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d063      	beq.n	800462a <DMA_Init+0x186>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a3e      	ldr	r2, [pc, #248]	@ (8004660 <DMA_Init+0x1bc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d05e      	beq.n	800462a <DMA_Init+0x186>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a3c      	ldr	r2, [pc, #240]	@ (8004664 <DMA_Init+0x1c0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d059      	beq.n	800462a <DMA_Init+0x186>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a3b      	ldr	r2, [pc, #236]	@ (8004668 <DMA_Init+0x1c4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d054      	beq.n	800462a <DMA_Init+0x186>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a39      	ldr	r2, [pc, #228]	@ (800466c <DMA_Init+0x1c8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d04f      	beq.n	800462a <DMA_Init+0x186>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a38      	ldr	r2, [pc, #224]	@ (8004670 <DMA_Init+0x1cc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d04a      	beq.n	800462a <DMA_Init+0x186>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a36      	ldr	r2, [pc, #216]	@ (8004674 <DMA_Init+0x1d0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d045      	beq.n	800462a <DMA_Init+0x186>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a35      	ldr	r2, [pc, #212]	@ (8004678 <DMA_Init+0x1d4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d040      	beq.n	800462a <DMA_Init+0x186>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a33      	ldr	r2, [pc, #204]	@ (800467c <DMA_Init+0x1d8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d03b      	beq.n	800462a <DMA_Init+0x186>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a32      	ldr	r2, [pc, #200]	@ (8004680 <DMA_Init+0x1dc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d036      	beq.n	800462a <DMA_Init+0x186>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a30      	ldr	r2, [pc, #192]	@ (8004684 <DMA_Init+0x1e0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d031      	beq.n	800462a <DMA_Init+0x186>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004688 <DMA_Init+0x1e4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d02c      	beq.n	800462a <DMA_Init+0x186>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2d      	ldr	r2, [pc, #180]	@ (800468c <DMA_Init+0x1e8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d027      	beq.n	800462a <DMA_Init+0x186>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a2c      	ldr	r2, [pc, #176]	@ (8004690 <DMA_Init+0x1ec>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d022      	beq.n	800462a <DMA_Init+0x186>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004694 <DMA_Init+0x1f0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01d      	beq.n	800462a <DMA_Init+0x186>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a29      	ldr	r2, [pc, #164]	@ (8004698 <DMA_Init+0x1f4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d018      	beq.n	800462a <DMA_Init+0x186>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a27      	ldr	r2, [pc, #156]	@ (800469c <DMA_Init+0x1f8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <DMA_Init+0x186>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a26      	ldr	r2, [pc, #152]	@ (80046a0 <DMA_Init+0x1fc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00e      	beq.n	800462a <DMA_Init+0x186>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a24      	ldr	r2, [pc, #144]	@ (80046a4 <DMA_Init+0x200>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d009      	beq.n	800462a <DMA_Init+0x186>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a23      	ldr	r2, [pc, #140]	@ (80046a8 <DMA_Init+0x204>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <DMA_Init+0x186>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a21      	ldr	r2, [pc, #132]	@ (80046ac <DMA_Init+0x208>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d142      	bne.n	80046b0 <DMA_Init+0x20c>
 800462a:	2301      	movs	r3, #1
 800462c:	e041      	b.n	80046b2 <DMA_Init+0x20e>
 800462e:	bf00      	nop
 8004630:	40020050 	.word	0x40020050
 8004634:	50020050 	.word	0x50020050
 8004638:	400200d0 	.word	0x400200d0
 800463c:	500200d0 	.word	0x500200d0
 8004640:	40020150 	.word	0x40020150
 8004644:	50020150 	.word	0x50020150
 8004648:	400201d0 	.word	0x400201d0
 800464c:	500201d0 	.word	0x500201d0
 8004650:	40020250 	.word	0x40020250
 8004654:	50020250 	.word	0x50020250
 8004658:	400202d0 	.word	0x400202d0
 800465c:	500202d0 	.word	0x500202d0
 8004660:	40020350 	.word	0x40020350
 8004664:	50020350 	.word	0x50020350
 8004668:	400203d0 	.word	0x400203d0
 800466c:	500203d0 	.word	0x500203d0
 8004670:	40020450 	.word	0x40020450
 8004674:	50020450 	.word	0x50020450
 8004678:	400204d0 	.word	0x400204d0
 800467c:	500204d0 	.word	0x500204d0
 8004680:	40020550 	.word	0x40020550
 8004684:	50020550 	.word	0x50020550
 8004688:	400205d0 	.word	0x400205d0
 800468c:	500205d0 	.word	0x500205d0
 8004690:	40020650 	.word	0x40020650
 8004694:	50020650 	.word	0x50020650
 8004698:	400206d0 	.word	0x400206d0
 800469c:	500206d0 	.word	0x500206d0
 80046a0:	40020750 	.word	0x40020750
 80046a4:	50020750 	.word	0x50020750
 80046a8:	400207d0 	.word	0x400207d0
 80046ac:	500207d0 	.word	0x500207d0
 80046b0:	2300      	movs	r3, #0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d012      	beq.n	80046dc <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	3b01      	subs	r3, #1
 80046c0:	051b      	lsls	r3, r3, #20
 80046c2:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80046c6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	3b01      	subs	r3, #1
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80046d4:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470e:	f040 80b0 	bne.w	8004872 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a82      	ldr	r2, [pc, #520]	@ (8004920 <DMA_Init+0x47c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	f000 80a0 	beq.w	800485e <DMA_Init+0x3ba>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a80      	ldr	r2, [pc, #512]	@ (8004924 <DMA_Init+0x480>)
 8004724:	4293      	cmp	r3, r2
 8004726:	f000 809a 	beq.w	800485e <DMA_Init+0x3ba>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a7e      	ldr	r2, [pc, #504]	@ (8004928 <DMA_Init+0x484>)
 8004730:	4293      	cmp	r3, r2
 8004732:	f000 8094 	beq.w	800485e <DMA_Init+0x3ba>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a7c      	ldr	r2, [pc, #496]	@ (800492c <DMA_Init+0x488>)
 800473c:	4293      	cmp	r3, r2
 800473e:	f000 808e 	beq.w	800485e <DMA_Init+0x3ba>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7a      	ldr	r2, [pc, #488]	@ (8004930 <DMA_Init+0x48c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	f000 8088 	beq.w	800485e <DMA_Init+0x3ba>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a78      	ldr	r2, [pc, #480]	@ (8004934 <DMA_Init+0x490>)
 8004754:	4293      	cmp	r3, r2
 8004756:	f000 8082 	beq.w	800485e <DMA_Init+0x3ba>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a76      	ldr	r2, [pc, #472]	@ (8004938 <DMA_Init+0x494>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d07c      	beq.n	800485e <DMA_Init+0x3ba>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a74      	ldr	r2, [pc, #464]	@ (800493c <DMA_Init+0x498>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d077      	beq.n	800485e <DMA_Init+0x3ba>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a73      	ldr	r2, [pc, #460]	@ (8004940 <DMA_Init+0x49c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d072      	beq.n	800485e <DMA_Init+0x3ba>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a71      	ldr	r2, [pc, #452]	@ (8004944 <DMA_Init+0x4a0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d06d      	beq.n	800485e <DMA_Init+0x3ba>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a70      	ldr	r2, [pc, #448]	@ (8004948 <DMA_Init+0x4a4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d068      	beq.n	800485e <DMA_Init+0x3ba>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6e      	ldr	r2, [pc, #440]	@ (800494c <DMA_Init+0x4a8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d063      	beq.n	800485e <DMA_Init+0x3ba>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a6d      	ldr	r2, [pc, #436]	@ (8004950 <DMA_Init+0x4ac>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d05e      	beq.n	800485e <DMA_Init+0x3ba>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004954 <DMA_Init+0x4b0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d059      	beq.n	800485e <DMA_Init+0x3ba>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a6a      	ldr	r2, [pc, #424]	@ (8004958 <DMA_Init+0x4b4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d054      	beq.n	800485e <DMA_Init+0x3ba>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a68      	ldr	r2, [pc, #416]	@ (800495c <DMA_Init+0x4b8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d04f      	beq.n	800485e <DMA_Init+0x3ba>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a67      	ldr	r2, [pc, #412]	@ (8004960 <DMA_Init+0x4bc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d04a      	beq.n	800485e <DMA_Init+0x3ba>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a65      	ldr	r2, [pc, #404]	@ (8004964 <DMA_Init+0x4c0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d045      	beq.n	800485e <DMA_Init+0x3ba>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a64      	ldr	r2, [pc, #400]	@ (8004968 <DMA_Init+0x4c4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d040      	beq.n	800485e <DMA_Init+0x3ba>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a62      	ldr	r2, [pc, #392]	@ (800496c <DMA_Init+0x4c8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d03b      	beq.n	800485e <DMA_Init+0x3ba>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a61      	ldr	r2, [pc, #388]	@ (8004970 <DMA_Init+0x4cc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d036      	beq.n	800485e <DMA_Init+0x3ba>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a5f      	ldr	r2, [pc, #380]	@ (8004974 <DMA_Init+0x4d0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d031      	beq.n	800485e <DMA_Init+0x3ba>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004978 <DMA_Init+0x4d4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d02c      	beq.n	800485e <DMA_Init+0x3ba>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a5c      	ldr	r2, [pc, #368]	@ (800497c <DMA_Init+0x4d8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d027      	beq.n	800485e <DMA_Init+0x3ba>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a5b      	ldr	r2, [pc, #364]	@ (8004980 <DMA_Init+0x4dc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <DMA_Init+0x3ba>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a59      	ldr	r2, [pc, #356]	@ (8004984 <DMA_Init+0x4e0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01d      	beq.n	800485e <DMA_Init+0x3ba>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a58      	ldr	r2, [pc, #352]	@ (8004988 <DMA_Init+0x4e4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <DMA_Init+0x3ba>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a56      	ldr	r2, [pc, #344]	@ (800498c <DMA_Init+0x4e8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <DMA_Init+0x3ba>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a55      	ldr	r2, [pc, #340]	@ (8004990 <DMA_Init+0x4ec>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <DMA_Init+0x3ba>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a53      	ldr	r2, [pc, #332]	@ (8004994 <DMA_Init+0x4f0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <DMA_Init+0x3ba>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a52      	ldr	r2, [pc, #328]	@ (8004998 <DMA_Init+0x4f4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <DMA_Init+0x3ba>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a50      	ldr	r2, [pc, #320]	@ (800499c <DMA_Init+0x4f8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d101      	bne.n	8004862 <DMA_Init+0x3be>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <DMA_Init+0x3c0>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00d      	beq.n	8004884 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	e008      	b.n	8004884 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800487a:	d103      	bne.n	8004884 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004882:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800488a:	4b45      	ldr	r3, [pc, #276]	@ (80049a0 <DMA_Init+0x4fc>)
 800488c:	4013      	ands	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	430b      	orrs	r3, r1
 8004896:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2200      	movs	r2, #0
 800489e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a36      	ldr	r2, [pc, #216]	@ (8004980 <DMA_Init+0x4dc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d022      	beq.n	80048f0 <DMA_Init+0x44c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a35      	ldr	r2, [pc, #212]	@ (8004984 <DMA_Init+0x4e0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d01d      	beq.n	80048f0 <DMA_Init+0x44c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a33      	ldr	r2, [pc, #204]	@ (8004988 <DMA_Init+0x4e4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <DMA_Init+0x44c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a32      	ldr	r2, [pc, #200]	@ (800498c <DMA_Init+0x4e8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <DMA_Init+0x44c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a30      	ldr	r2, [pc, #192]	@ (8004990 <DMA_Init+0x4ec>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <DMA_Init+0x44c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004994 <DMA_Init+0x4f0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <DMA_Init+0x44c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004998 <DMA_Init+0x4f4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <DMA_Init+0x44c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2c      	ldr	r2, [pc, #176]	@ (800499c <DMA_Init+0x4f8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d101      	bne.n	80048f4 <DMA_Init+0x450>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <DMA_Init+0x452>
 80048f4:	2300      	movs	r3, #0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2200      	movs	r2, #0
 8004910:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004912:	bf00      	nop
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40020050 	.word	0x40020050
 8004924:	50020050 	.word	0x50020050
 8004928:	400200d0 	.word	0x400200d0
 800492c:	500200d0 	.word	0x500200d0
 8004930:	40020150 	.word	0x40020150
 8004934:	50020150 	.word	0x50020150
 8004938:	400201d0 	.word	0x400201d0
 800493c:	500201d0 	.word	0x500201d0
 8004940:	40020250 	.word	0x40020250
 8004944:	50020250 	.word	0x50020250
 8004948:	400202d0 	.word	0x400202d0
 800494c:	500202d0 	.word	0x500202d0
 8004950:	40020350 	.word	0x40020350
 8004954:	50020350 	.word	0x50020350
 8004958:	400203d0 	.word	0x400203d0
 800495c:	500203d0 	.word	0x500203d0
 8004960:	40020450 	.word	0x40020450
 8004964:	50020450 	.word	0x50020450
 8004968:	400204d0 	.word	0x400204d0
 800496c:	500204d0 	.word	0x500204d0
 8004970:	40020550 	.word	0x40020550
 8004974:	50020550 	.word	0x50020550
 8004978:	400205d0 	.word	0x400205d0
 800497c:	500205d0 	.word	0x500205d0
 8004980:	40020650 	.word	0x40020650
 8004984:	50020650 	.word	0x50020650
 8004988:	400206d0 	.word	0x400206d0
 800498c:	500206d0 	.word	0x500206d0
 8004990:	40020750 	.word	0x40020750
 8004994:	50020750 	.word	0x50020750
 8004998:	400207d0 	.word	0x400207d0
 800499c:	500207d0 	.word	0x500207d0
 80049a0:	3cc03180 	.word	0x3cc03180

080049a4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b089      	sub	sp, #36	@ 0x24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80049b6:	e1ba      	b.n	8004d2e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2101      	movs	r1, #1
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	4013      	ands	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 81aa 	beq.w	8004d28 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a55      	ldr	r2, [pc, #340]	@ (8004b2c <HAL_GPIO_Init+0x188>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d15d      	bne.n	8004a98 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80049e2:	2201      	movs	r2, #1
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43db      	mvns	r3, r3
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	4013      	ands	r3, r2
 80049f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 0201 	and.w	r2, r3, #1
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004a0c:	4a48      	ldr	r2, [pc, #288]	@ (8004b30 <HAL_GPIO_Init+0x18c>)
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a14:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004a16:	4a46      	ldr	r2, [pc, #280]	@ (8004b30 <HAL_GPIO_Init+0x18c>)
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	08da      	lsrs	r2, r3, #3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	3208      	adds	r2, #8
 8004a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a2e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	220f      	movs	r2, #15
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	220b      	movs	r2, #11
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	08da      	lsrs	r2, r3, #3
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	3208      	adds	r2, #8
 8004a62:	69f9      	ldr	r1, [r7, #28]
 8004a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	2203      	movs	r2, #3
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	2202      	movs	r2, #2
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e067      	b.n	8004b68 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_Init+0x104>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b12      	cmp	r3, #18
 8004aa6:	d145      	bne.n	8004b34 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	08da      	lsrs	r2, r3, #3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3208      	adds	r2, #8
 8004ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	220f      	movs	r2, #15
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 020f 	and.w	r2, r3, #15
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	08da      	lsrs	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3208      	adds	r2, #8
 8004aee:	69f9      	ldr	r1, [r7, #28]
 8004af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	2203      	movs	r2, #3
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 0203 	and.w	r2, r3, #3
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e01e      	b.n	8004b68 <HAL_GPIO_Init+0x1c4>
 8004b2a:	bf00      	nop
 8004b2c:	46020000 	.word	0x46020000
 8004b30:	0800fd10 	.word	0x0800fd10
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	2203      	movs	r2, #3
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0203 	and.w	r2, r3, #3
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d00b      	beq.n	8004b88 <HAL_GPIO_Init+0x1e4>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d007      	beq.n	8004b88 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b7c:	2b11      	cmp	r3, #17
 8004b7e:	d003      	beq.n	8004b88 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b12      	cmp	r3, #18
 8004b86:	d130      	bne.n	8004bea <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	2203      	movs	r2, #3
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	091b      	lsrs	r3, r3, #4
 8004bd4:	f003 0201 	and.w	r2, r3, #1
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d017      	beq.n	8004c22 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d07c      	beq.n	8004d28 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004c2e:	4a47      	ldr	r2, [pc, #284]	@ (8004d4c <HAL_GPIO_Init+0x3a8>)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	089b      	lsrs	r3, r3, #2
 8004c34:	3318      	adds	r3, #24
 8004c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	220f      	movs	r2, #15
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	0a9a      	lsrs	r2, r3, #10
 8004c56:	4b3e      	ldr	r3, [pc, #248]	@ (8004d50 <HAL_GPIO_Init+0x3ac>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	f002 0203 	and.w	r2, r2, #3
 8004c60:	00d2      	lsls	r2, r2, #3
 8004c62:	4093      	lsls	r3, r2
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004c6a:	4938      	ldr	r1, [pc, #224]	@ (8004d4c <HAL_GPIO_Init+0x3a8>)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	089b      	lsrs	r3, r3, #2
 8004c70:	3318      	adds	r3, #24
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004c78:	4b34      	ldr	r3, [pc, #208]	@ (8004d4c <HAL_GPIO_Init+0x3a8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8004d4c <HAL_GPIO_Init+0x3a8>)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d4c <HAL_GPIO_Init+0x3a8>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004cc6:	4a21      	ldr	r2, [pc, #132]	@ (8004d4c <HAL_GPIO_Init+0x3a8>)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d4c <HAL_GPIO_Init+0x3a8>)
 8004cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cd2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004cf2:	4a16      	ldr	r2, [pc, #88]	@ (8004d4c <HAL_GPIO_Init+0x3a8>)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004cfa:	4b14      	ldr	r3, [pc, #80]	@ (8004d4c <HAL_GPIO_Init+0x3a8>)
 8004cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d00:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004d20:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <HAL_GPIO_Init+0x3a8>)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f47f ae3d 	bne.w	80049b8 <HAL_GPIO_Init+0x14>
  }
}
 8004d3e:	bf00      	nop
 8004d40:	bf00      	nop
 8004d42:	3724      	adds	r7, #36	@ 0x24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	46022000 	.word	0x46022000
 8004d50:	002f7f7f 	.word	0x002f7f7f

08004d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	807b      	strh	r3, [r7, #2]
 8004d60:	4613      	mov	r3, r2
 8004d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d64:	787b      	ldrb	r3, [r7, #1]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d6a:	887a      	ldrh	r2, [r7, #2]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004d70:	e002      	b.n	8004d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004d72:	887a      	ldrh	r2, [r7, #2]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e08d      	b.n	8004eb2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc fb86 	bl	80014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2224      	movs	r2, #36	@ 0x24
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004dd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004de4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d107      	bne.n	8004dfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	e006      	b.n	8004e0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d108      	bne.n	8004e26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e22:	605a      	str	r2, [r3, #4]
 8004e24:	e007      	b.n	8004e36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69d9      	ldr	r1, [r3, #28]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	460b      	mov	r3, r1
 8004eca:	817b      	strh	r3, [r7, #10]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	f040 80da 	bne.w	8005092 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_I2C_Master_Transmit+0x30>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e0d3      	b.n	8005094 <HAL_I2C_Master_Transmit+0x1d8>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ef4:	f7fe fdc4 	bl	8003a80 <HAL_GetTick>
 8004ef8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	2319      	movs	r3, #25
 8004f00:	2201      	movs	r2, #1
 8004f02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f8f0 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e0be      	b.n	8005094 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2221      	movs	r2, #33	@ 0x21
 8004f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2210      	movs	r2, #16
 8004f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	893a      	ldrh	r2, [r7, #8]
 8004f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2bff      	cmp	r3, #255	@ 0xff
 8004f46:	d90e      	bls.n	8004f66 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	22ff      	movs	r2, #255	@ 0xff
 8004f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	8979      	ldrh	r1, [r7, #10]
 8004f56:	4b51      	ldr	r3, [pc, #324]	@ (800509c <HAL_I2C_Master_Transmit+0x1e0>)
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fa88 	bl	8005474 <I2C_TransferConfig>
 8004f64:	e06c      	b.n	8005040 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	8979      	ldrh	r1, [r7, #10]
 8004f78:	4b48      	ldr	r3, [pc, #288]	@ (800509c <HAL_I2C_Master_Transmit+0x1e0>)
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fa77 	bl	8005474 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004f86:	e05b      	b.n	8005040 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	6a39      	ldr	r1, [r7, #32]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f906 	bl	800519e <I2C_WaitOnTXISFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e07b      	b.n	8005094 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	781a      	ldrb	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d034      	beq.n	8005040 <HAL_I2C_Master_Transmit+0x184>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d130      	bne.n	8005040 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2180      	movs	r1, #128	@ 0x80
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f87f 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e04d      	b.n	8005094 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2bff      	cmp	r3, #255	@ 0xff
 8005000:	d90e      	bls.n	8005020 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	22ff      	movs	r2, #255	@ 0xff
 8005006:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500c:	b2da      	uxtb	r2, r3
 800500e:	8979      	ldrh	r1, [r7, #10]
 8005010:	2300      	movs	r3, #0
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fa2b 	bl	8005474 <I2C_TransferConfig>
 800501e:	e00f      	b.n	8005040 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502e:	b2da      	uxtb	r2, r3
 8005030:	8979      	ldrh	r1, [r7, #10]
 8005032:	2300      	movs	r3, #0
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 fa1a 	bl	8005474 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d19e      	bne.n	8004f88 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	6a39      	ldr	r1, [r7, #32]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f8ec 	bl	800522c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e01a      	b.n	8005094 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2220      	movs	r2, #32
 8005064:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6859      	ldr	r1, [r3, #4]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	4b0b      	ldr	r3, [pc, #44]	@ (80050a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8005072:	400b      	ands	r3, r1
 8005074:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	e000      	b.n	8005094 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005092:	2302      	movs	r3, #2
  }
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	80002000 	.word	0x80002000
 80050a0:	fe00e800 	.word	0xfe00e800

080050a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d103      	bne.n	80050c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d007      	beq.n	80050e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	619a      	str	r2, [r3, #24]
  }
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050fc:	e03b      	b.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f8d6 	bl	80052b4 <I2C_IsErrorOccurred>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e041      	b.n	8005196 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d02d      	beq.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511a:	f7fe fcb1 	bl	8003a80 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <I2C_WaitOnFlagUntilTimeout+0x44>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d122      	bne.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4013      	ands	r3, r2
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	bf0c      	ite	eq
 8005140:	2301      	moveq	r3, #1
 8005142:	2300      	movne	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	429a      	cmp	r2, r3
 800514c:	d113      	bne.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e00f      	b.n	8005196 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4013      	ands	r3, r2
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	429a      	cmp	r2, r3
 8005184:	bf0c      	ite	eq
 8005186:	2301      	moveq	r3, #1
 8005188:	2300      	movne	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	429a      	cmp	r2, r3
 8005192:	d0b4      	beq.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051aa:	e033      	b.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f87f 	bl	80052b4 <I2C_IsErrorOccurred>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e031      	b.n	8005224 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d025      	beq.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c8:	f7fe fc5a 	bl	8003a80 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d302      	bcc.n	80051de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d11a      	bne.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d013      	beq.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f0:	f043 0220 	orr.w	r2, r3, #32
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e007      	b.n	8005224 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b02      	cmp	r3, #2
 8005220:	d1c4      	bne.n	80051ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005238:	e02f      	b.n	800529a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f838 	bl	80052b4 <I2C_IsErrorOccurred>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e02d      	b.n	80052aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524e:	f7fe fc17 	bl	8003a80 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	429a      	cmp	r2, r3
 800525c:	d302      	bcc.n	8005264 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d11a      	bne.n	800529a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b20      	cmp	r3, #32
 8005270:	d013      	beq.n	800529a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	f043 0220 	orr.w	r2, r3, #32
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e007      	b.n	80052aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d1c8      	bne.n	800523a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	@ 0x28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d068      	beq.n	80053b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2210      	movs	r2, #16
 80052e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052e8:	e049      	b.n	800537e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d045      	beq.n	800537e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052f2:	f7fe fbc5 	bl	8003a80 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <I2C_IsErrorOccurred+0x54>
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d13a      	bne.n	800537e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005312:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800531a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800532a:	d121      	bne.n	8005370 <I2C_IsErrorOccurred+0xbc>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005332:	d01d      	beq.n	8005370 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005334:	7cfb      	ldrb	r3, [r7, #19]
 8005336:	2b20      	cmp	r3, #32
 8005338:	d01a      	beq.n	8005370 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005348:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800534a:	f7fe fb99 	bl	8003a80 <HAL_GetTick>
 800534e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005350:	e00e      	b.n	8005370 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005352:	f7fe fb95 	bl	8003a80 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b19      	cmp	r3, #25
 800535e:	d907      	bls.n	8005370 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	f043 0320 	orr.w	r3, r3, #32
 8005366:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800536e:	e006      	b.n	800537e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b20      	cmp	r3, #32
 800537c:	d1e9      	bne.n	8005352 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b20      	cmp	r3, #32
 800538a:	d003      	beq.n	8005394 <I2C_IsErrorOccurred+0xe0>
 800538c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0aa      	beq.n	80052ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005398:	2b00      	cmp	r3, #0
 800539a:	d103      	bne.n	80053a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2220      	movs	r2, #32
 80053a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	f043 0304 	orr.w	r3, r3, #4
 80053aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00b      	beq.n	80053dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	f043 0308 	orr.w	r3, r3, #8
 80053ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00b      	beq.n	8005420 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	f043 0302 	orr.w	r3, r3, #2
 800540e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005418:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005420:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01c      	beq.n	8005462 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f7ff fe3b 	bl	80050a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6859      	ldr	r1, [r3, #4]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <I2C_IsErrorOccurred+0x1bc>)
 800543a:	400b      	ands	r3, r1
 800543c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	431a      	orrs	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005462:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005466:	4618      	mov	r0, r3
 8005468:	3728      	adds	r7, #40	@ 0x28
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	fe00e800 	.word	0xfe00e800

08005474 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	817b      	strh	r3, [r7, #10]
 8005482:	4613      	mov	r3, r2
 8005484:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005486:	897b      	ldrh	r3, [r7, #10]
 8005488:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800548c:	7a7b      	ldrb	r3, [r7, #9]
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005494:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	4313      	orrs	r3, r2
 800549e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054a2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	0d5b      	lsrs	r3, r3, #21
 80054ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80054b2:	4b08      	ldr	r3, [pc, #32]	@ (80054d4 <I2C_TransferConfig+0x60>)
 80054b4:	430b      	orrs	r3, r1
 80054b6:	43db      	mvns	r3, r3
 80054b8:	ea02 0103 	and.w	r1, r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	03ff63ff 	.word	0x03ff63ff

080054d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d138      	bne.n	8005560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e032      	b.n	8005562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2224      	movs	r2, #36	@ 0x24
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800552a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6819      	ldr	r1, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	e000      	b.n	8005562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
  }
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b20      	cmp	r3, #32
 8005582:	d139      	bne.n	80055f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800558e:	2302      	movs	r3, #2
 8005590:	e033      	b.n	80055fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2224      	movs	r2, #36	@ 0x24
 800559e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80055c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e000      	b.n	80055fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055f8:	2302      	movs	r3, #2
  }
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005614:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	73fb      	strb	r3, [r7, #15]
 8005624:	e007      	b.n	8005636 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005626:	4b07      	ldr	r3, [pc, #28]	@ (8005644 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 0204 	bic.w	r2, r3, #4
 800562e:	4905      	ldr	r1, [pc, #20]	@ (8005644 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005636:	7bfb      	ldrb	r3, [r7, #15]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	40030400 	.word	0x40030400

08005648 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800564c:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <HAL_ICACHE_Enable+0x1c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a04      	ldr	r2, [pc, #16]	@ (8005664 <HAL_ICACHE_Enable+0x1c>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40030400 	.word	0x40030400

08005668 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af02      	add	r7, sp, #8
 800566e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e108      	b.n	800588c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fc f9e9 	bl	8001a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2203      	movs	r2, #3
 800569e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4a7b      	ldr	r2, [pc, #492]	@ (8005894 <HAL_PCD_Init+0x22c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d102      	bne.n	80056b0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f005 ff2a 	bl	800b50e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	7c1a      	ldrb	r2, [r3, #16]
 80056c2:	f88d 2000 	strb.w	r2, [sp]
 80056c6:	3304      	adds	r3, #4
 80056c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056ca:	f005 fe3f 	bl	800b34c <USB_CoreInit>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0d5      	b.n	800588c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f005 ff22 	bl	800b530 <USB_SetCurrentMode>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e0c6      	b.n	800588c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
 8005702:	e04a      	b.n	800579a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005704:	7bfa      	ldrb	r2, [r7, #15]
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	3315      	adds	r3, #21
 8005714:	2201      	movs	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005718:	7bfa      	ldrb	r2, [r7, #15]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	3314      	adds	r3, #20
 8005728:	7bfa      	ldrb	r2, [r7, #15]
 800572a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800572c:	7bfa      	ldrb	r2, [r7, #15]
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	b298      	uxth	r0, r3
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	332e      	adds	r3, #46	@ 0x2e
 8005740:	4602      	mov	r2, r0
 8005742:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005744:	7bfa      	ldrb	r2, [r7, #15]
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	3318      	adds	r3, #24
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005758:	7bfa      	ldrb	r2, [r7, #15]
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	331c      	adds	r3, #28
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800576c:	7bfa      	ldrb	r2, [r7, #15]
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	3320      	adds	r3, #32
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005780:	7bfa      	ldrb	r2, [r7, #15]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	3324      	adds	r3, #36	@ 0x24
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	3301      	adds	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	791b      	ldrb	r3, [r3, #4]
 800579e:	7bfa      	ldrb	r2, [r7, #15]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d3af      	bcc.n	8005704 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057a4:	2300      	movs	r3, #0
 80057a6:	73fb      	strb	r3, [r7, #15]
 80057a8:	e044      	b.n	8005834 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057aa:	7bfa      	ldrb	r2, [r7, #15]
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057c0:	7bfa      	ldrb	r2, [r7, #15]
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	4613      	mov	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80057d2:	7bfa      	ldrb	r2, [r7, #15]
 80057d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057d6:	7bfa      	ldrb	r2, [r7, #15]
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057ec:	7bfa      	ldrb	r2, [r7, #15]
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005802:	7bfa      	ldrb	r2, [r7, #15]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005818:	7bfa      	ldrb	r2, [r7, #15]
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	3301      	adds	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	791b      	ldrb	r3, [r3, #4]
 8005838:	7bfa      	ldrb	r2, [r7, #15]
 800583a:	429a      	cmp	r2, r3
 800583c:	d3b5      	bcc.n	80057aa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	7c1a      	ldrb	r2, [r3, #16]
 8005846:	f88d 2000 	strb.w	r2, [sp]
 800584a:	3304      	adds	r3, #4
 800584c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800584e:	f005 febb 	bl	800b5c8 <USB_DevInit>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e013      	b.n	800588c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	7b1b      	ldrb	r3, [r3, #12]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d102      	bne.n	8005880 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 f96a 	bl	8006b54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4618      	mov	r0, r3
 8005886:	f006 fee6 	bl	800c656 <USB_DevDisconnect>

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	42040000 	.word	0x42040000

08005898 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_PCD_Start+0x1c>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e01c      	b.n	80058ee <HAL_PCD_Start+0x56>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7b5b      	ldrb	r3, [r3, #13]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d105      	bne.n	80058d0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f005 fe09 	bl	800b4ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f006 fe98 	bl	800c614 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058f6:	b590      	push	{r4, r7, lr}
 80058f8:	b08d      	sub	sp, #52	@ 0x34
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f006 ff56 	bl	800c7be <USB_GetMode>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	f040 84b9 	bne.w	800628c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f006 feba 	bl	800c698 <USB_ReadInterrupts>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 84af 	beq.w	800628a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	0a1b      	lsrs	r3, r3, #8
 8005936:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f006 fea7 	bl	800c698 <USB_ReadInterrupts>
 800594a:	4603      	mov	r3, r0
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d107      	bne.n	8005964 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695a      	ldr	r2, [r3, #20]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f002 0202 	and.w	r2, r2, #2
 8005962:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f006 fe95 	bl	800c698 <USB_ReadInterrupts>
 800596e:	4603      	mov	r3, r0
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	2b10      	cmp	r3, #16
 8005976:	d161      	bne.n	8005a3c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0210 	bic.w	r2, r2, #16
 8005986:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	f003 020f 	and.w	r2, r3, #15
 8005994:	4613      	mov	r3, r2
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	4413      	add	r3, r2
 80059a4:	3304      	adds	r3, #4
 80059a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	0c5b      	lsrs	r3, r3, #17
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d124      	bne.n	80059fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d035      	beq.n	8005a2c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	091b      	lsrs	r3, r3, #4
 80059c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	461a      	mov	r2, r3
 80059d2:	6a38      	ldr	r0, [r7, #32]
 80059d4:	f006 fccc 	bl	800c370 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	091b      	lsrs	r3, r3, #4
 80059e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059e4:	441a      	add	r2, r3
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059f6:	441a      	add	r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	615a      	str	r2, [r3, #20]
 80059fc:	e016      	b.n	8005a2c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	0c5b      	lsrs	r3, r3, #17
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	2b06      	cmp	r3, #6
 8005a08:	d110      	bne.n	8005a2c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a10:	2208      	movs	r2, #8
 8005a12:	4619      	mov	r1, r3
 8005a14:	6a38      	ldr	r0, [r7, #32]
 8005a16:	f006 fcab 	bl	800c370 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a26:	441a      	add	r2, r3
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0210 	orr.w	r2, r2, #16
 8005a3a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f006 fe29 	bl	800c698 <USB_ReadInterrupts>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a50:	f040 80a7 	bne.w	8005ba2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f006 fe2e 	bl	800c6be <USB_ReadDevAllOutEpInterrupt>
 8005a62:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005a64:	e099      	b.n	8005b9a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 808e 	beq.w	8005b8e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f006 fe52 	bl	800c726 <USB_ReadDevOutEPInterrupt>
 8005a82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00c      	beq.n	8005aa8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005aa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fed0 	bl	8006848 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00c      	beq.n	8005acc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005ac4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 ffa6 	bl	8006a18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d030      	beq.n	8005b54 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afa:	2b80      	cmp	r3, #128	@ 0x80
 8005afc:	d109      	bne.n	8005b12 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b10:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b14:	4613      	mov	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	4413      	add	r3, r2
 8005b24:	3304      	adds	r3, #4
 8005b26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	78db      	ldrb	r3, [r3, #3]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d108      	bne.n	8005b42 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2200      	movs	r2, #0
 8005b34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f007 fa1b 	bl	800cf78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4e:	461a      	mov	r2, r3
 8005b50:	2302      	movs	r3, #2
 8005b52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d008      	beq.n	8005b70 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b86:	461a      	mov	r2, r3
 8005b88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	3301      	adds	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f47f af62 	bne.w	8005a66 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f006 fd76 	bl	800c698 <USB_ReadInterrupts>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bb6:	f040 80db 	bne.w	8005d70 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f006 fd97 	bl	800c6f2 <USB_ReadDevAllInEpInterrupt>
 8005bc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005bca:	e0cd      	b.n	8005d68 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80c2 	beq.w	8005d5c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	4611      	mov	r1, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f006 fdbd 	bl	800c762 <USB_ReadDevInEPInterrupt>
 8005be8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d057      	beq.n	8005ca4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	69f9      	ldr	r1, [r7, #28]
 8005c10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c14:	4013      	ands	r3, r2
 8005c16:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c24:	461a      	mov	r2, r3
 8005c26:	2301      	movs	r3, #1
 8005c28:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	799b      	ldrb	r3, [r3, #6]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d132      	bne.n	8005c98 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c36:	4613      	mov	r3, r2
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	4413      	add	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	3320      	adds	r3, #32
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c48:	4613      	mov	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4403      	add	r3, r0
 8005c52:	331c      	adds	r3, #28
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4419      	add	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4403      	add	r3, r0
 8005c66:	3320      	adds	r3, #32
 8005c68:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d113      	bne.n	8005c98 <HAL_PCD_IRQHandler+0x3a2>
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c74:	4613      	mov	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	3324      	adds	r3, #36	@ 0x24
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c90:	461a      	mov	r2, r3
 8005c92:	2101      	movs	r1, #1
 8005c94:	f006 fdc4 	bl	800c820 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f007 f8ee 	bl	800ce80 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d008      	beq.n	8005cc0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cba:	461a      	mov	r2, r3
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d008      	beq.n	8005cdc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	2310      	movs	r3, #16
 8005cda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d008      	beq.n	8005cf8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	2340      	movs	r3, #64	@ 0x40
 8005cf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d023      	beq.n	8005d4a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d04:	6a38      	ldr	r0, [r7, #32]
 8005d06:	f005 fdab 	bl	800b860 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	3310      	adds	r3, #16
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4413      	add	r3, r2
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	78db      	ldrb	r3, [r3, #3]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d108      	bne.n	8005d38 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f007 f932 	bl	800cf9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d44:	461a      	mov	r2, r3
 8005d46:	2302      	movs	r3, #2
 8005d48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fcea 	bl	8006730 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	3301      	adds	r3, #1
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f47f af2e 	bne.w	8005bcc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f006 fc8f 	bl	800c698 <USB_ReadInterrupts>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d84:	d122      	bne.n	8005dcc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d94:	f023 0301 	bic.w	r3, r3, #1
 8005d98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d108      	bne.n	8005db6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005dac:	2100      	movs	r1, #0
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f007 fab2 	bl	800d318 <HAL_PCDEx_LPM_Callback>
 8005db4:	e002      	b.n	8005dbc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f007 f8c2 	bl	800cf40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695a      	ldr	r2, [r3, #20]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f006 fc61 	bl	800c698 <USB_ReadInterrupts>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005de0:	d112      	bne.n	8005e08 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d102      	bne.n	8005df8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f007 f88a 	bl	800cf0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f006 fc43 	bl	800c698 <USB_ReadInterrupts>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e1c:	d121      	bne.n	8005e62 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005e2c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d111      	bne.n	8005e5c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e46:	089b      	lsrs	r3, r3, #2
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e52:	2101      	movs	r1, #1
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f007 fa5f 	bl	800d318 <HAL_PCDEx_LPM_Callback>
 8005e5a:	e002      	b.n	8005e62 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f007 f855 	bl	800cf0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f006 fc16 	bl	800c698 <USB_ReadInterrupts>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e76:	f040 80b7 	bne.w	8005fe8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2110      	movs	r1, #16
 8005e94:	4618      	mov	r0, r3
 8005e96:	f005 fce3 	bl	800b860 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e9e:	e046      	b.n	8005f2e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eac:	461a      	mov	r2, r3
 8005eae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005eb2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ece:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ed2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ee6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	791b      	ldrb	r3, [r3, #4]
 8005f32:	461a      	mov	r2, r3
 8005f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d3b2      	bcc.n	8005ea0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f48:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005f4c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	7bdb      	ldrb	r3, [r3, #15]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f66:	f043 030b 	orr.w	r3, r3, #11
 8005f6a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f7c:	f043 030b 	orr.w	r3, r3, #11
 8005f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f82:	e015      	b.n	8005fb0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005f96:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005f9a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005faa:	f043 030b 	orr.w	r3, r3, #11
 8005fae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fbe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005fc2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f006 fc24 	bl	800c820 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f006 fb53 	bl	800c698 <USB_ReadInterrupts>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ffc:	d123      	bne.n	8006046 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f006 fbe9 	bl	800c7da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4618      	mov	r0, r3
 800600e:	f005 fca0 	bl	800b952 <USB_GetDevSpeed>
 8006012:	4603      	mov	r3, r0
 8006014:	461a      	mov	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681c      	ldr	r4, [r3, #0]
 800601e:	f002 f839 	bl	8008094 <HAL_RCC_GetHCLKFreq>
 8006022:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006028:	461a      	mov	r2, r3
 800602a:	4620      	mov	r0, r4
 800602c:	f005 f9bc 	bl	800b3a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f006 ff4d 	bl	800ced0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006044:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f006 fb24 	bl	800c698 <USB_ReadInterrupts>
 8006050:	4603      	mov	r3, r0
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b08      	cmp	r3, #8
 8006058:	d10a      	bne.n	8006070 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f006 ff2a 	bl	800ceb4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695a      	ldr	r2, [r3, #20]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f002 0208 	and.w	r2, r2, #8
 800606e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f006 fb0f 	bl	800c698 <USB_ReadInterrupts>
 800607a:	4603      	mov	r3, r0
 800607c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006080:	2b80      	cmp	r3, #128	@ 0x80
 8006082:	d123      	bne.n	80060cc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006090:	2301      	movs	r3, #1
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
 8006094:	e014      	b.n	80060c0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609a:	4613      	mov	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d105      	bne.n	80060ba <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fb0a 	bl	80066ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	3301      	adds	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	791b      	ldrb	r3, [r3, #4]
 80060c4:	461a      	mov	r2, r3
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d3e4      	bcc.n	8006096 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f006 fae1 	bl	800c698 <USB_ReadInterrupts>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e0:	d13c      	bne.n	800615c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060e2:	2301      	movs	r3, #1
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e6:	e02b      	b.n	8006140 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060fc:	4613      	mov	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	3318      	adds	r3, #24
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d115      	bne.n	800613a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800610e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006110:	2b00      	cmp	r3, #0
 8006112:	da12      	bge.n	800613a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006118:	4613      	mov	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	3317      	adds	r3, #23
 8006124:	2201      	movs	r2, #1
 8006126:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006130:	b2db      	uxtb	r3, r3
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 faca 	bl	80066ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	3301      	adds	r3, #1
 800613e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	791b      	ldrb	r3, [r3, #4]
 8006144:	461a      	mov	r2, r3
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	4293      	cmp	r3, r2
 800614a:	d3cd      	bcc.n	80060e8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695a      	ldr	r2, [r3, #20]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800615a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f006 fa99 	bl	800c698 <USB_ReadInterrupts>
 8006166:	4603      	mov	r3, r0
 8006168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800616c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006170:	d156      	bne.n	8006220 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006172:	2301      	movs	r3, #1
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24
 8006176:	e045      	b.n	8006204 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618c:	4613      	mov	r3, r2
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d12e      	bne.n	80061fe <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da2b      	bge.n	80061fe <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	0c1a      	lsrs	r2, r3, #16
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80061b0:	4053      	eors	r3, r2
 80061b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d121      	bne.n	80061fe <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061be:	4613      	mov	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	440b      	add	r3, r1
 80061c8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80061cc:	2201      	movs	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061fa:	6053      	str	r3, [r2, #4]
            break;
 80061fc:	e008      	b.n	8006210 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	3301      	adds	r3, #1
 8006202:	627b      	str	r3, [r7, #36]	@ 0x24
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	791b      	ldrb	r3, [r3, #4]
 8006208:	461a      	mov	r2, r3
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	4293      	cmp	r3, r2
 800620e:	d3b3      	bcc.n	8006178 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695a      	ldr	r2, [r3, #20]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800621e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f006 fa37 	bl	800c698 <USB_ReadInterrupts>
 800622a:	4603      	mov	r3, r0
 800622c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006234:	d10a      	bne.n	800624c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f006 fec2 	bl	800cfc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695a      	ldr	r2, [r3, #20]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800624a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f006 fa21 	bl	800c698 <USB_ReadInterrupts>
 8006256:	4603      	mov	r3, r0
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b04      	cmp	r3, #4
 800625e:	d115      	bne.n	800628c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f006 feb2 	bl	800cfdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6859      	ldr	r1, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	e000      	b.n	800628c <HAL_PCD_IRQHandler+0x996>
      return;
 800628a:	bf00      	nop
    }
  }
}
 800628c:	3734      	adds	r7, #52	@ 0x34
 800628e:	46bd      	mov	sp, r7
 8006290:	bd90      	pop	{r4, r7, pc}

08006292 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_PCD_SetAddress+0x1a>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e012      	b.n	80062d2 <HAL_PCD_SetAddress+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	78fa      	ldrb	r2, [r7, #3]
 80062b8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	78fa      	ldrb	r2, [r7, #3]
 80062c0:	4611      	mov	r1, r2
 80062c2:	4618      	mov	r0, r3
 80062c4:	f006 f980 	bl	800c5c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	4608      	mov	r0, r1
 80062e4:	4611      	mov	r1, r2
 80062e6:	461a      	mov	r2, r3
 80062e8:	4603      	mov	r3, r0
 80062ea:	70fb      	strb	r3, [r7, #3]
 80062ec:	460b      	mov	r3, r1
 80062ee:	803b      	strh	r3, [r7, #0]
 80062f0:	4613      	mov	r3, r2
 80062f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	da0f      	bge.n	8006320 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	f003 020f 	and.w	r2, r3, #15
 8006306:	4613      	mov	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	3310      	adds	r3, #16
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	4413      	add	r3, r2
 8006314:	3304      	adds	r3, #4
 8006316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	705a      	strb	r2, [r3, #1]
 800631e:	e00f      	b.n	8006340 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	f003 020f 	and.w	r2, r3, #15
 8006326:	4613      	mov	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	4413      	add	r3, r2
 8006336:	3304      	adds	r3, #4
 8006338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	b2da      	uxtb	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800634c:	883b      	ldrh	r3, [r7, #0]
 800634e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	78ba      	ldrb	r2, [r7, #2]
 800635a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	785b      	ldrb	r3, [r3, #1]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	461a      	mov	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800636e:	78bb      	ldrb	r3, [r7, #2]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d102      	bne.n	800637a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_PCD_EP_Open+0xae>
 8006384:	2302      	movs	r3, #2
 8006386:	e00e      	b.n	80063a6 <HAL_PCD_EP_Open+0xcc>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68f9      	ldr	r1, [r7, #12]
 8006396:	4618      	mov	r0, r3
 8006398:	f005 fb00 	bl	800b99c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80063a4:	7afb      	ldrb	r3, [r7, #11]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	da0f      	bge.n	80063e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	f003 020f 	and.w	r2, r3, #15
 80063c8:	4613      	mov	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	3310      	adds	r3, #16
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	4413      	add	r3, r2
 80063d6:	3304      	adds	r3, #4
 80063d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2201      	movs	r2, #1
 80063de:	705a      	strb	r2, [r3, #1]
 80063e0:	e00f      	b.n	8006402 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 020f 	and.w	r2, r3, #15
 80063e8:	4613      	mov	r3, r2
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	3304      	adds	r3, #4
 80063fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	b2da      	uxtb	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_PCD_EP_Close+0x6e>
 8006418:	2302      	movs	r3, #2
 800641a:	e00e      	b.n	800643a <HAL_PCD_EP_Close+0x8c>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68f9      	ldr	r1, [r7, #12]
 800642a:	4618      	mov	r0, r3
 800642c:	f005 fb3e 	bl	800baac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b086      	sub	sp, #24
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
 800644e:	460b      	mov	r3, r1
 8006450:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	f003 020f 	and.w	r2, r3, #15
 8006458:	4613      	mov	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	3304      	adds	r3, #4
 800646a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2200      	movs	r2, #0
 800647c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2200      	movs	r2, #0
 8006482:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	b2da      	uxtb	r2, r3
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	799b      	ldrb	r3, [r3, #6]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d102      	bne.n	800649e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	799b      	ldrb	r3, [r3, #6]
 80064a6:	461a      	mov	r2, r3
 80064a8:	6979      	ldr	r1, [r7, #20]
 80064aa:	f005 fbdb 	bl	800bc64 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	f003 020f 	and.w	r2, r3, #15
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80064da:	681b      	ldr	r3, [r3, #0]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	607a      	str	r2, [r7, #4]
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	460b      	mov	r3, r1
 80064f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064f8:	7afb      	ldrb	r3, [r7, #11]
 80064fa:	f003 020f 	and.w	r2, r3, #15
 80064fe:	4613      	mov	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	3310      	adds	r3, #16
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	3304      	adds	r3, #4
 800650e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2201      	movs	r2, #1
 8006526:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006528:	7afb      	ldrb	r3, [r7, #11]
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	b2da      	uxtb	r2, r3
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	799b      	ldrb	r3, [r3, #6]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d102      	bne.n	8006542 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	799b      	ldrb	r3, [r3, #6]
 800654a:	461a      	mov	r2, r3
 800654c:	6979      	ldr	r1, [r7, #20]
 800654e:	f005 fb89 	bl	800bc64 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	7912      	ldrb	r2, [r2, #4]
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e04f      	b.n	800661a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800657a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800657e:	2b00      	cmp	r3, #0
 8006580:	da0f      	bge.n	80065a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	f003 020f 	and.w	r2, r3, #15
 8006588:	4613      	mov	r3, r2
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	3310      	adds	r3, #16
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	4413      	add	r3, r2
 8006596:	3304      	adds	r3, #4
 8006598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	705a      	strb	r2, [r3, #1]
 80065a0:	e00d      	b.n	80065be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80065a2:	78fa      	ldrb	r2, [r7, #3]
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4413      	add	r3, r2
 80065b4:	3304      	adds	r3, #4
 80065b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_PCD_EP_SetStall+0x82>
 80065da:	2302      	movs	r3, #2
 80065dc:	e01d      	b.n	800661a <HAL_PCD_EP_SetStall+0xbe>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68f9      	ldr	r1, [r7, #12]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f005 ff17 	bl	800c420 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	7999      	ldrb	r1, [r3, #6]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800660a:	461a      	mov	r2, r3
 800660c:	f006 f908 	bl	800c820 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	7912      	ldrb	r2, [r2, #4]
 8006638:	4293      	cmp	r3, r2
 800663a:	d901      	bls.n	8006640 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e042      	b.n	80066c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006644:	2b00      	cmp	r3, #0
 8006646:	da0f      	bge.n	8006668 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	f003 020f 	and.w	r2, r3, #15
 800664e:	4613      	mov	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	3310      	adds	r3, #16
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	4413      	add	r3, r2
 800665c:	3304      	adds	r3, #4
 800665e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	705a      	strb	r2, [r3, #1]
 8006666:	e00f      	b.n	8006688 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	f003 020f 	and.w	r2, r3, #15
 800666e:	4613      	mov	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	4413      	add	r3, r2
 800667e:	3304      	adds	r3, #4
 8006680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_PCD_EP_ClrStall+0x86>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e00e      	b.n	80066c6 <HAL_PCD_EP_ClrStall+0xa4>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68f9      	ldr	r1, [r7, #12]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f005 ff20 	bl	800c4fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80066da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da0c      	bge.n	80066fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	f003 020f 	and.w	r2, r3, #15
 80066e8:	4613      	mov	r3, r2
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	3310      	adds	r3, #16
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4413      	add	r3, r2
 80066f6:	3304      	adds	r3, #4
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	e00c      	b.n	8006716 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	f003 020f 	and.w	r2, r3, #15
 8006702:	4613      	mov	r3, r2
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	4413      	add	r3, r2
 8006712:	3304      	adds	r3, #4
 8006714:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	4618      	mov	r0, r3
 800671e:	f005 fd3f 	bl	800c1a0 <USB_EPStopXfer>
 8006722:	4603      	mov	r3, r0
 8006724:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006726:	7afb      	ldrb	r3, [r7, #11]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	@ 0x28
 8006734:	af02      	add	r7, sp, #8
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	4613      	mov	r3, r2
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	3310      	adds	r3, #16
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	4413      	add	r3, r2
 8006754:	3304      	adds	r3, #4
 8006756:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	695a      	ldr	r2, [r3, #20]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	429a      	cmp	r2, r3
 8006762:	d901      	bls.n	8006768 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e06b      	b.n	8006840 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	429a      	cmp	r2, r3
 800677c:	d902      	bls.n	8006784 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	3303      	adds	r3, #3
 8006788:	089b      	lsrs	r3, r3, #2
 800678a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800678c:	e02a      	b.n	80067e4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d902      	bls.n	80067aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	3303      	adds	r3, #3
 80067ae:	089b      	lsrs	r3, r3, #2
 80067b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68d9      	ldr	r1, [r3, #12]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	4603      	mov	r3, r0
 80067c6:	6978      	ldr	r0, [r7, #20]
 80067c8:	f005 fd94 	bl	800c2f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	441a      	add	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	441a      	add	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d809      	bhi.n	800680e <PCD_WriteEmptyTxFifo+0xde>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	695a      	ldr	r2, [r3, #20]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006802:	429a      	cmp	r2, r3
 8006804:	d203      	bcs.n	800680e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1bf      	bne.n	800678e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	429a      	cmp	r2, r3
 8006818:	d811      	bhi.n	800683e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	2201      	movs	r2, #1
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	43db      	mvns	r3, r3
 8006834:	6939      	ldr	r1, [r7, #16]
 8006836:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800683a:	4013      	ands	r3, r2
 800683c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	333c      	adds	r3, #60	@ 0x3c
 8006860:	3304      	adds	r3, #4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	799b      	ldrb	r3, [r3, #6]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d17b      	bne.n	8006976 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b00      	cmp	r3, #0
 8006886:	d015      	beq.n	80068b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	4a61      	ldr	r2, [pc, #388]	@ (8006a10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	f240 80b9 	bls.w	8006a04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80b3 	beq.w	8006a04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068aa:	461a      	mov	r2, r3
 80068ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068b0:	6093      	str	r3, [r2, #8]
 80068b2:	e0a7      	b.n	8006a04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d009      	beq.n	80068d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ca:	461a      	mov	r2, r3
 80068cc:	2320      	movs	r3, #32
 80068ce:	6093      	str	r3, [r2, #8]
 80068d0:	e098      	b.n	8006a04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f040 8093 	bne.w	8006a04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4a4b      	ldr	r2, [pc, #300]	@ (8006a10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d90f      	bls.n	8006906 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fc:	461a      	mov	r2, r3
 80068fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006902:	6093      	str	r3, [r2, #8]
 8006904:	e07e      	b.n	8006a04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	4613      	mov	r3, r2
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	4413      	add	r3, r2
 8006918:	3304      	adds	r3, #4
 800691a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	0159      	lsls	r1, r3, #5
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	440b      	add	r3, r1
 8006928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d114      	bne.n	8006968 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006950:	461a      	mov	r2, r3
 8006952:	2101      	movs	r1, #1
 8006954:	f005 ff64 	bl	800c820 <USB_EP0_OutStart>
 8006958:	e006      	b.n	8006968 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	441a      	add	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f006 fa6b 	bl	800ce4a <HAL_PCD_DataOutStageCallback>
 8006974:	e046      	b.n	8006a04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	4a26      	ldr	r2, [pc, #152]	@ (8006a14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d124      	bne.n	80069c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006994:	461a      	mov	r2, r3
 8006996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800699a:	6093      	str	r3, [r2, #8]
 800699c:	e032      	b.n	8006a04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b4:	461a      	mov	r2, r3
 80069b6:	2320      	movs	r3, #32
 80069b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f006 fa42 	bl	800ce4a <HAL_PCD_DataOutStageCallback>
 80069c6:	e01d      	b.n	8006a04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d114      	bne.n	80069f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d108      	bne.n	80069f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069f0:	461a      	mov	r2, r3
 80069f2:	2100      	movs	r1, #0
 80069f4:	f005 ff14 	bl	800c820 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f006 fa23 	bl	800ce4a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	4f54300a 	.word	0x4f54300a
 8006a14:	4f54310a 	.word	0x4f54310a

08006a18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	333c      	adds	r3, #60	@ 0x3c
 8006a30:	3304      	adds	r3, #4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a15      	ldr	r2, [pc, #84]	@ (8006aa0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d90e      	bls.n	8006a6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d009      	beq.n	8006a6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a64:	461a      	mov	r2, r3
 8006a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f006 f9da 	bl	800ce26 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d90c      	bls.n	8006a94 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	799b      	ldrb	r3, [r3, #6]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d108      	bne.n	8006a94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	2101      	movs	r1, #1
 8006a90:	f005 fec6 	bl	800c820 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	4f54300a 	.word	0x4f54300a

08006aa4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d107      	bne.n	8006ad2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006ac2:	883b      	ldrh	r3, [r7, #0]
 8006ac4:	0419      	lsls	r1, r3, #16
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ad0:	e028      	b.n	8006b24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad8:	0c1b      	lsrs	r3, r3, #16
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73fb      	strb	r3, [r7, #15]
 8006ae4:	e00d      	b.n	8006b02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	3340      	adds	r3, #64	@ 0x40
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	0c1b      	lsrs	r3, r3, #16
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	4413      	add	r3, r2
 8006afa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	3301      	adds	r3, #1
 8006b00:	73fb      	strb	r3, [r7, #15]
 8006b02:	7bfa      	ldrb	r2, [r7, #15]
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d3ec      	bcc.n	8006ae6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006b0c:	883b      	ldrh	r3, [r7, #0]
 8006b0e:	0418      	lsls	r0, r3, #16
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	4302      	orrs	r2, r0
 8006b1c:	3340      	adds	r3, #64	@ 0x40
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	887a      	ldrh	r2, [r7, #2]
 8006b44:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b86:	f043 0303 	orr.w	r3, r3, #3
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006ba4:	4b39      	ldr	r3, [pc, #228]	@ (8006c8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d10b      	bne.n	8006bce <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bbc:	d905      	bls.n	8006bca <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006bbe:	4b33      	ldr	r3, [pc, #204]	@ (8006c8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	4a32      	ldr	r2, [pc, #200]	@ (8006c8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bc8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e057      	b.n	8006c7e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bd4:	d90a      	bls.n	8006bec <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8006c8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	4a2a      	ldr	r2, [pc, #168]	@ (8006c8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006be8:	60d3      	str	r3, [r2, #12]
 8006bea:	e007      	b.n	8006bfc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006bec:	4b27      	ldr	r3, [pc, #156]	@ (8006c8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006bf4:	4925      	ldr	r1, [pc, #148]	@ (8006c8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006bfc:	4b24      	ldr	r3, [pc, #144]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a24      	ldr	r2, [pc, #144]	@ (8006c94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	099b      	lsrs	r3, r3, #6
 8006c08:	2232      	movs	r2, #50	@ 0x32
 8006c0a:	fb02 f303 	mul.w	r3, r2, r3
 8006c0e:	4a21      	ldr	r2, [pc, #132]	@ (8006c94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006c10:	fba2 2303 	umull	r2, r3, r2, r3
 8006c14:	099b      	lsrs	r3, r3, #6
 8006c16:	3301      	adds	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006c1a:	e002      	b.n	8006c22 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006c22:	4b1a      	ldr	r3, [pc, #104]	@ (8006c8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <HAL_PWREx_ControlVoltageScaling+0x98>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1f3      	bne.n	8006c1c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01b      	beq.n	8006c72 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006c3a:	4b15      	ldr	r3, [pc, #84]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a15      	ldr	r2, [pc, #84]	@ (8006c94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006c40:	fba2 2303 	umull	r2, r3, r2, r3
 8006c44:	099b      	lsrs	r3, r3, #6
 8006c46:	2232      	movs	r2, #50	@ 0x32
 8006c48:	fb02 f303 	mul.w	r3, r2, r3
 8006c4c:	4a11      	ldr	r2, [pc, #68]	@ (8006c94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	099b      	lsrs	r3, r3, #6
 8006c54:	3301      	adds	r3, #1
 8006c56:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006c58:	e002      	b.n	8006c60 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006c60:	4b0a      	ldr	r3, [pc, #40]	@ (8006c8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f3      	bne.n	8006c5a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e000      	b.n	8006c7e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	46020800 	.word	0x46020800
 8006c90:	20000000 	.word	0x20000000
 8006c94:	10624dd3 	.word	0x10624dd3

08006c98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006c9c:	4b04      	ldr	r3, [pc, #16]	@ (8006cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	46020800 	.word	0x46020800

08006cb4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8006cb8:	4b05      	ldr	r3, [pc, #20]	@ (8006cd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	4a04      	ldr	r2, [pc, #16]	@ (8006cd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cc2:	6113      	str	r3, [r2, #16]
}
 8006cc4:	bf00      	nop
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	46020800 	.word	0x46020800

08006cd4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8006cd8:	4b05      	ldr	r3, [pc, #20]	@ (8006cf0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	4a04      	ldr	r2, [pc, #16]	@ (8006cf0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006cde:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ce2:	6113      	str	r3, [r2, #16]
}
 8006ce4:	bf00      	nop
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	46020800 	.word	0x46020800

08006cf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08e      	sub	sp, #56	@ 0x38
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f000 bec8 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d0e:	4b99      	ldr	r3, [pc, #612]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d18:	4b96      	ldr	r3, [pc, #600]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 816c 	beq.w	8007008 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <HAL_RCC_OscConfig+0x52>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	2b0c      	cmp	r3, #12
 8006d3a:	f040 80de 	bne.w	8006efa <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	f040 80da 	bne.w	8006efa <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f000 bea5 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d58:	4b86      	ldr	r3, [pc, #536]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d004      	beq.n	8006d6e <HAL_RCC_OscConfig+0x7a>
 8006d64:	4b83      	ldr	r3, [pc, #524]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006d6c:	e005      	b.n	8006d7a <HAL_RCC_OscConfig+0x86>
 8006d6e:	4b81      	ldr	r3, [pc, #516]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006d70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d255      	bcs.n	8006e2a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 f99d 	bl	80080c8 <RCC_SetFlashLatencyFromMSIRange>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f000 be82 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006d9a:	4b76      	ldr	r3, [pc, #472]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	4a75      	ldr	r2, [pc, #468]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006da0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006da4:	6093      	str	r3, [r2, #8]
 8006da6:	4b73      	ldr	r3, [pc, #460]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	4970      	ldr	r1, [pc, #448]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006dc0:	d309      	bcc.n	8006dd6 <HAL_RCC_OscConfig+0xe2>
 8006dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f023 021f 	bic.w	r2, r3, #31
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	4969      	ldr	r1, [pc, #420]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60cb      	str	r3, [r1, #12]
 8006dd4:	e07e      	b.n	8006ed4 <HAL_RCC_OscConfig+0x1e0>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	da0a      	bge.n	8006df4 <HAL_RCC_OscConfig+0x100>
 8006dde:	4b65      	ldr	r3, [pc, #404]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	015b      	lsls	r3, r3, #5
 8006dec:	4961      	ldr	r1, [pc, #388]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60cb      	str	r3, [r1, #12]
 8006df2:	e06f      	b.n	8006ed4 <HAL_RCC_OscConfig+0x1e0>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dfc:	d30a      	bcc.n	8006e14 <HAL_RCC_OscConfig+0x120>
 8006dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	029b      	lsls	r3, r3, #10
 8006e0c:	4959      	ldr	r1, [pc, #356]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60cb      	str	r3, [r1, #12]
 8006e12:	e05f      	b.n	8006ed4 <HAL_RCC_OscConfig+0x1e0>
 8006e14:	4b57      	ldr	r3, [pc, #348]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	03db      	lsls	r3, r3, #15
 8006e22:	4954      	ldr	r1, [pc, #336]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60cb      	str	r3, [r1, #12]
 8006e28:	e054      	b.n	8006ed4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006e2a:	4b52      	ldr	r3, [pc, #328]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	4a51      	ldr	r2, [pc, #324]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e34:	6093      	str	r3, [r2, #8]
 8006e36:	4b4f      	ldr	r3, [pc, #316]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e42:	494c      	ldr	r1, [pc, #304]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006e50:	d309      	bcc.n	8006e66 <HAL_RCC_OscConfig+0x172>
 8006e52:	4b48      	ldr	r3, [pc, #288]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f023 021f 	bic.w	r2, r3, #31
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	4945      	ldr	r1, [pc, #276]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60cb      	str	r3, [r1, #12]
 8006e64:	e028      	b.n	8006eb8 <HAL_RCC_OscConfig+0x1c4>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	da0a      	bge.n	8006e84 <HAL_RCC_OscConfig+0x190>
 8006e6e:	4b41      	ldr	r3, [pc, #260]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	015b      	lsls	r3, r3, #5
 8006e7c:	493d      	ldr	r1, [pc, #244]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60cb      	str	r3, [r1, #12]
 8006e82:	e019      	b.n	8006eb8 <HAL_RCC_OscConfig+0x1c4>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e8c:	d30a      	bcc.n	8006ea4 <HAL_RCC_OscConfig+0x1b0>
 8006e8e:	4b39      	ldr	r3, [pc, #228]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	029b      	lsls	r3, r3, #10
 8006e9c:	4935      	ldr	r1, [pc, #212]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60cb      	str	r3, [r1, #12]
 8006ea2:	e009      	b.n	8006eb8 <HAL_RCC_OscConfig+0x1c4>
 8006ea4:	4b33      	ldr	r3, [pc, #204]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	03db      	lsls	r3, r3, #15
 8006eb2:	4930      	ldr	r1, [pc, #192]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 f900 	bl	80080c8 <RCC_SetFlashLatencyFromMSIRange>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f000 bde5 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006ed4:	f001 f8de 	bl	8008094 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ed8:	4b27      	ldr	r3, [pc, #156]	@ (8006f78 <HAL_RCC_OscConfig+0x284>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fc fd45 	bl	800396c <HAL_InitTick>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 808a 	beq.w	8007006 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ef6:	f000 bdd2 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d066      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006f02:	4b1c      	ldr	r3, [pc, #112]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1b      	ldr	r2, [pc, #108]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006f0e:	f7fc fdb7 	bl	8003a80 <HAL_GetTick>
 8006f12:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006f14:	e009      	b.n	8006f2a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f16:	f7fc fdb3 	bl	8003a80 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d902      	bls.n	8006f2a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	f000 bdba 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006f2a:	4b12      	ldr	r3, [pc, #72]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0304 	and.w	r3, r3, #4
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0ef      	beq.n	8006f16 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006f36:	4b0f      	ldr	r3, [pc, #60]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006f3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f40:	6093      	str	r3, [r2, #8]
 8006f42:	4b0c      	ldr	r3, [pc, #48]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4e:	4909      	ldr	r1, [pc, #36]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f58:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006f5c:	d30e      	bcc.n	8006f7c <HAL_RCC_OscConfig+0x288>
 8006f5e:	4b05      	ldr	r3, [pc, #20]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f023 021f 	bic.w	r2, r3, #31
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	4902      	ldr	r1, [pc, #8]	@ (8006f74 <HAL_RCC_OscConfig+0x280>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60cb      	str	r3, [r1, #12]
 8006f70:	e04a      	b.n	8007008 <HAL_RCC_OscConfig+0x314>
 8006f72:	bf00      	nop
 8006f74:	46020c00 	.word	0x46020c00
 8006f78:	20000078 	.word	0x20000078
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	da0a      	bge.n	8006f9a <HAL_RCC_OscConfig+0x2a6>
 8006f84:	4b98      	ldr	r3, [pc, #608]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	015b      	lsls	r3, r3, #5
 8006f92:	4995      	ldr	r1, [pc, #596]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60cb      	str	r3, [r1, #12]
 8006f98:	e036      	b.n	8007008 <HAL_RCC_OscConfig+0x314>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa2:	d30a      	bcc.n	8006fba <HAL_RCC_OscConfig+0x2c6>
 8006fa4:	4b90      	ldr	r3, [pc, #576]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	029b      	lsls	r3, r3, #10
 8006fb2:	498d      	ldr	r1, [pc, #564]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60cb      	str	r3, [r1, #12]
 8006fb8:	e026      	b.n	8007008 <HAL_RCC_OscConfig+0x314>
 8006fba:	4b8b      	ldr	r3, [pc, #556]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	03db      	lsls	r3, r3, #15
 8006fc8:	4987      	ldr	r1, [pc, #540]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60cb      	str	r3, [r1, #12]
 8006fce:	e01b      	b.n	8007008 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006fd0:	4b85      	ldr	r3, [pc, #532]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a84      	ldr	r2, [pc, #528]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8006fd6:	f023 0301 	bic.w	r3, r3, #1
 8006fda:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006fdc:	f7fc fd50 	bl	8003a80 <HAL_GetTick>
 8006fe0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006fe2:	e009      	b.n	8006ff8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fe4:	f7fc fd4c 	bl	8003a80 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d902      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	f000 bd53 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006ff8:	4b7b      	ldr	r3, [pc, #492]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1ef      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x2f0>
 8007004:	e000      	b.n	8007008 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007006:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 808b 	beq.w	800712c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	2b08      	cmp	r3, #8
 800701a:	d005      	beq.n	8007028 <HAL_RCC_OscConfig+0x334>
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	2b0c      	cmp	r3, #12
 8007020:	d109      	bne.n	8007036 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007024:	2b03      	cmp	r3, #3
 8007026:	d106      	bne.n	8007036 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d17d      	bne.n	800712c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f000 bd34 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800703e:	d106      	bne.n	800704e <HAL_RCC_OscConfig+0x35a>
 8007040:	4b69      	ldr	r3, [pc, #420]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a68      	ldr	r2, [pc, #416]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8007046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	e041      	b.n	80070d2 <HAL_RCC_OscConfig+0x3de>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007056:	d112      	bne.n	800707e <HAL_RCC_OscConfig+0x38a>
 8007058:	4b63      	ldr	r3, [pc, #396]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a62      	ldr	r2, [pc, #392]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 800705e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	4b60      	ldr	r3, [pc, #384]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a5f      	ldr	r2, [pc, #380]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 800706a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	4b5d      	ldr	r3, [pc, #372]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a5c      	ldr	r2, [pc, #368]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8007076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	e029      	b.n	80070d2 <HAL_RCC_OscConfig+0x3de>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007086:	d112      	bne.n	80070ae <HAL_RCC_OscConfig+0x3ba>
 8007088:	4b57      	ldr	r3, [pc, #348]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a56      	ldr	r2, [pc, #344]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 800708e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	4b54      	ldr	r3, [pc, #336]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a53      	ldr	r2, [pc, #332]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 800709a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	4b51      	ldr	r3, [pc, #324]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a50      	ldr	r2, [pc, #320]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80070a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	e011      	b.n	80070d2 <HAL_RCC_OscConfig+0x3de>
 80070ae:	4b4e      	ldr	r3, [pc, #312]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a4d      	ldr	r2, [pc, #308]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80070b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	4b4b      	ldr	r3, [pc, #300]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a4a      	ldr	r2, [pc, #296]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80070c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	4b48      	ldr	r3, [pc, #288]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a47      	ldr	r2, [pc, #284]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80070cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80070d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d014      	beq.n	8007104 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80070da:	f7fc fcd1 	bl	8003a80 <HAL_GetTick>
 80070de:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070e0:	e009      	b.n	80070f6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070e2:	f7fc fccd 	bl	8003a80 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b64      	cmp	r3, #100	@ 0x64
 80070ee:	d902      	bls.n	80070f6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	f000 bcd4 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070f6:	4b3c      	ldr	r3, [pc, #240]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0ef      	beq.n	80070e2 <HAL_RCC_OscConfig+0x3ee>
 8007102:	e013      	b.n	800712c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007104:	f7fc fcbc 	bl	8003a80 <HAL_GetTick>
 8007108:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800710a:	e009      	b.n	8007120 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800710c:	f7fc fcb8 	bl	8003a80 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b64      	cmp	r3, #100	@ 0x64
 8007118:	d902      	bls.n	8007120 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	f000 bcbf 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007120:	4b31      	ldr	r3, [pc, #196]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1ef      	bne.n	800710c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d05f      	beq.n	80071f8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713a:	2b04      	cmp	r3, #4
 800713c:	d005      	beq.n	800714a <HAL_RCC_OscConfig+0x456>
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	2b0c      	cmp	r3, #12
 8007142:	d114      	bne.n	800716e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007146:	2b02      	cmp	r3, #2
 8007148:	d111      	bne.n	800716e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d102      	bne.n	8007158 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f000 bca3 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007158:	4b23      	ldr	r3, [pc, #140]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	041b      	lsls	r3, r3, #16
 8007166:	4920      	ldr	r1, [pc, #128]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8007168:	4313      	orrs	r3, r2
 800716a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800716c:	e044      	b.n	80071f8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d024      	beq.n	80071c0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007176:	4b1c      	ldr	r3, [pc, #112]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a1b      	ldr	r2, [pc, #108]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 800717c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007180:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007182:	f7fc fc7d 	bl	8003a80 <HAL_GetTick>
 8007186:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007188:	e009      	b.n	800719e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800718a:	f7fc fc79 	bl	8003a80 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d902      	bls.n	800719e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	f000 bc80 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800719e:	4b12      	ldr	r3, [pc, #72]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d0ef      	beq.n	800718a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80071aa:	4b0f      	ldr	r3, [pc, #60]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	041b      	lsls	r3, r3, #16
 80071b8:	490b      	ldr	r1, [pc, #44]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	610b      	str	r3, [r1, #16]
 80071be:	e01b      	b.n	80071f8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80071c0:	4b09      	ldr	r3, [pc, #36]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a08      	ldr	r2, [pc, #32]	@ (80071e8 <HAL_RCC_OscConfig+0x4f4>)
 80071c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80071cc:	f7fc fc58 	bl	8003a80 <HAL_GetTick>
 80071d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071d2:	e00b      	b.n	80071ec <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d4:	f7fc fc54 	bl	8003a80 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d904      	bls.n	80071ec <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	f000 bc5b 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
 80071e8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071ec:	4baf      	ldr	r3, [pc, #700]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1ed      	bne.n	80071d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 80c8 	beq.w	8007396 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007206:	2300      	movs	r3, #0
 8007208:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800720c:	4ba7      	ldr	r3, [pc, #668]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 800720e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d111      	bne.n	800723e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800721a:	4ba4      	ldr	r3, [pc, #656]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 800721c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007220:	4aa2      	ldr	r2, [pc, #648]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007222:	f043 0304 	orr.w	r3, r3, #4
 8007226:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800722a:	4ba0      	ldr	r3, [pc, #640]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 800722c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800723e:	4b9c      	ldr	r3, [pc, #624]	@ (80074b0 <HAL_RCC_OscConfig+0x7bc>)
 8007240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d119      	bne.n	800727e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800724a:	4b99      	ldr	r3, [pc, #612]	@ (80074b0 <HAL_RCC_OscConfig+0x7bc>)
 800724c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724e:	4a98      	ldr	r2, [pc, #608]	@ (80074b0 <HAL_RCC_OscConfig+0x7bc>)
 8007250:	f043 0301 	orr.w	r3, r3, #1
 8007254:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007256:	f7fc fc13 	bl	8003a80 <HAL_GetTick>
 800725a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800725c:	e009      	b.n	8007272 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800725e:	f7fc fc0f 	bl	8003a80 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b02      	cmp	r3, #2
 800726a:	d902      	bls.n	8007272 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	f000 bc16 	b.w	8007a9e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007272:	4b8f      	ldr	r3, [pc, #572]	@ (80074b0 <HAL_RCC_OscConfig+0x7bc>)
 8007274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0ef      	beq.n	800725e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d05f      	beq.n	8007346 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007286:	4b89      	ldr	r3, [pc, #548]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800728c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007298:	429a      	cmp	r2, r3
 800729a:	d037      	beq.n	800730c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d006      	beq.n	80072b4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e3f4      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d01b      	beq.n	80072f6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80072be:	4b7b      	ldr	r3, [pc, #492]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 80072c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072c4:	4a79      	ldr	r2, [pc, #484]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 80072c6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80072ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80072ce:	f7fc fbd7 	bl	8003a80 <HAL_GetTick>
 80072d2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d6:	f7fc fbd3 	bl	8003a80 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b05      	cmp	r3, #5
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e3da      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80072e8:	4b70      	ldr	r3, [pc, #448]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 80072ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1ef      	bne.n	80072d6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80072f6:	4b6d      	ldr	r3, [pc, #436]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 80072f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072fc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	4969      	ldr	r1, [pc, #420]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800730c:	4b67      	ldr	r3, [pc, #412]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 800730e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007312:	4a66      	ldr	r2, [pc, #408]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007314:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007318:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800731c:	f7fc fbb0 	bl	8003a80 <HAL_GetTick>
 8007320:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007324:	f7fc fbac 	bl	8003a80 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b05      	cmp	r3, #5
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e3b3      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007336:	4b5d      	ldr	r3, [pc, #372]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800733c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0ef      	beq.n	8007324 <HAL_RCC_OscConfig+0x630>
 8007344:	e01b      	b.n	800737e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007346:	4b59      	ldr	r3, [pc, #356]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800734c:	4a57      	ldr	r2, [pc, #348]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 800734e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007352:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007356:	f7fc fb93 	bl	8003a80 <HAL_GetTick>
 800735a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800735c:	e008      	b.n	8007370 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800735e:	f7fc fb8f 	bl	8003a80 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b05      	cmp	r3, #5
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e396      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007370:	4b4e      	ldr	r3, [pc, #312]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1ef      	bne.n	800735e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800737e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007382:	2b01      	cmp	r3, #1
 8007384:	d107      	bne.n	8007396 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007386:	4b49      	ldr	r3, [pc, #292]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800738c:	4a47      	ldr	r2, [pc, #284]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 800738e:	f023 0304 	bic.w	r3, r3, #4
 8007392:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0304 	and.w	r3, r3, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 8111 	beq.w	80075c6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80073a4:	2300      	movs	r3, #0
 80073a6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073aa:	4b40      	ldr	r3, [pc, #256]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 80073ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d111      	bne.n	80073dc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073b8:	4b3c      	ldr	r3, [pc, #240]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 80073ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073be:	4a3b      	ldr	r2, [pc, #236]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 80073c0:	f043 0304 	orr.w	r3, r3, #4
 80073c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80073c8:	4b38      	ldr	r3, [pc, #224]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 80073ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073ce:	f003 0304 	and.w	r3, r3, #4
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80073dc:	4b34      	ldr	r3, [pc, #208]	@ (80074b0 <HAL_RCC_OscConfig+0x7bc>)
 80073de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d118      	bne.n	800741a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80073e8:	4b31      	ldr	r3, [pc, #196]	@ (80074b0 <HAL_RCC_OscConfig+0x7bc>)
 80073ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ec:	4a30      	ldr	r2, [pc, #192]	@ (80074b0 <HAL_RCC_OscConfig+0x7bc>)
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073f4:	f7fc fb44 	bl	8003a80 <HAL_GetTick>
 80073f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fc:	f7fc fb40 	bl	8003a80 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e347      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800740e:	4b28      	ldr	r3, [pc, #160]	@ (80074b0 <HAL_RCC_OscConfig+0x7bc>)
 8007410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0f0      	beq.n	80073fc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01f      	beq.n	8007466 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f003 0304 	and.w	r3, r3, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	d010      	beq.n	8007454 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007432:	4b1e      	ldr	r3, [pc, #120]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007438:	4a1c      	ldr	r2, [pc, #112]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 800743a:	f043 0304 	orr.w	r3, r3, #4
 800743e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007442:	4b1a      	ldr	r3, [pc, #104]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007448:	4a18      	ldr	r2, [pc, #96]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007452:	e018      	b.n	8007486 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007454:	4b15      	ldr	r3, [pc, #84]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800745a:	4a14      	ldr	r2, [pc, #80]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 800745c:	f043 0301 	orr.w	r3, r3, #1
 8007460:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007464:	e00f      	b.n	8007486 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007466:	4b11      	ldr	r3, [pc, #68]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800746c:	4a0f      	ldr	r2, [pc, #60]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 800746e:	f023 0301 	bic.w	r3, r3, #1
 8007472:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007476:	4b0d      	ldr	r3, [pc, #52]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 8007478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800747c:	4a0b      	ldr	r2, [pc, #44]	@ (80074ac <HAL_RCC_OscConfig+0x7b8>)
 800747e:	f023 0304 	bic.w	r3, r3, #4
 8007482:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d057      	beq.n	800753e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800748e:	f7fc faf7 	bl	8003a80 <HAL_GetTick>
 8007492:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007494:	e00e      	b.n	80074b4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007496:	f7fc faf3 	bl	8003a80 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d905      	bls.n	80074b4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e2f8      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
 80074ac:	46020c00 	.word	0x46020c00
 80074b0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074b4:	4b9c      	ldr	r3, [pc, #624]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80074b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0e9      	beq.n	8007496 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d01b      	beq.n	8007506 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80074ce:	4b96      	ldr	r3, [pc, #600]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80074d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074d4:	4a94      	ldr	r2, [pc, #592]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80074d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80074de:	e00a      	b.n	80074f6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e0:	f7fc face 	bl	8003a80 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e2d3      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80074f6:	4b8c      	ldr	r3, [pc, #560]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80074f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0ed      	beq.n	80074e0 <HAL_RCC_OscConfig+0x7ec>
 8007504:	e053      	b.n	80075ae <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007506:	4b88      	ldr	r3, [pc, #544]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 8007508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800750c:	4a86      	ldr	r2, [pc, #536]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 800750e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007512:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007516:	e00a      	b.n	800752e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007518:	f7fc fab2 	bl	8003a80 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e2b7      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800752e:	4b7e      	ldr	r3, [pc, #504]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 8007530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1ed      	bne.n	8007518 <HAL_RCC_OscConfig+0x824>
 800753c:	e037      	b.n	80075ae <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800753e:	f7fc fa9f 	bl	8003a80 <HAL_GetTick>
 8007542:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007544:	e00a      	b.n	800755c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007546:	f7fc fa9b 	bl	8003a80 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007554:	4293      	cmp	r3, r2
 8007556:	d901      	bls.n	800755c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e2a0      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800755c:	4b72      	ldr	r3, [pc, #456]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 800755e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1ed      	bne.n	8007546 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800756a:	4b6f      	ldr	r3, [pc, #444]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 800756c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01a      	beq.n	80075ae <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007578:	4b6b      	ldr	r3, [pc, #428]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 800757a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800757e:	4a6a      	ldr	r2, [pc, #424]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 8007580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007584:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007588:	e00a      	b.n	80075a0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800758a:	f7fc fa79 	bl	8003a80 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007598:	4293      	cmp	r3, r2
 800759a:	d901      	bls.n	80075a0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e27e      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80075a0:	4b61      	ldr	r3, [pc, #388]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80075a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1ed      	bne.n	800758a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80075ae:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d107      	bne.n	80075c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075b6:	4b5c      	ldr	r3, [pc, #368]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80075b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075bc:	4a5a      	ldr	r2, [pc, #360]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80075be:	f023 0304 	bic.w	r3, r3, #4
 80075c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d036      	beq.n	8007640 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d019      	beq.n	800760e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80075da:	4b53      	ldr	r3, [pc, #332]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a52      	ldr	r2, [pc, #328]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80075e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075e4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80075e6:	f7fc fa4b 	bl	8003a80 <HAL_GetTick>
 80075ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80075ec:	e008      	b.n	8007600 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075ee:	f7fc fa47 	bl	8003a80 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d901      	bls.n	8007600 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e24e      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007600:	4b49      	ldr	r3, [pc, #292]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d0f0      	beq.n	80075ee <HAL_RCC_OscConfig+0x8fa>
 800760c:	e018      	b.n	8007640 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800760e:	4b46      	ldr	r3, [pc, #280]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a45      	ldr	r2, [pc, #276]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 8007614:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007618:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800761a:	f7fc fa31 	bl	8003a80 <HAL_GetTick>
 800761e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007620:	e008      	b.n	8007634 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007622:	f7fc fa2d 	bl	8003a80 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	2b02      	cmp	r3, #2
 800762e:	d901      	bls.n	8007634 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e234      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007634:	4b3c      	ldr	r3, [pc, #240]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f0      	bne.n	8007622 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007648:	2b00      	cmp	r3, #0
 800764a:	d036      	beq.n	80076ba <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007650:	2b00      	cmp	r3, #0
 8007652:	d019      	beq.n	8007688 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007654:	4b34      	ldr	r3, [pc, #208]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a33      	ldr	r2, [pc, #204]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 800765a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800765e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007660:	f7fc fa0e 	bl	8003a80 <HAL_GetTick>
 8007664:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007668:	f7fc fa0a 	bl	8003a80 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e211      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800767a:	4b2b      	ldr	r3, [pc, #172]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f0      	beq.n	8007668 <HAL_RCC_OscConfig+0x974>
 8007686:	e018      	b.n	80076ba <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007688:	4b27      	ldr	r3, [pc, #156]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a26      	ldr	r2, [pc, #152]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 800768e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007692:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007694:	f7fc f9f4 	bl	8003a80 <HAL_GetTick>
 8007698:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800769a:	e008      	b.n	80076ae <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800769c:	f7fc f9f0 	bl	8003a80 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e1f7      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80076ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f0      	bne.n	800769c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d07f      	beq.n	80077c6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d062      	beq.n	8007794 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80076ce:	4b16      	ldr	r3, [pc, #88]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	4a15      	ldr	r2, [pc, #84]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80076d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80076d8:	6093      	str	r3, [r2, #8]
 80076da:	4b13      	ldr	r3, [pc, #76]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e6:	4910      	ldr	r1, [pc, #64]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80076f4:	d309      	bcc.n	800770a <HAL_RCC_OscConfig+0xa16>
 80076f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f023 021f 	bic.w	r2, r3, #31
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	4909      	ldr	r1, [pc, #36]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 8007704:	4313      	orrs	r3, r2
 8007706:	60cb      	str	r3, [r1, #12]
 8007708:	e02a      	b.n	8007760 <HAL_RCC_OscConfig+0xa6c>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770e:	2b00      	cmp	r3, #0
 8007710:	da0c      	bge.n	800772c <HAL_RCC_OscConfig+0xa38>
 8007712:	4b05      	ldr	r3, [pc, #20]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	015b      	lsls	r3, r3, #5
 8007720:	4901      	ldr	r1, [pc, #4]	@ (8007728 <HAL_RCC_OscConfig+0xa34>)
 8007722:	4313      	orrs	r3, r2
 8007724:	60cb      	str	r3, [r1, #12]
 8007726:	e01b      	b.n	8007760 <HAL_RCC_OscConfig+0xa6c>
 8007728:	46020c00 	.word	0x46020c00
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007734:	d30a      	bcc.n	800774c <HAL_RCC_OscConfig+0xa58>
 8007736:	4ba1      	ldr	r3, [pc, #644]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	029b      	lsls	r3, r3, #10
 8007744:	499d      	ldr	r1, [pc, #628]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007746:	4313      	orrs	r3, r2
 8007748:	60cb      	str	r3, [r1, #12]
 800774a:	e009      	b.n	8007760 <HAL_RCC_OscConfig+0xa6c>
 800774c:	4b9b      	ldr	r3, [pc, #620]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	03db      	lsls	r3, r3, #15
 800775a:	4998      	ldr	r1, [pc, #608]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 800775c:	4313      	orrs	r3, r2
 800775e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007760:	4b96      	ldr	r3, [pc, #600]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a95      	ldr	r2, [pc, #596]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007766:	f043 0310 	orr.w	r3, r3, #16
 800776a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800776c:	f7fc f988 	bl	8003a80 <HAL_GetTick>
 8007770:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007772:	e008      	b.n	8007786 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007774:	f7fc f984 	bl	8003a80 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e18b      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007786:	4b8d      	ldr	r3, [pc, #564]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0f0      	beq.n	8007774 <HAL_RCC_OscConfig+0xa80>
 8007792:	e018      	b.n	80077c6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007794:	4b89      	ldr	r3, [pc, #548]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a88      	ldr	r2, [pc, #544]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 800779a:	f023 0310 	bic.w	r3, r3, #16
 800779e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80077a0:	f7fc f96e 	bl	8003a80 <HAL_GetTick>
 80077a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80077a6:	e008      	b.n	80077ba <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80077a8:	f7fc f96a 	bl	8003a80 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e171      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80077ba:	4b80      	ldr	r3, [pc, #512]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1f0      	bne.n	80077a8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 8166 	beq.w	8007a9c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077d6:	4b79      	ldr	r3, [pc, #484]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f003 030c 	and.w	r3, r3, #12
 80077de:	2b0c      	cmp	r3, #12
 80077e0:	f000 80f2 	beq.w	80079c8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	f040 80c5 	bne.w	8007978 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80077ee:	4b73      	ldr	r3, [pc, #460]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a72      	ldr	r2, [pc, #456]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80077f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80077fa:	f7fc f941 	bl	8003a80 <HAL_GetTick>
 80077fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007800:	e008      	b.n	8007814 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007802:	f7fc f93d 	bl	8003a80 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d901      	bls.n	8007814 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e144      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007814:	4b69      	ldr	r3, [pc, #420]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f0      	bne.n	8007802 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007820:	4b66      	ldr	r3, [pc, #408]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	d111      	bne.n	8007852 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800782e:	4b63      	ldr	r3, [pc, #396]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007834:	4a61      	ldr	r2, [pc, #388]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007836:	f043 0304 	orr.w	r3, r3, #4
 800783a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800783e:	4b5f      	ldr	r3, [pc, #380]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007840:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800784c:	2301      	movs	r3, #1
 800784e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007852:	4b5b      	ldr	r3, [pc, #364]	@ (80079c0 <HAL_RCC_OscConfig+0xccc>)
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800785a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800785e:	d102      	bne.n	8007866 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8007860:	2301      	movs	r3, #1
 8007862:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007866:	4b56      	ldr	r3, [pc, #344]	@ (80079c0 <HAL_RCC_OscConfig+0xccc>)
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	4a55      	ldr	r2, [pc, #340]	@ (80079c0 <HAL_RCC_OscConfig+0xccc>)
 800786c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007870:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8007872:	4b52      	ldr	r3, [pc, #328]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007876:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007886:	3a01      	subs	r2, #1
 8007888:	0212      	lsls	r2, r2, #8
 800788a:	4311      	orrs	r1, r2
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007890:	430a      	orrs	r2, r1
 8007892:	494a      	ldr	r1, [pc, #296]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007894:	4313      	orrs	r3, r2
 8007896:	628b      	str	r3, [r1, #40]	@ 0x28
 8007898:	4b48      	ldr	r3, [pc, #288]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 800789a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800789c:	4b49      	ldr	r3, [pc, #292]	@ (80079c4 <HAL_RCC_OscConfig+0xcd0>)
 800789e:	4013      	ands	r3, r2
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80078a4:	3a01      	subs	r2, #1
 80078a6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80078ae:	3a01      	subs	r2, #1
 80078b0:	0252      	lsls	r2, r2, #9
 80078b2:	b292      	uxth	r2, r2
 80078b4:	4311      	orrs	r1, r2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80078ba:	3a01      	subs	r2, #1
 80078bc:	0412      	lsls	r2, r2, #16
 80078be:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80078c2:	4311      	orrs	r1, r2
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80078c8:	3a01      	subs	r2, #1
 80078ca:	0612      	lsls	r2, r2, #24
 80078cc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80078d0:	430a      	orrs	r2, r1
 80078d2:	493a      	ldr	r1, [pc, #232]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80078d8:	4b38      	ldr	r3, [pc, #224]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	4a37      	ldr	r2, [pc, #220]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80078de:	f023 0310 	bic.w	r3, r3, #16
 80078e2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078e8:	4a34      	ldr	r2, [pc, #208]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80078ee:	4b33      	ldr	r3, [pc, #204]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	4a32      	ldr	r2, [pc, #200]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80078f4:	f043 0310 	orr.w	r3, r3, #16
 80078f8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80078fa:	4b30      	ldr	r3, [pc, #192]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80078fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fe:	f023 020c 	bic.w	r2, r3, #12
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007906:	492d      	ldr	r1, [pc, #180]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007908:	4313      	orrs	r3, r2
 800790a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800790c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007910:	2b01      	cmp	r3, #1
 8007912:	d105      	bne.n	8007920 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007914:	4b2a      	ldr	r3, [pc, #168]	@ (80079c0 <HAL_RCC_OscConfig+0xccc>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	4a29      	ldr	r2, [pc, #164]	@ (80079c0 <HAL_RCC_OscConfig+0xccc>)
 800791a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800791e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007920:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007924:	2b01      	cmp	r3, #1
 8007926:	d107      	bne.n	8007938 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8007928:	4b24      	ldr	r3, [pc, #144]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 800792a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800792e:	4a23      	ldr	r2, [pc, #140]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007930:	f023 0304 	bic.w	r3, r3, #4
 8007934:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007938:	4b20      	ldr	r3, [pc, #128]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a1f      	ldr	r2, [pc, #124]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 800793e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007942:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007944:	f7fc f89c 	bl	8003a80 <HAL_GetTick>
 8007948:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800794a:	e008      	b.n	800795e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800794c:	f7fc f898 	bl	8003a80 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e09f      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800795e:	4b17      	ldr	r3, [pc, #92]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0f0      	beq.n	800794c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800796a:	4b14      	ldr	r3, [pc, #80]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 800796c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796e:	4a13      	ldr	r2, [pc, #76]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 8007970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007974:	6293      	str	r3, [r2, #40]	@ 0x28
 8007976:	e091      	b.n	8007a9c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007978:	4b10      	ldr	r3, [pc, #64]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a0f      	ldr	r2, [pc, #60]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 800797e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007982:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007984:	f7fc f87c 	bl	8003a80 <HAL_GetTick>
 8007988:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800798a:	e008      	b.n	800799e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800798c:	f7fc f878 	bl	8003a80 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e07f      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800799e:	4b07      	ldr	r3, [pc, #28]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1f0      	bne.n	800798c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80079aa:	4b04      	ldr	r3, [pc, #16]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80079ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ae:	4a03      	ldr	r2, [pc, #12]	@ (80079bc <HAL_RCC_OscConfig+0xcc8>)
 80079b0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80079b4:	f023 0303 	bic.w	r3, r3, #3
 80079b8:	6293      	str	r3, [r2, #40]	@ 0x28
 80079ba:	e06f      	b.n	8007a9c <HAL_RCC_OscConfig+0xda8>
 80079bc:	46020c00 	.word	0x46020c00
 80079c0:	46020800 	.word	0x46020800
 80079c4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80079c8:	4b37      	ldr	r3, [pc, #220]	@ (8007aa8 <HAL_RCC_OscConfig+0xdb4>)
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80079ce:	4b36      	ldr	r3, [pc, #216]	@ (8007aa8 <HAL_RCC_OscConfig+0xdb4>)
 80079d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d039      	beq.n	8007a50 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f003 0203 	and.w	r2, r3, #3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d132      	bne.n	8007a50 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	0a1b      	lsrs	r3, r3, #8
 80079ee:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d129      	bne.n	8007a50 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d122      	bne.n	8007a50 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a14:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d11a      	bne.n	8007a50 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	0a5b      	lsrs	r3, r3, #9
 8007a1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a26:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d111      	bne.n	8007a50 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	0c1b      	lsrs	r3, r3, #16
 8007a30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a38:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d108      	bne.n	8007a50 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	0e1b      	lsrs	r3, r3, #24
 8007a42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d001      	beq.n	8007a54 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e024      	b.n	8007a9e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007a54:	4b14      	ldr	r3, [pc, #80]	@ (8007aa8 <HAL_RCC_OscConfig+0xdb4>)
 8007a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a58:	08db      	lsrs	r3, r3, #3
 8007a5a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d01a      	beq.n	8007a9c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007a66:	4b10      	ldr	r3, [pc, #64]	@ (8007aa8 <HAL_RCC_OscConfig+0xdb4>)
 8007a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8007aa8 <HAL_RCC_OscConfig+0xdb4>)
 8007a6c:	f023 0310 	bic.w	r3, r3, #16
 8007a70:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a72:	f7fc f805 	bl	8003a80 <HAL_GetTick>
 8007a76:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007a78:	bf00      	nop
 8007a7a:	f7fc f801 	bl	8003a80 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d0f9      	beq.n	8007a7a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a8a:	4a07      	ldr	r2, [pc, #28]	@ (8007aa8 <HAL_RCC_OscConfig+0xdb4>)
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007a90:	4b05      	ldr	r3, [pc, #20]	@ (8007aa8 <HAL_RCC_OscConfig+0xdb4>)
 8007a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a94:	4a04      	ldr	r2, [pc, #16]	@ (8007aa8 <HAL_RCC_OscConfig+0xdb4>)
 8007a96:	f043 0310 	orr.w	r3, r3, #16
 8007a9a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3738      	adds	r7, #56	@ 0x38
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	46020c00 	.word	0x46020c00

08007aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e1d9      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ac0:	4b9b      	ldr	r3, [pc, #620]	@ (8007d30 <HAL_RCC_ClockConfig+0x284>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d910      	bls.n	8007af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ace:	4b98      	ldr	r3, [pc, #608]	@ (8007d30 <HAL_RCC_ClockConfig+0x284>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f023 020f 	bic.w	r2, r3, #15
 8007ad6:	4996      	ldr	r1, [pc, #600]	@ (8007d30 <HAL_RCC_ClockConfig+0x284>)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ade:	4b94      	ldr	r3, [pc, #592]	@ (8007d30 <HAL_RCC_ClockConfig+0x284>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 030f 	and.w	r3, r3, #15
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d001      	beq.n	8007af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e1c1      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0310 	and.w	r3, r3, #16
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d010      	beq.n	8007b1e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	695a      	ldr	r2, [r3, #20]
 8007b00:	4b8c      	ldr	r3, [pc, #560]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d908      	bls.n	8007b1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007b0c:	4b89      	ldr	r3, [pc, #548]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	4986      	ldr	r1, [pc, #536]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d012      	beq.n	8007b50 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691a      	ldr	r2, [r3, #16]
 8007b2e:	4b81      	ldr	r3, [pc, #516]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	091b      	lsrs	r3, r3, #4
 8007b34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d909      	bls.n	8007b50 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007b3c:	4b7d      	ldr	r3, [pc, #500]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	011b      	lsls	r3, r3, #4
 8007b4a:	497a      	ldr	r1, [pc, #488]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d010      	beq.n	8007b7e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68da      	ldr	r2, [r3, #12]
 8007b60:	4b74      	ldr	r3, [pc, #464]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d908      	bls.n	8007b7e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007b6c:	4b71      	ldr	r3, [pc, #452]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	496e      	ldr	r1, [pc, #440]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d010      	beq.n	8007bac <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	4b69      	ldr	r3, [pc, #420]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d908      	bls.n	8007bac <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007b9a:	4b66      	ldr	r3, [pc, #408]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	f023 020f 	bic.w	r2, r3, #15
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	4963      	ldr	r1, [pc, #396]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 80d2 	beq.w	8007d5e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d143      	bne.n	8007c4e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d110      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007bd4:	4b57      	ldr	r3, [pc, #348]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bda:	4a56      	ldr	r2, [pc, #344]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007bdc:	f043 0304 	orr.w	r3, r3, #4
 8007be0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007be4:	4b53      	ldr	r3, [pc, #332]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bea:	f003 0304 	and.w	r3, r3, #4
 8007bee:	60bb      	str	r3, [r7, #8]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007bf6:	f7fb ff43 	bl	8003a80 <HAL_GetTick>
 8007bfa:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8007d38 <HAL_RCC_ClockConfig+0x28c>)
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00f      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007c08:	e008      	b.n	8007c1c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007c0a:	f7fb ff39 	bl	8003a80 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d901      	bls.n	8007c1c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e12b      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007c1c:	4b46      	ldr	r3, [pc, #280]	@ (8007d38 <HAL_RCC_ClockConfig+0x28c>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0f0      	beq.n	8007c0a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d107      	bne.n	8007c3e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007c2e:	4b41      	ldr	r3, [pc, #260]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c34:	4a3f      	ldr	r2, [pc, #252]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007c36:	f023 0304 	bic.w	r3, r3, #4
 8007c3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d121      	bne.n	8007c8e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e112      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d107      	bne.n	8007c66 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c56:	4b37      	ldr	r3, [pc, #220]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d115      	bne.n	8007c8e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e106      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d107      	bne.n	8007c7e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007c6e:	4b31      	ldr	r3, [pc, #196]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d109      	bne.n	8007c8e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e0fa      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e0f2      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007c8e:	4b29      	ldr	r3, [pc, #164]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f023 0203 	bic.w	r2, r3, #3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	4926      	ldr	r1, [pc, #152]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007ca0:	f7fb feee 	bl	8003a80 <HAL_GetTick>
 8007ca4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d112      	bne.n	8007cd4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cae:	e00a      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cb0:	f7fb fee6 	bl	8003a80 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e0d6      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f003 030c 	and.w	r3, r3, #12
 8007cce:	2b0c      	cmp	r3, #12
 8007cd0:	d1ee      	bne.n	8007cb0 <HAL_RCC_ClockConfig+0x204>
 8007cd2:	e044      	b.n	8007d5e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d112      	bne.n	8007d02 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cdc:	e00a      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cde:	f7fb fecf 	bl	8003a80 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e0bf      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f003 030c 	and.w	r3, r3, #12
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d1ee      	bne.n	8007cde <HAL_RCC_ClockConfig+0x232>
 8007d00:	e02d      	b.n	8007d5e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d123      	bne.n	8007d52 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007d0a:	e00a      	b.n	8007d22 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d0c:	f7fb feb8 	bl	8003a80 <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d901      	bls.n	8007d22 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e0a8      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007d22:	4b04      	ldr	r3, [pc, #16]	@ (8007d34 <HAL_RCC_ClockConfig+0x288>)
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f003 030c 	and.w	r3, r3, #12
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1ee      	bne.n	8007d0c <HAL_RCC_ClockConfig+0x260>
 8007d2e:	e016      	b.n	8007d5e <HAL_RCC_ClockConfig+0x2b2>
 8007d30:	40022000 	.word	0x40022000
 8007d34:	46020c00 	.word	0x46020c00
 8007d38:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d3c:	f7fb fea0 	bl	8003a80 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e090      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d52:	4b4a      	ldr	r3, [pc, #296]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	f003 030c 	and.w	r3, r3, #12
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d1ee      	bne.n	8007d3c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d010      	beq.n	8007d8c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	4b43      	ldr	r3, [pc, #268]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d208      	bcs.n	8007d8c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007d7a:	4b40      	ldr	r3, [pc, #256]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 020f 	bic.w	r2, r3, #15
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	493d      	ldr	r1, [pc, #244]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8007e80 <HAL_RCC_ClockConfig+0x3d4>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 030f 	and.w	r3, r3, #15
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d210      	bcs.n	8007dbc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d9a:	4b39      	ldr	r3, [pc, #228]	@ (8007e80 <HAL_RCC_ClockConfig+0x3d4>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f023 020f 	bic.w	r2, r3, #15
 8007da2:	4937      	ldr	r1, [pc, #220]	@ (8007e80 <HAL_RCC_ClockConfig+0x3d4>)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007daa:	4b35      	ldr	r3, [pc, #212]	@ (8007e80 <HAL_RCC_ClockConfig+0x3d4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d001      	beq.n	8007dbc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e05b      	b.n	8007e74 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d010      	beq.n	8007dea <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d208      	bcs.n	8007dea <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007dd8:	4b28      	ldr	r3, [pc, #160]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	4925      	ldr	r1, [pc, #148]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d012      	beq.n	8007e1c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	4b20      	ldr	r3, [pc, #128]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	091b      	lsrs	r3, r3, #4
 8007e00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d209      	bcs.n	8007e1c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007e08:	4b1c      	ldr	r3, [pc, #112]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	4919      	ldr	r1, [pc, #100]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0310 	and.w	r3, r3, #16
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d010      	beq.n	8007e4a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	695a      	ldr	r2, [r3, #20]
 8007e2c:	4b13      	ldr	r3, [pc, #76]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d208      	bcs.n	8007e4a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007e38:	4b10      	ldr	r3, [pc, #64]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	490d      	ldr	r1, [pc, #52]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007e4a:	f000 f821 	bl	8007e90 <HAL_RCC_GetSysClockFreq>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	4b0a      	ldr	r3, [pc, #40]	@ (8007e7c <HAL_RCC_ClockConfig+0x3d0>)
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	490a      	ldr	r1, [pc, #40]	@ (8007e84 <HAL_RCC_ClockConfig+0x3d8>)
 8007e5a:	5ccb      	ldrb	r3, [r1, r3]
 8007e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e60:	4a09      	ldr	r2, [pc, #36]	@ (8007e88 <HAL_RCC_ClockConfig+0x3dc>)
 8007e62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007e64:	4b09      	ldr	r3, [pc, #36]	@ (8007e8c <HAL_RCC_ClockConfig+0x3e0>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fb fd7f 	bl	800396c <HAL_InitTick>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	73fb      	strb	r3, [r7, #15]

  return status;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	46020c00 	.word	0x46020c00
 8007e80:	40022000 	.word	0x40022000
 8007e84:	0800fcc0 	.word	0x0800fcc0
 8007e88:	20000000 	.word	0x20000000
 8007e8c:	20000078 	.word	0x20000078

08007e90 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b08b      	sub	sp, #44	@ 0x2c
 8007e94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e9e:	4b78      	ldr	r3, [pc, #480]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	f003 030c 	and.w	r3, r3, #12
 8007ea6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ea8:	4b75      	ldr	r3, [pc, #468]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	2b0c      	cmp	r3, #12
 8007ebc:	d121      	bne.n	8007f02 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d11e      	bne.n	8007f02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007ec4:	4b6e      	ldr	r3, [pc, #440]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d107      	bne.n	8007ee0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007ed0:	4b6b      	ldr	r3, [pc, #428]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ed6:	0b1b      	lsrs	r3, r3, #12
 8007ed8:	f003 030f 	and.w	r3, r3, #15
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ede:	e005      	b.n	8007eec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007ee0:	4b67      	ldr	r3, [pc, #412]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	0f1b      	lsrs	r3, r3, #28
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007eec:	4a65      	ldr	r2, [pc, #404]	@ (8008084 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d110      	bne.n	8007f1e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007f00:	e00d      	b.n	8007f1e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f02:	4b5f      	ldr	r3, [pc, #380]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	f003 030c 	and.w	r3, r3, #12
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d102      	bne.n	8007f14 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f0e:	4b5e      	ldr	r3, [pc, #376]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007f10:	623b      	str	r3, [r7, #32]
 8007f12:	e004      	b.n	8007f1e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	d101      	bne.n	8007f1e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f1a:	4b5b      	ldr	r3, [pc, #364]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007f1c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	2b0c      	cmp	r3, #12
 8007f22:	f040 80a5 	bne.w	8008070 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007f26:	4b56      	ldr	r3, [pc, #344]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007f30:	4b53      	ldr	r3, [pc, #332]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f34:	0a1b      	lsrs	r3, r3, #8
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007f3e:	4b50      	ldr	r3, [pc, #320]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f42:	091b      	lsrs	r3, r3, #4
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007f4a:	4b4d      	ldr	r3, [pc, #308]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4e:	08db      	lsrs	r3, r3, #3
 8007f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	fb02 f303 	mul.w	r3, r2, r3
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f62:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d003      	beq.n	8007f74 <HAL_RCC_GetSysClockFreq+0xe4>
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d022      	beq.n	8007fb8 <HAL_RCC_GetSysClockFreq+0x128>
 8007f72:	e043      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800808c <HAL_RCC_GetSysClockFreq+0x1fc>
 8007f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f86:	4b3e      	ldr	r3, [pc, #248]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007f96:	ed97 6a01 	vldr	s12, [r7, #4]
 8007f9a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8008090 <HAL_RCC_GetSysClockFreq+0x200>
 8007f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fb6:	e046      	b.n	8008046 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800808c <HAL_RCC_GetSysClockFreq+0x1fc>
 8007fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fca:	4b2d      	ldr	r3, [pc, #180]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007fda:	ed97 6a01 	vldr	s12, [r7, #4]
 8007fde:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8008090 <HAL_RCC_GetSysClockFreq+0x200>
 8007fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ffa:	e024      	b.n	8008046 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	ee07 3a90 	vmov	s15, r3
 800800c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008014:	4b1a      	ldr	r3, [pc, #104]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008024:	ed97 6a01 	vldr	s12, [r7, #4]
 8008028:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8008090 <HAL_RCC_GetSysClockFreq+0x200>
 800802c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008030:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008034:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008038:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800803c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008040:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008044:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8008046:	4b0e      	ldr	r3, [pc, #56]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800804a:	0e1b      	lsrs	r3, r3, #24
 800804c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008050:	3301      	adds	r3, #1
 8008052:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800805e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800806a:	ee17 3a90 	vmov	r3, s15
 800806e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008070:	6a3b      	ldr	r3, [r7, #32]
}
 8008072:	4618      	mov	r0, r3
 8008074:	372c      	adds	r7, #44	@ 0x2c
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	46020c00 	.word	0x46020c00
 8008084:	0800fcd0 	.word	0x0800fcd0
 8008088:	00f42400 	.word	0x00f42400
 800808c:	4b742400 	.word	0x4b742400
 8008090:	46000000 	.word	0x46000000

08008094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008098:	f7ff fefa 	bl	8007e90 <HAL_RCC_GetSysClockFreq>
 800809c:	4602      	mov	r2, r0
 800809e:	4b07      	ldr	r3, [pc, #28]	@ (80080bc <HAL_RCC_GetHCLKFreq+0x28>)
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	f003 030f 	and.w	r3, r3, #15
 80080a6:	4906      	ldr	r1, [pc, #24]	@ (80080c0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80080a8:	5ccb      	ldrb	r3, [r1, r3]
 80080aa:	fa22 f303 	lsr.w	r3, r2, r3
 80080ae:	4a05      	ldr	r2, [pc, #20]	@ (80080c4 <HAL_RCC_GetHCLKFreq+0x30>)
 80080b0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80080b2:	4b04      	ldr	r3, [pc, #16]	@ (80080c4 <HAL_RCC_GetHCLKFreq+0x30>)
 80080b4:	681b      	ldr	r3, [r3, #0]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	46020c00 	.word	0x46020c00
 80080c0:	0800fcc0 	.word	0x0800fcc0
 80080c4:	20000000 	.word	0x20000000

080080c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80080d0:	4b3e      	ldr	r3, [pc, #248]	@ (80081cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80080d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80080de:	f7fe fddb 	bl	8006c98 <HAL_PWREx_GetVoltageRange>
 80080e2:	6178      	str	r0, [r7, #20]
 80080e4:	e019      	b.n	800811a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80080e6:	4b39      	ldr	r3, [pc, #228]	@ (80081cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80080e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ec:	4a37      	ldr	r2, [pc, #220]	@ (80081cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80080ee:	f043 0304 	orr.w	r3, r3, #4
 80080f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80080f6:	4b35      	ldr	r3, [pc, #212]	@ (80081cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80080f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008104:	f7fe fdc8 	bl	8006c98 <HAL_PWREx_GetVoltageRange>
 8008108:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800810a:	4b30      	ldr	r3, [pc, #192]	@ (80081cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800810c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008110:	4a2e      	ldr	r2, [pc, #184]	@ (80081cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008112:	f023 0304 	bic.w	r3, r3, #4
 8008116:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008120:	d003      	beq.n	800812a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008128:	d109      	bne.n	800813e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008130:	d202      	bcs.n	8008138 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008132:	2301      	movs	r3, #1
 8008134:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008136:	e033      	b.n	80081a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008138:	2300      	movs	r3, #0
 800813a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800813c:	e030      	b.n	80081a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008144:	d208      	bcs.n	8008158 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800814c:	d102      	bne.n	8008154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800814e:	2303      	movs	r3, #3
 8008150:	613b      	str	r3, [r7, #16]
 8008152:	e025      	b.n	80081a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e035      	b.n	80081c4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800815e:	d90f      	bls.n	8008180 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d109      	bne.n	800817a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800816c:	d902      	bls.n	8008174 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800816e:	2300      	movs	r3, #0
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	e015      	b.n	80081a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008174:	2301      	movs	r3, #1
 8008176:	613b      	str	r3, [r7, #16]
 8008178:	e012      	b.n	80081a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800817a:	2300      	movs	r3, #0
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	e00f      	b.n	80081a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008186:	d109      	bne.n	800819c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800818e:	d102      	bne.n	8008196 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008190:	2301      	movs	r3, #1
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	e004      	b.n	80081a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008196:	2302      	movs	r3, #2
 8008198:	613b      	str	r3, [r7, #16]
 800819a:	e001      	b.n	80081a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800819c:	2301      	movs	r3, #1
 800819e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80081a0:	4b0b      	ldr	r3, [pc, #44]	@ (80081d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f023 020f 	bic.w	r2, r3, #15
 80081a8:	4909      	ldr	r1, [pc, #36]	@ (80081d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80081b0:	4b07      	ldr	r3, [pc, #28]	@ (80081d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 030f 	and.w	r3, r3, #15
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d001      	beq.n	80081c2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e000      	b.n	80081c4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	46020c00 	.word	0x46020c00
 80081d0:	40022000 	.word	0x40022000

080081d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80081d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081d8:	b0b8      	sub	sp, #224	@ 0xe0
 80081da:	af00      	add	r7, sp, #0
 80081dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80081e0:	2300      	movs	r3, #0
 80081e2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081e6:	2300      	movs	r3, #0
 80081e8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	f002 0401 	and.w	r4, r2, #1
 80081f8:	2500      	movs	r5, #0
 80081fa:	ea54 0305 	orrs.w	r3, r4, r5
 80081fe:	d00b      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008200:	4bca      	ldr	r3, [pc, #808]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008206:	f023 0103 	bic.w	r1, r3, #3
 800820a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800820e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008210:	4ac6      	ldr	r2, [pc, #792]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008212:	430b      	orrs	r3, r1
 8008214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008218:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f002 0802 	and.w	r8, r2, #2
 8008224:	f04f 0900 	mov.w	r9, #0
 8008228:	ea58 0309 	orrs.w	r3, r8, r9
 800822c:	d00b      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800822e:	4bbf      	ldr	r3, [pc, #764]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008234:	f023 010c 	bic.w	r1, r3, #12
 8008238:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800823c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823e:	4abb      	ldr	r2, [pc, #748]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008240:	430b      	orrs	r3, r1
 8008242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008246:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f002 0a04 	and.w	sl, r2, #4
 8008252:	f04f 0b00 	mov.w	fp, #0
 8008256:	ea5a 030b 	orrs.w	r3, sl, fp
 800825a:	d00b      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800825c:	4bb3      	ldr	r3, [pc, #716]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800825e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008262:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800826a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800826c:	4aaf      	ldr	r2, [pc, #700]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800826e:	430b      	orrs	r3, r1
 8008270:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f002 0308 	and.w	r3, r2, #8
 8008280:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008284:	2300      	movs	r3, #0
 8008286:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800828a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800828e:	460b      	mov	r3, r1
 8008290:	4313      	orrs	r3, r2
 8008292:	d00b      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008294:	4ba5      	ldr	r3, [pc, #660]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800829a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800829e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082a4:	4aa1      	ldr	r2, [pc, #644]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80082a6:	430b      	orrs	r3, r1
 80082a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80082ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	f002 0310 	and.w	r3, r2, #16
 80082b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082bc:	2300      	movs	r3, #0
 80082be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80082c6:	460b      	mov	r3, r1
 80082c8:	4313      	orrs	r3, r2
 80082ca:	d00b      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80082cc:	4b97      	ldr	r3, [pc, #604]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80082ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80082d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082dc:	4a93      	ldr	r2, [pc, #588]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80082de:	430b      	orrs	r3, r1
 80082e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f002 0320 	and.w	r3, r2, #32
 80082f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082f4:	2300      	movs	r3, #0
 80082f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80082fe:	460b      	mov	r3, r1
 8008300:	4313      	orrs	r3, r2
 8008302:	d00b      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008304:	4b89      	ldr	r3, [pc, #548]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800830a:	f023 0107 	bic.w	r1, r3, #7
 800830e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008314:	4a85      	ldr	r2, [pc, #532]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008316:	430b      	orrs	r3, r1
 8008318:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800831c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800832c:	2300      	movs	r3, #0
 800832e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008332:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008336:	460b      	mov	r3, r1
 8008338:	4313      	orrs	r3, r2
 800833a:	d00b      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800833c:	4b7b      	ldr	r3, [pc, #492]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800833e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008342:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008346:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800834a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800834c:	4a77      	ldr	r2, [pc, #476]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800834e:	430b      	orrs	r3, r1
 8008350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008360:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008364:	2300      	movs	r3, #0
 8008366:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800836a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800836e:	460b      	mov	r3, r1
 8008370:	4313      	orrs	r3, r2
 8008372:	d00b      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008374:	4b6d      	ldr	r3, [pc, #436]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800837a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800837e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008384:	4a69      	ldr	r2, [pc, #420]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008386:	430b      	orrs	r3, r1
 8008388:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800838c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8008398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800839c:	2300      	movs	r3, #0
 800839e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80083a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80083a6:	460b      	mov	r3, r1
 80083a8:	4313      	orrs	r3, r2
 80083aa:	d00b      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80083ac:	4b5f      	ldr	r3, [pc, #380]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80083ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80083b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083bc:	4a5b      	ldr	r2, [pc, #364]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80083be:	430b      	orrs	r3, r1
 80083c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80083c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80083d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80083d4:	2300      	movs	r3, #0
 80083d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80083da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80083de:	460b      	mov	r3, r1
 80083e0:	4313      	orrs	r3, r2
 80083e2:	d00b      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80083e4:	4b51      	ldr	r3, [pc, #324]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80083e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083ea:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80083ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083f4:	4a4d      	ldr	r2, [pc, #308]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80083f6:	430b      	orrs	r3, r1
 80083f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80083fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8008408:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800840c:	2300      	movs	r3, #0
 800840e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008412:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008416:	460b      	mov	r3, r1
 8008418:	4313      	orrs	r3, r2
 800841a:	d00b      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800841c:	4b43      	ldr	r3, [pc, #268]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800841e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008422:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008426:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800842a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800842c:	4a3f      	ldr	r2, [pc, #252]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800842e:	430b      	orrs	r3, r1
 8008430:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008440:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008444:	2300      	movs	r3, #0
 8008446:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800844a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800844e:	460b      	mov	r3, r1
 8008450:	4313      	orrs	r3, r2
 8008452:	d00b      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008454:	4b35      	ldr	r3, [pc, #212]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800845a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800845e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008462:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008464:	4a31      	ldr	r2, [pc, #196]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008466:	430b      	orrs	r3, r1
 8008468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800846c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008478:	67bb      	str	r3, [r7, #120]	@ 0x78
 800847a:	2300      	movs	r3, #0
 800847c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800847e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008482:	460b      	mov	r3, r1
 8008484:	4313      	orrs	r3, r2
 8008486:	d00c      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008488:	4b28      	ldr	r3, [pc, #160]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800848a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800848e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008492:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800849a:	4a24      	ldr	r2, [pc, #144]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800849c:	430b      	orrs	r3, r1
 800849e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80084a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80084ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80084b0:	2300      	movs	r3, #0
 80084b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80084b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80084b8:	460b      	mov	r3, r1
 80084ba:	4313      	orrs	r3, r2
 80084bc:	d04f      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80084be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c6:	2b80      	cmp	r3, #128	@ 0x80
 80084c8:	d02d      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80084ca:	2b80      	cmp	r3, #128	@ 0x80
 80084cc:	d827      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80084ce:	2b60      	cmp	r3, #96	@ 0x60
 80084d0:	d02e      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80084d2:	2b60      	cmp	r3, #96	@ 0x60
 80084d4:	d823      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80084d6:	2b40      	cmp	r3, #64	@ 0x40
 80084d8:	d006      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80084da:	2b40      	cmp	r3, #64	@ 0x40
 80084dc:	d81f      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d009      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	d011      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x336>
 80084e6:	e01a      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80084e8:	4b10      	ldr	r3, [pc, #64]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80084ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ec:	4a0f      	ldr	r2, [pc, #60]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80084ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084f2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80084f4:	e01d      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80084f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084fa:	3308      	adds	r3, #8
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fc0d 	bl	8008d1c <RCCEx_PLL2_Config>
 8008502:	4603      	mov	r3, r0
 8008504:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008508:	e013      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800850a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800850e:	332c      	adds	r3, #44	@ 0x2c
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fc9b 	bl	8008e4c <RCCEx_PLL3_Config>
 8008516:	4603      	mov	r3, r0
 8008518:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800851c:	e009      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008524:	e005      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8008526:	bf00      	nop
 8008528:	e003      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800852a:	bf00      	nop
 800852c:	46020c00 	.word	0x46020c00
        break;
 8008530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008532:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10d      	bne.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800853a:	4bb6      	ldr	r3, [pc, #728]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800853c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008540:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8008544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800854c:	4ab1      	ldr	r2, [pc, #708]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800854e:	430b      	orrs	r3, r1
 8008550:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008554:	e003      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008556:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800855a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800855e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800856a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800856c:	2300      	movs	r3, #0
 800856e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008570:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008574:	460b      	mov	r3, r1
 8008576:	4313      	orrs	r3, r2
 8008578:	d053      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800857a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800857e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008586:	d033      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800858c:	d82c      	bhi.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800858e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008592:	d02f      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008594:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008598:	d826      	bhi.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800859a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859e:	d008      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80085a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085a4:	d820      	bhi.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80085aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ae:	d011      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80085b0:	e01a      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80085b2:	4b98      	ldr	r3, [pc, #608]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80085b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b6:	4a97      	ldr	r2, [pc, #604]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80085b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085bc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80085be:	e01a      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085c4:	3308      	adds	r3, #8
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fba8 	bl	8008d1c <RCCEx_PLL2_Config>
 80085cc:	4603      	mov	r3, r0
 80085ce:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80085d2:	e010      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80085d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085d8:	332c      	adds	r3, #44	@ 0x2c
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fc36 	bl	8008e4c <RCCEx_PLL3_Config>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80085e6:	e006      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80085ee:	e002      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80085f0:	bf00      	nop
 80085f2:	e000      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80085f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085f6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10d      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80085fe:	4b85      	ldr	r3, [pc, #532]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008600:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008604:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800860c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008610:	4a80      	ldr	r2, [pc, #512]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008612:	430b      	orrs	r3, r1
 8008614:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008618:	e003      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800861e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008622:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800862e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008630:	2300      	movs	r3, #0
 8008632:	667b      	str	r3, [r7, #100]	@ 0x64
 8008634:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008638:	460b      	mov	r3, r1
 800863a:	4313      	orrs	r3, r2
 800863c:	d046      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800863e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008642:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008646:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800864a:	d028      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800864c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008650:	d821      	bhi.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008652:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008656:	d022      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008658:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800865c:	d81b      	bhi.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800865e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008662:	d01c      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008664:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008668:	d815      	bhi.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800866a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800866e:	d008      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008674:	d80f      	bhi.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d011      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800867a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800867e:	d00e      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008680:	e009      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008682:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008686:	3308      	adds	r3, #8
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fb47 	bl	8008d1c <RCCEx_PLL2_Config>
 800868e:	4603      	mov	r3, r0
 8008690:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008694:	e004      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800869c:	e000      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800869e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086a0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10d      	bne.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80086a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80086aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086ae:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80086b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80086ba:	4a56      	ldr	r2, [pc, #344]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80086bc:	430b      	orrs	r3, r1
 80086be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80086c2:	e003      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80086c8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80086cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80086d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086da:	2300      	movs	r3, #0
 80086dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80086e2:	460b      	mov	r3, r1
 80086e4:	4313      	orrs	r3, r2
 80086e6:	d03f      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80086e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	d81e      	bhi.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80086f4:	a201      	add	r2, pc, #4	@ (adr r2, 80086fc <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80086f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	0800873b 	.word	0x0800873b
 8008700:	08008711 	.word	0x08008711
 8008704:	0800871f 	.word	0x0800871f
 8008708:	0800873b 	.word	0x0800873b
 800870c:	0800873b 	.word	0x0800873b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008710:	4b40      	ldr	r3, [pc, #256]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008714:	4a3f      	ldr	r2, [pc, #252]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800871a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800871c:	e00e      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800871e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008722:	332c      	adds	r3, #44	@ 0x2c
 8008724:	4618      	mov	r0, r3
 8008726:	f000 fb91 	bl	8008e4c <RCCEx_PLL3_Config>
 800872a:	4603      	mov	r3, r0
 800872c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008730:	e004      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008738:	e000      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800873a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800873c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10d      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8008744:	4b33      	ldr	r3, [pc, #204]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008746:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800874a:	f023 0107 	bic.w	r1, r3, #7
 800874e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008756:	4a2f      	ldr	r2, [pc, #188]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008758:	430b      	orrs	r3, r1
 800875a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800875e:	e003      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008760:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008764:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008768:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008774:	653b      	str	r3, [r7, #80]	@ 0x50
 8008776:	2300      	movs	r3, #0
 8008778:	657b      	str	r3, [r7, #84]	@ 0x54
 800877a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800877e:	460b      	mov	r3, r1
 8008780:	4313      	orrs	r3, r2
 8008782:	d04d      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800878c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008790:	d028      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8008792:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008796:	d821      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008798:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800879c:	d024      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800879e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80087a2:	d81b      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80087a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087a8:	d00e      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80087aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087ae:	d815      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d01b      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x618>
 80087b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087b8:	d110      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80087ba:	4b16      	ldr	r3, [pc, #88]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80087bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087be:	4a15      	ldr	r2, [pc, #84]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80087c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087c4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80087c6:	e012      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80087c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087cc:	332c      	adds	r3, #44	@ 0x2c
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 fb3c 	bl	8008e4c <RCCEx_PLL3_Config>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80087da:	e008      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80087e2:	e004      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80087e4:	bf00      	nop
 80087e6:	e002      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80087e8:	bf00      	nop
 80087ea:	e000      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80087ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80087ee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d110      	bne.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80087f6:	4b07      	ldr	r3, [pc, #28]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80087f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008800:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008808:	4a02      	ldr	r2, [pc, #8]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800880a:	430b      	orrs	r3, r1
 800880c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008810:	e006      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008812:	bf00      	nop
 8008814:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008818:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800881c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800882c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800882e:	2300      	movs	r3, #0
 8008830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008832:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008836:	460b      	mov	r3, r1
 8008838:	4313      	orrs	r3, r2
 800883a:	f000 80b5 	beq.w	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800883e:	2300      	movs	r3, #0
 8008840:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008844:	4b9d      	ldr	r3, [pc, #628]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800884a:	f003 0304 	and.w	r3, r3, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	d113      	bne.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008852:	4b9a      	ldr	r3, [pc, #616]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008858:	4a98      	ldr	r2, [pc, #608]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800885a:	f043 0304 	orr.w	r3, r3, #4
 800885e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008862:	4b96      	ldr	r3, [pc, #600]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008870:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8008874:	2301      	movs	r3, #1
 8008876:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800887a:	4b91      	ldr	r3, [pc, #580]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800887c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887e:	4a90      	ldr	r2, [pc, #576]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008886:	f7fb f8fb 	bl	8003a80 <HAL_GetTick>
 800888a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800888e:	e00b      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008890:	f7fb f8f6 	bl	8003a80 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	2b02      	cmp	r3, #2
 800889e:	d903      	bls.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80088a6:	e005      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80088a8:	4b85      	ldr	r3, [pc, #532]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80088aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0ed      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 80088b4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d165      	bne.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80088bc:	4b7f      	ldr	r3, [pc, #508]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80088be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80088ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d023      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x746>
 80088d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80088d6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80088da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088de:	4293      	cmp	r3, r2
 80088e0:	d01b      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80088e2:	4b76      	ldr	r3, [pc, #472]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80088e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088f0:	4b72      	ldr	r3, [pc, #456]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80088f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088f6:	4a71      	ldr	r2, [pc, #452]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80088f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008900:	4b6e      	ldr	r3, [pc, #440]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008906:	4a6d      	ldr	r2, [pc, #436]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800890c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008910:	4a6a      	ldr	r2, [pc, #424]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008916:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800891a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d019      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008926:	f7fb f8ab 	bl	8003a80 <HAL_GetTick>
 800892a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800892e:	e00d      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008930:	f7fb f8a6 	bl	8003a80 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800893a:	1ad2      	subs	r2, r2, r3
 800893c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008940:	429a      	cmp	r2, r3
 8008942:	d903      	bls.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 800894a:	e006      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800894c:	4b5b      	ldr	r3, [pc, #364]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800894e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0ea      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800895a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10d      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008962:	4b56      	ldr	r3, [pc, #344]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008968:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800896c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008970:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008974:	4a51      	ldr	r2, [pc, #324]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008976:	430b      	orrs	r3, r1
 8008978:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800897c:	e008      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800897e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008982:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8008986:	e003      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008988:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800898c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008990:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8008994:	2b01      	cmp	r3, #1
 8008996:	d107      	bne.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008998:	4b48      	ldr	r3, [pc, #288]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800899a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800899e:	4a47      	ldr	r2, [pc, #284]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80089a0:	f023 0304 	bic.w	r3, r3, #4
 80089a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80089a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80089b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80089b6:	2300      	movs	r3, #0
 80089b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80089ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80089be:	460b      	mov	r3, r1
 80089c0:	4313      	orrs	r3, r2
 80089c2:	d042      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80089c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80089c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089cc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80089d0:	d022      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80089d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80089d6:	d81b      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80089d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089dc:	d011      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80089de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089e2:	d815      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d019      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x848>
 80089e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089ec:	d110      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80089ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80089f2:	3308      	adds	r3, #8
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f991 	bl	8008d1c <RCCEx_PLL2_Config>
 80089fa:	4603      	mov	r3, r0
 80089fc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008a00:	e00d      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a02:	4b2e      	ldr	r3, [pc, #184]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a06:	4a2d      	ldr	r2, [pc, #180]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a0c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008a0e:	e006      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008a16:	e002      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8008a18:	bf00      	nop
 8008a1a:	e000      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8008a1c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008a1e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10d      	bne.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8008a26:	4b25      	ldr	r3, [pc, #148]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a2c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008a30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a38:	4a20      	ldr	r2, [pc, #128]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008a3a:	430b      	orrs	r3, r1
 8008a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008a40:	e003      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a42:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008a46:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008a56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a58:	2300      	movs	r3, #0
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a5c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008a60:	460b      	mov	r3, r1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	d032      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008a66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a72:	d00b      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a78:	d804      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d008      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a82:	d007      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008a8a:	e004      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008a8c:	bf00      	nop
 8008a8e:	e002      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008a90:	bf00      	nop
 8008a92:	e000      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008a94:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008a96:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d112      	bne.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008a9e:	4b07      	ldr	r3, [pc, #28]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008aa0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008aa4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008aa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ab0:	4a02      	ldr	r2, [pc, #8]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008ab8:	e008      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8008aba:	bf00      	nop
 8008abc:	46020c00 	.word	0x46020c00
 8008ac0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008ac8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ada:	2300      	movs	r3, #0
 8008adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ade:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	d019      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008ae8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008af0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008af4:	d105      	bne.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008af6:	4b88      	ldr	r3, [pc, #544]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008afa:	4a87      	ldr	r2, [pc, #540]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b00:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008b02:	4b85      	ldr	r3, [pc, #532]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008b04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b08:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b14:	4a80      	ldr	r2, [pc, #512]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008b16:	430b      	orrs	r3, r1
 8008b18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008b32:	460b      	mov	r3, r1
 8008b34:	4313      	orrs	r3, r2
 8008b36:	d00c      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008b38:	4b77      	ldr	r3, [pc, #476]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008b4a:	4973      	ldr	r1, [pc, #460]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008b52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008b5e:	623b      	str	r3, [r7, #32]
 8008b60:	2300      	movs	r3, #0
 8008b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b64:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	d00c      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008b78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b80:	4965      	ldr	r1, [pc, #404]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008b94:	61bb      	str	r3, [r7, #24]
 8008b96:	2300      	movs	r3, #0
 8008b98:	61fb      	str	r3, [r7, #28]
 8008b9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	d00c      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008ba4:	4b5c      	ldr	r3, [pc, #368]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008ba6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008baa:	f023 0218 	bic.w	r2, r3, #24
 8008bae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008bb2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008bb6:	4958      	ldr	r1, [pc, #352]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008bbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008bca:	613b      	str	r3, [r7, #16]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	d032      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008bda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008bde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008be2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008be6:	d105      	bne.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008be8:	4b4b      	ldr	r3, [pc, #300]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bec:	4a4a      	ldr	r2, [pc, #296]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bf2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008bf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008bf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008bfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c00:	d108      	bne.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c06:	3308      	adds	r3, #8
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 f887 	bl	8008d1c <RCCEx_PLL2_Config>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8008c14:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10d      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008c1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008c26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c2e:	493a      	ldr	r1, [pc, #232]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008c36:	e003      	b.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c38:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008c3c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008c4c:	60bb      	str	r3, [r7, #8]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008c56:	460b      	mov	r3, r1
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	d03a      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c68:	d00e      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008c6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c6e:	d815      	bhi.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d017      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8008c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c78:	d110      	bne.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c7a:	4b27      	ldr	r3, [pc, #156]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7e:	4a26      	ldr	r2, [pc, #152]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c84:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008c86:	e00e      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c8c:	3308      	adds	r3, #8
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f844 	bl	8008d1c <RCCEx_PLL2_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008c9a:	e004      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008ca2:	e000      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8008ca4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008ca6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10d      	bne.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008cae:	4b1a      	ldr	r3, [pc, #104]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cb4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008cb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cc0:	4915      	ldr	r1, [pc, #84]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008cc8:	e003      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008cce:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	607b      	str	r3, [r7, #4]
 8008ce4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4313      	orrs	r3, r2
 8008cec:	d00c      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8008cee:	4b0a      	ldr	r3, [pc, #40]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cf4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008cf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008cfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008d00:	4905      	ldr	r1, [pc, #20]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8008d08:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	37e0      	adds	r7, #224	@ 0xe0
 8008d10:	46bd      	mov	sp, r7
 8008d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d16:	bf00      	nop
 8008d18:	46020c00 	.word	0x46020c00

08008d1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008d24:	4b47      	ldr	r3, [pc, #284]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a46      	ldr	r2, [pc, #280]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008d2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d2e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d30:	f7fa fea6 	bl	8003a80 <HAL_GetTick>
 8008d34:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d36:	e008      	b.n	8008d4a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d38:	f7fa fea2 	bl	8003a80 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d901      	bls.n	8008d4a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e077      	b.n	8008e3a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1f0      	bne.n	8008d38 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008d56:	4b3b      	ldr	r3, [pc, #236]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008d5e:	f023 0303 	bic.w	r3, r3, #3
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	6811      	ldr	r1, [r2, #0]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	6852      	ldr	r2, [r2, #4]
 8008d6a:	3a01      	subs	r2, #1
 8008d6c:	0212      	lsls	r2, r2, #8
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	4934      	ldr	r1, [pc, #208]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008d76:	4b33      	ldr	r3, [pc, #204]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008d78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d7a:	4b33      	ldr	r3, [pc, #204]	@ (8008e48 <RCCEx_PLL2_Config+0x12c>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	6892      	ldr	r2, [r2, #8]
 8008d82:	3a01      	subs	r2, #1
 8008d84:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	68d2      	ldr	r2, [r2, #12]
 8008d8c:	3a01      	subs	r2, #1
 8008d8e:	0252      	lsls	r2, r2, #9
 8008d90:	b292      	uxth	r2, r2
 8008d92:	4311      	orrs	r1, r2
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	6912      	ldr	r2, [r2, #16]
 8008d98:	3a01      	subs	r2, #1
 8008d9a:	0412      	lsls	r2, r2, #16
 8008d9c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008da0:	4311      	orrs	r1, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6952      	ldr	r2, [r2, #20]
 8008da6:	3a01      	subs	r2, #1
 8008da8:	0612      	lsls	r2, r2, #24
 8008daa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008dae:	430a      	orrs	r2, r1
 8008db0:	4924      	ldr	r1, [pc, #144]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008db2:	4313      	orrs	r3, r2
 8008db4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008db6:	4b23      	ldr	r3, [pc, #140]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dba:	f023 020c 	bic.w	r2, r3, #12
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	4920      	ldr	r1, [pc, #128]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	491c      	ldr	r1, [pc, #112]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dda:	4a1a      	ldr	r2, [pc, #104]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008ddc:	f023 0310 	bic.w	r3, r3, #16
 8008de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008de2:	4b18      	ldr	r3, [pc, #96]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	69d2      	ldr	r2, [r2, #28]
 8008df2:	00d2      	lsls	r2, r2, #3
 8008df4:	4913      	ldr	r1, [pc, #76]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008dfa:	4b12      	ldr	r3, [pc, #72]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfe:	4a11      	ldr	r2, [pc, #68]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008e00:	f043 0310 	orr.w	r3, r3, #16
 8008e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008e06:	4b0f      	ldr	r3, [pc, #60]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008e0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e10:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e12:	f7fa fe35 	bl	8003a80 <HAL_GetTick>
 8008e16:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e18:	e008      	b.n	8008e2c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e1a:	f7fa fe31 	bl	8003a80 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d901      	bls.n	8008e2c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e006      	b.n	8008e3a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e2c:	4b05      	ldr	r3, [pc, #20]	@ (8008e44 <RCCEx_PLL2_Config+0x128>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d0f0      	beq.n	8008e1a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008e38:	2300      	movs	r3, #0

}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	46020c00 	.word	0x46020c00
 8008e48:	80800000 	.word	0x80800000

08008e4c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008e54:	4b47      	ldr	r3, [pc, #284]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a46      	ldr	r2, [pc, #280]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e60:	f7fa fe0e 	bl	8003a80 <HAL_GetTick>
 8008e64:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e66:	e008      	b.n	8008e7a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e68:	f7fa fe0a 	bl	8003a80 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d901      	bls.n	8008e7a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e077      	b.n	8008f6a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1f0      	bne.n	8008e68 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008e86:	4b3b      	ldr	r3, [pc, #236]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008e8e:	f023 0303 	bic.w	r3, r3, #3
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	6811      	ldr	r1, [r2, #0]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	6852      	ldr	r2, [r2, #4]
 8008e9a:	3a01      	subs	r2, #1
 8008e9c:	0212      	lsls	r2, r2, #8
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	4934      	ldr	r1, [pc, #208]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	630b      	str	r3, [r1, #48]	@ 0x30
 8008ea6:	4b33      	ldr	r3, [pc, #204]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008eaa:	4b33      	ldr	r3, [pc, #204]	@ (8008f78 <RCCEx_PLL3_Config+0x12c>)
 8008eac:	4013      	ands	r3, r2
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	6892      	ldr	r2, [r2, #8]
 8008eb2:	3a01      	subs	r2, #1
 8008eb4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	68d2      	ldr	r2, [r2, #12]
 8008ebc:	3a01      	subs	r2, #1
 8008ebe:	0252      	lsls	r2, r2, #9
 8008ec0:	b292      	uxth	r2, r2
 8008ec2:	4311      	orrs	r1, r2
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	6912      	ldr	r2, [r2, #16]
 8008ec8:	3a01      	subs	r2, #1
 8008eca:	0412      	lsls	r2, r2, #16
 8008ecc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008ed0:	4311      	orrs	r1, r2
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	6952      	ldr	r2, [r2, #20]
 8008ed6:	3a01      	subs	r2, #1
 8008ed8:	0612      	lsls	r2, r2, #24
 8008eda:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	4924      	ldr	r1, [pc, #144]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008ee6:	4b23      	ldr	r3, [pc, #140]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eea:	f023 020c 	bic.w	r2, r3, #12
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	4920      	ldr	r1, [pc, #128]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008efa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	491c      	ldr	r1, [pc, #112]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008f06:	4b1b      	ldr	r3, [pc, #108]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008f0c:	f023 0310 	bic.w	r3, r3, #16
 8008f10:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f12:	4b18      	ldr	r3, [pc, #96]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f1a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	69d2      	ldr	r2, [r2, #28]
 8008f22:	00d2      	lsls	r2, r2, #3
 8008f24:	4913      	ldr	r1, [pc, #76]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008f2a:	4b12      	ldr	r3, [pc, #72]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2e:	4a11      	ldr	r2, [pc, #68]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008f30:	f043 0310 	orr.w	r3, r3, #16
 8008f34:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008f36:	4b0f      	ldr	r3, [pc, #60]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f40:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f42:	f7fa fd9d 	bl	8003a80 <HAL_GetTick>
 8008f46:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f48:	e008      	b.n	8008f5c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f4a:	f7fa fd99 	bl	8003a80 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d901      	bls.n	8008f5c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e006      	b.n	8008f6a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f5c:	4b05      	ldr	r3, [pc, #20]	@ (8008f74 <RCCEx_PLL3_Config+0x128>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0f0      	beq.n	8008f4a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	46020c00 	.word	0x46020c00
 8008f78:	80800000 	.word	0x80800000

08008f7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e0fb      	b.n	8009186 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a7f      	ldr	r2, [pc, #508]	@ (8009190 <HAL_SPI_Init+0x214>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d004      	beq.n	8008fa2 <HAL_SPI_Init+0x26>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a7d      	ldr	r2, [pc, #500]	@ (8009194 <HAL_SPI_Init+0x218>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	e000      	b.n	8008fa4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008fa2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a78      	ldr	r2, [pc, #480]	@ (8009190 <HAL_SPI_Init+0x214>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d004      	beq.n	8008fbe <HAL_SPI_Init+0x42>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a76      	ldr	r2, [pc, #472]	@ (8009194 <HAL_SPI_Init+0x218>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d105      	bne.n	8008fca <HAL_SPI_Init+0x4e>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	2b0f      	cmp	r3, #15
 8008fc4:	d901      	bls.n	8008fca <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e0dd      	b.n	8009186 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fbce 	bl	800976c <SPI_GetPacketSize>
 8008fd0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8009190 <HAL_SPI_Init+0x214>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d004      	beq.n	8008fe6 <HAL_SPI_Init+0x6a>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a6c      	ldr	r2, [pc, #432]	@ (8009194 <HAL_SPI_Init+0x218>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d102      	bne.n	8008fec <HAL_SPI_Init+0x70>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d816      	bhi.n	800901a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008ff0:	4a69      	ldr	r2, [pc, #420]	@ (8009198 <HAL_SPI_Init+0x21c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d00e      	beq.n	8009014 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a68      	ldr	r2, [pc, #416]	@ (800919c <HAL_SPI_Init+0x220>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d009      	beq.n	8009014 <HAL_SPI_Init+0x98>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a66      	ldr	r2, [pc, #408]	@ (80091a0 <HAL_SPI_Init+0x224>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d004      	beq.n	8009014 <HAL_SPI_Init+0x98>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a65      	ldr	r2, [pc, #404]	@ (80091a4 <HAL_SPI_Init+0x228>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d104      	bne.n	800901e <HAL_SPI_Init+0xa2>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b10      	cmp	r3, #16
 8009018:	d901      	bls.n	800901e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e0b3      	b.n	8009186 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7f8 fafc 	bl	8001630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0201 	bic.w	r2, r2, #1
 800904e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800905a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009064:	d119      	bne.n	800909a <HAL_SPI_Init+0x11e>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800906e:	d103      	bne.n	8009078 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009074:	2b00      	cmp	r3, #0
 8009076:	d008      	beq.n	800908a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10c      	bne.n	800909a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009088:	d107      	bne.n	800909a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009098:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00f      	beq.n	80090c6 <HAL_SPI_Init+0x14a>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	2b06      	cmp	r3, #6
 80090ac:	d90b      	bls.n	80090c6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e007      	b.n	80090d6 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80090d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	69da      	ldr	r2, [r3, #28]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090de:	431a      	orrs	r2, r3
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	431a      	orrs	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090e8:	ea42 0103 	orr.w	r1, r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	430a      	orrs	r2, r1
 80090f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009100:	431a      	orrs	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	431a      	orrs	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	431a      	orrs	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	431a      	orrs	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	431a      	orrs	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	431a      	orrs	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800912a:	431a      	orrs	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	431a      	orrs	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009136:	431a      	orrs	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800913c:	431a      	orrs	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009142:	ea42 0103 	orr.w	r1, r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	430a      	orrs	r2, r1
 8009150:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	430a      	orrs	r2, r1
 8009172:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	46002000 	.word	0x46002000
 8009194:	56002000 	.word	0x56002000
 8009198:	40013000 	.word	0x40013000
 800919c:	50013000 	.word	0x50013000
 80091a0:	40003800 	.word	0x40003800
 80091a4:	50003800 	.word	0x50003800

080091a8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	4613      	mov	r3, r2
 80091b6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3320      	adds	r3, #32
 80091be:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a90      	ldr	r2, [pc, #576]	@ (8009408 <HAL_SPI_Transmit+0x260>)
 80091c6:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091c8:	f7fa fc5a 	bl	8003a80 <HAL_GetTick>
 80091cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d001      	beq.n	80091de <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 80091da:	2302      	movs	r3, #2
 80091dc:	e1f4      	b.n	80095c8 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <HAL_SPI_Transmit+0x42>
 80091e4:	88fb      	ldrh	r3, [r7, #6]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e1ec      	b.n	80095c8 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d101      	bne.n	80091fc <HAL_SPI_Transmit+0x54>
 80091f8:	2302      	movs	r3, #2
 80091fa:	e1e5      	b.n	80095c8 <HAL_SPI_Transmit+0x420>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2203      	movs	r2, #3
 8009208:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	88fa      	ldrh	r2, [r7, #6]
 800921e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	88fa      	ldrh	r2, [r7, #6]
 8009226:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009254:	d108      	bne.n	8009268 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	e009      	b.n	800927c <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800927a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	0c1b      	lsrs	r3, r3, #16
 8009284:	041b      	lsls	r3, r3, #16
 8009286:	88f9      	ldrh	r1, [r7, #6]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	6812      	ldr	r2, [r2, #0]
 800928c:	430b      	orrs	r3, r1
 800928e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f042 0201 	orr.w	r2, r2, #1
 800929e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10c      	bne.n	80092c8 <HAL_SPI_Transmit+0x120>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092b6:	d107      	bne.n	80092c8 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	2b0f      	cmp	r3, #15
 80092ce:	d95b      	bls.n	8009388 <HAL_SPI_Transmit+0x1e0>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a4d      	ldr	r2, [pc, #308]	@ (800940c <HAL_SPI_Transmit+0x264>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d04f      	beq.n	800937a <HAL_SPI_Transmit+0x1d2>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a4c      	ldr	r2, [pc, #304]	@ (8009410 <HAL_SPI_Transmit+0x268>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d04a      	beq.n	800937a <HAL_SPI_Transmit+0x1d2>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a4a      	ldr	r2, [pc, #296]	@ (8009414 <HAL_SPI_Transmit+0x26c>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d045      	beq.n	800937a <HAL_SPI_Transmit+0x1d2>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a49      	ldr	r2, [pc, #292]	@ (8009418 <HAL_SPI_Transmit+0x270>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d147      	bne.n	8009388 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80092f8:	e03f      	b.n	800937a <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b02      	cmp	r3, #2
 8009306:	d114      	bne.n	8009332 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6812      	ldr	r2, [r2, #0]
 8009312:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009318:	1d1a      	adds	r2, r3, #4
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009324:	b29b      	uxth	r3, r3
 8009326:	3b01      	subs	r3, #1
 8009328:	b29a      	uxth	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009330:	e023      	b.n	800937a <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009332:	f7fa fba5 	bl	8003a80 <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	429a      	cmp	r2, r3
 8009340:	d803      	bhi.n	800934a <HAL_SPI_Transmit+0x1a2>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009348:	d102      	bne.n	8009350 <HAL_SPI_Transmit+0x1a8>
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d114      	bne.n	800937a <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 f93d 	bl	80095d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800935c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e126      	b.n	80095c8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1b9      	bne.n	80092fa <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009386:	e0f9      	b.n	800957c <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	2b07      	cmp	r3, #7
 800938e:	f240 80ee 	bls.w	800956e <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009392:	e067      	b.n	8009464 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d13c      	bne.n	800941c <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d918      	bls.n	80093e0 <HAL_SPI_Transmit+0x238>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d014      	beq.n	80093e0 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6812      	ldr	r2, [r2, #0]
 80093c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093c6:	1d1a      	adds	r2, r3, #4
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	3b02      	subs	r3, #2
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80093de:	e041      	b.n	8009464 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093e4:	881a      	ldrh	r2, [r3, #0]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ee:	1c9a      	adds	r2, r3, #2
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29a      	uxth	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009406:	e02d      	b.n	8009464 <HAL_SPI_Transmit+0x2bc>
 8009408:	46002000 	.word	0x46002000
 800940c:	40013000 	.word	0x40013000
 8009410:	50013000 	.word	0x50013000
 8009414:	40003800 	.word	0x40003800
 8009418:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800941c:	f7fa fb30 	bl	8003a80 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d803      	bhi.n	8009434 <HAL_SPI_Transmit+0x28c>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009432:	d102      	bne.n	800943a <HAL_SPI_Transmit+0x292>
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d114      	bne.n	8009464 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f8c8 	bl	80095d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009446:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e0b1      	b.n	80095c8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800946a:	b29b      	uxth	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	d191      	bne.n	8009394 <HAL_SPI_Transmit+0x1ec>
 8009470:	e084      	b.n	800957c <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b02      	cmp	r3, #2
 800947e:	d152      	bne.n	8009526 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009486:	b29b      	uxth	r3, r3
 8009488:	2b03      	cmp	r3, #3
 800948a:	d918      	bls.n	80094be <HAL_SPI_Transmit+0x316>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009490:	2b40      	cmp	r3, #64	@ 0x40
 8009492:	d914      	bls.n	80094be <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6812      	ldr	r2, [r2, #0]
 800949e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094a4:	1d1a      	adds	r2, r3, #4
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	3b04      	subs	r3, #4
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80094bc:	e057      	b.n	800956e <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d917      	bls.n	80094fa <HAL_SPI_Transmit+0x352>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d013      	beq.n	80094fa <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094d6:	881a      	ldrh	r2, [r3, #0]
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094e0:	1c9a      	adds	r2, r3, #2
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3b02      	subs	r3, #2
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80094f8:	e039      	b.n	800956e <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3320      	adds	r3, #32
 8009504:	7812      	ldrb	r2, [r2, #0]
 8009506:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800950c:	1c5a      	adds	r2, r3, #1
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009518:	b29b      	uxth	r3, r3
 800951a:	3b01      	subs	r3, #1
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009524:	e023      	b.n	800956e <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009526:	f7fa faab 	bl	8003a80 <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d803      	bhi.n	800953e <HAL_SPI_Transmit+0x396>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953c:	d102      	bne.n	8009544 <HAL_SPI_Transmit+0x39c>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d114      	bne.n	800956e <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 f843 	bl	80095d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009550:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e02c      	b.n	80095c8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009574:	b29b      	uxth	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	f47f af7b 	bne.w	8009472 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2200      	movs	r2, #0
 8009584:	2108      	movs	r1, #8
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 f8c2 	bl	8009710 <SPI_WaitOnFlagUntilTimeout>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d007      	beq.n	80095a2 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009598:	f043 0220 	orr.w	r2, r3, #32
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f000 f814 	bl	80095d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e000      	b.n	80095c8 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 80095c6:	2300      	movs	r3, #0
  }
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	699a      	ldr	r2, [r3, #24]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 0208 	orr.w	r2, r2, #8
 80095ee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	699a      	ldr	r2, [r3, #24]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f042 0210 	orr.w	r2, r2, #16
 80095fe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 0201 	bic.w	r2, r2, #1
 800960e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	6812      	ldr	r2, [r2, #0]
 800961a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800961e:	f023 0303 	bic.w	r3, r3, #3
 8009622:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	689a      	ldr	r2, [r3, #8]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009632:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b04      	cmp	r3, #4
 800963e:	d014      	beq.n	800966a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f003 0320 	and.w	r3, r3, #32
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00f      	beq.n	800966a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009650:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	699a      	ldr	r2, [r3, #24]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f042 0220 	orr.w	r2, r2, #32
 8009668:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b03      	cmp	r3, #3
 8009674:	d014      	beq.n	80096a0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00f      	beq.n	80096a0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009686:	f043 0204 	orr.w	r2, r3, #4
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	699a      	ldr	r2, [r3, #24]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800969e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00f      	beq.n	80096ca <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096b0:	f043 0201 	orr.w	r2, r3, #1
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	699a      	ldr	r2, [r3, #24]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00f      	beq.n	80096f4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096da:	f043 0208 	orr.w	r2, r3, #8
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8009704:	bf00      	nop
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	4613      	mov	r3, r2
 800971e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009720:	e010      	b.n	8009744 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009722:	f7fa f9ad 	bl	8003a80 <HAL_GetTick>
 8009726:	4602      	mov	r2, r0
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	429a      	cmp	r2, r3
 8009730:	d803      	bhi.n	800973a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009738:	d102      	bne.n	8009740 <SPI_WaitOnFlagUntilTimeout+0x30>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e00f      	b.n	8009764 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	695a      	ldr	r2, [r3, #20]
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	4013      	ands	r3, r2
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	429a      	cmp	r2, r3
 8009752:	bf0c      	ite	eq
 8009754:	2301      	moveq	r3, #1
 8009756:	2300      	movne	r3, #0
 8009758:	b2db      	uxtb	r3, r3
 800975a:	461a      	mov	r2, r3
 800975c:	79fb      	ldrb	r3, [r7, #7]
 800975e:	429a      	cmp	r2, r3
 8009760:	d0df      	beq.n	8009722 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009778:	095b      	lsrs	r3, r3, #5
 800977a:	3301      	adds	r3, #1
 800977c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	3301      	adds	r3, #1
 8009784:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	3307      	adds	r3, #7
 800978a:	08db      	lsrs	r3, r3, #3
 800978c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	fb02 f303 	mul.w	r3, r2, r3
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b083      	sub	sp, #12
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d12e      	bne.n	8009816 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d101      	bne.n	80097c6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80097c2:	2302      	movs	r3, #2
 80097c4:	e028      	b.n	8009818 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2202      	movs	r2, #2
 80097d2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0201 	bic.w	r2, r2, #1
 80097e4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80097f2:	ea42 0103 	orr.w	r1, r2, r3
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	689a      	ldr	r2, [r3, #8]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	e000      	b.n	8009818 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
  }
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e049      	b.n	80098ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d106      	bne.n	8009850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7f7 ffd2 	bl	80017f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2202      	movs	r2, #2
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3304      	adds	r3, #4
 8009860:	4619      	mov	r1, r3
 8009862:	4610      	mov	r0, r2
 8009864:	f000 fe38 	bl	800a4d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b082      	sub	sp, #8
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e049      	b.n	8009978 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d106      	bne.n	80098fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f841 	bl	8009980 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2202      	movs	r2, #2
 8009902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3304      	adds	r3, #4
 800990e:	4619      	mov	r1, r3
 8009910:	4610      	mov	r0, r2
 8009912:	f000 fde1 	bl	800a4d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d109      	bne.n	80099b8 <HAL_TIM_PWM_Start+0x24>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	bf14      	ite	ne
 80099b0:	2301      	movne	r3, #1
 80099b2:	2300      	moveq	r3, #0
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	e03c      	b.n	8009a32 <HAL_TIM_PWM_Start+0x9e>
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2b04      	cmp	r3, #4
 80099bc:	d109      	bne.n	80099d2 <HAL_TIM_PWM_Start+0x3e>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	bf14      	ite	ne
 80099ca:	2301      	movne	r3, #1
 80099cc:	2300      	moveq	r3, #0
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	e02f      	b.n	8009a32 <HAL_TIM_PWM_Start+0x9e>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b08      	cmp	r3, #8
 80099d6:	d109      	bne.n	80099ec <HAL_TIM_PWM_Start+0x58>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	bf14      	ite	ne
 80099e4:	2301      	movne	r3, #1
 80099e6:	2300      	moveq	r3, #0
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	e022      	b.n	8009a32 <HAL_TIM_PWM_Start+0x9e>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2b0c      	cmp	r3, #12
 80099f0:	d109      	bne.n	8009a06 <HAL_TIM_PWM_Start+0x72>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	bf14      	ite	ne
 80099fe:	2301      	movne	r3, #1
 8009a00:	2300      	moveq	r3, #0
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	e015      	b.n	8009a32 <HAL_TIM_PWM_Start+0x9e>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b10      	cmp	r3, #16
 8009a0a:	d109      	bne.n	8009a20 <HAL_TIM_PWM_Start+0x8c>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	bf14      	ite	ne
 8009a18:	2301      	movne	r3, #1
 8009a1a:	2300      	moveq	r3, #0
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	e008      	b.n	8009a32 <HAL_TIM_PWM_Start+0x9e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	bf14      	ite	ne
 8009a2c:	2301      	movne	r3, #1
 8009a2e:	2300      	moveq	r3, #0
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e0d8      	b.n	8009bec <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d104      	bne.n	8009a4a <HAL_TIM_PWM_Start+0xb6>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2202      	movs	r2, #2
 8009a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a48:	e023      	b.n	8009a92 <HAL_TIM_PWM_Start+0xfe>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b04      	cmp	r3, #4
 8009a4e:	d104      	bne.n	8009a5a <HAL_TIM_PWM_Start+0xc6>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a58:	e01b      	b.n	8009a92 <HAL_TIM_PWM_Start+0xfe>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b08      	cmp	r3, #8
 8009a5e:	d104      	bne.n	8009a6a <HAL_TIM_PWM_Start+0xd6>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a68:	e013      	b.n	8009a92 <HAL_TIM_PWM_Start+0xfe>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b0c      	cmp	r3, #12
 8009a6e:	d104      	bne.n	8009a7a <HAL_TIM_PWM_Start+0xe6>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a78:	e00b      	b.n	8009a92 <HAL_TIM_PWM_Start+0xfe>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b10      	cmp	r3, #16
 8009a7e:	d104      	bne.n	8009a8a <HAL_TIM_PWM_Start+0xf6>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a88:	e003      	b.n	8009a92 <HAL_TIM_PWM_Start+0xfe>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2201      	movs	r2, #1
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f001 fa8e 	bl	800afbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a53      	ldr	r2, [pc, #332]	@ (8009bf4 <HAL_TIM_PWM_Start+0x260>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d02c      	beq.n	8009b04 <HAL_TIM_PWM_Start+0x170>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a52      	ldr	r2, [pc, #328]	@ (8009bf8 <HAL_TIM_PWM_Start+0x264>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d027      	beq.n	8009b04 <HAL_TIM_PWM_Start+0x170>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a50      	ldr	r2, [pc, #320]	@ (8009bfc <HAL_TIM_PWM_Start+0x268>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d022      	beq.n	8009b04 <HAL_TIM_PWM_Start+0x170>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a4f      	ldr	r2, [pc, #316]	@ (8009c00 <HAL_TIM_PWM_Start+0x26c>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d01d      	beq.n	8009b04 <HAL_TIM_PWM_Start+0x170>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a4d      	ldr	r2, [pc, #308]	@ (8009c04 <HAL_TIM_PWM_Start+0x270>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d018      	beq.n	8009b04 <HAL_TIM_PWM_Start+0x170>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a4c      	ldr	r2, [pc, #304]	@ (8009c08 <HAL_TIM_PWM_Start+0x274>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d013      	beq.n	8009b04 <HAL_TIM_PWM_Start+0x170>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8009c0c <HAL_TIM_PWM_Start+0x278>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d00e      	beq.n	8009b04 <HAL_TIM_PWM_Start+0x170>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a49      	ldr	r2, [pc, #292]	@ (8009c10 <HAL_TIM_PWM_Start+0x27c>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d009      	beq.n	8009b04 <HAL_TIM_PWM_Start+0x170>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a47      	ldr	r2, [pc, #284]	@ (8009c14 <HAL_TIM_PWM_Start+0x280>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d004      	beq.n	8009b04 <HAL_TIM_PWM_Start+0x170>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a46      	ldr	r2, [pc, #280]	@ (8009c18 <HAL_TIM_PWM_Start+0x284>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d101      	bne.n	8009b08 <HAL_TIM_PWM_Start+0x174>
 8009b04:	2301      	movs	r3, #1
 8009b06:	e000      	b.n	8009b0a <HAL_TIM_PWM_Start+0x176>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d007      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a34      	ldr	r2, [pc, #208]	@ (8009bf4 <HAL_TIM_PWM_Start+0x260>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d040      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a32      	ldr	r2, [pc, #200]	@ (8009bf8 <HAL_TIM_PWM_Start+0x264>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d03b      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b3a:	d036      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b44:	d031      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a34      	ldr	r2, [pc, #208]	@ (8009c1c <HAL_TIM_PWM_Start+0x288>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d02c      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a32      	ldr	r2, [pc, #200]	@ (8009c20 <HAL_TIM_PWM_Start+0x28c>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d027      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a31      	ldr	r2, [pc, #196]	@ (8009c24 <HAL_TIM_PWM_Start+0x290>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d022      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a2f      	ldr	r2, [pc, #188]	@ (8009c28 <HAL_TIM_PWM_Start+0x294>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d01d      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a2e      	ldr	r2, [pc, #184]	@ (8009c2c <HAL_TIM_PWM_Start+0x298>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d018      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a2c      	ldr	r2, [pc, #176]	@ (8009c30 <HAL_TIM_PWM_Start+0x29c>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d013      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a1d      	ldr	r2, [pc, #116]	@ (8009bfc <HAL_TIM_PWM_Start+0x268>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d00e      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a1b      	ldr	r2, [pc, #108]	@ (8009c00 <HAL_TIM_PWM_Start+0x26c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d009      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8009c04 <HAL_TIM_PWM_Start+0x270>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d004      	beq.n	8009baa <HAL_TIM_PWM_Start+0x216>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a18      	ldr	r2, [pc, #96]	@ (8009c08 <HAL_TIM_PWM_Start+0x274>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d115      	bne.n	8009bd6 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689a      	ldr	r2, [r3, #8]
 8009bb0:	4b20      	ldr	r3, [pc, #128]	@ (8009c34 <HAL_TIM_PWM_Start+0x2a0>)
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b06      	cmp	r3, #6
 8009bba:	d015      	beq.n	8009be8 <HAL_TIM_PWM_Start+0x254>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bc2:	d011      	beq.n	8009be8 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0201 	orr.w	r2, r2, #1
 8009bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd4:	e008      	b.n	8009be8 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f042 0201 	orr.w	r2, r2, #1
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	e000      	b.n	8009bea <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	40012c00 	.word	0x40012c00
 8009bf8:	50012c00 	.word	0x50012c00
 8009bfc:	40013400 	.word	0x40013400
 8009c00:	50013400 	.word	0x50013400
 8009c04:	40014000 	.word	0x40014000
 8009c08:	50014000 	.word	0x50014000
 8009c0c:	40014400 	.word	0x40014400
 8009c10:	50014400 	.word	0x50014400
 8009c14:	40014800 	.word	0x40014800
 8009c18:	50014800 	.word	0x50014800
 8009c1c:	40000400 	.word	0x40000400
 8009c20:	50000400 	.word	0x50000400
 8009c24:	40000800 	.word	0x40000800
 8009c28:	50000800 	.word	0x50000800
 8009c2c:	40000c00 	.word	0x40000c00
 8009c30:	50000c00 	.word	0x50000c00
 8009c34:	00010007 	.word	0x00010007

08009c38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2200      	movs	r2, #0
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f001 f9b6 	bl	800afbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a4a      	ldr	r2, [pc, #296]	@ (8009d80 <HAL_TIM_PWM_Stop+0x148>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d02c      	beq.n	8009cb4 <HAL_TIM_PWM_Stop+0x7c>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a49      	ldr	r2, [pc, #292]	@ (8009d84 <HAL_TIM_PWM_Stop+0x14c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d027      	beq.n	8009cb4 <HAL_TIM_PWM_Stop+0x7c>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a47      	ldr	r2, [pc, #284]	@ (8009d88 <HAL_TIM_PWM_Stop+0x150>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d022      	beq.n	8009cb4 <HAL_TIM_PWM_Stop+0x7c>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a46      	ldr	r2, [pc, #280]	@ (8009d8c <HAL_TIM_PWM_Stop+0x154>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d01d      	beq.n	8009cb4 <HAL_TIM_PWM_Stop+0x7c>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a44      	ldr	r2, [pc, #272]	@ (8009d90 <HAL_TIM_PWM_Stop+0x158>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d018      	beq.n	8009cb4 <HAL_TIM_PWM_Stop+0x7c>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a43      	ldr	r2, [pc, #268]	@ (8009d94 <HAL_TIM_PWM_Stop+0x15c>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d013      	beq.n	8009cb4 <HAL_TIM_PWM_Stop+0x7c>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a41      	ldr	r2, [pc, #260]	@ (8009d98 <HAL_TIM_PWM_Stop+0x160>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d00e      	beq.n	8009cb4 <HAL_TIM_PWM_Stop+0x7c>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a40      	ldr	r2, [pc, #256]	@ (8009d9c <HAL_TIM_PWM_Stop+0x164>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d009      	beq.n	8009cb4 <HAL_TIM_PWM_Stop+0x7c>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a3e      	ldr	r2, [pc, #248]	@ (8009da0 <HAL_TIM_PWM_Stop+0x168>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d004      	beq.n	8009cb4 <HAL_TIM_PWM_Stop+0x7c>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a3d      	ldr	r2, [pc, #244]	@ (8009da4 <HAL_TIM_PWM_Stop+0x16c>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d101      	bne.n	8009cb8 <HAL_TIM_PWM_Stop+0x80>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e000      	b.n	8009cba <HAL_TIM_PWM_Stop+0x82>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d017      	beq.n	8009cee <HAL_TIM_PWM_Stop+0xb6>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6a1a      	ldr	r2, [r3, #32]
 8009cc4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009cc8:	4013      	ands	r3, r2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10f      	bne.n	8009cee <HAL_TIM_PWM_Stop+0xb6>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6a1a      	ldr	r2, [r3, #32]
 8009cd4:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009cd8:	4013      	ands	r3, r2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d107      	bne.n	8009cee <HAL_TIM_PWM_Stop+0xb6>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009cec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6a1a      	ldr	r2, [r3, #32]
 8009cf4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10f      	bne.n	8009d1e <HAL_TIM_PWM_Stop+0xe6>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6a1a      	ldr	r2, [r3, #32]
 8009d04:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009d08:	4013      	ands	r3, r2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d107      	bne.n	8009d1e <HAL_TIM_PWM_Stop+0xe6>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0201 	bic.w	r2, r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d104      	bne.n	8009d2e <HAL_TIM_PWM_Stop+0xf6>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d2c:	e023      	b.n	8009d76 <HAL_TIM_PWM_Stop+0x13e>
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2b04      	cmp	r3, #4
 8009d32:	d104      	bne.n	8009d3e <HAL_TIM_PWM_Stop+0x106>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d3c:	e01b      	b.n	8009d76 <HAL_TIM_PWM_Stop+0x13e>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b08      	cmp	r3, #8
 8009d42:	d104      	bne.n	8009d4e <HAL_TIM_PWM_Stop+0x116>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d4c:	e013      	b.n	8009d76 <HAL_TIM_PWM_Stop+0x13e>
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	2b0c      	cmp	r3, #12
 8009d52:	d104      	bne.n	8009d5e <HAL_TIM_PWM_Stop+0x126>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d5c:	e00b      	b.n	8009d76 <HAL_TIM_PWM_Stop+0x13e>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b10      	cmp	r3, #16
 8009d62:	d104      	bne.n	8009d6e <HAL_TIM_PWM_Stop+0x136>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d6c:	e003      	b.n	8009d76 <HAL_TIM_PWM_Stop+0x13e>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	40012c00 	.word	0x40012c00
 8009d84:	50012c00 	.word	0x50012c00
 8009d88:	40013400 	.word	0x40013400
 8009d8c:	50013400 	.word	0x50013400
 8009d90:	40014000 	.word	0x40014000
 8009d94:	50014000 	.word	0x50014000
 8009d98:	40014400 	.word	0x40014400
 8009d9c:	50014400 	.word	0x50014400
 8009da0:	40014800 	.word	0x40014800
 8009da4:	50014800 	.word	0x50014800

08009da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d020      	beq.n	8009e0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01b      	beq.n	8009e0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f06f 0202 	mvn.w	r2, #2
 8009ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	f003 0303 	and.w	r3, r3, #3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fb52 	bl	800a49c <HAL_TIM_IC_CaptureCallback>
 8009df8:	e005      	b.n	8009e06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fb44 	bl	800a488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fb55 	bl	800a4b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f003 0304 	and.w	r3, r3, #4
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d020      	beq.n	8009e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01b      	beq.n	8009e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f06f 0204 	mvn.w	r2, #4
 8009e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fb2c 	bl	800a49c <HAL_TIM_IC_CaptureCallback>
 8009e44:	e005      	b.n	8009e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fb1e 	bl	800a488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fb2f 	bl	800a4b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	f003 0308 	and.w	r3, r3, #8
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d020      	beq.n	8009ea4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01b      	beq.n	8009ea4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f06f 0208 	mvn.w	r2, #8
 8009e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2204      	movs	r2, #4
 8009e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	69db      	ldr	r3, [r3, #28]
 8009e82:	f003 0303 	and.w	r3, r3, #3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fb06 	bl	800a49c <HAL_TIM_IC_CaptureCallback>
 8009e90:	e005      	b.n	8009e9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 faf8 	bl	800a488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fb09 	bl	800a4b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f003 0310 	and.w	r3, r3, #16
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d020      	beq.n	8009ef0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f003 0310 	and.w	r3, r3, #16
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d01b      	beq.n	8009ef0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f06f 0210 	mvn.w	r2, #16
 8009ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2208      	movs	r2, #8
 8009ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d003      	beq.n	8009ede <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fae0 	bl	800a49c <HAL_TIM_IC_CaptureCallback>
 8009edc:	e005      	b.n	8009eea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fad2 	bl	800a488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fae3 	bl	800a4b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00c      	beq.n	8009f14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d007      	beq.n	8009f14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f06f 0201 	mvn.w	r2, #1
 8009f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fab0 	bl	800a474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d104      	bne.n	8009f28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00c      	beq.n	8009f42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d007      	beq.n	8009f42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 f9c9 	bl	800b2d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00c      	beq.n	8009f66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d007      	beq.n	8009f66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 f9c1 	bl	800b2e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00c      	beq.n	8009f8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d007      	beq.n	8009f8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fa9d 	bl	800a4c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	f003 0320 	and.w	r3, r3, #32
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00c      	beq.n	8009fae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f003 0320 	and.w	r3, r3, #32
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d007      	beq.n	8009fae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f06f 0220 	mvn.w	r2, #32
 8009fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f001 f989 	bl	800b2c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00c      	beq.n	8009fd2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d007      	beq.n	8009fd2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 f995 	bl	800b2fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00c      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d007      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 f98d 	bl	800b310 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00c      	beq.n	800a01a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d007      	beq.n	800a01a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 f985 	bl	800b324 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00c      	beq.n	800a03e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d007      	beq.n	800a03e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 f97d 	bl	800b338 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a03e:	bf00      	nop
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
	...

0800a048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d101      	bne.n	800a066 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a062:	2302      	movs	r3, #2
 800a064:	e0ff      	b.n	800a266 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b14      	cmp	r3, #20
 800a072:	f200 80f0 	bhi.w	800a256 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a076:	a201      	add	r2, pc, #4	@ (adr r2, 800a07c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07c:	0800a0d1 	.word	0x0800a0d1
 800a080:	0800a257 	.word	0x0800a257
 800a084:	0800a257 	.word	0x0800a257
 800a088:	0800a257 	.word	0x0800a257
 800a08c:	0800a111 	.word	0x0800a111
 800a090:	0800a257 	.word	0x0800a257
 800a094:	0800a257 	.word	0x0800a257
 800a098:	0800a257 	.word	0x0800a257
 800a09c:	0800a153 	.word	0x0800a153
 800a0a0:	0800a257 	.word	0x0800a257
 800a0a4:	0800a257 	.word	0x0800a257
 800a0a8:	0800a257 	.word	0x0800a257
 800a0ac:	0800a193 	.word	0x0800a193
 800a0b0:	0800a257 	.word	0x0800a257
 800a0b4:	0800a257 	.word	0x0800a257
 800a0b8:	0800a257 	.word	0x0800a257
 800a0bc:	0800a1d5 	.word	0x0800a1d5
 800a0c0:	0800a257 	.word	0x0800a257
 800a0c4:	0800a257 	.word	0x0800a257
 800a0c8:	0800a257 	.word	0x0800a257
 800a0cc:	0800a215 	.word	0x0800a215
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68b9      	ldr	r1, [r7, #8]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 fafe 	bl	800a6d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699a      	ldr	r2, [r3, #24]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f042 0208 	orr.w	r2, r2, #8
 800a0ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	699a      	ldr	r2, [r3, #24]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f022 0204 	bic.w	r2, r2, #4
 800a0fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6999      	ldr	r1, [r3, #24]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	691a      	ldr	r2, [r3, #16]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	430a      	orrs	r2, r1
 800a10c:	619a      	str	r2, [r3, #24]
      break;
 800a10e:	e0a5      	b.n	800a25c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68b9      	ldr	r1, [r7, #8]
 800a116:	4618      	mov	r0, r3
 800a118:	f000 fba0 	bl	800a85c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	699a      	ldr	r2, [r3, #24]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a12a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	699a      	ldr	r2, [r3, #24]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a13a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6999      	ldr	r1, [r3, #24]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	021a      	lsls	r2, r3, #8
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	430a      	orrs	r2, r1
 800a14e:	619a      	str	r2, [r3, #24]
      break;
 800a150:	e084      	b.n	800a25c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68b9      	ldr	r1, [r7, #8]
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 fc2f 	bl	800a9bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69da      	ldr	r2, [r3, #28]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f042 0208 	orr.w	r2, r2, #8
 800a16c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	69da      	ldr	r2, [r3, #28]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f022 0204 	bic.w	r2, r2, #4
 800a17c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	69d9      	ldr	r1, [r3, #28]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	691a      	ldr	r2, [r3, #16]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	430a      	orrs	r2, r1
 800a18e:	61da      	str	r2, [r3, #28]
      break;
 800a190:	e064      	b.n	800a25c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68b9      	ldr	r1, [r7, #8]
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 fcbd 	bl	800ab18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	69da      	ldr	r2, [r3, #28]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	69da      	ldr	r2, [r3, #28]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	69d9      	ldr	r1, [r3, #28]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	021a      	lsls	r2, r3, #8
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	61da      	str	r2, [r3, #28]
      break;
 800a1d2:	e043      	b.n	800a25c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68b9      	ldr	r1, [r7, #8]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 fd4c 	bl	800ac78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f042 0208 	orr.w	r2, r2, #8
 800a1ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f022 0204 	bic.w	r2, r2, #4
 800a1fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	691a      	ldr	r2, [r3, #16]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	430a      	orrs	r2, r1
 800a210:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a212:	e023      	b.n	800a25c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68b9      	ldr	r1, [r7, #8]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 fdae 	bl	800ad7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a22e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a23e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	021a      	lsls	r2, r3, #8
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	430a      	orrs	r2, r1
 800a252:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a254:	e002      	b.n	800a25c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	75fb      	strb	r3, [r7, #23]
      break;
 800a25a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a264:	7dfb      	ldrb	r3, [r7, #23]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop

0800a270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a284:	2b01      	cmp	r3, #1
 800a286:	d101      	bne.n	800a28c <HAL_TIM_ConfigClockSource+0x1c>
 800a288:	2302      	movs	r3, #2
 800a28a:	e0e6      	b.n	800a45a <HAL_TIM_ConfigClockSource+0x1ea>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2202      	movs	r2, #2
 800a298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a2aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a2ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a67      	ldr	r2, [pc, #412]	@ (800a464 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	f000 80b1 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1be>
 800a2cc:	4a65      	ldr	r2, [pc, #404]	@ (800a464 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	f200 80b6 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a2d4:	4a64      	ldr	r2, [pc, #400]	@ (800a468 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	f000 80a9 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1be>
 800a2dc:	4a62      	ldr	r2, [pc, #392]	@ (800a468 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	f200 80ae 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a2e4:	4a61      	ldr	r2, [pc, #388]	@ (800a46c <HAL_TIM_ConfigClockSource+0x1fc>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	f000 80a1 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1be>
 800a2ec:	4a5f      	ldr	r2, [pc, #380]	@ (800a46c <HAL_TIM_ConfigClockSource+0x1fc>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	f200 80a6 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a2f4:	4a5e      	ldr	r2, [pc, #376]	@ (800a470 <HAL_TIM_ConfigClockSource+0x200>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	f000 8099 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1be>
 800a2fc:	4a5c      	ldr	r2, [pc, #368]	@ (800a470 <HAL_TIM_ConfigClockSource+0x200>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	f200 809e 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a304:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a308:	f000 8091 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1be>
 800a30c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a310:	f200 8096 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a318:	f000 8089 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1be>
 800a31c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a320:	f200 808e 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a328:	d03e      	beq.n	800a3a8 <HAL_TIM_ConfigClockSource+0x138>
 800a32a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a32e:	f200 8087 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a336:	f000 8086 	beq.w	800a446 <HAL_TIM_ConfigClockSource+0x1d6>
 800a33a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a33e:	d87f      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a340:	2b70      	cmp	r3, #112	@ 0x70
 800a342:	d01a      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x10a>
 800a344:	2b70      	cmp	r3, #112	@ 0x70
 800a346:	d87b      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a348:	2b60      	cmp	r3, #96	@ 0x60
 800a34a:	d050      	beq.n	800a3ee <HAL_TIM_ConfigClockSource+0x17e>
 800a34c:	2b60      	cmp	r3, #96	@ 0x60
 800a34e:	d877      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a350:	2b50      	cmp	r3, #80	@ 0x50
 800a352:	d03c      	beq.n	800a3ce <HAL_TIM_ConfigClockSource+0x15e>
 800a354:	2b50      	cmp	r3, #80	@ 0x50
 800a356:	d873      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a358:	2b40      	cmp	r3, #64	@ 0x40
 800a35a:	d058      	beq.n	800a40e <HAL_TIM_ConfigClockSource+0x19e>
 800a35c:	2b40      	cmp	r3, #64	@ 0x40
 800a35e:	d86f      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a360:	2b30      	cmp	r3, #48	@ 0x30
 800a362:	d064      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x1be>
 800a364:	2b30      	cmp	r3, #48	@ 0x30
 800a366:	d86b      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a368:	2b20      	cmp	r3, #32
 800a36a:	d060      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x1be>
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d867      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
 800a370:	2b00      	cmp	r3, #0
 800a372:	d05c      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x1be>
 800a374:	2b10      	cmp	r3, #16
 800a376:	d05a      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x1be>
 800a378:	e062      	b.n	800a440 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a38a:	f000 fdf7 	bl	800af7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a39c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	609a      	str	r2, [r3, #8]
      break;
 800a3a6:	e04f      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3b8:	f000 fde0 	bl	800af7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	689a      	ldr	r2, [r3, #8]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a3ca:	609a      	str	r2, [r3, #8]
      break;
 800a3cc:	e03c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f000 fd52 	bl	800ae84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2150      	movs	r1, #80	@ 0x50
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fdab 	bl	800af42 <TIM_ITRx_SetConfig>
      break;
 800a3ec:	e02c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	f000 fd71 	bl	800aee2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2160      	movs	r1, #96	@ 0x60
 800a406:	4618      	mov	r0, r3
 800a408:	f000 fd9b 	bl	800af42 <TIM_ITRx_SetConfig>
      break;
 800a40c:	e01c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a41a:	461a      	mov	r2, r3
 800a41c:	f000 fd32 	bl	800ae84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2140      	movs	r1, #64	@ 0x40
 800a426:	4618      	mov	r0, r3
 800a428:	f000 fd8b 	bl	800af42 <TIM_ITRx_SetConfig>
      break;
 800a42c:	e00c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	f000 fd82 	bl	800af42 <TIM_ITRx_SetConfig>
      break;
 800a43e:	e003      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	73fb      	strb	r3, [r7, #15]
      break;
 800a444:	e000      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800a446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	00100070 	.word	0x00100070
 800a468:	00100040 	.word	0x00100040
 800a46c:	00100030 	.word	0x00100030
 800a470:	00100020 	.word	0x00100020

0800a474 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a6b      	ldr	r2, [pc, #428]	@ (800a698 <TIM_Base_SetConfig+0x1c0>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d02b      	beq.n	800a548 <TIM_Base_SetConfig+0x70>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a6a      	ldr	r2, [pc, #424]	@ (800a69c <TIM_Base_SetConfig+0x1c4>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d027      	beq.n	800a548 <TIM_Base_SetConfig+0x70>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4fe:	d023      	beq.n	800a548 <TIM_Base_SetConfig+0x70>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a506:	d01f      	beq.n	800a548 <TIM_Base_SetConfig+0x70>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a65      	ldr	r2, [pc, #404]	@ (800a6a0 <TIM_Base_SetConfig+0x1c8>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d01b      	beq.n	800a548 <TIM_Base_SetConfig+0x70>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a64      	ldr	r2, [pc, #400]	@ (800a6a4 <TIM_Base_SetConfig+0x1cc>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d017      	beq.n	800a548 <TIM_Base_SetConfig+0x70>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a63      	ldr	r2, [pc, #396]	@ (800a6a8 <TIM_Base_SetConfig+0x1d0>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d013      	beq.n	800a548 <TIM_Base_SetConfig+0x70>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a62      	ldr	r2, [pc, #392]	@ (800a6ac <TIM_Base_SetConfig+0x1d4>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d00f      	beq.n	800a548 <TIM_Base_SetConfig+0x70>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a61      	ldr	r2, [pc, #388]	@ (800a6b0 <TIM_Base_SetConfig+0x1d8>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d00b      	beq.n	800a548 <TIM_Base_SetConfig+0x70>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a60      	ldr	r2, [pc, #384]	@ (800a6b4 <TIM_Base_SetConfig+0x1dc>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d007      	beq.n	800a548 <TIM_Base_SetConfig+0x70>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a5f      	ldr	r2, [pc, #380]	@ (800a6b8 <TIM_Base_SetConfig+0x1e0>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d003      	beq.n	800a548 <TIM_Base_SetConfig+0x70>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a5e      	ldr	r2, [pc, #376]	@ (800a6bc <TIM_Base_SetConfig+0x1e4>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d108      	bne.n	800a55a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a54e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	4313      	orrs	r3, r2
 800a558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a4e      	ldr	r2, [pc, #312]	@ (800a698 <TIM_Base_SetConfig+0x1c0>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d043      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4a4d      	ldr	r2, [pc, #308]	@ (800a69c <TIM_Base_SetConfig+0x1c4>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d03f      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a570:	d03b      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a578:	d037      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a48      	ldr	r2, [pc, #288]	@ (800a6a0 <TIM_Base_SetConfig+0x1c8>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d033      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a47      	ldr	r2, [pc, #284]	@ (800a6a4 <TIM_Base_SetConfig+0x1cc>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d02f      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a46      	ldr	r2, [pc, #280]	@ (800a6a8 <TIM_Base_SetConfig+0x1d0>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d02b      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a45      	ldr	r2, [pc, #276]	@ (800a6ac <TIM_Base_SetConfig+0x1d4>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d027      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a44      	ldr	r2, [pc, #272]	@ (800a6b0 <TIM_Base_SetConfig+0x1d8>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d023      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a43      	ldr	r2, [pc, #268]	@ (800a6b4 <TIM_Base_SetConfig+0x1dc>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d01f      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a42      	ldr	r2, [pc, #264]	@ (800a6b8 <TIM_Base_SetConfig+0x1e0>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d01b      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a41      	ldr	r2, [pc, #260]	@ (800a6bc <TIM_Base_SetConfig+0x1e4>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d017      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a40      	ldr	r2, [pc, #256]	@ (800a6c0 <TIM_Base_SetConfig+0x1e8>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d013      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a3f      	ldr	r2, [pc, #252]	@ (800a6c4 <TIM_Base_SetConfig+0x1ec>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d00f      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a3e      	ldr	r2, [pc, #248]	@ (800a6c8 <TIM_Base_SetConfig+0x1f0>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d00b      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a3d      	ldr	r2, [pc, #244]	@ (800a6cc <TIM_Base_SetConfig+0x1f4>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d007      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a3c      	ldr	r2, [pc, #240]	@ (800a6d0 <TIM_Base_SetConfig+0x1f8>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d003      	beq.n	800a5ea <TIM_Base_SetConfig+0x112>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a3b      	ldr	r2, [pc, #236]	@ (800a6d4 <TIM_Base_SetConfig+0x1fc>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d108      	bne.n	800a5fc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	4313      	orrs	r3, r2
 800a608:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	689a      	ldr	r2, [r3, #8]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a1e      	ldr	r2, [pc, #120]	@ (800a698 <TIM_Base_SetConfig+0x1c0>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d023      	beq.n	800a66a <TIM_Base_SetConfig+0x192>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a1d      	ldr	r2, [pc, #116]	@ (800a69c <TIM_Base_SetConfig+0x1c4>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d01f      	beq.n	800a66a <TIM_Base_SetConfig+0x192>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a22      	ldr	r2, [pc, #136]	@ (800a6b8 <TIM_Base_SetConfig+0x1e0>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d01b      	beq.n	800a66a <TIM_Base_SetConfig+0x192>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a21      	ldr	r2, [pc, #132]	@ (800a6bc <TIM_Base_SetConfig+0x1e4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d017      	beq.n	800a66a <TIM_Base_SetConfig+0x192>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a20      	ldr	r2, [pc, #128]	@ (800a6c0 <TIM_Base_SetConfig+0x1e8>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d013      	beq.n	800a66a <TIM_Base_SetConfig+0x192>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a1f      	ldr	r2, [pc, #124]	@ (800a6c4 <TIM_Base_SetConfig+0x1ec>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d00f      	beq.n	800a66a <TIM_Base_SetConfig+0x192>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a1e      	ldr	r2, [pc, #120]	@ (800a6c8 <TIM_Base_SetConfig+0x1f0>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d00b      	beq.n	800a66a <TIM_Base_SetConfig+0x192>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a1d      	ldr	r2, [pc, #116]	@ (800a6cc <TIM_Base_SetConfig+0x1f4>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d007      	beq.n	800a66a <TIM_Base_SetConfig+0x192>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a1c      	ldr	r2, [pc, #112]	@ (800a6d0 <TIM_Base_SetConfig+0x1f8>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d003      	beq.n	800a66a <TIM_Base_SetConfig+0x192>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a1b      	ldr	r2, [pc, #108]	@ (800a6d4 <TIM_Base_SetConfig+0x1fc>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d103      	bne.n	800a672 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	691a      	ldr	r2, [r3, #16]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f043 0204 	orr.w	r2, r3, #4
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	601a      	str	r2, [r3, #0]
}
 800a68a:	bf00      	nop
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	40012c00 	.word	0x40012c00
 800a69c:	50012c00 	.word	0x50012c00
 800a6a0:	40000400 	.word	0x40000400
 800a6a4:	50000400 	.word	0x50000400
 800a6a8:	40000800 	.word	0x40000800
 800a6ac:	50000800 	.word	0x50000800
 800a6b0:	40000c00 	.word	0x40000c00
 800a6b4:	50000c00 	.word	0x50000c00
 800a6b8:	40013400 	.word	0x40013400
 800a6bc:	50013400 	.word	0x50013400
 800a6c0:	40014000 	.word	0x40014000
 800a6c4:	50014000 	.word	0x50014000
 800a6c8:	40014400 	.word	0x40014400
 800a6cc:	50014400 	.word	0x50014400
 800a6d0:	40014800 	.word	0x40014800
 800a6d4:	50014800 	.word	0x50014800

0800a6d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a1b      	ldr	r3, [r3, #32]
 800a6ec:	f023 0201 	bic.w	r2, r3, #1
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 0303 	bic.w	r3, r3, #3
 800a712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f023 0302 	bic.w	r3, r3, #2
 800a724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a40      	ldr	r2, [pc, #256]	@ (800a834 <TIM_OC1_SetConfig+0x15c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d023      	beq.n	800a780 <TIM_OC1_SetConfig+0xa8>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a3f      	ldr	r2, [pc, #252]	@ (800a838 <TIM_OC1_SetConfig+0x160>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d01f      	beq.n	800a780 <TIM_OC1_SetConfig+0xa8>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a3e      	ldr	r2, [pc, #248]	@ (800a83c <TIM_OC1_SetConfig+0x164>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d01b      	beq.n	800a780 <TIM_OC1_SetConfig+0xa8>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a3d      	ldr	r2, [pc, #244]	@ (800a840 <TIM_OC1_SetConfig+0x168>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d017      	beq.n	800a780 <TIM_OC1_SetConfig+0xa8>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a3c      	ldr	r2, [pc, #240]	@ (800a844 <TIM_OC1_SetConfig+0x16c>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d013      	beq.n	800a780 <TIM_OC1_SetConfig+0xa8>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a3b      	ldr	r2, [pc, #236]	@ (800a848 <TIM_OC1_SetConfig+0x170>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d00f      	beq.n	800a780 <TIM_OC1_SetConfig+0xa8>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a3a      	ldr	r2, [pc, #232]	@ (800a84c <TIM_OC1_SetConfig+0x174>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d00b      	beq.n	800a780 <TIM_OC1_SetConfig+0xa8>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a39      	ldr	r2, [pc, #228]	@ (800a850 <TIM_OC1_SetConfig+0x178>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d007      	beq.n	800a780 <TIM_OC1_SetConfig+0xa8>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a38      	ldr	r2, [pc, #224]	@ (800a854 <TIM_OC1_SetConfig+0x17c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d003      	beq.n	800a780 <TIM_OC1_SetConfig+0xa8>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a37      	ldr	r2, [pc, #220]	@ (800a858 <TIM_OC1_SetConfig+0x180>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d10c      	bne.n	800a79a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f023 0308 	bic.w	r3, r3, #8
 800a786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	4313      	orrs	r3, r2
 800a790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f023 0304 	bic.w	r3, r3, #4
 800a798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a25      	ldr	r2, [pc, #148]	@ (800a834 <TIM_OC1_SetConfig+0x15c>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d023      	beq.n	800a7ea <TIM_OC1_SetConfig+0x112>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a24      	ldr	r2, [pc, #144]	@ (800a838 <TIM_OC1_SetConfig+0x160>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d01f      	beq.n	800a7ea <TIM_OC1_SetConfig+0x112>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a23      	ldr	r2, [pc, #140]	@ (800a83c <TIM_OC1_SetConfig+0x164>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d01b      	beq.n	800a7ea <TIM_OC1_SetConfig+0x112>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a22      	ldr	r2, [pc, #136]	@ (800a840 <TIM_OC1_SetConfig+0x168>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d017      	beq.n	800a7ea <TIM_OC1_SetConfig+0x112>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a21      	ldr	r2, [pc, #132]	@ (800a844 <TIM_OC1_SetConfig+0x16c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d013      	beq.n	800a7ea <TIM_OC1_SetConfig+0x112>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a20      	ldr	r2, [pc, #128]	@ (800a848 <TIM_OC1_SetConfig+0x170>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d00f      	beq.n	800a7ea <TIM_OC1_SetConfig+0x112>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a1f      	ldr	r2, [pc, #124]	@ (800a84c <TIM_OC1_SetConfig+0x174>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d00b      	beq.n	800a7ea <TIM_OC1_SetConfig+0x112>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a1e      	ldr	r2, [pc, #120]	@ (800a850 <TIM_OC1_SetConfig+0x178>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d007      	beq.n	800a7ea <TIM_OC1_SetConfig+0x112>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a1d      	ldr	r2, [pc, #116]	@ (800a854 <TIM_OC1_SetConfig+0x17c>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d003      	beq.n	800a7ea <TIM_OC1_SetConfig+0x112>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a1c      	ldr	r2, [pc, #112]	@ (800a858 <TIM_OC1_SetConfig+0x180>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d111      	bne.n	800a80e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a7f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	695b      	ldr	r3, [r3, #20]
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	4313      	orrs	r3, r2
 800a802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	621a      	str	r2, [r3, #32]
}
 800a828:	bf00      	nop
 800a82a:	371c      	adds	r7, #28
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	40012c00 	.word	0x40012c00
 800a838:	50012c00 	.word	0x50012c00
 800a83c:	40013400 	.word	0x40013400
 800a840:	50013400 	.word	0x50013400
 800a844:	40014000 	.word	0x40014000
 800a848:	50014000 	.word	0x50014000
 800a84c:	40014400 	.word	0x40014400
 800a850:	50014400 	.word	0x50014400
 800a854:	40014800 	.word	0x40014800
 800a858:	50014800 	.word	0x50014800

0800a85c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a1b      	ldr	r3, [r3, #32]
 800a870:	f023 0210 	bic.w	r2, r3, #16
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a88a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a88e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f023 0320 	bic.w	r3, r3, #32
 800a8aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	011b      	lsls	r3, r3, #4
 800a8b2:	697a      	ldr	r2, [r7, #20]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a36      	ldr	r2, [pc, #216]	@ (800a994 <TIM_OC2_SetConfig+0x138>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d00b      	beq.n	800a8d8 <TIM_OC2_SetConfig+0x7c>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a35      	ldr	r2, [pc, #212]	@ (800a998 <TIM_OC2_SetConfig+0x13c>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d007      	beq.n	800a8d8 <TIM_OC2_SetConfig+0x7c>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a34      	ldr	r2, [pc, #208]	@ (800a99c <TIM_OC2_SetConfig+0x140>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d003      	beq.n	800a8d8 <TIM_OC2_SetConfig+0x7c>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a33      	ldr	r2, [pc, #204]	@ (800a9a0 <TIM_OC2_SetConfig+0x144>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d10d      	bne.n	800a8f4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	011b      	lsls	r3, r3, #4
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a27      	ldr	r2, [pc, #156]	@ (800a994 <TIM_OC2_SetConfig+0x138>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d023      	beq.n	800a944 <TIM_OC2_SetConfig+0xe8>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a26      	ldr	r2, [pc, #152]	@ (800a998 <TIM_OC2_SetConfig+0x13c>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d01f      	beq.n	800a944 <TIM_OC2_SetConfig+0xe8>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a25      	ldr	r2, [pc, #148]	@ (800a99c <TIM_OC2_SetConfig+0x140>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d01b      	beq.n	800a944 <TIM_OC2_SetConfig+0xe8>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a24      	ldr	r2, [pc, #144]	@ (800a9a0 <TIM_OC2_SetConfig+0x144>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d017      	beq.n	800a944 <TIM_OC2_SetConfig+0xe8>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a23      	ldr	r2, [pc, #140]	@ (800a9a4 <TIM_OC2_SetConfig+0x148>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d013      	beq.n	800a944 <TIM_OC2_SetConfig+0xe8>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a22      	ldr	r2, [pc, #136]	@ (800a9a8 <TIM_OC2_SetConfig+0x14c>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d00f      	beq.n	800a944 <TIM_OC2_SetConfig+0xe8>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a21      	ldr	r2, [pc, #132]	@ (800a9ac <TIM_OC2_SetConfig+0x150>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d00b      	beq.n	800a944 <TIM_OC2_SetConfig+0xe8>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a20      	ldr	r2, [pc, #128]	@ (800a9b0 <TIM_OC2_SetConfig+0x154>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d007      	beq.n	800a944 <TIM_OC2_SetConfig+0xe8>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a1f      	ldr	r2, [pc, #124]	@ (800a9b4 <TIM_OC2_SetConfig+0x158>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d003      	beq.n	800a944 <TIM_OC2_SetConfig+0xe8>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a1e      	ldr	r2, [pc, #120]	@ (800a9b8 <TIM_OC2_SetConfig+0x15c>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d113      	bne.n	800a96c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a94a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	4313      	orrs	r3, r2
 800a96a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	685a      	ldr	r2, [r3, #4]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	621a      	str	r2, [r3, #32]
}
 800a986:	bf00      	nop
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	40012c00 	.word	0x40012c00
 800a998:	50012c00 	.word	0x50012c00
 800a99c:	40013400 	.word	0x40013400
 800a9a0:	50013400 	.word	0x50013400
 800a9a4:	40014000 	.word	0x40014000
 800a9a8:	50014000 	.word	0x50014000
 800a9ac:	40014400 	.word	0x40014400
 800a9b0:	50014400 	.word	0x50014400
 800a9b4:	40014800 	.word	0x40014800
 800a9b8:	50014800 	.word	0x50014800

0800a9bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	69db      	ldr	r3, [r3, #28]
 800a9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f023 0303 	bic.w	r3, r3, #3
 800a9f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	021b      	lsls	r3, r3, #8
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a35      	ldr	r2, [pc, #212]	@ (800aaf0 <TIM_OC3_SetConfig+0x134>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d00b      	beq.n	800aa36 <TIM_OC3_SetConfig+0x7a>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a34      	ldr	r2, [pc, #208]	@ (800aaf4 <TIM_OC3_SetConfig+0x138>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d007      	beq.n	800aa36 <TIM_OC3_SetConfig+0x7a>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a33      	ldr	r2, [pc, #204]	@ (800aaf8 <TIM_OC3_SetConfig+0x13c>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d003      	beq.n	800aa36 <TIM_OC3_SetConfig+0x7a>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a32      	ldr	r2, [pc, #200]	@ (800aafc <TIM_OC3_SetConfig+0x140>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d10d      	bne.n	800aa52 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a26      	ldr	r2, [pc, #152]	@ (800aaf0 <TIM_OC3_SetConfig+0x134>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d023      	beq.n	800aaa2 <TIM_OC3_SetConfig+0xe6>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a25      	ldr	r2, [pc, #148]	@ (800aaf4 <TIM_OC3_SetConfig+0x138>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d01f      	beq.n	800aaa2 <TIM_OC3_SetConfig+0xe6>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a24      	ldr	r2, [pc, #144]	@ (800aaf8 <TIM_OC3_SetConfig+0x13c>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d01b      	beq.n	800aaa2 <TIM_OC3_SetConfig+0xe6>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a23      	ldr	r2, [pc, #140]	@ (800aafc <TIM_OC3_SetConfig+0x140>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d017      	beq.n	800aaa2 <TIM_OC3_SetConfig+0xe6>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a22      	ldr	r2, [pc, #136]	@ (800ab00 <TIM_OC3_SetConfig+0x144>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d013      	beq.n	800aaa2 <TIM_OC3_SetConfig+0xe6>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a21      	ldr	r2, [pc, #132]	@ (800ab04 <TIM_OC3_SetConfig+0x148>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d00f      	beq.n	800aaa2 <TIM_OC3_SetConfig+0xe6>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a20      	ldr	r2, [pc, #128]	@ (800ab08 <TIM_OC3_SetConfig+0x14c>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d00b      	beq.n	800aaa2 <TIM_OC3_SetConfig+0xe6>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a1f      	ldr	r2, [pc, #124]	@ (800ab0c <TIM_OC3_SetConfig+0x150>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d007      	beq.n	800aaa2 <TIM_OC3_SetConfig+0xe6>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a1e      	ldr	r2, [pc, #120]	@ (800ab10 <TIM_OC3_SetConfig+0x154>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d003      	beq.n	800aaa2 <TIM_OC3_SetConfig+0xe6>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a1d      	ldr	r2, [pc, #116]	@ (800ab14 <TIM_OC3_SetConfig+0x158>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d113      	bne.n	800aaca <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aaa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	011b      	lsls	r3, r3, #4
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	011b      	lsls	r3, r3, #4
 800aac4:	693a      	ldr	r2, [r7, #16]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	685a      	ldr	r2, [r3, #4]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	697a      	ldr	r2, [r7, #20]
 800aae2:	621a      	str	r2, [r3, #32]
}
 800aae4:	bf00      	nop
 800aae6:	371c      	adds	r7, #28
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	40012c00 	.word	0x40012c00
 800aaf4:	50012c00 	.word	0x50012c00
 800aaf8:	40013400 	.word	0x40013400
 800aafc:	50013400 	.word	0x50013400
 800ab00:	40014000 	.word	0x40014000
 800ab04:	50014000 	.word	0x50014000
 800ab08:	40014400 	.word	0x40014400
 800ab0c:	50014400 	.word	0x50014400
 800ab10:	40014800 	.word	0x40014800
 800ab14:	50014800 	.word	0x50014800

0800ab18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	021b      	lsls	r3, r3, #8
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	031b      	lsls	r3, r3, #12
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a36      	ldr	r2, [pc, #216]	@ (800ac50 <TIM_OC4_SetConfig+0x138>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d00b      	beq.n	800ab94 <TIM_OC4_SetConfig+0x7c>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a35      	ldr	r2, [pc, #212]	@ (800ac54 <TIM_OC4_SetConfig+0x13c>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d007      	beq.n	800ab94 <TIM_OC4_SetConfig+0x7c>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a34      	ldr	r2, [pc, #208]	@ (800ac58 <TIM_OC4_SetConfig+0x140>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d003      	beq.n	800ab94 <TIM_OC4_SetConfig+0x7c>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a33      	ldr	r2, [pc, #204]	@ (800ac5c <TIM_OC4_SetConfig+0x144>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d10d      	bne.n	800abb0 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ab9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	031b      	lsls	r3, r3, #12
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800abae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a27      	ldr	r2, [pc, #156]	@ (800ac50 <TIM_OC4_SetConfig+0x138>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d023      	beq.n	800ac00 <TIM_OC4_SetConfig+0xe8>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a26      	ldr	r2, [pc, #152]	@ (800ac54 <TIM_OC4_SetConfig+0x13c>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d01f      	beq.n	800ac00 <TIM_OC4_SetConfig+0xe8>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a25      	ldr	r2, [pc, #148]	@ (800ac58 <TIM_OC4_SetConfig+0x140>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d01b      	beq.n	800ac00 <TIM_OC4_SetConfig+0xe8>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a24      	ldr	r2, [pc, #144]	@ (800ac5c <TIM_OC4_SetConfig+0x144>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d017      	beq.n	800ac00 <TIM_OC4_SetConfig+0xe8>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a23      	ldr	r2, [pc, #140]	@ (800ac60 <TIM_OC4_SetConfig+0x148>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d013      	beq.n	800ac00 <TIM_OC4_SetConfig+0xe8>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a22      	ldr	r2, [pc, #136]	@ (800ac64 <TIM_OC4_SetConfig+0x14c>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d00f      	beq.n	800ac00 <TIM_OC4_SetConfig+0xe8>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a21      	ldr	r2, [pc, #132]	@ (800ac68 <TIM_OC4_SetConfig+0x150>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d00b      	beq.n	800ac00 <TIM_OC4_SetConfig+0xe8>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a20      	ldr	r2, [pc, #128]	@ (800ac6c <TIM_OC4_SetConfig+0x154>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d007      	beq.n	800ac00 <TIM_OC4_SetConfig+0xe8>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a1f      	ldr	r2, [pc, #124]	@ (800ac70 <TIM_OC4_SetConfig+0x158>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d003      	beq.n	800ac00 <TIM_OC4_SetConfig+0xe8>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a1e      	ldr	r2, [pc, #120]	@ (800ac74 <TIM_OC4_SetConfig+0x15c>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d113      	bne.n	800ac28 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ac0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	019b      	lsls	r3, r3, #6
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	019b      	lsls	r3, r3, #6
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	621a      	str	r2, [r3, #32]
}
 800ac42:	bf00      	nop
 800ac44:	371c      	adds	r7, #28
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	40012c00 	.word	0x40012c00
 800ac54:	50012c00 	.word	0x50012c00
 800ac58:	40013400 	.word	0x40013400
 800ac5c:	50013400 	.word	0x50013400
 800ac60:	40014000 	.word	0x40014000
 800ac64:	50014000 	.word	0x50014000
 800ac68:	40014400 	.word	0x40014400
 800ac6c:	50014400 	.word	0x50014400
 800ac70:	40014800 	.word	0x40014800
 800ac74:	50014800 	.word	0x50014800

0800ac78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a1b      	ldr	r3, [r3, #32]
 800ac8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800acbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	041b      	lsls	r3, r3, #16
 800acc4:	693a      	ldr	r2, [r7, #16]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a21      	ldr	r2, [pc, #132]	@ (800ad54 <TIM_OC5_SetConfig+0xdc>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d023      	beq.n	800ad1a <TIM_OC5_SetConfig+0xa2>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a20      	ldr	r2, [pc, #128]	@ (800ad58 <TIM_OC5_SetConfig+0xe0>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d01f      	beq.n	800ad1a <TIM_OC5_SetConfig+0xa2>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a1f      	ldr	r2, [pc, #124]	@ (800ad5c <TIM_OC5_SetConfig+0xe4>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d01b      	beq.n	800ad1a <TIM_OC5_SetConfig+0xa2>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a1e      	ldr	r2, [pc, #120]	@ (800ad60 <TIM_OC5_SetConfig+0xe8>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d017      	beq.n	800ad1a <TIM_OC5_SetConfig+0xa2>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a1d      	ldr	r2, [pc, #116]	@ (800ad64 <TIM_OC5_SetConfig+0xec>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d013      	beq.n	800ad1a <TIM_OC5_SetConfig+0xa2>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a1c      	ldr	r2, [pc, #112]	@ (800ad68 <TIM_OC5_SetConfig+0xf0>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d00f      	beq.n	800ad1a <TIM_OC5_SetConfig+0xa2>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a1b      	ldr	r2, [pc, #108]	@ (800ad6c <TIM_OC5_SetConfig+0xf4>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d00b      	beq.n	800ad1a <TIM_OC5_SetConfig+0xa2>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a1a      	ldr	r2, [pc, #104]	@ (800ad70 <TIM_OC5_SetConfig+0xf8>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d007      	beq.n	800ad1a <TIM_OC5_SetConfig+0xa2>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a19      	ldr	r2, [pc, #100]	@ (800ad74 <TIM_OC5_SetConfig+0xfc>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d003      	beq.n	800ad1a <TIM_OC5_SetConfig+0xa2>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a18      	ldr	r2, [pc, #96]	@ (800ad78 <TIM_OC5_SetConfig+0x100>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d109      	bne.n	800ad2e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	021b      	lsls	r3, r3, #8
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	693a      	ldr	r2, [r7, #16]
 800ad46:	621a      	str	r2, [r3, #32]
}
 800ad48:	bf00      	nop
 800ad4a:	371c      	adds	r7, #28
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	40012c00 	.word	0x40012c00
 800ad58:	50012c00 	.word	0x50012c00
 800ad5c:	40013400 	.word	0x40013400
 800ad60:	50013400 	.word	0x50013400
 800ad64:	40014000 	.word	0x40014000
 800ad68:	50014000 	.word	0x50014000
 800ad6c:	40014400 	.word	0x40014400
 800ad70:	50014400 	.word	0x50014400
 800ad74:	40014800 	.word	0x40014800
 800ad78:	50014800 	.word	0x50014800

0800ad7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a1b      	ldr	r3, [r3, #32]
 800ad90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ada2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800adaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	021b      	lsls	r3, r3, #8
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4313      	orrs	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800adc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	051b      	lsls	r3, r3, #20
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	4313      	orrs	r3, r2
 800adce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a22      	ldr	r2, [pc, #136]	@ (800ae5c <TIM_OC6_SetConfig+0xe0>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d023      	beq.n	800ae20 <TIM_OC6_SetConfig+0xa4>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a21      	ldr	r2, [pc, #132]	@ (800ae60 <TIM_OC6_SetConfig+0xe4>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d01f      	beq.n	800ae20 <TIM_OC6_SetConfig+0xa4>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a20      	ldr	r2, [pc, #128]	@ (800ae64 <TIM_OC6_SetConfig+0xe8>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d01b      	beq.n	800ae20 <TIM_OC6_SetConfig+0xa4>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a1f      	ldr	r2, [pc, #124]	@ (800ae68 <TIM_OC6_SetConfig+0xec>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d017      	beq.n	800ae20 <TIM_OC6_SetConfig+0xa4>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a1e      	ldr	r2, [pc, #120]	@ (800ae6c <TIM_OC6_SetConfig+0xf0>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d013      	beq.n	800ae20 <TIM_OC6_SetConfig+0xa4>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a1d      	ldr	r2, [pc, #116]	@ (800ae70 <TIM_OC6_SetConfig+0xf4>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00f      	beq.n	800ae20 <TIM_OC6_SetConfig+0xa4>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a1c      	ldr	r2, [pc, #112]	@ (800ae74 <TIM_OC6_SetConfig+0xf8>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d00b      	beq.n	800ae20 <TIM_OC6_SetConfig+0xa4>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a1b      	ldr	r2, [pc, #108]	@ (800ae78 <TIM_OC6_SetConfig+0xfc>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d007      	beq.n	800ae20 <TIM_OC6_SetConfig+0xa4>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a1a      	ldr	r2, [pc, #104]	@ (800ae7c <TIM_OC6_SetConfig+0x100>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d003      	beq.n	800ae20 <TIM_OC6_SetConfig+0xa4>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a19      	ldr	r2, [pc, #100]	@ (800ae80 <TIM_OC6_SetConfig+0x104>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d109      	bne.n	800ae34 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ae26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	029b      	lsls	r3, r3, #10
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	621a      	str	r2, [r3, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	371c      	adds	r7, #28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	40012c00 	.word	0x40012c00
 800ae60:	50012c00 	.word	0x50012c00
 800ae64:	40013400 	.word	0x40013400
 800ae68:	50013400 	.word	0x50013400
 800ae6c:	40014000 	.word	0x40014000
 800ae70:	50014000 	.word	0x50014000
 800ae74:	40014400 	.word	0x40014400
 800ae78:	50014400 	.word	0x50014400
 800ae7c:	40014800 	.word	0x40014800
 800ae80:	50014800 	.word	0x50014800

0800ae84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b087      	sub	sp, #28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	f023 0201 	bic.w	r2, r3, #1
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aeae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	011b      	lsls	r3, r3, #4
 800aeb4:	693a      	ldr	r2, [r7, #16]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f023 030a 	bic.w	r3, r3, #10
 800aec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	621a      	str	r2, [r3, #32]
}
 800aed6:	bf00      	nop
 800aed8:	371c      	adds	r7, #28
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr

0800aee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aee2:	b480      	push	{r7}
 800aee4:	b087      	sub	sp, #28
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	60f8      	str	r0, [r7, #12]
 800aeea:	60b9      	str	r1, [r7, #8]
 800aeec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6a1b      	ldr	r3, [r3, #32]
 800aef2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	f023 0210 	bic.w	r2, r3, #16
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800af0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	031b      	lsls	r3, r3, #12
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	4313      	orrs	r3, r2
 800af16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800af1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	011b      	lsls	r3, r3, #4
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	4313      	orrs	r3, r2
 800af28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	621a      	str	r2, [r3, #32]
}
 800af36:	bf00      	nop
 800af38:	371c      	adds	r7, #28
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af42:	b480      	push	{r7}
 800af44:	b085      	sub	sp, #20
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800af58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4313      	orrs	r3, r2
 800af64:	f043 0307 	orr.w	r3, r3, #7
 800af68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	609a      	str	r2, [r3, #8]
}
 800af70:	bf00      	nop
 800af72:	3714      	adds	r7, #20
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b087      	sub	sp, #28
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	021a      	lsls	r2, r3, #8
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	431a      	orrs	r2, r3
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	697a      	ldr	r2, [r7, #20]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	609a      	str	r2, [r3, #8]
}
 800afb0:	bf00      	nop
 800afb2:	371c      	adds	r7, #28
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b087      	sub	sp, #28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f003 031f 	and.w	r3, r3, #31
 800afce:	2201      	movs	r2, #1
 800afd0:	fa02 f303 	lsl.w	r3, r2, r3
 800afd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6a1a      	ldr	r2, [r3, #32]
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	43db      	mvns	r3, r3
 800afde:	401a      	ands	r2, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6a1a      	ldr	r2, [r3, #32]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f003 031f 	and.w	r3, r3, #31
 800afee:	6879      	ldr	r1, [r7, #4]
 800aff0:	fa01 f303 	lsl.w	r3, r1, r3
 800aff4:	431a      	orrs	r2, r3
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	621a      	str	r2, [r3, #32]
}
 800affa:	bf00      	nop
 800affc:	371c      	adds	r7, #28
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
	...

0800b008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d101      	bne.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b01c:	2302      	movs	r3, #2
 800b01e:	e097      	b.n	800b150 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2202      	movs	r2, #2
 800b02c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a45      	ldr	r2, [pc, #276]	@ (800b15c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d00e      	beq.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a44      	ldr	r2, [pc, #272]	@ (800b160 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d009      	beq.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a42      	ldr	r2, [pc, #264]	@ (800b164 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d004      	beq.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a41      	ldr	r2, [pc, #260]	@ (800b168 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d108      	bne.n	800b07a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b06e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	4313      	orrs	r3, r2
 800b078:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b084:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a2f      	ldr	r2, [pc, #188]	@ (800b15c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d040      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a2e      	ldr	r2, [pc, #184]	@ (800b160 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d03b      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0b4:	d036      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0be:	d031      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a29      	ldr	r2, [pc, #164]	@ (800b16c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d02c      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a28      	ldr	r2, [pc, #160]	@ (800b170 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d027      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a26      	ldr	r2, [pc, #152]	@ (800b174 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d022      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a25      	ldr	r2, [pc, #148]	@ (800b178 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d01d      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a23      	ldr	r2, [pc, #140]	@ (800b17c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d018      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a22      	ldr	r2, [pc, #136]	@ (800b180 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d013      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a18      	ldr	r2, [pc, #96]	@ (800b164 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d00e      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a17      	ldr	r2, [pc, #92]	@ (800b168 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d009      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a1b      	ldr	r2, [pc, #108]	@ (800b184 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d004      	beq.n	800b124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a1a      	ldr	r2, [pc, #104]	@ (800b188 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d10c      	bne.n	800b13e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b12a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	4313      	orrs	r3, r2
 800b134:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	40012c00 	.word	0x40012c00
 800b160:	50012c00 	.word	0x50012c00
 800b164:	40013400 	.word	0x40013400
 800b168:	50013400 	.word	0x50013400
 800b16c:	40000400 	.word	0x40000400
 800b170:	50000400 	.word	0x50000400
 800b174:	40000800 	.word	0x40000800
 800b178:	50000800 	.word	0x50000800
 800b17c:	40000c00 	.word	0x40000c00
 800b180:	50000c00 	.word	0x50000c00
 800b184:	40014000 	.word	0x40014000
 800b188:	50014000 	.word	0x50014000

0800b18c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b196:	2300      	movs	r3, #0
 800b198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d101      	bne.n	800b1a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	e07d      	b.n	800b2a4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	4313      	orrs	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	041b      	lsls	r3, r3, #16
 800b21e:	4313      	orrs	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	69db      	ldr	r3, [r3, #28]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a1e      	ldr	r2, [pc, #120]	@ (800b2b0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d00e      	beq.n	800b258 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a1d      	ldr	r2, [pc, #116]	@ (800b2b4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d009      	beq.n	800b258 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a1b      	ldr	r2, [pc, #108]	@ (800b2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d004      	beq.n	800b258 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a1a      	ldr	r2, [pc, #104]	@ (800b2bc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d11c      	bne.n	800b292 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b262:	051b      	lsls	r3, r3, #20
 800b264:	4313      	orrs	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	6a1b      	ldr	r3, [r3, #32]
 800b272:	4313      	orrs	r3, r2
 800b274:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b280:	4313      	orrs	r3, r2
 800b282:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b28e:	4313      	orrs	r3, r2
 800b290:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	40012c00 	.word	0x40012c00
 800b2b4:	50012c00 	.word	0x50012c00
 800b2b8:	40013400 	.word	0x40013400
 800b2bc:	50013400 	.word	0x50013400

0800b2c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2c8:	bf00      	nop
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b304:	bf00      	nop
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b318:	bf00      	nop
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b34c:	b084      	sub	sp, #16
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	f107 001c 	add.w	r0, r7, #28
 800b35a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 fab6 	bl	800c8dc <USB_CoreReset>
 800b370:	4603      	mov	r3, r0
 800b372:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b374:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d106      	bne.n	800b38a <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b380:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	639a      	str	r2, [r3, #56]	@ 0x38
 800b388:	e005      	b.n	800b396 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b38e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800b396:	7bfb      	ldrb	r3, [r7, #15]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3a2:	b004      	add	sp, #16
 800b3a4:	4770      	bx	lr
	...

0800b3a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b3b6:	79fb      	ldrb	r3, [r7, #7]
 800b3b8:	2b02      	cmp	r3, #2
 800b3ba:	d165      	bne.n	800b488 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	4a41      	ldr	r2, [pc, #260]	@ (800b4c4 <USB_SetTurnaroundTime+0x11c>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d906      	bls.n	800b3d2 <USB_SetTurnaroundTime+0x2a>
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	4a40      	ldr	r2, [pc, #256]	@ (800b4c8 <USB_SetTurnaroundTime+0x120>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d202      	bcs.n	800b3d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b3cc:	230f      	movs	r3, #15
 800b3ce:	617b      	str	r3, [r7, #20]
 800b3d0:	e062      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	4a3c      	ldr	r2, [pc, #240]	@ (800b4c8 <USB_SetTurnaroundTime+0x120>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d306      	bcc.n	800b3e8 <USB_SetTurnaroundTime+0x40>
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	4a3b      	ldr	r2, [pc, #236]	@ (800b4cc <USB_SetTurnaroundTime+0x124>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d202      	bcs.n	800b3e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b3e2:	230e      	movs	r3, #14
 800b3e4:	617b      	str	r3, [r7, #20]
 800b3e6:	e057      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	4a38      	ldr	r2, [pc, #224]	@ (800b4cc <USB_SetTurnaroundTime+0x124>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d306      	bcc.n	800b3fe <USB_SetTurnaroundTime+0x56>
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	4a37      	ldr	r2, [pc, #220]	@ (800b4d0 <USB_SetTurnaroundTime+0x128>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d202      	bcs.n	800b3fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b3f8:	230d      	movs	r3, #13
 800b3fa:	617b      	str	r3, [r7, #20]
 800b3fc:	e04c      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	4a33      	ldr	r2, [pc, #204]	@ (800b4d0 <USB_SetTurnaroundTime+0x128>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d306      	bcc.n	800b414 <USB_SetTurnaroundTime+0x6c>
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	4a32      	ldr	r2, [pc, #200]	@ (800b4d4 <USB_SetTurnaroundTime+0x12c>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d802      	bhi.n	800b414 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b40e:	230c      	movs	r3, #12
 800b410:	617b      	str	r3, [r7, #20]
 800b412:	e041      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	4a2f      	ldr	r2, [pc, #188]	@ (800b4d4 <USB_SetTurnaroundTime+0x12c>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d906      	bls.n	800b42a <USB_SetTurnaroundTime+0x82>
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	4a2e      	ldr	r2, [pc, #184]	@ (800b4d8 <USB_SetTurnaroundTime+0x130>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d802      	bhi.n	800b42a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b424:	230b      	movs	r3, #11
 800b426:	617b      	str	r3, [r7, #20]
 800b428:	e036      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	4a2a      	ldr	r2, [pc, #168]	@ (800b4d8 <USB_SetTurnaroundTime+0x130>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d906      	bls.n	800b440 <USB_SetTurnaroundTime+0x98>
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	4a29      	ldr	r2, [pc, #164]	@ (800b4dc <USB_SetTurnaroundTime+0x134>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d802      	bhi.n	800b440 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b43a:	230a      	movs	r3, #10
 800b43c:	617b      	str	r3, [r7, #20]
 800b43e:	e02b      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	4a26      	ldr	r2, [pc, #152]	@ (800b4dc <USB_SetTurnaroundTime+0x134>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d906      	bls.n	800b456 <USB_SetTurnaroundTime+0xae>
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	4a25      	ldr	r2, [pc, #148]	@ (800b4e0 <USB_SetTurnaroundTime+0x138>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d202      	bcs.n	800b456 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b450:	2309      	movs	r3, #9
 800b452:	617b      	str	r3, [r7, #20]
 800b454:	e020      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	4a21      	ldr	r2, [pc, #132]	@ (800b4e0 <USB_SetTurnaroundTime+0x138>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d306      	bcc.n	800b46c <USB_SetTurnaroundTime+0xc4>
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	4a20      	ldr	r2, [pc, #128]	@ (800b4e4 <USB_SetTurnaroundTime+0x13c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d802      	bhi.n	800b46c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b466:	2308      	movs	r3, #8
 800b468:	617b      	str	r3, [r7, #20]
 800b46a:	e015      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	4a1d      	ldr	r2, [pc, #116]	@ (800b4e4 <USB_SetTurnaroundTime+0x13c>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d906      	bls.n	800b482 <USB_SetTurnaroundTime+0xda>
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	4a1c      	ldr	r2, [pc, #112]	@ (800b4e8 <USB_SetTurnaroundTime+0x140>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d202      	bcs.n	800b482 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b47c:	2307      	movs	r3, #7
 800b47e:	617b      	str	r3, [r7, #20]
 800b480:	e00a      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b482:	2306      	movs	r3, #6
 800b484:	617b      	str	r3, [r7, #20]
 800b486:	e007      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b488:	79fb      	ldrb	r3, [r7, #7]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d102      	bne.n	800b494 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b48e:	2309      	movs	r3, #9
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	e001      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b494:	2309      	movs	r3, #9
 800b496:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	68da      	ldr	r2, [r3, #12]
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	029b      	lsls	r3, r3, #10
 800b4ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b4b0:	431a      	orrs	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	371c      	adds	r7, #28
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr
 800b4c4:	00d8acbf 	.word	0x00d8acbf
 800b4c8:	00e4e1c0 	.word	0x00e4e1c0
 800b4cc:	00f42400 	.word	0x00f42400
 800b4d0:	01067380 	.word	0x01067380
 800b4d4:	011a499f 	.word	0x011a499f
 800b4d8:	01312cff 	.word	0x01312cff
 800b4dc:	014ca43f 	.word	0x014ca43f
 800b4e0:	016e3600 	.word	0x016e3600
 800b4e4:	01a6ab1f 	.word	0x01a6ab1f
 800b4e8:	01e84800 	.word	0x01e84800

0800b4ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	f043 0201 	orr.w	r2, r3, #1
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b50e:	b480      	push	{r7}
 800b510:	b083      	sub	sp, #12
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	f023 0201 	bic.w	r2, r3, #1
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b53c:	2300      	movs	r3, #0
 800b53e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b54c:	78fb      	ldrb	r3, [r7, #3]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d115      	bne.n	800b57e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b55e:	200a      	movs	r0, #10
 800b560:	f7f8 fa9a 	bl	8003a98 <HAL_Delay>
      ms += 10U;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	330a      	adds	r3, #10
 800b568:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f001 f927 	bl	800c7be <USB_GetMode>
 800b570:	4603      	mov	r3, r0
 800b572:	2b01      	cmp	r3, #1
 800b574:	d01e      	beq.n	800b5b4 <USB_SetCurrentMode+0x84>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2bc7      	cmp	r3, #199	@ 0xc7
 800b57a:	d9f0      	bls.n	800b55e <USB_SetCurrentMode+0x2e>
 800b57c:	e01a      	b.n	800b5b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b57e:	78fb      	ldrb	r3, [r7, #3]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d115      	bne.n	800b5b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b590:	200a      	movs	r0, #10
 800b592:	f7f8 fa81 	bl	8003a98 <HAL_Delay>
      ms += 10U;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	330a      	adds	r3, #10
 800b59a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f001 f90e 	bl	800c7be <USB_GetMode>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d005      	beq.n	800b5b4 <USB_SetCurrentMode+0x84>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2bc7      	cmp	r3, #199	@ 0xc7
 800b5ac:	d9f0      	bls.n	800b590 <USB_SetCurrentMode+0x60>
 800b5ae:	e001      	b.n	800b5b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e005      	b.n	800b5c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2bc8      	cmp	r3, #200	@ 0xc8
 800b5b8:	d101      	bne.n	800b5be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e000      	b.n	800b5c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b086      	sub	sp, #24
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b5d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	613b      	str	r3, [r7, #16]
 800b5e6:	e009      	b.n	800b5fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	3340      	adds	r3, #64	@ 0x40
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4413      	add	r3, r2
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	613b      	str	r3, [r7, #16]
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	2b0e      	cmp	r3, #14
 800b600:	d9f2      	bls.n	800b5e8 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b602:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b606:	2b00      	cmp	r3, #0
 800b608:	d11c      	bne.n	800b644 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b618:	f043 0302 	orr.w	r3, r3, #2
 800b61c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b622:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	e005      	b.n	800b650 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b648:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b656:	461a      	mov	r2, r3
 800b658:	2300      	movs	r3, #0
 800b65a:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b65c:	2103      	movs	r1, #3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f95e 	bl	800b920 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b664:	2110      	movs	r1, #16
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f8fa 	bl	800b860 <USB_FlushTxFifo>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f924 	bl	800b8c4 <USB_FlushRxFifo>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b68c:	461a      	mov	r2, r3
 800b68e:	2300      	movs	r3, #0
 800b690:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b698:	461a      	mov	r2, r3
 800b69a:	2300      	movs	r3, #0
 800b69c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	613b      	str	r3, [r7, #16]
 800b6ae:	e043      	b.n	800b738 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b6c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6c6:	d118      	bne.n	800b6fa <USB_DevInit+0x132>
    {
      if (i == 0U)
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10a      	bne.n	800b6e4 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	015a      	lsls	r2, r3, #5
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b6e0:	6013      	str	r3, [r2, #0]
 800b6e2:	e013      	b.n	800b70c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	015a      	lsls	r2, r3, #5
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b6f6:	6013      	str	r3, [r2, #0]
 800b6f8:	e008      	b.n	800b70c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	015a      	lsls	r2, r3, #5
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	4413      	add	r3, r2
 800b702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b706:	461a      	mov	r2, r3
 800b708:	2300      	movs	r3, #0
 800b70a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4413      	add	r3, r2
 800b714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b718:	461a      	mov	r2, r3
 800b71a:	2300      	movs	r3, #0
 800b71c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	015a      	lsls	r2, r3, #5
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	4413      	add	r3, r2
 800b726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b72a:	461a      	mov	r2, r3
 800b72c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b730:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	3301      	adds	r3, #1
 800b736:	613b      	str	r3, [r7, #16]
 800b738:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b73c:	461a      	mov	r2, r3
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	4293      	cmp	r3, r2
 800b742:	d3b5      	bcc.n	800b6b0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b744:	2300      	movs	r3, #0
 800b746:	613b      	str	r3, [r7, #16]
 800b748:	e043      	b.n	800b7d2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	015a      	lsls	r2, r3, #5
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	4413      	add	r3, r2
 800b752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b75c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b760:	d118      	bne.n	800b794 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10a      	bne.n	800b77e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	015a      	lsls	r2, r3, #5
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	4413      	add	r3, r2
 800b770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b774:	461a      	mov	r2, r3
 800b776:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	e013      	b.n	800b7a6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b78a:	461a      	mov	r2, r3
 800b78c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b790:	6013      	str	r3, [r2, #0]
 800b792:	e008      	b.n	800b7a6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	015a      	lsls	r2, r3, #5
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	015a      	lsls	r2, r3, #5
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	4413      	add	r3, r2
 800b7c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b7ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	613b      	str	r3, [r7, #16]
 800b7d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d3b5      	bcc.n	800b74a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b7ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b7fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b800:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b804:	2b00      	cmp	r3, #0
 800b806:	d105      	bne.n	800b814 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	f043 0210 	orr.w	r2, r3, #16
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	699a      	ldr	r2, [r3, #24]
 800b818:	4b10      	ldr	r3, [pc, #64]	@ (800b85c <USB_DevInit+0x294>)
 800b81a:	4313      	orrs	r3, r2
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b820:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b824:	2b00      	cmp	r3, #0
 800b826:	d005      	beq.n	800b834 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	f043 0208 	orr.w	r2, r3, #8
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b834:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d107      	bne.n	800b84c <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	699b      	ldr	r3, [r3, #24]
 800b840:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b844:	f043 0304 	orr.w	r3, r3, #4
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b84c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3718      	adds	r7, #24
 800b852:	46bd      	mov	sp, r7
 800b854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b858:	b004      	add	sp, #16
 800b85a:	4770      	bx	lr
 800b85c:	803c3800 	.word	0x803c3800

0800b860 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b86a:	2300      	movs	r3, #0
 800b86c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3301      	adds	r3, #1
 800b872:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b87a:	d901      	bls.n	800b880 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e01b      	b.n	800b8b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	daf2      	bge.n	800b86e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	019b      	lsls	r3, r3, #6
 800b890:	f043 0220 	orr.w	r2, r3, #32
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3301      	adds	r3, #1
 800b89c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8a4:	d901      	bls.n	800b8aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	e006      	b.n	800b8b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	f003 0320 	and.w	r3, r3, #32
 800b8b2:	2b20      	cmp	r3, #32
 800b8b4:	d0f0      	beq.n	800b898 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8dc:	d901      	bls.n	800b8e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e018      	b.n	800b914 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	daf2      	bge.n	800b8d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2210      	movs	r2, #16
 800b8f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b900:	d901      	bls.n	800b906 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b902:	2303      	movs	r3, #3
 800b904:	e006      	b.n	800b914 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	f003 0310 	and.w	r3, r3, #16
 800b90e:	2b10      	cmp	r3, #16
 800b910:	d0f0      	beq.n	800b8f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	78fb      	ldrb	r3, [r7, #3]
 800b93a:	68f9      	ldr	r1, [r7, #12]
 800b93c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b940:	4313      	orrs	r3, r2
 800b942:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3714      	adds	r7, #20
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b952:	b480      	push	{r7}
 800b954:	b087      	sub	sp, #28
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	f003 0306 	and.w	r3, r3, #6
 800b96a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d102      	bne.n	800b978 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b972:	2300      	movs	r3, #0
 800b974:	75fb      	strb	r3, [r7, #23]
 800b976:	e00a      	b.n	800b98e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d002      	beq.n	800b984 <USB_GetDevSpeed+0x32>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2b06      	cmp	r3, #6
 800b982:	d102      	bne.n	800b98a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b984:	2302      	movs	r3, #2
 800b986:	75fb      	strb	r3, [r7, #23]
 800b988:	e001      	b.n	800b98e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b98a:	230f      	movs	r3, #15
 800b98c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b98e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b990:	4618      	mov	r0, r3
 800b992:	371c      	adds	r7, #28
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	785b      	ldrb	r3, [r3, #1]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d13a      	bne.n	800ba2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9be:	69da      	ldr	r2, [r3, #28]
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	f003 030f 	and.w	r3, r3, #15
 800b9c8:	2101      	movs	r1, #1
 800b9ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	68f9      	ldr	r1, [r7, #12]
 800b9d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	015a      	lsls	r2, r3, #5
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d155      	bne.n	800ba9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	015a      	lsls	r2, r3, #5
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	791b      	ldrb	r3, [r3, #4]
 800ba0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	059b      	lsls	r3, r3, #22
 800ba12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba14:	4313      	orrs	r3, r2
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	0151      	lsls	r1, r2, #5
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	440a      	add	r2, r1
 800ba1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba2a:	6013      	str	r3, [r2, #0]
 800ba2c:	e036      	b.n	800ba9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba34:	69da      	ldr	r2, [r3, #28]
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	f003 030f 	and.w	r3, r3, #15
 800ba3e:	2101      	movs	r1, #1
 800ba40:	fa01 f303 	lsl.w	r3, r1, r3
 800ba44:	041b      	lsls	r3, r3, #16
 800ba46:	68f9      	ldr	r1, [r7, #12]
 800ba48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	015a      	lsls	r2, r3, #5
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4413      	add	r3, r2
 800ba58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d11a      	bne.n	800ba9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	791b      	ldrb	r3, [r3, #4]
 800ba80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba82:	430b      	orrs	r3, r1
 800ba84:	4313      	orrs	r3, r2
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	0151      	lsls	r1, r2, #5
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	440a      	add	r2, r1
 800ba8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr
	...

0800baac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	785b      	ldrb	r3, [r3, #1]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d161      	bne.n	800bb8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	015a      	lsls	r2, r3, #5
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	4413      	add	r3, r2
 800bad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bada:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bade:	d11f      	bne.n	800bb20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	015a      	lsls	r2, r3, #5
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	4413      	add	r3, r2
 800bae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	0151      	lsls	r1, r2, #5
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	440a      	add	r2, r1
 800baf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bafa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bafe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	0151      	lsls	r1, r2, #5
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	440a      	add	r2, r1
 800bb16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	f003 030f 	and.w	r3, r3, #15
 800bb30:	2101      	movs	r1, #1
 800bb32:	fa01 f303 	lsl.w	r3, r1, r3
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	43db      	mvns	r3, r3
 800bb3a:	68f9      	ldr	r1, [r7, #12]
 800bb3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb40:	4013      	ands	r3, r2
 800bb42:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb4a:	69da      	ldr	r2, [r3, #28]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	f003 030f 	and.w	r3, r3, #15
 800bb54:	2101      	movs	r1, #1
 800bb56:	fa01 f303 	lsl.w	r3, r1, r3
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	43db      	mvns	r3, r3
 800bb5e:	68f9      	ldr	r1, [r7, #12]
 800bb60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb64:	4013      	ands	r3, r2
 800bb66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	0159      	lsls	r1, r3, #5
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	440b      	add	r3, r1
 800bb7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb82:	4619      	mov	r1, r3
 800bb84:	4b35      	ldr	r3, [pc, #212]	@ (800bc5c <USB_DeactivateEndpoint+0x1b0>)
 800bb86:	4013      	ands	r3, r2
 800bb88:	600b      	str	r3, [r1, #0]
 800bb8a:	e060      	b.n	800bc4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	015a      	lsls	r2, r3, #5
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	4413      	add	r3, r2
 800bb94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bba2:	d11f      	bne.n	800bbe4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	015a      	lsls	r2, r3, #5
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	0151      	lsls	r1, r2, #5
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	440a      	add	r2, r1
 800bbba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bbc2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	015a      	lsls	r2, r3, #5
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4413      	add	r3, r2
 800bbcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	0151      	lsls	r1, r2, #5
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	440a      	add	r2, r1
 800bbda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bbe2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	f003 030f 	and.w	r3, r3, #15
 800bbf4:	2101      	movs	r1, #1
 800bbf6:	fa01 f303 	lsl.w	r3, r1, r3
 800bbfa:	041b      	lsls	r3, r3, #16
 800bbfc:	43db      	mvns	r3, r3
 800bbfe:	68f9      	ldr	r1, [r7, #12]
 800bc00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc04:	4013      	ands	r3, r2
 800bc06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc0e:	69da      	ldr	r2, [r3, #28]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	f003 030f 	and.w	r3, r3, #15
 800bc18:	2101      	movs	r1, #1
 800bc1a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc1e:	041b      	lsls	r3, r3, #16
 800bc20:	43db      	mvns	r3, r3
 800bc22:	68f9      	ldr	r1, [r7, #12]
 800bc24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc28:	4013      	ands	r3, r2
 800bc2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	015a      	lsls	r2, r3, #5
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	0159      	lsls	r1, r3, #5
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	440b      	add	r3, r1
 800bc42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc46:	4619      	mov	r1, r3
 800bc48:	4b05      	ldr	r3, [pc, #20]	@ (800bc60 <USB_DeactivateEndpoint+0x1b4>)
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	ec337800 	.word	0xec337800
 800bc60:	eff37800 	.word	0xeff37800

0800bc64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b08a      	sub	sp, #40	@ 0x28
 800bc68:	af02      	add	r7, sp, #8
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	785b      	ldrb	r3, [r3, #1]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	f040 817f 	bne.w	800bf84 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d132      	bne.n	800bcf4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	015a      	lsls	r2, r3, #5
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	4413      	add	r3, r2
 800bc96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	69ba      	ldr	r2, [r7, #24]
 800bc9e:	0151      	lsls	r1, r2, #5
 800bca0:	69fa      	ldr	r2, [r7, #28]
 800bca2:	440a      	add	r2, r1
 800bca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bca8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800bcac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800bcb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	015a      	lsls	r2, r3, #5
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	69ba      	ldr	r2, [r7, #24]
 800bcc2:	0151      	lsls	r1, r2, #5
 800bcc4:	69fa      	ldr	r2, [r7, #28]
 800bcc6:	440a      	add	r2, r1
 800bcc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bccc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bcd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	015a      	lsls	r2, r3, #5
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	4413      	add	r3, r2
 800bcda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	0151      	lsls	r1, r2, #5
 800bce4:	69fa      	ldr	r2, [r7, #28]
 800bce6:	440a      	add	r2, r1
 800bce8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bcec:	0cdb      	lsrs	r3, r3, #19
 800bcee:	04db      	lsls	r3, r3, #19
 800bcf0:	6113      	str	r3, [r2, #16]
 800bcf2:	e097      	b.n	800be24 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	015a      	lsls	r2, r3, #5
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	69ba      	ldr	r2, [r7, #24]
 800bd04:	0151      	lsls	r1, r2, #5
 800bd06:	69fa      	ldr	r2, [r7, #28]
 800bd08:	440a      	add	r2, r1
 800bd0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd0e:	0cdb      	lsrs	r3, r3, #19
 800bd10:	04db      	lsls	r3, r3, #19
 800bd12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	015a      	lsls	r2, r3, #5
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	69ba      	ldr	r2, [r7, #24]
 800bd24:	0151      	lsls	r1, r2, #5
 800bd26:	69fa      	ldr	r2, [r7, #28]
 800bd28:	440a      	add	r2, r1
 800bd2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd2e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800bd32:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800bd36:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d11a      	bne.n	800bd74 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	691a      	ldr	r2, [r3, #16]
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d903      	bls.n	800bd52 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	689a      	ldr	r2, [r3, #8]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	015a      	lsls	r2, r3, #5
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	4413      	add	r3, r2
 800bd5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	69ba      	ldr	r2, [r7, #24]
 800bd62:	0151      	lsls	r1, r2, #5
 800bd64:	69fa      	ldr	r2, [r7, #28]
 800bd66:	440a      	add	r2, r1
 800bd68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bd70:	6113      	str	r3, [r2, #16]
 800bd72:	e044      	b.n	800bdfe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	691a      	ldr	r2, [r3, #16]
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	1e5a      	subs	r2, r3, #1
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd88:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	015a      	lsls	r2, r3, #5
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	4413      	add	r3, r2
 800bd92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd96:	691a      	ldr	r2, [r3, #16]
 800bd98:	8afb      	ldrh	r3, [r7, #22]
 800bd9a:	04d9      	lsls	r1, r3, #19
 800bd9c:	4ba4      	ldr	r3, [pc, #656]	@ (800c030 <USB_EPStartXfer+0x3cc>)
 800bd9e:	400b      	ands	r3, r1
 800bda0:	69b9      	ldr	r1, [r7, #24]
 800bda2:	0148      	lsls	r0, r1, #5
 800bda4:	69f9      	ldr	r1, [r7, #28]
 800bda6:	4401      	add	r1, r0
 800bda8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bdac:	4313      	orrs	r3, r2
 800bdae:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	791b      	ldrb	r3, [r3, #4]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d122      	bne.n	800bdfe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	015a      	lsls	r2, r3, #5
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	69ba      	ldr	r2, [r7, #24]
 800bdc8:	0151      	lsls	r1, r2, #5
 800bdca:	69fa      	ldr	r2, [r7, #28]
 800bdcc:	440a      	add	r2, r1
 800bdce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bdd2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800bdd6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	015a      	lsls	r2, r3, #5
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	4413      	add	r3, r2
 800bde0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bde4:	691a      	ldr	r2, [r3, #16]
 800bde6:	8afb      	ldrh	r3, [r7, #22]
 800bde8:	075b      	lsls	r3, r3, #29
 800bdea:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800bdee:	69b9      	ldr	r1, [r7, #24]
 800bdf0:	0148      	lsls	r0, r1, #5
 800bdf2:	69f9      	ldr	r1, [r7, #28]
 800bdf4:	4401      	add	r1, r0
 800bdf6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	015a      	lsls	r2, r3, #5
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	4413      	add	r3, r2
 800be06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be0a:	691a      	ldr	r2, [r3, #16]
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be14:	69b9      	ldr	r1, [r7, #24]
 800be16:	0148      	lsls	r0, r1, #5
 800be18:	69f9      	ldr	r1, [r7, #28]
 800be1a:	4401      	add	r1, r0
 800be1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800be20:	4313      	orrs	r3, r2
 800be22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800be24:	79fb      	ldrb	r3, [r7, #7]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d14b      	bne.n	800bec2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d009      	beq.n	800be46 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	015a      	lsls	r2, r3, #5
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	4413      	add	r3, r2
 800be3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be3e:	461a      	mov	r2, r3
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	69db      	ldr	r3, [r3, #28]
 800be44:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	791b      	ldrb	r3, [r3, #4]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d128      	bne.n	800bea0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d110      	bne.n	800be80 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	015a      	lsls	r2, r3, #5
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	4413      	add	r3, r2
 800be66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	69ba      	ldr	r2, [r7, #24]
 800be6e:	0151      	lsls	r1, r2, #5
 800be70:	69fa      	ldr	r2, [r7, #28]
 800be72:	440a      	add	r2, r1
 800be74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800be7c:	6013      	str	r3, [r2, #0]
 800be7e:	e00f      	b.n	800bea0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	015a      	lsls	r2, r3, #5
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	4413      	add	r3, r2
 800be88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	69ba      	ldr	r2, [r7, #24]
 800be90:	0151      	lsls	r1, r2, #5
 800be92:	69fa      	ldr	r2, [r7, #28]
 800be94:	440a      	add	r2, r1
 800be96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be9e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	015a      	lsls	r2, r3, #5
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	4413      	add	r3, r2
 800bea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	69ba      	ldr	r2, [r7, #24]
 800beb0:	0151      	lsls	r1, r2, #5
 800beb2:	69fa      	ldr	r2, [r7, #28]
 800beb4:	440a      	add	r2, r1
 800beb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800beba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bebe:	6013      	str	r3, [r2, #0]
 800bec0:	e166      	b.n	800c190 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	69ba      	ldr	r2, [r7, #24]
 800bed2:	0151      	lsls	r1, r2, #5
 800bed4:	69fa      	ldr	r2, [r7, #28]
 800bed6:	440a      	add	r2, r1
 800bed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bedc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bee0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	791b      	ldrb	r3, [r3, #4]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d015      	beq.n	800bf16 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 814e 	beq.w	800c190 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800befa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	f003 030f 	and.w	r3, r3, #15
 800bf04:	2101      	movs	r1, #1
 800bf06:	fa01 f303 	lsl.w	r3, r1, r3
 800bf0a:	69f9      	ldr	r1, [r7, #28]
 800bf0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf10:	4313      	orrs	r3, r2
 800bf12:	634b      	str	r3, [r1, #52]	@ 0x34
 800bf14:	e13c      	b.n	800c190 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d110      	bne.n	800bf48 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	015a      	lsls	r2, r3, #5
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	0151      	lsls	r1, r2, #5
 800bf38:	69fa      	ldr	r2, [r7, #28]
 800bf3a:	440a      	add	r2, r1
 800bf3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bf44:	6013      	str	r3, [r2, #0]
 800bf46:	e00f      	b.n	800bf68 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	69ba      	ldr	r2, [r7, #24]
 800bf58:	0151      	lsls	r1, r2, #5
 800bf5a:	69fa      	ldr	r2, [r7, #28]
 800bf5c:	440a      	add	r2, r1
 800bf5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf66:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	68d9      	ldr	r1, [r3, #12]
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	781a      	ldrb	r2, [r3, #0]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	b298      	uxth	r0, r3
 800bf76:	79fb      	ldrb	r3, [r7, #7]
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f000 f9b9 	bl	800c2f4 <USB_WritePacket>
 800bf82:	e105      	b.n	800c190 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	015a      	lsls	r2, r3, #5
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf90:	691b      	ldr	r3, [r3, #16]
 800bf92:	69ba      	ldr	r2, [r7, #24]
 800bf94:	0151      	lsls	r1, r2, #5
 800bf96:	69fa      	ldr	r2, [r7, #28]
 800bf98:	440a      	add	r2, r1
 800bf9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf9e:	0cdb      	lsrs	r3, r3, #19
 800bfa0:	04db      	lsls	r3, r3, #19
 800bfa2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	015a      	lsls	r2, r3, #5
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	4413      	add	r3, r2
 800bfac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	0151      	lsls	r1, r2, #5
 800bfb6:	69fa      	ldr	r2, [r7, #28]
 800bfb8:	440a      	add	r2, r1
 800bfba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bfbe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800bfc2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800bfc6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d132      	bne.n	800c034 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d003      	beq.n	800bfde <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	689a      	ldr	r2, [r3, #8]
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	689a      	ldr	r2, [r3, #8]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bff2:	691a      	ldr	r2, [r3, #16]
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	6a1b      	ldr	r3, [r3, #32]
 800bff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bffc:	69b9      	ldr	r1, [r7, #24]
 800bffe:	0148      	lsls	r0, r1, #5
 800c000:	69f9      	ldr	r1, [r7, #28]
 800c002:	4401      	add	r1, r0
 800c004:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c008:	4313      	orrs	r3, r2
 800c00a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	015a      	lsls	r2, r3, #5
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	4413      	add	r3, r2
 800c014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	69ba      	ldr	r2, [r7, #24]
 800c01c:	0151      	lsls	r1, r2, #5
 800c01e:	69fa      	ldr	r2, [r7, #28]
 800c020:	440a      	add	r2, r1
 800c022:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c026:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c02a:	6113      	str	r3, [r2, #16]
 800c02c:	e062      	b.n	800c0f4 <USB_EPStartXfer+0x490>
 800c02e:	bf00      	nop
 800c030:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d123      	bne.n	800c084 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	015a      	lsls	r2, r3, #5
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	4413      	add	r3, r2
 800c044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c048:	691a      	ldr	r2, [r3, #16]
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c052:	69b9      	ldr	r1, [r7, #24]
 800c054:	0148      	lsls	r0, r1, #5
 800c056:	69f9      	ldr	r1, [r7, #28]
 800c058:	4401      	add	r1, r0
 800c05a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c05e:	4313      	orrs	r3, r2
 800c060:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	015a      	lsls	r2, r3, #5
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	4413      	add	r3, r2
 800c06a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c06e:	691b      	ldr	r3, [r3, #16]
 800c070:	69ba      	ldr	r2, [r7, #24]
 800c072:	0151      	lsls	r1, r2, #5
 800c074:	69fa      	ldr	r2, [r7, #28]
 800c076:	440a      	add	r2, r1
 800c078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c07c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c080:	6113      	str	r3, [r2, #16]
 800c082:	e037      	b.n	800c0f4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	691a      	ldr	r2, [r3, #16]
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	4413      	add	r3, r2
 800c08e:	1e5a      	subs	r2, r3, #1
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	fbb2 f3f3 	udiv	r3, r2, r3
 800c098:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	8afa      	ldrh	r2, [r7, #22]
 800c0a0:	fb03 f202 	mul.w	r2, r3, r2
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	015a      	lsls	r2, r3, #5
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0b4:	691a      	ldr	r2, [r3, #16]
 800c0b6:	8afb      	ldrh	r3, [r7, #22]
 800c0b8:	04d9      	lsls	r1, r3, #19
 800c0ba:	4b38      	ldr	r3, [pc, #224]	@ (800c19c <USB_EPStartXfer+0x538>)
 800c0bc:	400b      	ands	r3, r1
 800c0be:	69b9      	ldr	r1, [r7, #24]
 800c0c0:	0148      	lsls	r0, r1, #5
 800c0c2:	69f9      	ldr	r1, [r7, #28]
 800c0c4:	4401      	add	r1, r0
 800c0c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	015a      	lsls	r2, r3, #5
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0da:	691a      	ldr	r2, [r3, #16]
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0e4:	69b9      	ldr	r1, [r7, #24]
 800c0e6:	0148      	lsls	r0, r1, #5
 800c0e8:	69f9      	ldr	r1, [r7, #28]
 800c0ea:	4401      	add	r1, r0
 800c0ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c0f4:	79fb      	ldrb	r3, [r7, #7]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d10d      	bne.n	800c116 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d009      	beq.n	800c116 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	68d9      	ldr	r1, [r3, #12]
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c112:	460a      	mov	r2, r1
 800c114:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	791b      	ldrb	r3, [r3, #4]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d128      	bne.n	800c170 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d110      	bne.n	800c150 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	4413      	add	r3, r2
 800c136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	69ba      	ldr	r2, [r7, #24]
 800c13e:	0151      	lsls	r1, r2, #5
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	440a      	add	r2, r1
 800c144:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c148:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c14c:	6013      	str	r3, [r2, #0]
 800c14e:	e00f      	b.n	800c170 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	015a      	lsls	r2, r3, #5
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	4413      	add	r3, r2
 800c158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	69ba      	ldr	r2, [r7, #24]
 800c160:	0151      	lsls	r1, r2, #5
 800c162:	69fa      	ldr	r2, [r7, #28]
 800c164:	440a      	add	r2, r1
 800c166:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c16a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c16e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	4413      	add	r3, r2
 800c178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	69ba      	ldr	r2, [r7, #24]
 800c180:	0151      	lsls	r1, r2, #5
 800c182:	69fa      	ldr	r2, [r7, #28]
 800c184:	440a      	add	r2, r1
 800c186:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c18a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c18e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3720      	adds	r7, #32
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	1ff80000 	.word	0x1ff80000

0800c1a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b087      	sub	sp, #28
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	785b      	ldrb	r3, [r3, #1]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d14a      	bne.n	800c254 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	015a      	lsls	r2, r3, #5
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1d6:	f040 8086 	bne.w	800c2e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	015a      	lsls	r2, r3, #5
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	7812      	ldrb	r2, [r2, #0]
 800c1ee:	0151      	lsls	r1, r2, #5
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	440a      	add	r2, r1
 800c1f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c1fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	015a      	lsls	r2, r3, #5
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	4413      	add	r3, r2
 800c208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	683a      	ldr	r2, [r7, #0]
 800c210:	7812      	ldrb	r2, [r2, #0]
 800c212:	0151      	lsls	r1, r2, #5
 800c214:	693a      	ldr	r2, [r7, #16]
 800c216:	440a      	add	r2, r1
 800c218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c21c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c220:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3301      	adds	r3, #1
 800c226:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c22e:	4293      	cmp	r3, r2
 800c230:	d902      	bls.n	800c238 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	75fb      	strb	r3, [r7, #23]
          break;
 800c236:	e056      	b.n	800c2e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	015a      	lsls	r2, r3, #5
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	4413      	add	r3, r2
 800c242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c24c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c250:	d0e7      	beq.n	800c222 <USB_EPStopXfer+0x82>
 800c252:	e048      	b.n	800c2e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	015a      	lsls	r2, r3, #5
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c26c:	d13b      	bne.n	800c2e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	015a      	lsls	r2, r3, #5
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	4413      	add	r3, r2
 800c278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	7812      	ldrb	r2, [r2, #0]
 800c282:	0151      	lsls	r1, r2, #5
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	440a      	add	r2, r1
 800c288:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c28c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c290:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	015a      	lsls	r2, r3, #5
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	4413      	add	r3, r2
 800c29c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	7812      	ldrb	r2, [r2, #0]
 800c2a6:	0151      	lsls	r1, r2, #5
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	440a      	add	r2, r1
 800c2ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c2b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d902      	bls.n	800c2cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	75fb      	strb	r3, [r7, #23]
          break;
 800c2ca:	e00c      	b.n	800c2e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	015a      	lsls	r2, r3, #5
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2e4:	d0e7      	beq.n	800c2b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	371c      	adds	r7, #28
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b089      	sub	sp, #36	@ 0x24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	4611      	mov	r1, r2
 800c300:	461a      	mov	r2, r3
 800c302:	460b      	mov	r3, r1
 800c304:	71fb      	strb	r3, [r7, #7]
 800c306:	4613      	mov	r3, r2
 800c308:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c312:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c316:	2b00      	cmp	r3, #0
 800c318:	d123      	bne.n	800c362 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c31a:	88bb      	ldrh	r3, [r7, #4]
 800c31c:	3303      	adds	r3, #3
 800c31e:	089b      	lsrs	r3, r3, #2
 800c320:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c322:	2300      	movs	r3, #0
 800c324:	61bb      	str	r3, [r7, #24]
 800c326:	e018      	b.n	800c35a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c328:	79fb      	ldrb	r3, [r7, #7]
 800c32a:	031a      	lsls	r2, r3, #12
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	4413      	add	r3, r2
 800c330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c334:	461a      	mov	r2, r3
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	3301      	adds	r3, #1
 800c340:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	3301      	adds	r3, #1
 800c346:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	3301      	adds	r3, #1
 800c34c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	3301      	adds	r3, #1
 800c352:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	3301      	adds	r3, #1
 800c358:	61bb      	str	r3, [r7, #24]
 800c35a:	69ba      	ldr	r2, [r7, #24]
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d3e2      	bcc.n	800c328 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3724      	adds	r7, #36	@ 0x24
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c370:	b480      	push	{r7}
 800c372:	b08b      	sub	sp, #44	@ 0x2c
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	4613      	mov	r3, r2
 800c37c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c386:	88fb      	ldrh	r3, [r7, #6]
 800c388:	089b      	lsrs	r3, r3, #2
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c38e:	88fb      	ldrh	r3, [r7, #6]
 800c390:	f003 0303 	and.w	r3, r3, #3
 800c394:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c396:	2300      	movs	r3, #0
 800c398:	623b      	str	r3, [r7, #32]
 800c39a:	e014      	b.n	800c3c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a6:	601a      	str	r2, [r3, #0]
    pDest++;
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3bc:	3301      	adds	r3, #1
 800c3be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c3c0:	6a3b      	ldr	r3, [r7, #32]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	623b      	str	r3, [r7, #32]
 800c3c6:	6a3a      	ldr	r2, [r7, #32]
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d3e6      	bcc.n	800c39c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c3ce:	8bfb      	ldrh	r3, [r7, #30]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d01e      	beq.n	800c412 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f107 0310 	add.w	r3, r7, #16
 800c3e4:	6812      	ldr	r2, [r2, #0]
 800c3e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c3e8:	693a      	ldr	r2, [r7, #16]
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	00db      	lsls	r3, r3, #3
 800c3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c3f4:	b2da      	uxtb	r2, r3
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f8:	701a      	strb	r2, [r3, #0]
      i++;
 800c3fa:	6a3b      	ldr	r3, [r7, #32]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	623b      	str	r3, [r7, #32]
      pDest++;
 800c400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c402:	3301      	adds	r3, #1
 800c404:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c406:	8bfb      	ldrh	r3, [r7, #30]
 800c408:	3b01      	subs	r3, #1
 800c40a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c40c:	8bfb      	ldrh	r3, [r7, #30]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1ea      	bne.n	800c3e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c414:	4618      	mov	r0, r3
 800c416:	372c      	adds	r7, #44	@ 0x2c
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	785b      	ldrb	r3, [r3, #1]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d12c      	bne.n	800c496 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	015a      	lsls	r2, r3, #5
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	4413      	add	r3, r2
 800c444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	db12      	blt.n	800c474 <USB_EPSetStall+0x54>
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00f      	beq.n	800c474 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	015a      	lsls	r2, r3, #5
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	4413      	add	r3, r2
 800c45c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	0151      	lsls	r1, r2, #5
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	440a      	add	r2, r1
 800c46a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c46e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c472:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	0151      	lsls	r1, r2, #5
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	440a      	add	r2, r1
 800c48a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c48e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c492:	6013      	str	r3, [r2, #0]
 800c494:	e02b      	b.n	800c4ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	015a      	lsls	r2, r3, #5
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	4413      	add	r3, r2
 800c49e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	db12      	blt.n	800c4ce <USB_EPSetStall+0xae>
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00f      	beq.n	800c4ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	015a      	lsls	r2, r3, #5
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	0151      	lsls	r1, r2, #5
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	440a      	add	r2, r1
 800c4c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c4cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	015a      	lsls	r2, r3, #5
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	0151      	lsls	r1, r2, #5
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	440a      	add	r2, r1
 800c4e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c4ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4ee:	2300      	movs	r3, #0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3714      	adds	r7, #20
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	785b      	ldrb	r3, [r3, #1]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d128      	bne.n	800c56a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	4413      	add	r3, r2
 800c520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68ba      	ldr	r2, [r7, #8]
 800c528:	0151      	lsls	r1, r2, #5
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	440a      	add	r2, r1
 800c52e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c532:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c536:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	791b      	ldrb	r3, [r3, #4]
 800c53c:	2b03      	cmp	r3, #3
 800c53e:	d003      	beq.n	800c548 <USB_EPClearStall+0x4c>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	791b      	ldrb	r3, [r3, #4]
 800c544:	2b02      	cmp	r3, #2
 800c546:	d138      	bne.n	800c5ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	015a      	lsls	r2, r3, #5
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4413      	add	r3, r2
 800c550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	0151      	lsls	r1, r2, #5
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	440a      	add	r2, r1
 800c55e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	e027      	b.n	800c5ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	015a      	lsls	r2, r3, #5
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	4413      	add	r3, r2
 800c572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	0151      	lsls	r1, r2, #5
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	440a      	add	r2, r1
 800c580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c584:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c588:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	791b      	ldrb	r3, [r3, #4]
 800c58e:	2b03      	cmp	r3, #3
 800c590:	d003      	beq.n	800c59a <USB_EPClearStall+0x9e>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	791b      	ldrb	r3, [r3, #4]
 800c596:	2b02      	cmp	r3, #2
 800c598:	d10f      	bne.n	800c5ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	0151      	lsls	r1, r2, #5
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	440a      	add	r2, r1
 800c5b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c5b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c5b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3714      	adds	r7, #20
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c5e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c5ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	78fb      	ldrb	r3, [r7, #3]
 800c5f6:	011b      	lsls	r3, r3, #4
 800c5f8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c5fc:	68f9      	ldr	r1, [r7, #12]
 800c5fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c602:	4313      	orrs	r3, r2
 800c604:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3714      	adds	r7, #20
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c62e:	f023 0303 	bic.w	r3, r3, #3
 800c632:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c642:	f023 0302 	bic.w	r3, r3, #2
 800c646:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3714      	adds	r7, #20
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c656:	b480      	push	{r7}
 800c658:	b085      	sub	sp, #20
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c670:	f023 0303 	bic.w	r3, r3, #3
 800c674:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c684:	f043 0302 	orr.w	r3, r3, #2
 800c688:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	695b      	ldr	r3, [r3, #20]
 800c6a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b085      	sub	sp, #20
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6d0:	699b      	ldr	r3, [r3, #24]
 800c6d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6da:	69db      	ldr	r3, [r3, #28]
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	4013      	ands	r3, r2
 800c6e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	0c1b      	lsrs	r3, r3, #16
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b085      	sub	sp, #20
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c70e:	69db      	ldr	r3, [r3, #28]
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	4013      	ands	r3, r2
 800c714:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	b29b      	uxth	r3, r3
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c726:	b480      	push	{r7}
 800c728:	b085      	sub	sp, #20
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	460b      	mov	r3, r1
 800c730:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c736:	78fb      	ldrb	r3, [r7, #3]
 800c738:	015a      	lsls	r2, r3, #5
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	4413      	add	r3, r2
 800c73e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c74c:	695b      	ldr	r3, [r3, #20]
 800c74e:	68ba      	ldr	r2, [r7, #8]
 800c750:	4013      	ands	r3, r2
 800c752:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c754:	68bb      	ldr	r3, [r7, #8]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3714      	adds	r7, #20
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr

0800c762 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c762:	b480      	push	{r7}
 800c764:	b087      	sub	sp, #28
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	460b      	mov	r3, r1
 800c76c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c784:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c786:	78fb      	ldrb	r3, [r7, #3]
 800c788:	f003 030f 	and.w	r3, r3, #15
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	fa22 f303 	lsr.w	r3, r2, r3
 800c792:	01db      	lsls	r3, r3, #7
 800c794:	b2db      	uxtb	r3, r3
 800c796:	693a      	ldr	r2, [r7, #16]
 800c798:	4313      	orrs	r3, r2
 800c79a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c79c:	78fb      	ldrb	r3, [r7, #3]
 800c79e:	015a      	lsls	r2, r3, #5
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	693a      	ldr	r2, [r7, #16]
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	371c      	adds	r7, #28
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c7be:	b480      	push	{r7}
 800c7c0:	b083      	sub	sp, #12
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	695b      	ldr	r3, [r3, #20]
 800c7ca:	f003 0301 	and.w	r3, r3, #1
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b085      	sub	sp, #20
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c7f8:	f023 0307 	bic.w	r3, r3, #7
 800c7fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c80c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c812:	2300      	movs	r3, #0
}
 800c814:	4618      	mov	r0, r3
 800c816:	3714      	adds	r7, #20
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c820:	b480      	push	{r7}
 800c822:	b087      	sub	sp, #28
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	460b      	mov	r3, r1
 800c82a:	607a      	str	r2, [r7, #4]
 800c82c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	333c      	adds	r3, #60	@ 0x3c
 800c836:	3304      	adds	r3, #4
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	4a26      	ldr	r2, [pc, #152]	@ (800c8d8 <USB_EP0_OutStart+0xb8>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d90a      	bls.n	800c85a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c850:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c854:	d101      	bne.n	800c85a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	e037      	b.n	800c8ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c860:	461a      	mov	r2, r3
 800c862:	2300      	movs	r3, #0
 800c864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c86c:	691b      	ldr	r3, [r3, #16]
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c874:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c880:	691b      	ldr	r3, [r3, #16]
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c888:	f043 0318 	orr.w	r3, r3, #24
 800c88c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	697a      	ldr	r2, [r7, #20]
 800c898:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c89c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c8a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c8a2:	7afb      	ldrb	r3, [r7, #11]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d10f      	bne.n	800c8c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	697a      	ldr	r2, [r7, #20]
 800c8be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c8c2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c8c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	371c      	adds	r7, #28
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop
 800c8d8:	4f54300a 	.word	0x4f54300a

0800c8dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c8f4:	d901      	bls.n	800c8fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	e01b      	b.n	800c932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	daf2      	bge.n	800c8e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c902:	2300      	movs	r3, #0
 800c904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	f043 0201 	orr.w	r2, r3, #1
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	3301      	adds	r3, #1
 800c916:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c91e:	d901      	bls.n	800c924 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c920:	2303      	movs	r3, #3
 800c922:	e006      	b.n	800c932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	f003 0301 	and.w	r3, r3, #1
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d0f0      	beq.n	800c912 <USB_CoreReset+0x36>

  return HAL_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3714      	adds	r7, #20
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
	...

0800c940 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c944:	2200      	movs	r2, #0
 800c946:	4912      	ldr	r1, [pc, #72]	@ (800c990 <MX_USB_Device_Init+0x50>)
 800c948:	4812      	ldr	r0, [pc, #72]	@ (800c994 <MX_USB_Device_Init+0x54>)
 800c94a:	f001 f86f 	bl	800da2c <USBD_Init>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d001      	beq.n	800c958 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c954:	f7f4 fd90 	bl	8001478 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c958:	490f      	ldr	r1, [pc, #60]	@ (800c998 <MX_USB_Device_Init+0x58>)
 800c95a:	480e      	ldr	r0, [pc, #56]	@ (800c994 <MX_USB_Device_Init+0x54>)
 800c95c:	f001 f896 	bl	800da8c <USBD_RegisterClass>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d001      	beq.n	800c96a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c966:	f7f4 fd87 	bl	8001478 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c96a:	490c      	ldr	r1, [pc, #48]	@ (800c99c <MX_USB_Device_Init+0x5c>)
 800c96c:	4809      	ldr	r0, [pc, #36]	@ (800c994 <MX_USB_Device_Init+0x54>)
 800c96e:	f000 ffc1 	bl	800d8f4 <USBD_CDC_RegisterInterface>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c978:	f7f4 fd7e 	bl	8001478 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c97c:	4805      	ldr	r0, [pc, #20]	@ (800c994 <MX_USB_Device_Init+0x54>)
 800c97e:	f001 f8ac 	bl	800dada <USBD_Start>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c988:	f7f4 fd76 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c98c:	bf00      	nop
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	20000094 	.word	0x20000094
 800c994:	2000d004 	.word	0x2000d004
 800c998:	200000f4 	.word	0x200000f4
 800c99c:	20000080 	.word	0x20000080

0800c9a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	4905      	ldr	r1, [pc, #20]	@ (800c9bc <CDC_Init_FS+0x1c>)
 800c9a8:	4805      	ldr	r0, [pc, #20]	@ (800c9c0 <CDC_Init_FS+0x20>)
 800c9aa:	f000 ffb8 	bl	800d91e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c9ae:	4905      	ldr	r1, [pc, #20]	@ (800c9c4 <CDC_Init_FS+0x24>)
 800c9b0:	4803      	ldr	r0, [pc, #12]	@ (800c9c0 <CDC_Init_FS+0x20>)
 800c9b2:	f000 ffcd 	bl	800d950 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c9b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	2000dad4 	.word	0x2000dad4
 800c9c0:	2000d004 	.word	0x2000d004
 800c9c4:	2000d2d4 	.word	0x2000d2d4

0800c9c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c9cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	4603      	mov	r3, r0
 800c9e0:	6039      	str	r1, [r7, #0]
 800c9e2:	71fb      	strb	r3, [r7, #7]
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c9e8:	79fb      	ldrb	r3, [r7, #7]
 800c9ea:	2b23      	cmp	r3, #35	@ 0x23
 800c9ec:	d84a      	bhi.n	800ca84 <CDC_Control_FS+0xac>
 800c9ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c9f4 <CDC_Control_FS+0x1c>)
 800c9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f4:	0800ca85 	.word	0x0800ca85
 800c9f8:	0800ca85 	.word	0x0800ca85
 800c9fc:	0800ca85 	.word	0x0800ca85
 800ca00:	0800ca85 	.word	0x0800ca85
 800ca04:	0800ca85 	.word	0x0800ca85
 800ca08:	0800ca85 	.word	0x0800ca85
 800ca0c:	0800ca85 	.word	0x0800ca85
 800ca10:	0800ca85 	.word	0x0800ca85
 800ca14:	0800ca85 	.word	0x0800ca85
 800ca18:	0800ca85 	.word	0x0800ca85
 800ca1c:	0800ca85 	.word	0x0800ca85
 800ca20:	0800ca85 	.word	0x0800ca85
 800ca24:	0800ca85 	.word	0x0800ca85
 800ca28:	0800ca85 	.word	0x0800ca85
 800ca2c:	0800ca85 	.word	0x0800ca85
 800ca30:	0800ca85 	.word	0x0800ca85
 800ca34:	0800ca85 	.word	0x0800ca85
 800ca38:	0800ca85 	.word	0x0800ca85
 800ca3c:	0800ca85 	.word	0x0800ca85
 800ca40:	0800ca85 	.word	0x0800ca85
 800ca44:	0800ca85 	.word	0x0800ca85
 800ca48:	0800ca85 	.word	0x0800ca85
 800ca4c:	0800ca85 	.word	0x0800ca85
 800ca50:	0800ca85 	.word	0x0800ca85
 800ca54:	0800ca85 	.word	0x0800ca85
 800ca58:	0800ca85 	.word	0x0800ca85
 800ca5c:	0800ca85 	.word	0x0800ca85
 800ca60:	0800ca85 	.word	0x0800ca85
 800ca64:	0800ca85 	.word	0x0800ca85
 800ca68:	0800ca85 	.word	0x0800ca85
 800ca6c:	0800ca85 	.word	0x0800ca85
 800ca70:	0800ca85 	.word	0x0800ca85
 800ca74:	0800ca85 	.word	0x0800ca85
 800ca78:	0800ca85 	.word	0x0800ca85
 800ca7c:	0800ca85 	.word	0x0800ca85
 800ca80:	0800ca85 	.word	0x0800ca85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ca84:	bf00      	nop
  }

  return (USBD_OK);
 800ca86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b086      	sub	sp, #24
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ca9e:	6879      	ldr	r1, [r7, #4]
 800caa0:	4834      	ldr	r0, [pc, #208]	@ (800cb74 <CDC_Receive_FS+0xe0>)
 800caa2:	f000 ff55 	bl	800d950 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800caa6:	4833      	ldr	r0, [pc, #204]	@ (800cb74 <CDC_Receive_FS+0xe0>)
 800caa8:	f000 ff96 	bl	800d9d8 <USBD_CDC_ReceivePacket>

  uint32_t msg_rx = (Buf[3]<<24)|(Buf[2]<<16)|(Buf[1]<<8)|(Buf[0]);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	3303      	adds	r3, #3
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	061a      	lsls	r2, r3, #24
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	3302      	adds	r3, #2
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	041b      	lsls	r3, r3, #16
 800cabc:	431a      	orrs	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	3301      	adds	r3, #1
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	021b      	lsls	r3, r3, #8
 800cac6:	4313      	orrs	r3, r2
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	7812      	ldrb	r2, [r2, #0]
 800cacc:	4313      	orrs	r3, r2
 800cace:	617b      	str	r3, [r7, #20]

  uint32_t addr = (msg_rx&0x7F000000)>>24;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	0e1b      	lsrs	r3, r3, #24
 800cad4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cad8:	613b      	str	r3, [r7, #16]
  uint32_t data = (msg_rx&0x00FFFFFF);
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cae0:	60fb      	str	r3, [r7, #12]
  uint32_t msg_tx = 0xdeadbeef;
 800cae2:	4b25      	ldr	r3, [pc, #148]	@ (800cb78 <CDC_Receive_FS+0xe4>)
 800cae4:	60bb      	str	r3, [r7, #8]

  if(msg_rx&0x80000000){
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	da05      	bge.n	800caf8 <CDC_Receive_FS+0x64>
	  set_register(&device_registers,addr,data);
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	6939      	ldr	r1, [r7, #16]
 800caf0:	4822      	ldr	r0, [pc, #136]	@ (800cb7c <CDC_Receive_FS+0xe8>)
 800caf2:	f7f5 fa3f 	bl	8001f74 <set_register>
 800caf6:	e037      	b.n	800cb68 <CDC_Receive_FS+0xd4>
  }
  else{
	  if(addr == DVC_FLUSH_SAMPLE_DATA_1){
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	2b64      	cmp	r3, #100	@ 0x64
 800cafc:	d108      	bne.n	800cb10 <CDC_Receive_FS+0x7c>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_1, sizeof(adc_samples_1));
 800cafe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800cb02:	481f      	ldr	r0, [pc, #124]	@ (800cb80 <CDC_Receive_FS+0xec>)
 800cb04:	f000 f848 	bl	800cb98 <CDC_Transmit_FS>
		  adc_1_full = 0;
 800cb08:	4b1e      	ldr	r3, [pc, #120]	@ (800cb84 <CDC_Receive_FS+0xf0>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	701a      	strb	r2, [r3, #0]
 800cb0e:	e02b      	b.n	800cb68 <CDC_Receive_FS+0xd4>
	  }
	  else if(addr == DVC_FLUSH_SAMPLE_DATA_2){
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	2b65      	cmp	r3, #101	@ 0x65
 800cb14:	d108      	bne.n	800cb28 <CDC_Receive_FS+0x94>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_2, sizeof(adc_samples_2));
 800cb16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800cb1a:	481b      	ldr	r0, [pc, #108]	@ (800cb88 <CDC_Receive_FS+0xf4>)
 800cb1c:	f000 f83c 	bl	800cb98 <CDC_Transmit_FS>
		  adc_2_full = 0;
 800cb20:	4b1a      	ldr	r3, [pc, #104]	@ (800cb8c <CDC_Receive_FS+0xf8>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	e01f      	b.n	800cb68 <CDC_Receive_FS+0xd4>
	  }
	  else if(addr == DVC_FLUSH_SAMPLE_DATA_3){
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	2b66      	cmp	r3, #102	@ 0x66
 800cb2c:	d108      	bne.n	800cb40 <CDC_Receive_FS+0xac>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_3, sizeof(adc_samples_3));
 800cb2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800cb32:	4817      	ldr	r0, [pc, #92]	@ (800cb90 <CDC_Receive_FS+0xfc>)
 800cb34:	f000 f830 	bl	800cb98 <CDC_Transmit_FS>
		  adc_3_full = 0;
 800cb38:	4b16      	ldr	r3, [pc, #88]	@ (800cb94 <CDC_Receive_FS+0x100>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	701a      	strb	r2, [r3, #0]
 800cb3e:	e013      	b.n	800cb68 <CDC_Receive_FS+0xd4>
	  }
	  else{
		  data = get_register(&device_registers,addr);
 800cb40:	6939      	ldr	r1, [r7, #16]
 800cb42:	480e      	ldr	r0, [pc, #56]	@ (800cb7c <CDC_Receive_FS+0xe8>)
 800cb44:	f7f5 fa05 	bl	8001f52 <get_register>
 800cb48:	60f8      	str	r0, [r7, #12]
		  msg_tx = ((addr << 24)&0x7F000000) | (data&0x00FFFFFF);
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	061b      	lsls	r3, r3, #24
 800cb4e:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	60bb      	str	r3, [r7, #8]
		  CDC_Transmit_FS((uint8_t*)&msg_tx, sizeof(msg_tx));
 800cb5c:	f107 0308 	add.w	r3, r7, #8
 800cb60:	2104      	movs	r1, #4
 800cb62:	4618      	mov	r0, r3
 800cb64:	f000 f818 	bl	800cb98 <CDC_Transmit_FS>
	  }
  }

  return (USBD_OK);
 800cb68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3718      	adds	r7, #24
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	2000d004 	.word	0x2000d004
 800cb78:	deadbeef 	.word	0xdeadbeef
 800cb7c:	2000cadc 	.word	0x2000cadc
 800cb80:	20000adc 	.word	0x20000adc
 800cb84:	20000ad7 	.word	0x20000ad7
 800cb88:	20004adc 	.word	0x20004adc
 800cb8c:	20000ad8 	.word	0x20000ad8
 800cb90:	20008adc 	.word	0x20008adc
 800cb94:	20000ad9 	.word	0x20000ad9

0800cb98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	460b      	mov	r3, r1
 800cba2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cba8:	4b0d      	ldr	r3, [pc, #52]	@ (800cbe0 <CDC_Transmit_FS+0x48>)
 800cbaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cbae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e00b      	b.n	800cbd6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cbbe:	887b      	ldrh	r3, [r7, #2]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	6879      	ldr	r1, [r7, #4]
 800cbc4:	4806      	ldr	r0, [pc, #24]	@ (800cbe0 <CDC_Transmit_FS+0x48>)
 800cbc6:	f000 feaa 	bl	800d91e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cbca:	4805      	ldr	r0, [pc, #20]	@ (800cbe0 <CDC_Transmit_FS+0x48>)
 800cbcc:	f000 fed4 	bl	800d978 <USBD_CDC_TransmitPacket>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	2000d004 	.word	0x2000d004

0800cbe4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b087      	sub	sp, #28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cbf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	371c      	adds	r7, #28
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
	...

0800cc08 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	4603      	mov	r3, r0
 800cc10:	6039      	str	r1, [r7, #0]
 800cc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2212      	movs	r2, #18
 800cc18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cc1a:	4b03      	ldr	r3, [pc, #12]	@ (800cc28 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr
 800cc28:	200000b4 	.word	0x200000b4

0800cc2c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	6039      	str	r1, [r7, #0]
 800cc36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2204      	movs	r2, #4
 800cc3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc3e:	4b03      	ldr	r3, [pc, #12]	@ (800cc4c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	200000c8 	.word	0x200000c8

0800cc50 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4603      	mov	r3, r0
 800cc58:	6039      	str	r1, [r7, #0]
 800cc5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc5c:	79fb      	ldrb	r3, [r7, #7]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d105      	bne.n	800cc6e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	4907      	ldr	r1, [pc, #28]	@ (800cc84 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cc66:	4808      	ldr	r0, [pc, #32]	@ (800cc88 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cc68:	f001 ff40 	bl	800eaec <USBD_GetString>
 800cc6c:	e004      	b.n	800cc78 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cc6e:	683a      	ldr	r2, [r7, #0]
 800cc70:	4904      	ldr	r1, [pc, #16]	@ (800cc84 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cc72:	4805      	ldr	r0, [pc, #20]	@ (800cc88 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cc74:	f001 ff3a 	bl	800eaec <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc78:	4b02      	ldr	r3, [pc, #8]	@ (800cc84 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	2000e2d4 	.word	0x2000e2d4
 800cc88:	0800fc78 	.word	0x0800fc78

0800cc8c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	4603      	mov	r3, r0
 800cc94:	6039      	str	r1, [r7, #0]
 800cc96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc98:	683a      	ldr	r2, [r7, #0]
 800cc9a:	4904      	ldr	r1, [pc, #16]	@ (800ccac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800cc9c:	4804      	ldr	r0, [pc, #16]	@ (800ccb0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800cc9e:	f001 ff25 	bl	800eaec <USBD_GetString>
  return USBD_StrDesc;
 800cca2:	4b02      	ldr	r3, [pc, #8]	@ (800ccac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	2000e2d4 	.word	0x2000e2d4
 800ccb0:	0800fc90 	.word	0x0800fc90

0800ccb4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	6039      	str	r1, [r7, #0]
 800ccbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	221a      	movs	r2, #26
 800ccc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ccc6:	f000 f843 	bl	800cd50 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ccca:	4b02      	ldr	r3, [pc, #8]	@ (800ccd4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	200000cc 	.word	0x200000cc

0800ccd8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	4603      	mov	r3, r0
 800cce0:	6039      	str	r1, [r7, #0]
 800cce2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cce4:	79fb      	ldrb	r3, [r7, #7]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d105      	bne.n	800ccf6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	4907      	ldr	r1, [pc, #28]	@ (800cd0c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ccee:	4808      	ldr	r0, [pc, #32]	@ (800cd10 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ccf0:	f001 fefc 	bl	800eaec <USBD_GetString>
 800ccf4:	e004      	b.n	800cd00 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	4904      	ldr	r1, [pc, #16]	@ (800cd0c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ccfa:	4805      	ldr	r0, [pc, #20]	@ (800cd10 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ccfc:	f001 fef6 	bl	800eaec <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd00:	4b02      	ldr	r3, [pc, #8]	@ (800cd0c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	2000e2d4 	.word	0x2000e2d4
 800cd10:	0800fca4 	.word	0x0800fca4

0800cd14 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	6039      	str	r1, [r7, #0]
 800cd1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd20:	79fb      	ldrb	r3, [r7, #7]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d105      	bne.n	800cd32 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	4907      	ldr	r1, [pc, #28]	@ (800cd48 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cd2a:	4808      	ldr	r0, [pc, #32]	@ (800cd4c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cd2c:	f001 fede 	bl	800eaec <USBD_GetString>
 800cd30:	e004      	b.n	800cd3c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	4904      	ldr	r1, [pc, #16]	@ (800cd48 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cd36:	4805      	ldr	r0, [pc, #20]	@ (800cd4c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cd38:	f001 fed8 	bl	800eaec <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd3c:	4b02      	ldr	r3, [pc, #8]	@ (800cd48 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	2000e2d4 	.word	0x2000e2d4
 800cd4c:	0800fcb0 	.word	0x0800fcb0

0800cd50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd56:	4b0f      	ldr	r3, [pc, #60]	@ (800cd94 <Get_SerialNum+0x44>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd5c:	4b0e      	ldr	r3, [pc, #56]	@ (800cd98 <Get_SerialNum+0x48>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd62:	4b0e      	ldr	r3, [pc, #56]	@ (800cd9c <Get_SerialNum+0x4c>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d009      	beq.n	800cd8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd76:	2208      	movs	r2, #8
 800cd78:	4909      	ldr	r1, [pc, #36]	@ (800cda0 <Get_SerialNum+0x50>)
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f000 f814 	bl	800cda8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd80:	2204      	movs	r2, #4
 800cd82:	4908      	ldr	r1, [pc, #32]	@ (800cda4 <Get_SerialNum+0x54>)
 800cd84:	68b8      	ldr	r0, [r7, #8]
 800cd86:	f000 f80f 	bl	800cda8 <IntToUnicode>
  }
}
 800cd8a:	bf00      	nop
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	0bfa0700 	.word	0x0bfa0700
 800cd98:	0bfa0704 	.word	0x0bfa0704
 800cd9c:	0bfa0708 	.word	0x0bfa0708
 800cda0:	200000ce 	.word	0x200000ce
 800cda4:	200000de 	.word	0x200000de

0800cda8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b087      	sub	sp, #28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cdba:	2300      	movs	r3, #0
 800cdbc:	75fb      	strb	r3, [r7, #23]
 800cdbe:	e027      	b.n	800ce10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	0f1b      	lsrs	r3, r3, #28
 800cdc4:	2b09      	cmp	r3, #9
 800cdc6:	d80b      	bhi.n	800cde0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	0f1b      	lsrs	r3, r3, #28
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	005b      	lsls	r3, r3, #1
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	440b      	add	r3, r1
 800cdd8:	3230      	adds	r2, #48	@ 0x30
 800cdda:	b2d2      	uxtb	r2, r2
 800cddc:	701a      	strb	r2, [r3, #0]
 800cdde:	e00a      	b.n	800cdf6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	0f1b      	lsrs	r3, r3, #28
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	4619      	mov	r1, r3
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	440b      	add	r3, r1
 800cdf0:	3237      	adds	r2, #55	@ 0x37
 800cdf2:	b2d2      	uxtb	r2, r2
 800cdf4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	011b      	lsls	r3, r3, #4
 800cdfa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdfc:	7dfb      	ldrb	r3, [r7, #23]
 800cdfe:	005b      	lsls	r3, r3, #1
 800ce00:	3301      	adds	r3, #1
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	4413      	add	r3, r2
 800ce06:	2200      	movs	r2, #0
 800ce08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	75fb      	strb	r3, [r7, #23]
 800ce10:	7dfa      	ldrb	r2, [r7, #23]
 800ce12:	79fb      	ldrb	r3, [r7, #7]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d3d3      	bcc.n	800cdc0 <IntToUnicode+0x18>
  }
}
 800ce18:	bf00      	nop
 800ce1a:	bf00      	nop
 800ce1c:	371c      	adds	r7, #28
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr

0800ce26 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b082      	sub	sp, #8
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	f000 fe97 	bl	800db70 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ce42:	bf00      	nop
 800ce44:	3708      	adds	r7, #8
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	460b      	mov	r3, r1
 800ce54:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ce5c:	78fa      	ldrb	r2, [r7, #3]
 800ce5e:	6879      	ldr	r1, [r7, #4]
 800ce60:	4613      	mov	r3, r2
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	4413      	add	r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	440b      	add	r3, r1
 800ce6a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	78fb      	ldrb	r3, [r7, #3]
 800ce72:	4619      	mov	r1, r3
 800ce74:	f000 fed1 	bl	800dc1a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ce78:	bf00      	nop
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ce92:	78fa      	ldrb	r2, [r7, #3]
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	4613      	mov	r3, r2
 800ce98:	00db      	lsls	r3, r3, #3
 800ce9a:	4413      	add	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	440b      	add	r3, r1
 800cea0:	3320      	adds	r3, #32
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	78fb      	ldrb	r3, [r7, #3]
 800cea6:	4619      	mov	r1, r3
 800cea8:	f000 ff1a 	bl	800dce0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ceac:	bf00      	nop
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cec2:	4618      	mov	r0, r3
 800cec4:	f001 f81e 	bl	800df04 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cec8:	bf00      	nop
 800ceca:	3708      	adds	r7, #8
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ced8:	2301      	movs	r3, #1
 800ceda:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	79db      	ldrb	r3, [r3, #7]
 800cee0:	2b02      	cmp	r3, #2
 800cee2:	d001      	beq.n	800cee8 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cee4:	f7f4 fac8 	bl	8001478 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ceee:	7bfa      	ldrb	r2, [r7, #15]
 800cef0:	4611      	mov	r1, r2
 800cef2:	4618      	mov	r0, r3
 800cef4:	f000 ffcb 	bl	800de8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cefe:	4618      	mov	r0, r3
 800cf00:	f000 ff84 	bl	800de0c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cf04:	bf00      	nop
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f000 ffc7 	bl	800deae <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	7adb      	ldrb	r3, [r3, #11]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d005      	beq.n	800cf34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf28:	4b04      	ldr	r3, [pc, #16]	@ (800cf3c <HAL_PCD_SuspendCallback+0x30>)
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	4a03      	ldr	r2, [pc, #12]	@ (800cf3c <HAL_PCD_SuspendCallback+0x30>)
 800cf2e:	f043 0306 	orr.w	r3, r3, #6
 800cf32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cf34:	bf00      	nop
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	e000ed00 	.word	0xe000ed00

0800cf40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	7adb      	ldrb	r3, [r3, #11]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d007      	beq.n	800cf60 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf50:	4b08      	ldr	r3, [pc, #32]	@ (800cf74 <HAL_PCD_ResumeCallback+0x34>)
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	4a07      	ldr	r2, [pc, #28]	@ (800cf74 <HAL_PCD_ResumeCallback+0x34>)
 800cf56:	f023 0306 	bic.w	r3, r3, #6
 800cf5a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cf5c:	f000 fa2a 	bl	800d3b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 ffb6 	bl	800ded8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	e000ed00 	.word	0xe000ed00

0800cf78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	460b      	mov	r3, r1
 800cf82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf8a:	78fa      	ldrb	r2, [r7, #3]
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f000 ffdf 	bl	800df52 <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 800cf94:	bf00      	nop
 800cf96:	3708      	adds	r7, #8
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfae:	78fa      	ldrb	r2, [r7, #3]
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f000 ffc0 	bl	800df38 <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 800cfb8:	bf00      	nop
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f000 ffcc 	bl	800df6c <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 800cfd4:	bf00      	nop
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 ffc9 	bl	800df82 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 800cff0:	bf00      	nop
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d000:	4a24      	ldr	r2, [pc, #144]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a22      	ldr	r2, [pc, #136]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d00c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d010:	f7f9 fe50 	bl	8006cb4 <HAL_PWREx_EnableVddUSB>
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    Error_Handler( );
  }
#else
  hpcd_USB_FS.Instance = USB_OTG_FS;
 800d014:	4b1f      	ldr	r3, [pc, #124]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d016:	4a20      	ldr	r2, [pc, #128]	@ (800d098 <USBD_LL_Init+0xa0>)
 800d018:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 6;
 800d01a:	4b1e      	ldr	r3, [pc, #120]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d01c:	2206      	movs	r2, #6
 800d01e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d020:	4b1c      	ldr	r3, [pc, #112]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d022:	2202      	movs	r2, #2
 800d024:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d026:	4b1b      	ldr	r3, [pc, #108]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d028:	2200      	movs	r2, #0
 800d02a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d02c:	4b19      	ldr	r3, [pc, #100]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d02e:	2200      	movs	r2, #0
 800d030:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d032:	4b18      	ldr	r3, [pc, #96]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d034:	2200      	movs	r2, #0
 800d036:	731a      	strb	r2, [r3, #12]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d038:	4b16      	ldr	r3, [pc, #88]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d03a:	2200      	movs	r2, #0
 800d03c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_FS.Init.use_dedicated_ep1 = DISABLE;
 800d03e:	4b15      	ldr	r3, [pc, #84]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d040:	2200      	movs	r2, #0
 800d042:	73da      	strb	r2, [r3, #15]
  hpcd_USB_FS.Init.vbus_sensing_enable = DISABLE;
 800d044:	4b13      	ldr	r3, [pc, #76]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d046:	2200      	movs	r2, #0
 800d048:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d04a:	4812      	ldr	r0, [pc, #72]	@ (800d094 <USBD_LL_Init+0x9c>)
 800d04c:	f7f8 fb0c 	bl	8005668 <HAL_PCD_Init>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d001      	beq.n	800d05a <USBD_LL_Init+0x62>
  {
    Error_Handler();
 800d056:	f7f4 fa0f 	bl	8001478 <Error_Handler>
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , 0, 0xC0);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , 0, 0x110);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , 0, 0x100);
#else
  HAL_PCDEx_SetRxFiFo((PCD_HandleTypeDef*)pdev->pData, 0x80);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d060:	2180      	movs	r1, #128	@ 0x80
 800d062:	4618      	mov	r0, r3
 800d064:	f7f9 fd65 	bl	8006b32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 0, 0x40);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d06e:	2240      	movs	r2, #64	@ 0x40
 800d070:	2100      	movs	r1, #0
 800d072:	4618      	mov	r0, r3
 800d074:	f7f9 fd16 	bl	8006aa4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 1, 0x80);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d07e:	2280      	movs	r2, #128	@ 0x80
 800d080:	2101      	movs	r1, #1
 800d082:	4618      	mov	r0, r3
 800d084:	f7f9 fd0e 	bl	8006aa4 <HAL_PCDEx_SetTxFiFo>
#endif
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	2000e4d4 	.word	0x2000e4d4
 800d098:	42040000 	.word	0x42040000

0800d09c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7f8 fbf0 	bl	8005898 <HAL_PCD_Start>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0bc:	7bfb      	ldrb	r3, [r7, #15]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 f97e 	bl	800d3c0 <USBD_Get_USB_Status>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b084      	sub	sp, #16
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	4608      	mov	r0, r1
 800d0dc:	4611      	mov	r1, r2
 800d0de:	461a      	mov	r2, r3
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	70fb      	strb	r3, [r7, #3]
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	70bb      	strb	r3, [r7, #2]
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0fa:	78bb      	ldrb	r3, [r7, #2]
 800d0fc:	883a      	ldrh	r2, [r7, #0]
 800d0fe:	78f9      	ldrb	r1, [r7, #3]
 800d100:	f7f9 f8eb 	bl	80062da <HAL_PCD_EP_Open>
 800d104:	4603      	mov	r3, r0
 800d106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d108:	7bfb      	ldrb	r3, [r7, #15]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 f958 	bl	800d3c0 <USBD_Get_USB_Status>
 800d110:	4603      	mov	r3, r0
 800d112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d114:	7bbb      	ldrb	r3, [r7, #14]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b084      	sub	sp, #16
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	460b      	mov	r3, r1
 800d128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d12e:	2300      	movs	r3, #0
 800d130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d138:	78fa      	ldrb	r2, [r7, #3]
 800d13a:	4611      	mov	r1, r2
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7f9 f936 	bl	80063ae <HAL_PCD_EP_Close>
 800d142:	4603      	mov	r3, r0
 800d144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d146:	7bfb      	ldrb	r3, [r7, #15]
 800d148:	4618      	mov	r0, r3
 800d14a:	f000 f939 	bl	800d3c0 <USBD_Get_USB_Status>
 800d14e:	4603      	mov	r3, r0
 800d150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d152:	7bbb      	ldrb	r3, [r7, #14]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	460b      	mov	r3, r1
 800d166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d168:	2300      	movs	r3, #0
 800d16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d176:	78fa      	ldrb	r2, [r7, #3]
 800d178:	4611      	mov	r1, r2
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7f9 f9ee 	bl	800655c <HAL_PCD_EP_SetStall>
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	4618      	mov	r0, r3
 800d188:	f000 f91a 	bl	800d3c0 <USBD_Get_USB_Status>
 800d18c:	4603      	mov	r3, r0
 800d18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d190:	7bbb      	ldrb	r3, [r7, #14]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b084      	sub	sp, #16
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d1b4:	78fa      	ldrb	r2, [r7, #3]
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7f9 fa32 	bl	8006622 <HAL_PCD_EP_ClrStall>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 f8fb 	bl	800d3c0 <USBD_Get_USB_Status>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d1ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d1ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	da0b      	bge.n	800d20c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d1f4:	78fb      	ldrb	r3, [r7, #3]
 800d1f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1fa:	68f9      	ldr	r1, [r7, #12]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	00db      	lsls	r3, r3, #3
 800d200:	4413      	add	r3, r2
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	440b      	add	r3, r1
 800d206:	3316      	adds	r3, #22
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	e00b      	b.n	800d224 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d20c:	78fb      	ldrb	r3, [r7, #3]
 800d20e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d212:	68f9      	ldr	r1, [r7, #12]
 800d214:	4613      	mov	r3, r2
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	4413      	add	r3, r2
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	440b      	add	r3, r1
 800d21e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d222:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d224:	4618      	mov	r0, r3
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d24a:	78fa      	ldrb	r2, [r7, #3]
 800d24c:	4611      	mov	r1, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	f7f9 f81f 	bl	8006292 <HAL_PCD_SetAddress>
 800d254:	4603      	mov	r3, r0
 800d256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d258:	7bfb      	ldrb	r3, [r7, #15]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 f8b0 	bl	800d3c0 <USBD_Get_USB_Status>
 800d260:	4603      	mov	r3, r0
 800d262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d264:	7bbb      	ldrb	r3, [r7, #14]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b086      	sub	sp, #24
 800d272:	af00      	add	r7, sp, #0
 800d274:	60f8      	str	r0, [r7, #12]
 800d276:	607a      	str	r2, [r7, #4]
 800d278:	603b      	str	r3, [r7, #0]
 800d27a:	460b      	mov	r3, r1
 800d27c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d282:	2300      	movs	r3, #0
 800d284:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d28c:	7af9      	ldrb	r1, [r7, #11]
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	f7f9 f929 	bl	80064e8 <HAL_PCD_EP_Transmit>
 800d296:	4603      	mov	r3, r0
 800d298:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 f88f 	bl	800d3c0 <USBD_Get_USB_Status>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	607a      	str	r2, [r7, #4]
 800d2ba:	603b      	str	r3, [r7, #0]
 800d2bc:	460b      	mov	r3, r1
 800d2be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d2ce:	7af9      	ldrb	r1, [r7, #11]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	f7f9 f8b5 	bl	8006442 <HAL_PCD_EP_Receive>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2dc:	7dfb      	ldrb	r3, [r7, #23]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 f86e 	bl	800d3c0 <USBD_Get_USB_Status>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3718      	adds	r7, #24
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d304:	78fa      	ldrb	r2, [r7, #3]
 800d306:	4611      	mov	r1, r2
 800d308:	4618      	mov	r0, r3
 800d30a:	f7f9 f8d5 	bl	80064b8 <HAL_PCD_EP_GetRxCount>
 800d30e:	4603      	mov	r3, r0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d324:	78fb      	ldrb	r3, [r7, #3]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d002      	beq.n	800d330 <HAL_PCDEx_LPM_Callback+0x18>
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d013      	beq.n	800d356 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d32e:	e023      	b.n	800d378 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7adb      	ldrb	r3, [r3, #11]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d007      	beq.n	800d348 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d338:	f000 f83c 	bl	800d3b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d33c:	4b10      	ldr	r3, [pc, #64]	@ (800d380 <HAL_PCDEx_LPM_Callback+0x68>)
 800d33e:	691b      	ldr	r3, [r3, #16]
 800d340:	4a0f      	ldr	r2, [pc, #60]	@ (800d380 <HAL_PCDEx_LPM_Callback+0x68>)
 800d342:	f023 0306 	bic.w	r3, r3, #6
 800d346:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d34e:	4618      	mov	r0, r3
 800d350:	f000 fdc2 	bl	800ded8 <USBD_LL_Resume>
    break;
 800d354:	e010      	b.n	800d378 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d35c:	4618      	mov	r0, r3
 800d35e:	f000 fda6 	bl	800deae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	7adb      	ldrb	r3, [r3, #11]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d005      	beq.n	800d376 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d36a:	4b05      	ldr	r3, [pc, #20]	@ (800d380 <HAL_PCDEx_LPM_Callback+0x68>)
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	4a04      	ldr	r2, [pc, #16]	@ (800d380 <HAL_PCDEx_LPM_Callback+0x68>)
 800d370:	f043 0306 	orr.w	r3, r3, #6
 800d374:	6113      	str	r3, [r2, #16]
    break;
 800d376:	bf00      	nop
}
 800d378:	bf00      	nop
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	e000ed00 	.word	0xe000ed00

0800d384 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d38c:	4b03      	ldr	r3, [pc, #12]	@ (800d39c <USBD_static_malloc+0x18>)
}
 800d38e:	4618      	mov	r0, r3
 800d390:	370c      	adds	r7, #12
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	2000e9b8 	.word	0x2000e9b8

0800d3a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]

}
 800d3a8:	bf00      	nop
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d3b8:	f7f3 fc64 	bl	8000c84 <SystemClock_Config>
}
 800d3bc:	bf00      	nop
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d3ce:	79fb      	ldrb	r3, [r7, #7]
 800d3d0:	2b03      	cmp	r3, #3
 800d3d2:	d817      	bhi.n	800d404 <USBD_Get_USB_Status+0x44>
 800d3d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d3dc <USBD_Get_USB_Status+0x1c>)
 800d3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3da:	bf00      	nop
 800d3dc:	0800d3ed 	.word	0x0800d3ed
 800d3e0:	0800d3f3 	.word	0x0800d3f3
 800d3e4:	0800d3f9 	.word	0x0800d3f9
 800d3e8:	0800d3ff 	.word	0x0800d3ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f0:	e00b      	b.n	800d40a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3f2:	2303      	movs	r3, #3
 800d3f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f6:	e008      	b.n	800d40a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d3fc:	e005      	b.n	800d40a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3fe:	2303      	movs	r3, #3
 800d400:	73fb      	strb	r3, [r7, #15]
    break;
 800d402:	e002      	b.n	800d40a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d404:	2303      	movs	r3, #3
 800d406:	73fb      	strb	r3, [r7, #15]
    break;
 800d408:	bf00      	nop
  }
  return usb_status;
 800d40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	460b      	mov	r3, r1
 800d422:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d424:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d428:	f7ff ffac 	bl	800d384 <USBD_static_malloc>
 800d42c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d105      	bne.n	800d440 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800d43c:	2302      	movs	r3, #2
 800d43e:	e066      	b.n	800d50e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	68fa      	ldr	r2, [r7, #12]
 800d444:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	7c1b      	ldrb	r3, [r3, #16]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d119      	bne.n	800d484 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d450:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d454:	2202      	movs	r2, #2
 800d456:	2181      	movs	r1, #129	@ 0x81
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f7ff fe3a 	bl	800d0d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d464:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d468:	2202      	movs	r2, #2
 800d46a:	2101      	movs	r1, #1
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7ff fe30 	bl	800d0d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2210      	movs	r2, #16
 800d47e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800d482:	e016      	b.n	800d4b2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d484:	2340      	movs	r3, #64	@ 0x40
 800d486:	2202      	movs	r2, #2
 800d488:	2181      	movs	r1, #129	@ 0x81
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7ff fe21 	bl	800d0d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2201      	movs	r2, #1
 800d494:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d496:	2340      	movs	r3, #64	@ 0x40
 800d498:	2202      	movs	r2, #2
 800d49a:	2101      	movs	r1, #1
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f7ff fe18 	bl	800d0d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2210      	movs	r2, #16
 800d4ae:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d4b2:	2308      	movs	r3, #8
 800d4b4:	2203      	movs	r2, #3
 800d4b6:	2182      	movs	r1, #130	@ 0x82
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f7ff fe0a 	bl	800d0d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	7c1b      	ldrb	r3, [r3, #16]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d109      	bne.n	800d4fc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d4ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4f2:	2101      	movs	r1, #1
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff fedb 	bl	800d2b0 <USBD_LL_PrepareReceive>
 800d4fa:	e007      	b.n	800d50c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d502:	2340      	movs	r3, #64	@ 0x40
 800d504:	2101      	movs	r1, #1
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f7ff fed2 	bl	800d2b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b082      	sub	sp, #8
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
 800d51e:	460b      	mov	r3, r1
 800d520:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d522:	2181      	movs	r1, #129	@ 0x81
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7ff fdfa 	bl	800d11e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d530:	2101      	movs	r1, #1
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7ff fdf3 	bl	800d11e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d540:	2182      	movs	r1, #130	@ 0x82
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7ff fdeb 	bl	800d11e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00e      	beq.n	800d580 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d572:	4618      	mov	r0, r3
 800d574:	f7ff ff14 	bl	800d3a0 <USBD_static_free>
    pdev->pClassData = NULL;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3708      	adds	r7, #8
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
	...

0800d58c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b086      	sub	sp, #24
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d59c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d03a      	beq.n	800d62c <USBD_CDC_Setup+0xa0>
 800d5b6:	2b20      	cmp	r3, #32
 800d5b8:	f040 8097 	bne.w	800d6ea <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	88db      	ldrh	r3, [r3, #6]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d029      	beq.n	800d618 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	b25b      	sxtb	r3, r3
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	da11      	bge.n	800d5f2 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d5da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d5dc:	683a      	ldr	r2, [r7, #0]
 800d5de:	88d2      	ldrh	r2, [r2, #6]
 800d5e0:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d5e2:	6939      	ldr	r1, [r7, #16]
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	88db      	ldrh	r3, [r3, #6]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f001 fade 	bl	800ebac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d5f0:	e082      	b.n	800d6f8 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	785a      	ldrb	r2, [r3, #1]
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	88db      	ldrh	r3, [r3, #6]
 800d600:	b2da      	uxtb	r2, r3
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d608:	6939      	ldr	r1, [r7, #16]
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	88db      	ldrh	r3, [r3, #6]
 800d60e:	461a      	mov	r2, r3
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f001 faf7 	bl	800ec04 <USBD_CtlPrepareRx>
      break;
 800d616:	e06f      	b.n	800d6f8 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	683a      	ldr	r2, [r7, #0]
 800d622:	7850      	ldrb	r0, [r2, #1]
 800d624:	2200      	movs	r2, #0
 800d626:	6839      	ldr	r1, [r7, #0]
 800d628:	4798      	blx	r3
      break;
 800d62a:	e065      	b.n	800d6f8 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	785b      	ldrb	r3, [r3, #1]
 800d630:	2b0b      	cmp	r3, #11
 800d632:	d84f      	bhi.n	800d6d4 <USBD_CDC_Setup+0x148>
 800d634:	a201      	add	r2, pc, #4	@ (adr r2, 800d63c <USBD_CDC_Setup+0xb0>)
 800d636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d63a:	bf00      	nop
 800d63c:	0800d66d 	.word	0x0800d66d
 800d640:	0800d6e3 	.word	0x0800d6e3
 800d644:	0800d6d5 	.word	0x0800d6d5
 800d648:	0800d6d5 	.word	0x0800d6d5
 800d64c:	0800d6d5 	.word	0x0800d6d5
 800d650:	0800d6d5 	.word	0x0800d6d5
 800d654:	0800d6d5 	.word	0x0800d6d5
 800d658:	0800d6d5 	.word	0x0800d6d5
 800d65c:	0800d6d5 	.word	0x0800d6d5
 800d660:	0800d6d5 	.word	0x0800d6d5
 800d664:	0800d695 	.word	0x0800d695
 800d668:	0800d6bd 	.word	0x0800d6bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d672:	2b03      	cmp	r3, #3
 800d674:	d107      	bne.n	800d686 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d676:	f107 030c 	add.w	r3, r7, #12
 800d67a:	2202      	movs	r2, #2
 800d67c:	4619      	mov	r1, r3
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f001 fa94 	bl	800ebac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d684:	e030      	b.n	800d6e8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800d686:	6839      	ldr	r1, [r7, #0]
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f001 fa1e 	bl	800eaca <USBD_CtlError>
            ret = USBD_FAIL;
 800d68e:	2303      	movs	r3, #3
 800d690:	75fb      	strb	r3, [r7, #23]
          break;
 800d692:	e029      	b.n	800d6e8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d69a:	2b03      	cmp	r3, #3
 800d69c:	d107      	bne.n	800d6ae <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d69e:	f107 030f 	add.w	r3, r7, #15
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f001 fa80 	bl	800ebac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d6ac:	e01c      	b.n	800d6e8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800d6ae:	6839      	ldr	r1, [r7, #0]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f001 fa0a 	bl	800eaca <USBD_CtlError>
            ret = USBD_FAIL;
 800d6b6:	2303      	movs	r3, #3
 800d6b8:	75fb      	strb	r3, [r7, #23]
          break;
 800d6ba:	e015      	b.n	800d6e8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6c2:	2b03      	cmp	r3, #3
 800d6c4:	d00f      	beq.n	800d6e6 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800d6c6:	6839      	ldr	r1, [r7, #0]
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f001 f9fe 	bl	800eaca <USBD_CtlError>
            ret = USBD_FAIL;
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d6d2:	e008      	b.n	800d6e6 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d6d4:	6839      	ldr	r1, [r7, #0]
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f001 f9f7 	bl	800eaca <USBD_CtlError>
          ret = USBD_FAIL;
 800d6dc:	2303      	movs	r3, #3
 800d6de:	75fb      	strb	r3, [r7, #23]
          break;
 800d6e0:	e002      	b.n	800d6e8 <USBD_CDC_Setup+0x15c>
          break;
 800d6e2:	bf00      	nop
 800d6e4:	e008      	b.n	800d6f8 <USBD_CDC_Setup+0x16c>
          break;
 800d6e6:	bf00      	nop
      }
      break;
 800d6e8:	e006      	b.n	800d6f8 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800d6ea:	6839      	ldr	r1, [r7, #0]
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f001 f9ec 	bl	800eaca <USBD_CtlError>
      ret = USBD_FAIL;
 800d6f2:	2303      	movs	r3, #3
 800d6f4:	75fb      	strb	r3, [r7, #23]
      break;
 800d6f6:	bf00      	nop
  }

  return (uint8_t)ret;
 800d6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3718      	adds	r7, #24
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop

0800d704 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	460b      	mov	r3, r1
 800d70e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d716:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d101      	bne.n	800d726 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d722:	2303      	movs	r3, #3
 800d724:	e04f      	b.n	800d7c6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d72c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d72e:	78fa      	ldrb	r2, [r7, #3]
 800d730:	6879      	ldr	r1, [r7, #4]
 800d732:	4613      	mov	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	4413      	add	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	440b      	add	r3, r1
 800d73c:	3318      	adds	r3, #24
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d029      	beq.n	800d798 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d744:	78fa      	ldrb	r2, [r7, #3]
 800d746:	6879      	ldr	r1, [r7, #4]
 800d748:	4613      	mov	r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	440b      	add	r3, r1
 800d752:	3318      	adds	r3, #24
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	78f9      	ldrb	r1, [r7, #3]
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	460b      	mov	r3, r1
 800d75c:	00db      	lsls	r3, r3, #3
 800d75e:	440b      	add	r3, r1
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	4403      	add	r3, r0
 800d764:	331c      	adds	r3, #28
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	fbb2 f1f3 	udiv	r1, r2, r3
 800d76c:	fb01 f303 	mul.w	r3, r1, r3
 800d770:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d772:	2b00      	cmp	r3, #0
 800d774:	d110      	bne.n	800d798 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d776:	78fa      	ldrb	r2, [r7, #3]
 800d778:	6879      	ldr	r1, [r7, #4]
 800d77a:	4613      	mov	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4413      	add	r3, r2
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	440b      	add	r3, r1
 800d784:	3318      	adds	r3, #24
 800d786:	2200      	movs	r2, #0
 800d788:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d78a:	78f9      	ldrb	r1, [r7, #3]
 800d78c:	2300      	movs	r3, #0
 800d78e:	2200      	movs	r2, #0
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f7ff fd6c 	bl	800d26e <USBD_LL_Transmit>
 800d796:	e015      	b.n	800d7c4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00b      	beq.n	800d7c4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d7ba:	68ba      	ldr	r2, [r7, #8]
 800d7bc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d7c0:	78fa      	ldrb	r2, [r7, #3]
 800d7c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b084      	sub	sp, #16
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d7e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d101      	bne.n	800d7f0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d7ec:	2303      	movs	r3, #3
 800d7ee:	e015      	b.n	800d81c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f7ff fd7c 	bl	800d2f2 <USBD_LL_GetRxDataSize>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d816:	4611      	mov	r1, r2
 800d818:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d832:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d014      	beq.n	800d868 <USBD_CDC_EP0_RxReady+0x44>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d844:	2bff      	cmp	r3, #255	@ 0xff
 800d846:	d00f      	beq.n	800d868 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800d856:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d85e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	22ff      	movs	r2, #255	@ 0xff
 800d864:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d868:	2300      	movs	r3, #0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
	...

0800d874 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2243      	movs	r2, #67	@ 0x43
 800d880:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d882:	4b03      	ldr	r3, [pc, #12]	@ (800d890 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d884:	4618      	mov	r0, r3
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr
 800d890:	20000170 	.word	0x20000170

0800d894 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2243      	movs	r2, #67	@ 0x43
 800d8a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d8a2:	4b03      	ldr	r3, [pc, #12]	@ (800d8b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr
 800d8b0:	2000012c 	.word	0x2000012c

0800d8b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2243      	movs	r2, #67	@ 0x43
 800d8c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d8c2:	4b03      	ldr	r3, [pc, #12]	@ (800d8d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr
 800d8d0:	200001b4 	.word	0x200001b4

0800d8d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	220a      	movs	r2, #10
 800d8e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d8e2:	4b03      	ldr	r3, [pc, #12]	@ (800d8f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr
 800d8f0:	200000e8 	.word	0x200000e8

0800d8f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d101      	bne.n	800d908 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d904:	2303      	movs	r3, #3
 800d906:	e004      	b.n	800d912 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	683a      	ldr	r2, [r7, #0]
 800d90c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800d910:	2300      	movs	r3, #0
}
 800d912:	4618      	mov	r0, r3
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d91e:	b480      	push	{r7}
 800d920:	b087      	sub	sp, #28
 800d922:	af00      	add	r7, sp, #0
 800d924:	60f8      	str	r0, [r7, #12]
 800d926:	60b9      	str	r1, [r7, #8]
 800d928:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d930:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	371c      	adds	r7, #28
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d960:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d96a:	2300      	movs	r3, #0
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3714      	adds	r7, #20
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d986:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d988:	2301      	movs	r3, #1
 800d98a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d992:	2b00      	cmp	r3, #0
 800d994:	d101      	bne.n	800d99a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d996:	2303      	movs	r3, #3
 800d998:	e01a      	b.n	800d9d0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d114      	bne.n	800d9ce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d9c2:	2181      	movs	r1, #129	@ 0x81
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f7ff fc52 	bl	800d26e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d9e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d101      	bne.n	800d9f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	e016      	b.n	800da24 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	7c1b      	ldrb	r3, [r3, #16]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d109      	bne.n	800da12 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800da04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da08:	2101      	movs	r1, #1
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7ff fc50 	bl	800d2b0 <USBD_LL_PrepareReceive>
 800da10:	e007      	b.n	800da22 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800da18:	2340      	movs	r3, #64	@ 0x40
 800da1a:	2101      	movs	r1, #1
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f7ff fc47 	bl	800d2b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	4613      	mov	r3, r2
 800da38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800da40:	2303      	movs	r3, #3
 800da42:	e01f      	b.n	800da84 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2200      	movs	r2, #0
 800da48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2200      	movs	r2, #0
 800da50:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2200      	movs	r2, #0
 800da58:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d003      	beq.n	800da6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2201      	movs	r2, #1
 800da6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	79fa      	ldrb	r2, [r7, #7]
 800da76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f7ff fabd 	bl	800cff8 <USBD_LL_Init>
 800da7e:	4603      	mov	r3, r0
 800da80:	75fb      	strb	r3, [r7, #23]

  return ret;
 800da82:	7dfb      	ldrb	r3, [r7, #23]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3718      	adds	r7, #24
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da96:	2300      	movs	r3, #0
 800da98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d101      	bne.n	800daa4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800daa0:	2303      	movs	r3, #3
 800daa2:	e016      	b.n	800dad2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	683a      	ldr	r2, [r7, #0]
 800daa8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d00b      	beq.n	800dad0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dac0:	f107 020e 	add.w	r2, r7, #14
 800dac4:	4610      	mov	r0, r2
 800dac6:	4798      	blx	r3
 800dac8:	4602      	mov	r2, r0
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b082      	sub	sp, #8
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7ff fada 	bl	800d09c <USBD_LL_Start>
 800dae8:	4603      	mov	r3, r0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800daf2:	b480      	push	{r7}
 800daf4:	b083      	sub	sp, #12
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	370c      	adds	r7, #12
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	460b      	mov	r3, r1
 800db12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800db14:	2303      	movs	r3, #3
 800db16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d009      	beq.n	800db36 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	78fa      	ldrb	r2, [r7, #3]
 800db2c:	4611      	mov	r1, r2
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	4798      	blx	r3
 800db32:	4603      	mov	r3, r0
 800db34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800db36:	7bfb      	ldrb	r3, [r7, #15]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db52:	2b00      	cmp	r3, #0
 800db54:	d007      	beq.n	800db66 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	78fa      	ldrb	r2, [r7, #3]
 800db60:	4611      	mov	r1, r2
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	4798      	blx	r3
  }

  return USBD_OK;
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800db80:	6839      	ldr	r1, [r7, #0]
 800db82:	4618      	mov	r0, r3
 800db84:	f000 ff67 	bl	800ea56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800db96:	461a      	mov	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dba4:	f003 031f 	and.w	r3, r3, #31
 800dba8:	2b02      	cmp	r3, #2
 800dbaa:	d01a      	beq.n	800dbe2 <USBD_LL_SetupStage+0x72>
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d822      	bhi.n	800dbf6 <USBD_LL_SetupStage+0x86>
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <USBD_LL_SetupStage+0x4a>
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d00a      	beq.n	800dbce <USBD_LL_SetupStage+0x5e>
 800dbb8:	e01d      	b.n	800dbf6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 fa18 	bl	800dff8 <USBD_StdDevReq>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	73fb      	strb	r3, [r7, #15]
      break;
 800dbcc:	e020      	b.n	800dc10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 fa7c 	bl	800e0d4 <USBD_StdItfReq>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	73fb      	strb	r3, [r7, #15]
      break;
 800dbe0:	e016      	b.n	800dc10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dbe8:	4619      	mov	r1, r3
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 faba 	bl	800e164 <USBD_StdEPReq>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	73fb      	strb	r3, [r7, #15]
      break;
 800dbf4:	e00c      	b.n	800dc10 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dbfc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	4619      	mov	r1, r3
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7ff faa9 	bl	800d15c <USBD_LL_StallEP>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	73fb      	strb	r3, [r7, #15]
      break;
 800dc0e:	bf00      	nop
  }

  return ret;
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3710      	adds	r7, #16
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b086      	sub	sp, #24
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	60f8      	str	r0, [r7, #12]
 800dc22:	460b      	mov	r3, r1
 800dc24:	607a      	str	r2, [r7, #4]
 800dc26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dc28:	7afb      	ldrb	r3, [r7, #11]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d137      	bne.n	800dc9e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800dc34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dc3c:	2b03      	cmp	r3, #3
 800dc3e:	d14a      	bne.n	800dcd6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	689a      	ldr	r2, [r3, #8]
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d913      	bls.n	800dc74 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	689a      	ldr	r2, [r3, #8]
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	1ad2      	subs	r2, r2, r3
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	68da      	ldr	r2, [r3, #12]
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	4293      	cmp	r3, r2
 800dc64:	bf28      	it	cs
 800dc66:	4613      	movcs	r3, r2
 800dc68:	461a      	mov	r2, r3
 800dc6a:	6879      	ldr	r1, [r7, #4]
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f000 ffe6 	bl	800ec3e <USBD_CtlContinueRx>
 800dc72:	e030      	b.n	800dcd6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc7a:	691b      	ldr	r3, [r3, #16]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00a      	beq.n	800dc96 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800dc86:	2b03      	cmp	r3, #3
 800dc88:	d105      	bne.n	800dc96 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc90:	691b      	ldr	r3, [r3, #16]
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f000 ffe2 	bl	800ec60 <USBD_CtlSendStatus>
 800dc9c:	e01b      	b.n	800dcd6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dca4:	699b      	ldr	r3, [r3, #24]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d013      	beq.n	800dcd2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800dcb0:	2b03      	cmp	r3, #3
 800dcb2:	d10e      	bne.n	800dcd2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcba:	699b      	ldr	r3, [r3, #24]
 800dcbc:	7afa      	ldrb	r2, [r7, #11]
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	4798      	blx	r3
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800dcc8:	7dfb      	ldrb	r3, [r7, #23]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d003      	beq.n	800dcd6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800dcce:	7dfb      	ldrb	r3, [r7, #23]
 800dcd0:	e002      	b.n	800dcd8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800dcd2:	2303      	movs	r3, #3
 800dcd4:	e000      	b.n	800dcd8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800dcd6:	2300      	movs	r3, #0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3718      	adds	r7, #24
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	460b      	mov	r3, r1
 800dcea:	607a      	str	r2, [r7, #4]
 800dcec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dcee:	7afb      	ldrb	r3, [r7, #11]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d16a      	bne.n	800ddca <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	3314      	adds	r3, #20
 800dcf8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	d155      	bne.n	800ddb0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	689a      	ldr	r2, [r3, #8]
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d914      	bls.n	800dd3a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	689a      	ldr	r2, [r3, #8]
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	1ad2      	subs	r2, r2, r3
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	461a      	mov	r2, r3
 800dd24:	6879      	ldr	r1, [r7, #4]
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f000 ff5b 	bl	800ebe2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	2200      	movs	r2, #0
 800dd30:	2100      	movs	r1, #0
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	f7ff fabc 	bl	800d2b0 <USBD_LL_PrepareReceive>
 800dd38:	e03a      	b.n	800ddb0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	68da      	ldr	r2, [r3, #12]
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d11c      	bne.n	800dd80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	685a      	ldr	r2, [r3, #4]
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d316      	bcc.n	800dd80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	685a      	ldr	r2, [r3, #4]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d20f      	bcs.n	800dd80 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd60:	2200      	movs	r2, #0
 800dd62:	2100      	movs	r1, #0
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f000 ff3c 	bl	800ebe2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd72:	2300      	movs	r3, #0
 800dd74:	2200      	movs	r2, #0
 800dd76:	2100      	movs	r1, #0
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	f7ff fa99 	bl	800d2b0 <USBD_LL_PrepareReceive>
 800dd7e:	e017      	b.n	800ddb0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00a      	beq.n	800dda2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dd92:	2b03      	cmp	r3, #3
 800dd94:	d105      	bne.n	800dda2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dda2:	2180      	movs	r1, #128	@ 0x80
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f7ff f9d9 	bl	800d15c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f000 ff6b 	bl	800ec86 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d123      	bne.n	800de02 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f7ff fe99 	bl	800daf2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ddc8:	e01b      	b.n	800de02 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddd0:	695b      	ldr	r3, [r3, #20]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d013      	beq.n	800ddfe <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800dddc:	2b03      	cmp	r3, #3
 800ddde:	d10e      	bne.n	800ddfe <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	7afa      	ldrb	r2, [r7, #11]
 800ddea:	4611      	mov	r1, r2
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	4798      	blx	r3
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ddf4:	7dfb      	ldrb	r3, [r7, #23]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d003      	beq.n	800de02 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ddfa:	7dfb      	ldrb	r3, [r7, #23]
 800ddfc:	e002      	b.n	800de04 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ddfe:	2303      	movs	r3, #3
 800de00:	e000      	b.n	800de04 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2200      	movs	r2, #0
 800de20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2200      	movs	r2, #0
 800de28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d009      	beq.n	800de50 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	6852      	ldr	r2, [r2, #4]
 800de48:	b2d2      	uxtb	r2, r2
 800de4a:	4611      	mov	r1, r2
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de50:	2340      	movs	r3, #64	@ 0x40
 800de52:	2200      	movs	r2, #0
 800de54:	2100      	movs	r1, #0
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7ff f93b 	bl	800d0d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2201      	movs	r2, #1
 800de60:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2240      	movs	r2, #64	@ 0x40
 800de68:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de6c:	2340      	movs	r3, #64	@ 0x40
 800de6e:	2200      	movs	r2, #0
 800de70:	2180      	movs	r1, #128	@ 0x80
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7ff f92d 	bl	800d0d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2240      	movs	r2, #64	@ 0x40
 800de82:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}

0800de8e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800de8e:	b480      	push	{r7}
 800de90:	b083      	sub	sp, #12
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
 800de96:	460b      	mov	r3, r1
 800de98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	78fa      	ldrb	r2, [r7, #3]
 800de9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	370c      	adds	r7, #12
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr

0800deae <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800deae:	b480      	push	{r7}
 800deb0:	b083      	sub	sp, #12
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2204      	movs	r2, #4
 800dec6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dee6:	2b04      	cmp	r3, #4
 800dee8:	d105      	bne.n	800def6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800def6:	2300      	movs	r3, #0
}
 800def8:	4618      	mov	r0, r3
 800defa:	370c      	adds	r7, #12
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df12:	2b03      	cmp	r3, #3
 800df14:	d10b      	bne.n	800df2e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df1c:	69db      	ldr	r3, [r3, #28]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d005      	beq.n	800df2e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df28:	69db      	ldr	r3, [r3, #28]
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800df2e:	2300      	movs	r3, #0
}
 800df30:	4618      	mov	r0, r3
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	460b      	mov	r3, r1
 800df42:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	370c      	adds	r7, #12
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr

0800df52 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800df52:	b480      	push	{r7}
 800df54:	b083      	sub	sp, #12
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	460b      	mov	r3, r1
 800df5c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800df5e:	2300      	movs	r3, #0
}
 800df60:	4618      	mov	r0, r3
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800df74:	2300      	movs	r3, #0
}
 800df76:	4618      	mov	r0, r3
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b082      	sub	sp, #8
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2201      	movs	r2, #1
 800df8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d009      	beq.n	800dfb0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	6852      	ldr	r2, [r2, #4]
 800dfa8:	b2d2      	uxtb	r2, r2
 800dfaa:	4611      	mov	r1, r2
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	4798      	blx	r3
  }

  return USBD_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dfba:	b480      	push	{r7}
 800dfbc:	b087      	sub	sp, #28
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dfd8:	8a3b      	ldrh	r3, [r7, #16]
 800dfda:	021b      	lsls	r3, r3, #8
 800dfdc:	b21a      	sxth	r2, r3
 800dfde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	b21b      	sxth	r3, r3
 800dfe6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dfe8:	89fb      	ldrh	r3, [r7, #14]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	371c      	adds	r7, #28
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr
	...

0800dff8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e00e:	2b40      	cmp	r3, #64	@ 0x40
 800e010:	d005      	beq.n	800e01e <USBD_StdDevReq+0x26>
 800e012:	2b40      	cmp	r3, #64	@ 0x40
 800e014:	d853      	bhi.n	800e0be <USBD_StdDevReq+0xc6>
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00b      	beq.n	800e032 <USBD_StdDevReq+0x3a>
 800e01a:	2b20      	cmp	r3, #32
 800e01c:	d14f      	bne.n	800e0be <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	6839      	ldr	r1, [r7, #0]
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	4798      	blx	r3
 800e02c:	4603      	mov	r3, r0
 800e02e:	73fb      	strb	r3, [r7, #15]
    break;
 800e030:	e04a      	b.n	800e0c8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	785b      	ldrb	r3, [r3, #1]
 800e036:	2b09      	cmp	r3, #9
 800e038:	d83b      	bhi.n	800e0b2 <USBD_StdDevReq+0xba>
 800e03a:	a201      	add	r2, pc, #4	@ (adr r2, 800e040 <USBD_StdDevReq+0x48>)
 800e03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e040:	0800e095 	.word	0x0800e095
 800e044:	0800e0a9 	.word	0x0800e0a9
 800e048:	0800e0b3 	.word	0x0800e0b3
 800e04c:	0800e09f 	.word	0x0800e09f
 800e050:	0800e0b3 	.word	0x0800e0b3
 800e054:	0800e073 	.word	0x0800e073
 800e058:	0800e069 	.word	0x0800e069
 800e05c:	0800e0b3 	.word	0x0800e0b3
 800e060:	0800e08b 	.word	0x0800e08b
 800e064:	0800e07d 	.word	0x0800e07d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800e068:	6839      	ldr	r1, [r7, #0]
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f9da 	bl	800e424 <USBD_GetDescriptor>
      break;
 800e070:	e024      	b.n	800e0bc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 fb69 	bl	800e74c <USBD_SetAddress>
      break;
 800e07a:	e01f      	b.n	800e0bc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800e07c:	6839      	ldr	r1, [r7, #0]
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 fba8 	bl	800e7d4 <USBD_SetConfig>
 800e084:	4603      	mov	r3, r0
 800e086:	73fb      	strb	r3, [r7, #15]
      break;
 800e088:	e018      	b.n	800e0bc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800e08a:	6839      	ldr	r1, [r7, #0]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 fc45 	bl	800e91c <USBD_GetConfig>
      break;
 800e092:	e013      	b.n	800e0bc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800e094:	6839      	ldr	r1, [r7, #0]
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 fc75 	bl	800e986 <USBD_GetStatus>
      break;
 800e09c:	e00e      	b.n	800e0bc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800e09e:	6839      	ldr	r1, [r7, #0]
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 fca3 	bl	800e9ec <USBD_SetFeature>
      break;
 800e0a6:	e009      	b.n	800e0bc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800e0a8:	6839      	ldr	r1, [r7, #0]
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 fcb2 	bl	800ea14 <USBD_ClrFeature>
      break;
 800e0b0:	e004      	b.n	800e0bc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800e0b2:	6839      	ldr	r1, [r7, #0]
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 fd08 	bl	800eaca <USBD_CtlError>
      break;
 800e0ba:	bf00      	nop
    }
    break;
 800e0bc:	e004      	b.n	800e0c8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800e0be:	6839      	ldr	r1, [r7, #0]
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 fd02 	bl	800eaca <USBD_CtlError>
    break;
 800e0c6:	bf00      	nop
  }

  return ret;
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop

0800e0d4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e0ea:	2b40      	cmp	r3, #64	@ 0x40
 800e0ec:	d005      	beq.n	800e0fa <USBD_StdItfReq+0x26>
 800e0ee:	2b40      	cmp	r3, #64	@ 0x40
 800e0f0:	d82e      	bhi.n	800e150 <USBD_StdItfReq+0x7c>
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <USBD_StdItfReq+0x26>
 800e0f6:	2b20      	cmp	r3, #32
 800e0f8:	d12a      	bne.n	800e150 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e100:	3b01      	subs	r3, #1
 800e102:	2b02      	cmp	r3, #2
 800e104:	d81d      	bhi.n	800e142 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	889b      	ldrh	r3, [r3, #4]
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d813      	bhi.n	800e138 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	6839      	ldr	r1, [r7, #0]
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	4798      	blx	r3
 800e11e:	4603      	mov	r3, r0
 800e120:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	88db      	ldrh	r3, [r3, #6]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d110      	bne.n	800e14c <USBD_StdItfReq+0x78>
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10d      	bne.n	800e14c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f000 fd95 	bl	800ec60 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800e136:	e009      	b.n	800e14c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 fcc5 	bl	800eaca <USBD_CtlError>
      break;
 800e140:	e004      	b.n	800e14c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800e142:	6839      	ldr	r1, [r7, #0]
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 fcc0 	bl	800eaca <USBD_CtlError>
      break;
 800e14a:	e000      	b.n	800e14e <USBD_StdItfReq+0x7a>
      break;
 800e14c:	bf00      	nop
    }
    break;
 800e14e:	e004      	b.n	800e15a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800e150:	6839      	ldr	r1, [r7, #0]
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 fcb9 	bl	800eaca <USBD_CtlError>
    break;
 800e158:	bf00      	nop
  }

  return ret;
 800e15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e16e:	2300      	movs	r3, #0
 800e170:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	889b      	ldrh	r3, [r3, #4]
 800e176:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e180:	2b40      	cmp	r3, #64	@ 0x40
 800e182:	d007      	beq.n	800e194 <USBD_StdEPReq+0x30>
 800e184:	2b40      	cmp	r3, #64	@ 0x40
 800e186:	f200 8142 	bhi.w	800e40e <USBD_StdEPReq+0x2aa>
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00c      	beq.n	800e1a8 <USBD_StdEPReq+0x44>
 800e18e:	2b20      	cmp	r3, #32
 800e190:	f040 813d 	bne.w	800e40e <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	6839      	ldr	r1, [r7, #0]
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	4798      	blx	r3
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e1a6:	e137      	b.n	800e418 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	785b      	ldrb	r3, [r3, #1]
 800e1ac:	2b03      	cmp	r3, #3
 800e1ae:	d007      	beq.n	800e1c0 <USBD_StdEPReq+0x5c>
 800e1b0:	2b03      	cmp	r3, #3
 800e1b2:	f300 8126 	bgt.w	800e402 <USBD_StdEPReq+0x29e>
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d07d      	beq.n	800e2b6 <USBD_StdEPReq+0x152>
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d03b      	beq.n	800e236 <USBD_StdEPReq+0xd2>
 800e1be:	e120      	b.n	800e402 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1c6:	2b02      	cmp	r3, #2
 800e1c8:	d002      	beq.n	800e1d0 <USBD_StdEPReq+0x6c>
 800e1ca:	2b03      	cmp	r3, #3
 800e1cc:	d016      	beq.n	800e1fc <USBD_StdEPReq+0x98>
 800e1ce:	e02c      	b.n	800e22a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1d0:	7bbb      	ldrb	r3, [r7, #14]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00d      	beq.n	800e1f2 <USBD_StdEPReq+0x8e>
 800e1d6:	7bbb      	ldrb	r3, [r7, #14]
 800e1d8:	2b80      	cmp	r3, #128	@ 0x80
 800e1da:	d00a      	beq.n	800e1f2 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
 800e1de:	4619      	mov	r1, r3
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f7fe ffbb 	bl	800d15c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1e6:	2180      	movs	r1, #128	@ 0x80
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f7fe ffb7 	bl	800d15c <USBD_LL_StallEP>
 800e1ee:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e1f0:	e020      	b.n	800e234 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800e1f2:	6839      	ldr	r1, [r7, #0]
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f000 fc68 	bl	800eaca <USBD_CtlError>
        break;
 800e1fa:	e01b      	b.n	800e234 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	885b      	ldrh	r3, [r3, #2]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d10e      	bne.n	800e222 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e204:	7bbb      	ldrb	r3, [r7, #14]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00b      	beq.n	800e222 <USBD_StdEPReq+0xbe>
 800e20a:	7bbb      	ldrb	r3, [r7, #14]
 800e20c:	2b80      	cmp	r3, #128	@ 0x80
 800e20e:	d008      	beq.n	800e222 <USBD_StdEPReq+0xbe>
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	88db      	ldrh	r3, [r3, #6]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d104      	bne.n	800e222 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e218:	7bbb      	ldrb	r3, [r7, #14]
 800e21a:	4619      	mov	r1, r3
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f7fe ff9d 	bl	800d15c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 fd1c 	bl	800ec60 <USBD_CtlSendStatus>

        break;
 800e228:	e004      	b.n	800e234 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800e22a:	6839      	ldr	r1, [r7, #0]
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 fc4c 	bl	800eaca <USBD_CtlError>
        break;
 800e232:	bf00      	nop
      }
      break;
 800e234:	e0ea      	b.n	800e40c <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d002      	beq.n	800e246 <USBD_StdEPReq+0xe2>
 800e240:	2b03      	cmp	r3, #3
 800e242:	d016      	beq.n	800e272 <USBD_StdEPReq+0x10e>
 800e244:	e030      	b.n	800e2a8 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e246:	7bbb      	ldrb	r3, [r7, #14]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00d      	beq.n	800e268 <USBD_StdEPReq+0x104>
 800e24c:	7bbb      	ldrb	r3, [r7, #14]
 800e24e:	2b80      	cmp	r3, #128	@ 0x80
 800e250:	d00a      	beq.n	800e268 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e252:	7bbb      	ldrb	r3, [r7, #14]
 800e254:	4619      	mov	r1, r3
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f7fe ff80 	bl	800d15c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e25c:	2180      	movs	r1, #128	@ 0x80
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f7fe ff7c 	bl	800d15c <USBD_LL_StallEP>
 800e264:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e266:	e025      	b.n	800e2b4 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800e268:	6839      	ldr	r1, [r7, #0]
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f000 fc2d 	bl	800eaca <USBD_CtlError>
        break;
 800e270:	e020      	b.n	800e2b4 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	885b      	ldrh	r3, [r3, #2]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d11b      	bne.n	800e2b2 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800e27a:	7bbb      	ldrb	r3, [r7, #14]
 800e27c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e280:	2b00      	cmp	r3, #0
 800e282:	d004      	beq.n	800e28e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e284:	7bbb      	ldrb	r3, [r7, #14]
 800e286:	4619      	mov	r1, r3
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7fe ff86 	bl	800d19a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 fce6 	bl	800ec60 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	4798      	blx	r3
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e2a6:	e004      	b.n	800e2b2 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800e2a8:	6839      	ldr	r1, [r7, #0]
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 fc0d 	bl	800eaca <USBD_CtlError>
        break;
 800e2b0:	e000      	b.n	800e2b4 <USBD_StdEPReq+0x150>
        break;
 800e2b2:	bf00      	nop
      }
      break;
 800e2b4:	e0aa      	b.n	800e40c <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2bc:	2b02      	cmp	r3, #2
 800e2be:	d002      	beq.n	800e2c6 <USBD_StdEPReq+0x162>
 800e2c0:	2b03      	cmp	r3, #3
 800e2c2:	d032      	beq.n	800e32a <USBD_StdEPReq+0x1c6>
 800e2c4:	e097      	b.n	800e3f6 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2c6:	7bbb      	ldrb	r3, [r7, #14]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d007      	beq.n	800e2dc <USBD_StdEPReq+0x178>
 800e2cc:	7bbb      	ldrb	r3, [r7, #14]
 800e2ce:	2b80      	cmp	r3, #128	@ 0x80
 800e2d0:	d004      	beq.n	800e2dc <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 fbf8 	bl	800eaca <USBD_CtlError>
          break;
 800e2da:	e091      	b.n	800e400 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	da0b      	bge.n	800e2fc <USBD_StdEPReq+0x198>
 800e2e4:	7bbb      	ldrb	r3, [r7, #14]
 800e2e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	4413      	add	r3, r2
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	3310      	adds	r3, #16
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	4413      	add	r3, r2
 800e2f8:	3304      	adds	r3, #4
 800e2fa:	e00b      	b.n	800e314 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e2fc:	7bbb      	ldrb	r3, [r7, #14]
 800e2fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e302:	4613      	mov	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4413      	add	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	4413      	add	r3, r2
 800e312:	3304      	adds	r3, #4
 800e314:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	2200      	movs	r2, #0
 800e31a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	2202      	movs	r2, #2
 800e320:	4619      	mov	r1, r3
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 fc42 	bl	800ebac <USBD_CtlSendData>
        break;
 800e328:	e06a      	b.n	800e400 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800e32a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	da11      	bge.n	800e356 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e332:	7bbb      	ldrb	r3, [r7, #14]
 800e334:	f003 020f 	and.w	r2, r3, #15
 800e338:	6879      	ldr	r1, [r7, #4]
 800e33a:	4613      	mov	r3, r2
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	4413      	add	r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	440b      	add	r3, r1
 800e344:	3324      	adds	r3, #36	@ 0x24
 800e346:	881b      	ldrh	r3, [r3, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d117      	bne.n	800e37c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800e34c:	6839      	ldr	r1, [r7, #0]
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 fbbb 	bl	800eaca <USBD_CtlError>
            break;
 800e354:	e054      	b.n	800e400 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e356:	7bbb      	ldrb	r3, [r7, #14]
 800e358:	f003 020f 	and.w	r2, r3, #15
 800e35c:	6879      	ldr	r1, [r7, #4]
 800e35e:	4613      	mov	r3, r2
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	4413      	add	r3, r2
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	440b      	add	r3, r1
 800e368:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e36c:	881b      	ldrh	r3, [r3, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d104      	bne.n	800e37c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 fba8 	bl	800eaca <USBD_CtlError>
            break;
 800e37a:	e041      	b.n	800e400 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e37c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e380:	2b00      	cmp	r3, #0
 800e382:	da0b      	bge.n	800e39c <USBD_StdEPReq+0x238>
 800e384:	7bbb      	ldrb	r3, [r7, #14]
 800e386:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e38a:	4613      	mov	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	3310      	adds	r3, #16
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	4413      	add	r3, r2
 800e398:	3304      	adds	r3, #4
 800e39a:	e00b      	b.n	800e3b4 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e39c:	7bbb      	ldrb	r3, [r7, #14]
 800e39e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	4413      	add	r3, r2
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e3b6:	7bbb      	ldrb	r3, [r7, #14]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d002      	beq.n	800e3c2 <USBD_StdEPReq+0x25e>
 800e3bc:	7bbb      	ldrb	r3, [r7, #14]
 800e3be:	2b80      	cmp	r3, #128	@ 0x80
 800e3c0:	d103      	bne.n	800e3ca <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	601a      	str	r2, [r3, #0]
 800e3c8:	e00e      	b.n	800e3e8 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e3ca:	7bbb      	ldrb	r3, [r7, #14]
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f7fe ff02 	bl	800d1d8 <USBD_LL_IsStallEP>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d003      	beq.n	800e3e2 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	2201      	movs	r2, #1
 800e3de:	601a      	str	r2, [r3, #0]
 800e3e0:	e002      	b.n	800e3e8 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	2202      	movs	r2, #2
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 fbdc 	bl	800ebac <USBD_CtlSendData>
          break;
 800e3f4:	e004      	b.n	800e400 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800e3f6:	6839      	ldr	r1, [r7, #0]
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f000 fb66 	bl	800eaca <USBD_CtlError>
        break;
 800e3fe:	bf00      	nop
      }
      break;
 800e400:	e004      	b.n	800e40c <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800e402:	6839      	ldr	r1, [r7, #0]
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 fb60 	bl	800eaca <USBD_CtlError>
      break;
 800e40a:	bf00      	nop
    }
    break;
 800e40c:	e004      	b.n	800e418 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800e40e:	6839      	ldr	r1, [r7, #0]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 fb5a 	bl	800eaca <USBD_CtlError>
    break;
 800e416:	bf00      	nop
  }

  return ret;
 800e418:	7bfb      	ldrb	r3, [r7, #15]
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
	...

0800e424 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e42e:	2300      	movs	r3, #0
 800e430:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e432:	2300      	movs	r3, #0
 800e434:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e436:	2300      	movs	r3, #0
 800e438:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	885b      	ldrh	r3, [r3, #2]
 800e43e:	0a1b      	lsrs	r3, r3, #8
 800e440:	b29b      	uxth	r3, r3
 800e442:	3b01      	subs	r3, #1
 800e444:	2b0e      	cmp	r3, #14
 800e446:	f200 8152 	bhi.w	800e6ee <USBD_GetDescriptor+0x2ca>
 800e44a:	a201      	add	r2, pc, #4	@ (adr r2, 800e450 <USBD_GetDescriptor+0x2c>)
 800e44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e450:	0800e4c1 	.word	0x0800e4c1
 800e454:	0800e4d9 	.word	0x0800e4d9
 800e458:	0800e519 	.word	0x0800e519
 800e45c:	0800e6ef 	.word	0x0800e6ef
 800e460:	0800e6ef 	.word	0x0800e6ef
 800e464:	0800e68f 	.word	0x0800e68f
 800e468:	0800e6bb 	.word	0x0800e6bb
 800e46c:	0800e6ef 	.word	0x0800e6ef
 800e470:	0800e6ef 	.word	0x0800e6ef
 800e474:	0800e6ef 	.word	0x0800e6ef
 800e478:	0800e6ef 	.word	0x0800e6ef
 800e47c:	0800e6ef 	.word	0x0800e6ef
 800e480:	0800e6ef 	.word	0x0800e6ef
 800e484:	0800e6ef 	.word	0x0800e6ef
 800e488:	0800e48d 	.word	0x0800e48d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e492:	69db      	ldr	r3, [r3, #28]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00b      	beq.n	800e4b0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e49e:	69db      	ldr	r3, [r3, #28]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	7c12      	ldrb	r2, [r2, #16]
 800e4a4:	f107 0108 	add.w	r1, r7, #8
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	4798      	blx	r3
 800e4ac:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e4ae:	e126      	b.n	800e6fe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e4b0:	6839      	ldr	r1, [r7, #0]
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 fb09 	bl	800eaca <USBD_CtlError>
      err++;
 800e4b8:	7afb      	ldrb	r3, [r7, #11]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	72fb      	strb	r3, [r7, #11]
    break;
 800e4be:	e11e      	b.n	800e6fe <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	7c12      	ldrb	r2, [r2, #16]
 800e4cc:	f107 0108 	add.w	r1, r7, #8
 800e4d0:	4610      	mov	r0, r2
 800e4d2:	4798      	blx	r3
 800e4d4:	60f8      	str	r0, [r7, #12]
    break;
 800e4d6:	e112      	b.n	800e6fe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	7c1b      	ldrb	r3, [r3, #16]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d10d      	bne.n	800e4fc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4e8:	f107 0208 	add.w	r2, r7, #8
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	4798      	blx	r3
 800e4f0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	2202      	movs	r2, #2
 800e4f8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e4fa:	e100      	b.n	800e6fe <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e504:	f107 0208 	add.w	r2, r7, #8
 800e508:	4610      	mov	r0, r2
 800e50a:	4798      	blx	r3
 800e50c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3301      	adds	r3, #1
 800e512:	2202      	movs	r2, #2
 800e514:	701a      	strb	r2, [r3, #0]
    break;
 800e516:	e0f2      	b.n	800e6fe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	885b      	ldrh	r3, [r3, #2]
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	2b05      	cmp	r3, #5
 800e520:	f200 80ac 	bhi.w	800e67c <USBD_GetDescriptor+0x258>
 800e524:	a201      	add	r2, pc, #4	@ (adr r2, 800e52c <USBD_GetDescriptor+0x108>)
 800e526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e52a:	bf00      	nop
 800e52c:	0800e545 	.word	0x0800e545
 800e530:	0800e579 	.word	0x0800e579
 800e534:	0800e5ad 	.word	0x0800e5ad
 800e538:	0800e5e1 	.word	0x0800e5e1
 800e53c:	0800e615 	.word	0x0800e615
 800e540:	0800e649 	.word	0x0800e649
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00b      	beq.n	800e568 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	7c12      	ldrb	r2, [r2, #16]
 800e55c:	f107 0108 	add.w	r1, r7, #8
 800e560:	4610      	mov	r0, r2
 800e562:	4798      	blx	r3
 800e564:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e566:	e091      	b.n	800e68c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e568:	6839      	ldr	r1, [r7, #0]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 faad 	bl	800eaca <USBD_CtlError>
        err++;
 800e570:	7afb      	ldrb	r3, [r7, #11]
 800e572:	3301      	adds	r3, #1
 800e574:	72fb      	strb	r3, [r7, #11]
      break;
 800e576:	e089      	b.n	800e68c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e57e:	689b      	ldr	r3, [r3, #8]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00b      	beq.n	800e59c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e58a:	689b      	ldr	r3, [r3, #8]
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	7c12      	ldrb	r2, [r2, #16]
 800e590:	f107 0108 	add.w	r1, r7, #8
 800e594:	4610      	mov	r0, r2
 800e596:	4798      	blx	r3
 800e598:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e59a:	e077      	b.n	800e68c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fa93 	bl	800eaca <USBD_CtlError>
        err++;
 800e5a4:	7afb      	ldrb	r3, [r7, #11]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	72fb      	strb	r3, [r7, #11]
      break;
 800e5aa:	e06f      	b.n	800e68c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00b      	beq.n	800e5d0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	7c12      	ldrb	r2, [r2, #16]
 800e5c4:	f107 0108 	add.w	r1, r7, #8
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	4798      	blx	r3
 800e5cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5ce:	e05d      	b.n	800e68c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e5d0:	6839      	ldr	r1, [r7, #0]
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 fa79 	bl	800eaca <USBD_CtlError>
        err++;
 800e5d8:	7afb      	ldrb	r3, [r7, #11]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	72fb      	strb	r3, [r7, #11]
      break;
 800e5de:	e055      	b.n	800e68c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5e6:	691b      	ldr	r3, [r3, #16]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00b      	beq.n	800e604 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5f2:	691b      	ldr	r3, [r3, #16]
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	7c12      	ldrb	r2, [r2, #16]
 800e5f8:	f107 0108 	add.w	r1, r7, #8
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	4798      	blx	r3
 800e600:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e602:	e043      	b.n	800e68c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e604:	6839      	ldr	r1, [r7, #0]
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 fa5f 	bl	800eaca <USBD_CtlError>
        err++;
 800e60c:	7afb      	ldrb	r3, [r7, #11]
 800e60e:	3301      	adds	r3, #1
 800e610:	72fb      	strb	r3, [r7, #11]
      break;
 800e612:	e03b      	b.n	800e68c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e61a:	695b      	ldr	r3, [r3, #20]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00b      	beq.n	800e638 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e626:	695b      	ldr	r3, [r3, #20]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	7c12      	ldrb	r2, [r2, #16]
 800e62c:	f107 0108 	add.w	r1, r7, #8
 800e630:	4610      	mov	r0, r2
 800e632:	4798      	blx	r3
 800e634:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e636:	e029      	b.n	800e68c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e638:	6839      	ldr	r1, [r7, #0]
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 fa45 	bl	800eaca <USBD_CtlError>
        err++;
 800e640:	7afb      	ldrb	r3, [r7, #11]
 800e642:	3301      	adds	r3, #1
 800e644:	72fb      	strb	r3, [r7, #11]
      break;
 800e646:	e021      	b.n	800e68c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e64e:	699b      	ldr	r3, [r3, #24]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00b      	beq.n	800e66c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e65a:	699b      	ldr	r3, [r3, #24]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	7c12      	ldrb	r2, [r2, #16]
 800e660:	f107 0108 	add.w	r1, r7, #8
 800e664:	4610      	mov	r0, r2
 800e666:	4798      	blx	r3
 800e668:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e66a:	e00f      	b.n	800e68c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e66c:	6839      	ldr	r1, [r7, #0]
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 fa2b 	bl	800eaca <USBD_CtlError>
        err++;
 800e674:	7afb      	ldrb	r3, [r7, #11]
 800e676:	3301      	adds	r3, #1
 800e678:	72fb      	strb	r3, [r7, #11]
      break;
 800e67a:	e007      	b.n	800e68c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 fa23 	bl	800eaca <USBD_CtlError>
      err++;
 800e684:	7afb      	ldrb	r3, [r7, #11]
 800e686:	3301      	adds	r3, #1
 800e688:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800e68a:	bf00      	nop
    }
    break;
 800e68c:	e037      	b.n	800e6fe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	7c1b      	ldrb	r3, [r3, #16]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d109      	bne.n	800e6aa <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e69c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e69e:	f107 0208 	add.w	r2, r7, #8
 800e6a2:	4610      	mov	r0, r2
 800e6a4:	4798      	blx	r3
 800e6a6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e6a8:	e029      	b.n	800e6fe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e6aa:	6839      	ldr	r1, [r7, #0]
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 fa0c 	bl	800eaca <USBD_CtlError>
      err++;
 800e6b2:	7afb      	ldrb	r3, [r7, #11]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	72fb      	strb	r3, [r7, #11]
    break;
 800e6b8:	e021      	b.n	800e6fe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	7c1b      	ldrb	r3, [r3, #16]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10d      	bne.n	800e6de <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ca:	f107 0208 	add.w	r2, r7, #8
 800e6ce:	4610      	mov	r0, r2
 800e6d0:	4798      	blx	r3
 800e6d2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	2207      	movs	r2, #7
 800e6da:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e6dc:	e00f      	b.n	800e6fe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e6de:	6839      	ldr	r1, [r7, #0]
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 f9f2 	bl	800eaca <USBD_CtlError>
      err++;
 800e6e6:	7afb      	ldrb	r3, [r7, #11]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	72fb      	strb	r3, [r7, #11]
    break;
 800e6ec:	e007      	b.n	800e6fe <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800e6ee:	6839      	ldr	r1, [r7, #0]
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 f9ea 	bl	800eaca <USBD_CtlError>
    err++;
 800e6f6:	7afb      	ldrb	r3, [r7, #11]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	72fb      	strb	r3, [r7, #11]
    break;
 800e6fc:	bf00      	nop
  }

  if (err != 0U)
 800e6fe:	7afb      	ldrb	r3, [r7, #11]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d11e      	bne.n	800e742 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	88db      	ldrh	r3, [r3, #6]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d016      	beq.n	800e73a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800e70c:	893b      	ldrh	r3, [r7, #8]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00e      	beq.n	800e730 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	88da      	ldrh	r2, [r3, #6]
 800e716:	893b      	ldrh	r3, [r7, #8]
 800e718:	4293      	cmp	r3, r2
 800e71a:	bf28      	it	cs
 800e71c:	4613      	movcs	r3, r2
 800e71e:	b29b      	uxth	r3, r3
 800e720:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800e722:	893b      	ldrh	r3, [r7, #8]
 800e724:	461a      	mov	r2, r3
 800e726:	68f9      	ldr	r1, [r7, #12]
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 fa3f 	bl	800ebac <USBD_CtlSendData>
 800e72e:	e009      	b.n	800e744 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800e730:	6839      	ldr	r1, [r7, #0]
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 f9c9 	bl	800eaca <USBD_CtlError>
 800e738:	e004      	b.n	800e744 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 fa90 	bl	800ec60 <USBD_CtlSendStatus>
 800e740:	e000      	b.n	800e744 <USBD_GetDescriptor+0x320>
    return;
 800e742:	bf00      	nop
    }
  }
}
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop

0800e74c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	889b      	ldrh	r3, [r3, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d130      	bne.n	800e7c0 <USBD_SetAddress+0x74>
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	88db      	ldrh	r3, [r3, #6]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d12c      	bne.n	800e7c0 <USBD_SetAddress+0x74>
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	885b      	ldrh	r3, [r3, #2]
 800e76a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e76c:	d828      	bhi.n	800e7c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	885b      	ldrh	r3, [r3, #2]
 800e772:	b2db      	uxtb	r3, r3
 800e774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e778:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e780:	2b03      	cmp	r3, #3
 800e782:	d104      	bne.n	800e78e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e784:	6839      	ldr	r1, [r7, #0]
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f99f 	bl	800eaca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e78c:	e01d      	b.n	800e7ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7bfa      	ldrb	r2, [r7, #15]
 800e792:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e796:	7bfb      	ldrb	r3, [r7, #15]
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7fe fd48 	bl	800d230 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 fa5d 	bl	800ec60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e7a6:	7bfb      	ldrb	r3, [r7, #15]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d004      	beq.n	800e7b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2202      	movs	r2, #2
 800e7b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7b4:	e009      	b.n	800e7ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7be:	e004      	b.n	800e7ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e7c0:	6839      	ldr	r1, [r7, #0]
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 f981 	bl	800eaca <USBD_CtlError>
  }
}
 800e7c8:	bf00      	nop
 800e7ca:	bf00      	nop
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
	...

0800e7d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	885b      	ldrh	r3, [r3, #2]
 800e7e6:	b2da      	uxtb	r2, r3
 800e7e8:	4b4b      	ldr	r3, [pc, #300]	@ (800e918 <USBD_SetConfig+0x144>)
 800e7ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e7ec:	4b4a      	ldr	r3, [pc, #296]	@ (800e918 <USBD_SetConfig+0x144>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	d905      	bls.n	800e800 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e7f4:	6839      	ldr	r1, [r7, #0]
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 f967 	bl	800eaca <USBD_CtlError>
    return USBD_FAIL;
 800e7fc:	2303      	movs	r3, #3
 800e7fe:	e087      	b.n	800e910 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e806:	2b02      	cmp	r3, #2
 800e808:	d002      	beq.n	800e810 <USBD_SetConfig+0x3c>
 800e80a:	2b03      	cmp	r3, #3
 800e80c:	d025      	beq.n	800e85a <USBD_SetConfig+0x86>
 800e80e:	e071      	b.n	800e8f4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800e810:	4b41      	ldr	r3, [pc, #260]	@ (800e918 <USBD_SetConfig+0x144>)
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d01c      	beq.n	800e852 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800e818:	4b3f      	ldr	r3, [pc, #252]	@ (800e918 <USBD_SetConfig+0x144>)
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	461a      	mov	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e822:	4b3d      	ldr	r3, [pc, #244]	@ (800e918 <USBD_SetConfig+0x144>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	4619      	mov	r1, r3
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f7ff f96d 	bl	800db08 <USBD_SetClassConfig>
 800e82e:	4603      	mov	r3, r0
 800e830:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800e832:	7bfb      	ldrb	r3, [r7, #15]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d004      	beq.n	800e842 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800e838:	6839      	ldr	r1, [r7, #0]
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f000 f945 	bl	800eaca <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e840:	e065      	b.n	800e90e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 fa0c 	bl	800ec60 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2203      	movs	r2, #3
 800e84c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800e850:	e05d      	b.n	800e90e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 fa04 	bl	800ec60 <USBD_CtlSendStatus>
    break;
 800e858:	e059      	b.n	800e90e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800e85a:	4b2f      	ldr	r3, [pc, #188]	@ (800e918 <USBD_SetConfig+0x144>)
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d112      	bne.n	800e888 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2202      	movs	r2, #2
 800e866:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 800e86a:	4b2b      	ldr	r3, [pc, #172]	@ (800e918 <USBD_SetConfig+0x144>)
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	461a      	mov	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e874:	4b28      	ldr	r3, [pc, #160]	@ (800e918 <USBD_SetConfig+0x144>)
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	4619      	mov	r1, r3
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7ff f960 	bl	800db40 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 f9ed 	bl	800ec60 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e886:	e042      	b.n	800e90e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800e888:	4b23      	ldr	r3, [pc, #140]	@ (800e918 <USBD_SetConfig+0x144>)
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	461a      	mov	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	429a      	cmp	r2, r3
 800e894:	d02a      	beq.n	800e8ec <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	4619      	mov	r1, r3
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f7ff f94e 	bl	800db40 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800e8a4:	4b1c      	ldr	r3, [pc, #112]	@ (800e918 <USBD_SetConfig+0x144>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800e918 <USBD_SetConfig+0x144>)
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f7ff f927 	bl	800db08 <USBD_SetClassConfig>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800e8be:	7bfb      	ldrb	r3, [r7, #15]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d00f      	beq.n	800e8e4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f8ff 	bl	800eaca <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7ff f933 	bl	800db40 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2202      	movs	r2, #2
 800e8de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800e8e2:	e014      	b.n	800e90e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 f9bb 	bl	800ec60 <USBD_CtlSendStatus>
    break;
 800e8ea:	e010      	b.n	800e90e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 f9b7 	bl	800ec60 <USBD_CtlSendStatus>
    break;
 800e8f2:	e00c      	b.n	800e90e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800e8f4:	6839      	ldr	r1, [r7, #0]
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 f8e7 	bl	800eaca <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e8fc:	4b06      	ldr	r3, [pc, #24]	@ (800e918 <USBD_SetConfig+0x144>)
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	4619      	mov	r1, r3
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f7ff f91c 	bl	800db40 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800e908:	2303      	movs	r3, #3
 800e90a:	73fb      	strb	r3, [r7, #15]
    break;
 800e90c:	bf00      	nop
  }

  return ret;
 800e90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e910:	4618      	mov	r0, r3
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	2000ebd8 	.word	0x2000ebd8

0800e91c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	88db      	ldrh	r3, [r3, #6]
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d004      	beq.n	800e938 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e92e:	6839      	ldr	r1, [r7, #0]
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 f8ca 	bl	800eaca <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800e936:	e022      	b.n	800e97e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e93e:	2b02      	cmp	r3, #2
 800e940:	dc02      	bgt.n	800e948 <USBD_GetConfig+0x2c>
 800e942:	2b00      	cmp	r3, #0
 800e944:	dc03      	bgt.n	800e94e <USBD_GetConfig+0x32>
 800e946:	e015      	b.n	800e974 <USBD_GetConfig+0x58>
 800e948:	2b03      	cmp	r3, #3
 800e94a:	d00b      	beq.n	800e964 <USBD_GetConfig+0x48>
 800e94c:	e012      	b.n	800e974 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	3308      	adds	r3, #8
 800e958:	2201      	movs	r2, #1
 800e95a:	4619      	mov	r1, r3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 f925 	bl	800ebac <USBD_CtlSendData>
      break;
 800e962:	e00c      	b.n	800e97e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	3304      	adds	r3, #4
 800e968:	2201      	movs	r2, #1
 800e96a:	4619      	mov	r1, r3
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 f91d 	bl	800ebac <USBD_CtlSendData>
      break;
 800e972:	e004      	b.n	800e97e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800e974:	6839      	ldr	r1, [r7, #0]
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 f8a7 	bl	800eaca <USBD_CtlError>
      break;
 800e97c:	bf00      	nop
}
 800e97e:	bf00      	nop
 800e980:	3708      	adds	r7, #8
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b082      	sub	sp, #8
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
 800e98e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e996:	3b01      	subs	r3, #1
 800e998:	2b02      	cmp	r3, #2
 800e99a:	d81e      	bhi.n	800e9da <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	88db      	ldrh	r3, [r3, #6]
 800e9a0:	2b02      	cmp	r3, #2
 800e9a2:	d004      	beq.n	800e9ae <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e9a4:	6839      	ldr	r1, [r7, #0]
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 f88f 	bl	800eaca <USBD_CtlError>
      break;
 800e9ac:	e01a      	b.n	800e9e4 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d005      	beq.n	800e9ca <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	f043 0202 	orr.w	r2, r3, #2
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	330c      	adds	r3, #12
 800e9ce:	2202      	movs	r2, #2
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 f8ea 	bl	800ebac <USBD_CtlSendData>
    break;
 800e9d8:	e004      	b.n	800e9e4 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800e9da:	6839      	ldr	r1, [r7, #0]
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f000 f874 	bl	800eaca <USBD_CtlError>
    break;
 800e9e2:	bf00      	nop
  }
}
 800e9e4:	bf00      	nop
 800e9e6:	3708      	adds	r7, #8
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	885b      	ldrh	r3, [r3, #2]
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d106      	bne.n	800ea0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2201      	movs	r2, #1
 800ea02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 f92a 	bl	800ec60 <USBD_CtlSendStatus>
  }
}
 800ea0c:	bf00      	nop
 800ea0e:	3708      	adds	r7, #8
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea24:	3b01      	subs	r3, #1
 800ea26:	2b02      	cmp	r3, #2
 800ea28:	d80b      	bhi.n	800ea42 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	885b      	ldrh	r3, [r3, #2]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d10c      	bne.n	800ea4c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2200      	movs	r2, #0
 800ea36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 f910 	bl	800ec60 <USBD_CtlSendStatus>
      }
      break;
 800ea40:	e004      	b.n	800ea4c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ea42:	6839      	ldr	r1, [r7, #0]
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 f840 	bl	800eaca <USBD_CtlError>
      break;
 800ea4a:	e000      	b.n	800ea4e <USBD_ClrFeature+0x3a>
      break;
 800ea4c:	bf00      	nop
  }
}
 800ea4e:	bf00      	nop
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b084      	sub	sp, #16
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
 800ea5e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	781a      	ldrb	r2, [r3, #0]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	781a      	ldrb	r2, [r3, #0]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ea80:	68f8      	ldr	r0, [r7, #12]
 800ea82:	f7ff fa9a 	bl	800dfba <SWAPBYTE>
 800ea86:	4603      	mov	r3, r0
 800ea88:	461a      	mov	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	3301      	adds	r3, #1
 800ea92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	3301      	adds	r3, #1
 800ea98:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ea9a:	68f8      	ldr	r0, [r7, #12]
 800ea9c:	f7ff fa8d 	bl	800dfba <SWAPBYTE>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	3301      	adds	r3, #1
 800eab2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eab4:	68f8      	ldr	r0, [r7, #12]
 800eab6:	f7ff fa80 	bl	800dfba <SWAPBYTE>
 800eaba:	4603      	mov	r3, r0
 800eabc:	461a      	mov	r2, r3
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	80da      	strh	r2, [r3, #6]
}
 800eac2:	bf00      	nop
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b082      	sub	sp, #8
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ead4:	2180      	movs	r1, #128	@ 0x80
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f7fe fb40 	bl	800d15c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eadc:	2100      	movs	r1, #0
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f7fe fb3c 	bl	800d15c <USBD_LL_StallEP>
}
 800eae4:	bf00      	nop
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	60f8      	str	r0, [r7, #12]
 800eaf4:	60b9      	str	r1, [r7, #8]
 800eaf6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d036      	beq.n	800eb70 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eb06:	6938      	ldr	r0, [r7, #16]
 800eb08:	f000 f836 	bl	800eb78 <USBD_GetLen>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	3301      	adds	r3, #1
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	b29a      	uxth	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
 800eb1c:	68ba      	ldr	r2, [r7, #8]
 800eb1e:	4413      	add	r3, r2
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	7812      	ldrb	r2, [r2, #0]
 800eb24:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb26:	7dfb      	ldrb	r3, [r7, #23]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eb2c:	7dfb      	ldrb	r3, [r7, #23]
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	4413      	add	r3, r2
 800eb32:	2203      	movs	r2, #3
 800eb34:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb36:	7dfb      	ldrb	r3, [r7, #23]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eb3c:	e013      	b.n	800eb66 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eb3e:	7dfb      	ldrb	r3, [r7, #23]
 800eb40:	68ba      	ldr	r2, [r7, #8]
 800eb42:	4413      	add	r3, r2
 800eb44:	693a      	ldr	r2, [r7, #16]
 800eb46:	7812      	ldrb	r2, [r2, #0]
 800eb48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	613b      	str	r3, [r7, #16]
    idx++;
 800eb50:	7dfb      	ldrb	r3, [r7, #23]
 800eb52:	3301      	adds	r3, #1
 800eb54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eb56:	7dfb      	ldrb	r3, [r7, #23]
 800eb58:	68ba      	ldr	r2, [r7, #8]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	701a      	strb	r2, [r3, #0]
    idx++;
 800eb60:	7dfb      	ldrb	r3, [r7, #23]
 800eb62:	3301      	adds	r3, #1
 800eb64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d1e7      	bne.n	800eb3e <USBD_GetString+0x52>
 800eb6e:	e000      	b.n	800eb72 <USBD_GetString+0x86>
    return;
 800eb70:	bf00      	nop
  }
}
 800eb72:	3718      	adds	r7, #24
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eb80:	2300      	movs	r3, #0
 800eb82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eb88:	e005      	b.n	800eb96 <USBD_GetLen+0x1e>
  {
    len++;
 800eb8a:	7bfb      	ldrb	r3, [r7, #15]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	3301      	adds	r3, #1
 800eb94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1f5      	bne.n	800eb8a <USBD_GetLen+0x12>
  }

  return len;
 800eb9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3714      	adds	r7, #20
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2202      	movs	r2, #2
 800ebbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f7fe fb4b 	bl	800d26e <USBD_LL_Transmit>

  return USBD_OK;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	60f8      	str	r0, [r7, #12]
 800ebea:	60b9      	str	r1, [r7, #8]
 800ebec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	68ba      	ldr	r2, [r7, #8]
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f7fe fb3a 	bl	800d26e <USBD_LL_Transmit>

  return USBD_OK;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2203      	movs	r2, #3
 800ec14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  pdev->ep_out[0].rem_length = len;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	68ba      	ldr	r2, [r7, #8]
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f7fe fb3e 	bl	800d2b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec34:	2300      	movs	r3, #0
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b084      	sub	sp, #16
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	60f8      	str	r0, [r7, #12]
 800ec46:	60b9      	str	r1, [r7, #8]
 800ec48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	68ba      	ldr	r2, [r7, #8]
 800ec4e:	2100      	movs	r1, #0
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f7fe fb2d 	bl	800d2b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec56:	2300      	movs	r3, #0
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2204      	movs	r2, #4
 800ec6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ec70:	2300      	movs	r3, #0
 800ec72:	2200      	movs	r2, #0
 800ec74:	2100      	movs	r1, #0
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f7fe faf9 	bl	800d26e <USBD_LL_Transmit>

  return USBD_OK;
 800ec7c:	2300      	movs	r3, #0
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3708      	adds	r7, #8
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b082      	sub	sp, #8
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2205      	movs	r2, #5
 800ec92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec96:	2300      	movs	r3, #0
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f7fe fb07 	bl	800d2b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eca2:	2300      	movs	r3, #0
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <memset>:
 800ecac:	4402      	add	r2, r0
 800ecae:	4603      	mov	r3, r0
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d100      	bne.n	800ecb6 <memset+0xa>
 800ecb4:	4770      	bx	lr
 800ecb6:	f803 1b01 	strb.w	r1, [r3], #1
 800ecba:	e7f9      	b.n	800ecb0 <memset+0x4>

0800ecbc <__errno>:
 800ecbc:	4b01      	ldr	r3, [pc, #4]	@ (800ecc4 <__errno+0x8>)
 800ecbe:	6818      	ldr	r0, [r3, #0]
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop
 800ecc4:	200001f8 	.word	0x200001f8

0800ecc8 <__libc_init_array>:
 800ecc8:	b570      	push	{r4, r5, r6, lr}
 800ecca:	4d0d      	ldr	r5, [pc, #52]	@ (800ed00 <__libc_init_array+0x38>)
 800eccc:	2600      	movs	r6, #0
 800ecce:	4c0d      	ldr	r4, [pc, #52]	@ (800ed04 <__libc_init_array+0x3c>)
 800ecd0:	1b64      	subs	r4, r4, r5
 800ecd2:	10a4      	asrs	r4, r4, #2
 800ecd4:	42a6      	cmp	r6, r4
 800ecd6:	d109      	bne.n	800ecec <__libc_init_array+0x24>
 800ecd8:	4d0b      	ldr	r5, [pc, #44]	@ (800ed08 <__libc_init_array+0x40>)
 800ecda:	2600      	movs	r6, #0
 800ecdc:	4c0b      	ldr	r4, [pc, #44]	@ (800ed0c <__libc_init_array+0x44>)
 800ecde:	f000 ffbd 	bl	800fc5c <_init>
 800ece2:	1b64      	subs	r4, r4, r5
 800ece4:	10a4      	asrs	r4, r4, #2
 800ece6:	42a6      	cmp	r6, r4
 800ece8:	d105      	bne.n	800ecf6 <__libc_init_array+0x2e>
 800ecea:	bd70      	pop	{r4, r5, r6, pc}
 800ecec:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecf0:	3601      	adds	r6, #1
 800ecf2:	4798      	blx	r3
 800ecf4:	e7ee      	b.n	800ecd4 <__libc_init_array+0xc>
 800ecf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecfa:	3601      	adds	r6, #1
 800ecfc:	4798      	blx	r3
 800ecfe:	e7f2      	b.n	800ece6 <__libc_init_array+0x1e>
 800ed00:	0800fdc0 	.word	0x0800fdc0
 800ed04:	0800fdc0 	.word	0x0800fdc0
 800ed08:	0800fdc0 	.word	0x0800fdc0
 800ed0c:	0800fdc4 	.word	0x0800fdc4

0800ed10 <pow>:
 800ed10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed12:	ec55 4b11 	vmov	r4, r5, d1
 800ed16:	ed2d 8b02 	vpush	{d8}
 800ed1a:	eeb0 8a40 	vmov.f32	s16, s0
 800ed1e:	eef0 8a60 	vmov.f32	s17, s1
 800ed22:	f000 f8b9 	bl	800ee98 <__ieee754_pow>
 800ed26:	4622      	mov	r2, r4
 800ed28:	462b      	mov	r3, r5
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	4629      	mov	r1, r5
 800ed2e:	ec57 6b10 	vmov	r6, r7, d0
 800ed32:	f7f1 fef7 	bl	8000b24 <__aeabi_dcmpun>
 800ed36:	2800      	cmp	r0, #0
 800ed38:	d13b      	bne.n	800edb2 <pow+0xa2>
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	ec51 0b18 	vmov	r0, r1, d8
 800ed42:	f7f1 febd 	bl	8000ac0 <__aeabi_dcmpeq>
 800ed46:	b1b8      	cbz	r0, 800ed78 <pow+0x68>
 800ed48:	2200      	movs	r2, #0
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	4629      	mov	r1, r5
 800ed50:	f7f1 feb6 	bl	8000ac0 <__aeabi_dcmpeq>
 800ed54:	2800      	cmp	r0, #0
 800ed56:	d146      	bne.n	800ede6 <pow+0xd6>
 800ed58:	ec45 4b10 	vmov	d0, r4, r5
 800ed5c:	f000 f848 	bl	800edf0 <finite>
 800ed60:	b338      	cbz	r0, 800edb2 <pow+0xa2>
 800ed62:	2200      	movs	r2, #0
 800ed64:	2300      	movs	r3, #0
 800ed66:	4620      	mov	r0, r4
 800ed68:	4629      	mov	r1, r5
 800ed6a:	f7f1 feb3 	bl	8000ad4 <__aeabi_dcmplt>
 800ed6e:	b300      	cbz	r0, 800edb2 <pow+0xa2>
 800ed70:	f7ff ffa4 	bl	800ecbc <__errno>
 800ed74:	2322      	movs	r3, #34	@ 0x22
 800ed76:	e01b      	b.n	800edb0 <pow+0xa0>
 800ed78:	ec47 6b10 	vmov	d0, r6, r7
 800ed7c:	f000 f838 	bl	800edf0 <finite>
 800ed80:	b9e0      	cbnz	r0, 800edbc <pow+0xac>
 800ed82:	eeb0 0a48 	vmov.f32	s0, s16
 800ed86:	eef0 0a68 	vmov.f32	s1, s17
 800ed8a:	f000 f831 	bl	800edf0 <finite>
 800ed8e:	b1a8      	cbz	r0, 800edbc <pow+0xac>
 800ed90:	ec45 4b10 	vmov	d0, r4, r5
 800ed94:	f000 f82c 	bl	800edf0 <finite>
 800ed98:	b180      	cbz	r0, 800edbc <pow+0xac>
 800ed9a:	4632      	mov	r2, r6
 800ed9c:	463b      	mov	r3, r7
 800ed9e:	4630      	mov	r0, r6
 800eda0:	4639      	mov	r1, r7
 800eda2:	f7f1 febf 	bl	8000b24 <__aeabi_dcmpun>
 800eda6:	2800      	cmp	r0, #0
 800eda8:	d0e2      	beq.n	800ed70 <pow+0x60>
 800edaa:	f7ff ff87 	bl	800ecbc <__errno>
 800edae:	2321      	movs	r3, #33	@ 0x21
 800edb0:	6003      	str	r3, [r0, #0]
 800edb2:	ecbd 8b02 	vpop	{d8}
 800edb6:	ec47 6b10 	vmov	d0, r6, r7
 800edba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edbc:	2200      	movs	r2, #0
 800edbe:	2300      	movs	r3, #0
 800edc0:	4630      	mov	r0, r6
 800edc2:	4639      	mov	r1, r7
 800edc4:	f7f1 fe7c 	bl	8000ac0 <__aeabi_dcmpeq>
 800edc8:	2800      	cmp	r0, #0
 800edca:	d0f2      	beq.n	800edb2 <pow+0xa2>
 800edcc:	eeb0 0a48 	vmov.f32	s0, s16
 800edd0:	eef0 0a68 	vmov.f32	s1, s17
 800edd4:	f000 f80c 	bl	800edf0 <finite>
 800edd8:	2800      	cmp	r0, #0
 800edda:	d0ea      	beq.n	800edb2 <pow+0xa2>
 800eddc:	ec45 4b10 	vmov	d0, r4, r5
 800ede0:	f000 f806 	bl	800edf0 <finite>
 800ede4:	e7c3      	b.n	800ed6e <pow+0x5e>
 800ede6:	2600      	movs	r6, #0
 800ede8:	4f00      	ldr	r7, [pc, #0]	@ (800edec <pow+0xdc>)
 800edea:	e7e2      	b.n	800edb2 <pow+0xa2>
 800edec:	3ff00000 	.word	0x3ff00000

0800edf0 <finite>:
 800edf0:	b082      	sub	sp, #8
 800edf2:	ed8d 0b00 	vstr	d0, [sp]
 800edf6:	9801      	ldr	r0, [sp, #4]
 800edf8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800edfc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ee00:	0fc0      	lsrs	r0, r0, #31
 800ee02:	b002      	add	sp, #8
 800ee04:	4770      	bx	lr
	...

0800ee08 <round>:
 800ee08:	ec51 0b10 	vmov	r0, r1, d0
 800ee0c:	b570      	push	{r4, r5, r6, lr}
 800ee0e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ee12:	460b      	mov	r3, r1
 800ee14:	4605      	mov	r5, r0
 800ee16:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800ee1a:	2a13      	cmp	r2, #19
 800ee1c:	dc1b      	bgt.n	800ee56 <round+0x4e>
 800ee1e:	2a00      	cmp	r2, #0
 800ee20:	da0b      	bge.n	800ee3a <round+0x32>
 800ee22:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ee26:	3201      	adds	r2, #1
 800ee28:	bf04      	itt	eq
 800ee2a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800ee2e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800ee32:	2200      	movs	r2, #0
 800ee34:	4619      	mov	r1, r3
 800ee36:	4610      	mov	r0, r2
 800ee38:	e015      	b.n	800ee66 <round+0x5e>
 800ee3a:	4c15      	ldr	r4, [pc, #84]	@ (800ee90 <round+0x88>)
 800ee3c:	4114      	asrs	r4, r2
 800ee3e:	ea04 0601 	and.w	r6, r4, r1
 800ee42:	4306      	orrs	r6, r0
 800ee44:	d00f      	beq.n	800ee66 <round+0x5e>
 800ee46:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800ee4a:	fa41 f202 	asr.w	r2, r1, r2
 800ee4e:	4413      	add	r3, r2
 800ee50:	ea23 0304 	bic.w	r3, r3, r4
 800ee54:	e7ed      	b.n	800ee32 <round+0x2a>
 800ee56:	2a33      	cmp	r2, #51	@ 0x33
 800ee58:	dd08      	ble.n	800ee6c <round+0x64>
 800ee5a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800ee5e:	d102      	bne.n	800ee66 <round+0x5e>
 800ee60:	4602      	mov	r2, r0
 800ee62:	f7f1 fa0f 	bl	8000284 <__adddf3>
 800ee66:	ec41 0b10 	vmov	d0, r0, r1
 800ee6a:	bd70      	pop	{r4, r5, r6, pc}
 800ee6c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800ee70:	f04f 34ff 	mov.w	r4, #4294967295
 800ee74:	40f4      	lsrs	r4, r6
 800ee76:	4204      	tst	r4, r0
 800ee78:	d0f5      	beq.n	800ee66 <round+0x5e>
 800ee7a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800ee7e:	2201      	movs	r2, #1
 800ee80:	408a      	lsls	r2, r1
 800ee82:	1952      	adds	r2, r2, r5
 800ee84:	bf28      	it	cs
 800ee86:	3301      	addcs	r3, #1
 800ee88:	ea22 0204 	bic.w	r2, r2, r4
 800ee8c:	e7d2      	b.n	800ee34 <round+0x2c>
 800ee8e:	bf00      	nop
 800ee90:	000fffff 	.word	0x000fffff
 800ee94:	00000000 	.word	0x00000000

0800ee98 <__ieee754_pow>:
 800ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9c:	b091      	sub	sp, #68	@ 0x44
 800ee9e:	ed8d 1b00 	vstr	d1, [sp]
 800eea2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800eea6:	ec57 6b10 	vmov	r6, r7, d0
 800eeaa:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800eeae:	ea5a 0001 	orrs.w	r0, sl, r1
 800eeb2:	d113      	bne.n	800eedc <__ieee754_pow+0x44>
 800eeb4:	19b3      	adds	r3, r6, r6
 800eeb6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800eeba:	4152      	adcs	r2, r2
 800eebc:	4298      	cmp	r0, r3
 800eebe:	4b96      	ldr	r3, [pc, #600]	@ (800f118 <__ieee754_pow+0x280>)
 800eec0:	4193      	sbcs	r3, r2
 800eec2:	f080 84e7 	bcs.w	800f894 <__ieee754_pow+0x9fc>
 800eec6:	4630      	mov	r0, r6
 800eec8:	4639      	mov	r1, r7
 800eeca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eece:	f7f1 f9d9 	bl	8000284 <__adddf3>
 800eed2:	ec41 0b10 	vmov	d0, r0, r1
 800eed6:	b011      	add	sp, #68	@ 0x44
 800eed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eedc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800eee0:	4a8e      	ldr	r2, [pc, #568]	@ (800f11c <__ieee754_pow+0x284>)
 800eee2:	463d      	mov	r5, r7
 800eee4:	4633      	mov	r3, r6
 800eee6:	4590      	cmp	r8, r2
 800eee8:	d806      	bhi.n	800eef8 <__ieee754_pow+0x60>
 800eeea:	d101      	bne.n	800eef0 <__ieee754_pow+0x58>
 800eeec:	2e00      	cmp	r6, #0
 800eeee:	d1ea      	bne.n	800eec6 <__ieee754_pow+0x2e>
 800eef0:	4592      	cmp	sl, r2
 800eef2:	d801      	bhi.n	800eef8 <__ieee754_pow+0x60>
 800eef4:	d10e      	bne.n	800ef14 <__ieee754_pow+0x7c>
 800eef6:	b169      	cbz	r1, 800ef14 <__ieee754_pow+0x7c>
 800eef8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800eefc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ef00:	431d      	orrs	r5, r3
 800ef02:	d1e0      	bne.n	800eec6 <__ieee754_pow+0x2e>
 800ef04:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ef08:	18db      	adds	r3, r3, r3
 800ef0a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ef0e:	4152      	adcs	r2, r2
 800ef10:	429d      	cmp	r5, r3
 800ef12:	e7d4      	b.n	800eebe <__ieee754_pow+0x26>
 800ef14:	2d00      	cmp	r5, #0
 800ef16:	46c3      	mov	fp, r8
 800ef18:	da3a      	bge.n	800ef90 <__ieee754_pow+0xf8>
 800ef1a:	4a81      	ldr	r2, [pc, #516]	@ (800f120 <__ieee754_pow+0x288>)
 800ef1c:	4592      	cmp	sl, r2
 800ef1e:	d84d      	bhi.n	800efbc <__ieee754_pow+0x124>
 800ef20:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ef24:	4592      	cmp	sl, r2
 800ef26:	f240 84c4 	bls.w	800f8b2 <__ieee754_pow+0xa1a>
 800ef2a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800ef2e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ef32:	2a14      	cmp	r2, #20
 800ef34:	dd0f      	ble.n	800ef56 <__ieee754_pow+0xbe>
 800ef36:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ef3a:	fa21 f402 	lsr.w	r4, r1, r2
 800ef3e:	fa04 f202 	lsl.w	r2, r4, r2
 800ef42:	428a      	cmp	r2, r1
 800ef44:	f040 84b5 	bne.w	800f8b2 <__ieee754_pow+0xa1a>
 800ef48:	f004 0401 	and.w	r4, r4, #1
 800ef4c:	f1c4 0402 	rsb	r4, r4, #2
 800ef50:	2900      	cmp	r1, #0
 800ef52:	d158      	bne.n	800f006 <__ieee754_pow+0x16e>
 800ef54:	e00e      	b.n	800ef74 <__ieee754_pow+0xdc>
 800ef56:	2900      	cmp	r1, #0
 800ef58:	d154      	bne.n	800f004 <__ieee754_pow+0x16c>
 800ef5a:	f1c2 0214 	rsb	r2, r2, #20
 800ef5e:	fa4a f402 	asr.w	r4, sl, r2
 800ef62:	fa04 f202 	lsl.w	r2, r4, r2
 800ef66:	4552      	cmp	r2, sl
 800ef68:	f040 84a0 	bne.w	800f8ac <__ieee754_pow+0xa14>
 800ef6c:	f004 0401 	and.w	r4, r4, #1
 800ef70:	f1c4 0402 	rsb	r4, r4, #2
 800ef74:	4a6b      	ldr	r2, [pc, #428]	@ (800f124 <__ieee754_pow+0x28c>)
 800ef76:	4592      	cmp	sl, r2
 800ef78:	d12e      	bne.n	800efd8 <__ieee754_pow+0x140>
 800ef7a:	f1b9 0f00 	cmp.w	r9, #0
 800ef7e:	f280 8491 	bge.w	800f8a4 <__ieee754_pow+0xa0c>
 800ef82:	4632      	mov	r2, r6
 800ef84:	463b      	mov	r3, r7
 800ef86:	2000      	movs	r0, #0
 800ef88:	4966      	ldr	r1, [pc, #408]	@ (800f124 <__ieee754_pow+0x28c>)
 800ef8a:	f7f1 fc5b 	bl	8000844 <__aeabi_ddiv>
 800ef8e:	e7a0      	b.n	800eed2 <__ieee754_pow+0x3a>
 800ef90:	2400      	movs	r4, #0
 800ef92:	bbc1      	cbnz	r1, 800f006 <__ieee754_pow+0x16e>
 800ef94:	4a61      	ldr	r2, [pc, #388]	@ (800f11c <__ieee754_pow+0x284>)
 800ef96:	4592      	cmp	sl, r2
 800ef98:	d1ec      	bne.n	800ef74 <__ieee754_pow+0xdc>
 800ef9a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800ef9e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800efa2:	431a      	orrs	r2, r3
 800efa4:	f000 8476 	beq.w	800f894 <__ieee754_pow+0x9fc>
 800efa8:	4b5f      	ldr	r3, [pc, #380]	@ (800f128 <__ieee754_pow+0x290>)
 800efaa:	4598      	cmp	r8, r3
 800efac:	d908      	bls.n	800efc0 <__ieee754_pow+0x128>
 800efae:	f1b9 0f00 	cmp.w	r9, #0
 800efb2:	f2c0 8473 	blt.w	800f89c <__ieee754_pow+0xa04>
 800efb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efba:	e78a      	b.n	800eed2 <__ieee754_pow+0x3a>
 800efbc:	2402      	movs	r4, #2
 800efbe:	e7e8      	b.n	800ef92 <__ieee754_pow+0xfa>
 800efc0:	f1b9 0f00 	cmp.w	r9, #0
 800efc4:	f04f 0000 	mov.w	r0, #0
 800efc8:	f04f 0100 	mov.w	r1, #0
 800efcc:	da81      	bge.n	800eed2 <__ieee754_pow+0x3a>
 800efce:	e9dd 0300 	ldrd	r0, r3, [sp]
 800efd2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800efd6:	e77c      	b.n	800eed2 <__ieee754_pow+0x3a>
 800efd8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800efdc:	d106      	bne.n	800efec <__ieee754_pow+0x154>
 800efde:	4632      	mov	r2, r6
 800efe0:	463b      	mov	r3, r7
 800efe2:	4630      	mov	r0, r6
 800efe4:	4639      	mov	r1, r7
 800efe6:	f7f1 fb03 	bl	80005f0 <__aeabi_dmul>
 800efea:	e772      	b.n	800eed2 <__ieee754_pow+0x3a>
 800efec:	4a4f      	ldr	r2, [pc, #316]	@ (800f12c <__ieee754_pow+0x294>)
 800efee:	4591      	cmp	r9, r2
 800eff0:	d109      	bne.n	800f006 <__ieee754_pow+0x16e>
 800eff2:	2d00      	cmp	r5, #0
 800eff4:	db07      	blt.n	800f006 <__ieee754_pow+0x16e>
 800eff6:	ec47 6b10 	vmov	d0, r6, r7
 800effa:	b011      	add	sp, #68	@ 0x44
 800effc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f000:	f000 bd4e 	b.w	800faa0 <__ieee754_sqrt>
 800f004:	2400      	movs	r4, #0
 800f006:	9302      	str	r3, [sp, #8]
 800f008:	ec47 6b10 	vmov	d0, r6, r7
 800f00c:	f000 fc84 	bl	800f918 <fabs>
 800f010:	9b02      	ldr	r3, [sp, #8]
 800f012:	ec51 0b10 	vmov	r0, r1, d0
 800f016:	bb53      	cbnz	r3, 800f06e <__ieee754_pow+0x1d6>
 800f018:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f01c:	4b41      	ldr	r3, [pc, #260]	@ (800f124 <__ieee754_pow+0x28c>)
 800f01e:	429a      	cmp	r2, r3
 800f020:	d002      	beq.n	800f028 <__ieee754_pow+0x190>
 800f022:	f1b8 0f00 	cmp.w	r8, #0
 800f026:	d122      	bne.n	800f06e <__ieee754_pow+0x1d6>
 800f028:	f1b9 0f00 	cmp.w	r9, #0
 800f02c:	da05      	bge.n	800f03a <__ieee754_pow+0x1a2>
 800f02e:	4602      	mov	r2, r0
 800f030:	460b      	mov	r3, r1
 800f032:	2000      	movs	r0, #0
 800f034:	493b      	ldr	r1, [pc, #236]	@ (800f124 <__ieee754_pow+0x28c>)
 800f036:	f7f1 fc05 	bl	8000844 <__aeabi_ddiv>
 800f03a:	2d00      	cmp	r5, #0
 800f03c:	f6bf af49 	bge.w	800eed2 <__ieee754_pow+0x3a>
 800f040:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f044:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f048:	ea58 0804 	orrs.w	r8, r8, r4
 800f04c:	d108      	bne.n	800f060 <__ieee754_pow+0x1c8>
 800f04e:	4602      	mov	r2, r0
 800f050:	460b      	mov	r3, r1
 800f052:	4610      	mov	r0, r2
 800f054:	4619      	mov	r1, r3
 800f056:	f7f1 f913 	bl	8000280 <__aeabi_dsub>
 800f05a:	4602      	mov	r2, r0
 800f05c:	460b      	mov	r3, r1
 800f05e:	e794      	b.n	800ef8a <__ieee754_pow+0xf2>
 800f060:	2c01      	cmp	r4, #1
 800f062:	f47f af36 	bne.w	800eed2 <__ieee754_pow+0x3a>
 800f066:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f06a:	4619      	mov	r1, r3
 800f06c:	e731      	b.n	800eed2 <__ieee754_pow+0x3a>
 800f06e:	0feb      	lsrs	r3, r5, #31
 800f070:	3b01      	subs	r3, #1
 800f072:	ea53 0204 	orrs.w	r2, r3, r4
 800f076:	d102      	bne.n	800f07e <__ieee754_pow+0x1e6>
 800f078:	4632      	mov	r2, r6
 800f07a:	463b      	mov	r3, r7
 800f07c:	e7e9      	b.n	800f052 <__ieee754_pow+0x1ba>
 800f07e:	3c01      	subs	r4, #1
 800f080:	431c      	orrs	r4, r3
 800f082:	d016      	beq.n	800f0b2 <__ieee754_pow+0x21a>
 800f084:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800f108 <__ieee754_pow+0x270>
 800f088:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f08c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f090:	f240 810e 	bls.w	800f2b0 <__ieee754_pow+0x418>
 800f094:	4b26      	ldr	r3, [pc, #152]	@ (800f130 <__ieee754_pow+0x298>)
 800f096:	459a      	cmp	sl, r3
 800f098:	4b23      	ldr	r3, [pc, #140]	@ (800f128 <__ieee754_pow+0x290>)
 800f09a:	d916      	bls.n	800f0ca <__ieee754_pow+0x232>
 800f09c:	4598      	cmp	r8, r3
 800f09e:	d80b      	bhi.n	800f0b8 <__ieee754_pow+0x220>
 800f0a0:	f1b9 0f00 	cmp.w	r9, #0
 800f0a4:	da0b      	bge.n	800f0be <__ieee754_pow+0x226>
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	b011      	add	sp, #68	@ 0x44
 800f0aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ae:	f000 bcef 	b.w	800fa90 <__math_oflow>
 800f0b2:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 800f110 <__ieee754_pow+0x278>
 800f0b6:	e7e7      	b.n	800f088 <__ieee754_pow+0x1f0>
 800f0b8:	f1b9 0f00 	cmp.w	r9, #0
 800f0bc:	dcf3      	bgt.n	800f0a6 <__ieee754_pow+0x20e>
 800f0be:	2000      	movs	r0, #0
 800f0c0:	b011      	add	sp, #68	@ 0x44
 800f0c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c6:	f000 bcdb 	b.w	800fa80 <__math_uflow>
 800f0ca:	4598      	cmp	r8, r3
 800f0cc:	d20c      	bcs.n	800f0e8 <__ieee754_pow+0x250>
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0d6:	f7f1 fcfd 	bl	8000ad4 <__aeabi_dcmplt>
 800f0da:	3800      	subs	r0, #0
 800f0dc:	bf18      	it	ne
 800f0de:	2001      	movne	r0, #1
 800f0e0:	f1b9 0f00 	cmp.w	r9, #0
 800f0e4:	daec      	bge.n	800f0c0 <__ieee754_pow+0x228>
 800f0e6:	e7df      	b.n	800f0a8 <__ieee754_pow+0x210>
 800f0e8:	4b0e      	ldr	r3, [pc, #56]	@ (800f124 <__ieee754_pow+0x28c>)
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	4598      	cmp	r8, r3
 800f0ee:	d921      	bls.n	800f134 <__ieee754_pow+0x29c>
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0f6:	f7f1 fced 	bl	8000ad4 <__aeabi_dcmplt>
 800f0fa:	3800      	subs	r0, #0
 800f0fc:	bf18      	it	ne
 800f0fe:	2001      	movne	r0, #1
 800f100:	f1b9 0f00 	cmp.w	r9, #0
 800f104:	dcd0      	bgt.n	800f0a8 <__ieee754_pow+0x210>
 800f106:	e7db      	b.n	800f0c0 <__ieee754_pow+0x228>
 800f108:	00000000 	.word	0x00000000
 800f10c:	3ff00000 	.word	0x3ff00000
 800f110:	00000000 	.word	0x00000000
 800f114:	bff00000 	.word	0xbff00000
 800f118:	fff00000 	.word	0xfff00000
 800f11c:	7ff00000 	.word	0x7ff00000
 800f120:	433fffff 	.word	0x433fffff
 800f124:	3ff00000 	.word	0x3ff00000
 800f128:	3fefffff 	.word	0x3fefffff
 800f12c:	3fe00000 	.word	0x3fe00000
 800f130:	43f00000 	.word	0x43f00000
 800f134:	4b5a      	ldr	r3, [pc, #360]	@ (800f2a0 <__ieee754_pow+0x408>)
 800f136:	f7f1 f8a3 	bl	8000280 <__aeabi_dsub>
 800f13a:	4604      	mov	r4, r0
 800f13c:	460d      	mov	r5, r1
 800f13e:	a350      	add	r3, pc, #320	@ (adr r3, 800f280 <__ieee754_pow+0x3e8>)
 800f140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f144:	f7f1 fa54 	bl	80005f0 <__aeabi_dmul>
 800f148:	4606      	mov	r6, r0
 800f14a:	460f      	mov	r7, r1
 800f14c:	4620      	mov	r0, r4
 800f14e:	4629      	mov	r1, r5
 800f150:	a34d      	add	r3, pc, #308	@ (adr r3, 800f288 <__ieee754_pow+0x3f0>)
 800f152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f156:	f7f1 fa4b 	bl	80005f0 <__aeabi_dmul>
 800f15a:	2200      	movs	r2, #0
 800f15c:	4682      	mov	sl, r0
 800f15e:	468b      	mov	fp, r1
 800f160:	4b50      	ldr	r3, [pc, #320]	@ (800f2a4 <__ieee754_pow+0x40c>)
 800f162:	4620      	mov	r0, r4
 800f164:	4629      	mov	r1, r5
 800f166:	f7f1 fa43 	bl	80005f0 <__aeabi_dmul>
 800f16a:	4602      	mov	r2, r0
 800f16c:	460b      	mov	r3, r1
 800f16e:	a148      	add	r1, pc, #288	@ (adr r1, 800f290 <__ieee754_pow+0x3f8>)
 800f170:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f174:	f7f1 f884 	bl	8000280 <__aeabi_dsub>
 800f178:	4622      	mov	r2, r4
 800f17a:	462b      	mov	r3, r5
 800f17c:	f7f1 fa38 	bl	80005f0 <__aeabi_dmul>
 800f180:	4602      	mov	r2, r0
 800f182:	460b      	mov	r3, r1
 800f184:	2000      	movs	r0, #0
 800f186:	4948      	ldr	r1, [pc, #288]	@ (800f2a8 <__ieee754_pow+0x410>)
 800f188:	f7f1 f87a 	bl	8000280 <__aeabi_dsub>
 800f18c:	4680      	mov	r8, r0
 800f18e:	4689      	mov	r9, r1
 800f190:	4622      	mov	r2, r4
 800f192:	462b      	mov	r3, r5
 800f194:	4620      	mov	r0, r4
 800f196:	4629      	mov	r1, r5
 800f198:	2400      	movs	r4, #0
 800f19a:	f7f1 fa29 	bl	80005f0 <__aeabi_dmul>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	4640      	mov	r0, r8
 800f1a4:	4649      	mov	r1, r9
 800f1a6:	f7f1 fa23 	bl	80005f0 <__aeabi_dmul>
 800f1aa:	a33b      	add	r3, pc, #236	@ (adr r3, 800f298 <__ieee754_pow+0x400>)
 800f1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b0:	f7f1 fa1e 	bl	80005f0 <__aeabi_dmul>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	4650      	mov	r0, sl
 800f1ba:	4659      	mov	r1, fp
 800f1bc:	f7f1 f860 	bl	8000280 <__aeabi_dsub>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	4680      	mov	r8, r0
 800f1c6:	4689      	mov	r9, r1
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	4639      	mov	r1, r7
 800f1cc:	f7f1 f85a 	bl	8000284 <__adddf3>
 800f1d0:	4632      	mov	r2, r6
 800f1d2:	463b      	mov	r3, r7
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	460d      	mov	r5, r1
 800f1d8:	f7f1 f852 	bl	8000280 <__aeabi_dsub>
 800f1dc:	4602      	mov	r2, r0
 800f1de:	460b      	mov	r3, r1
 800f1e0:	4640      	mov	r0, r8
 800f1e2:	4649      	mov	r1, r9
 800f1e4:	f7f1 f84c 	bl	8000280 <__aeabi_dsub>
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	460f      	mov	r7, r1
 800f1ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	9304      	str	r3, [sp, #16]
 800f1fc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f200:	4652      	mov	r2, sl
 800f202:	465b      	mov	r3, fp
 800f204:	f7f1 f83c 	bl	8000280 <__aeabi_dsub>
 800f208:	4622      	mov	r2, r4
 800f20a:	462b      	mov	r3, r5
 800f20c:	f7f1 f9f0 	bl	80005f0 <__aeabi_dmul>
 800f210:	4680      	mov	r8, r0
 800f212:	4689      	mov	r9, r1
 800f214:	4630      	mov	r0, r6
 800f216:	4639      	mov	r1, r7
 800f218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f21c:	f7f1 f9e8 	bl	80005f0 <__aeabi_dmul>
 800f220:	4602      	mov	r2, r0
 800f222:	460b      	mov	r3, r1
 800f224:	4640      	mov	r0, r8
 800f226:	4649      	mov	r1, r9
 800f228:	f7f1 f82c 	bl	8000284 <__adddf3>
 800f22c:	4606      	mov	r6, r0
 800f22e:	460f      	mov	r7, r1
 800f230:	4652      	mov	r2, sl
 800f232:	465b      	mov	r3, fp
 800f234:	4620      	mov	r0, r4
 800f236:	4629      	mov	r1, r5
 800f238:	f7f1 f9da 	bl	80005f0 <__aeabi_dmul>
 800f23c:	460b      	mov	r3, r1
 800f23e:	4602      	mov	r2, r0
 800f240:	4680      	mov	r8, r0
 800f242:	4689      	mov	r9, r1
 800f244:	4630      	mov	r0, r6
 800f246:	4639      	mov	r1, r7
 800f248:	f7f1 f81c 	bl	8000284 <__adddf3>
 800f24c:	4b17      	ldr	r3, [pc, #92]	@ (800f2ac <__ieee754_pow+0x414>)
 800f24e:	4604      	mov	r4, r0
 800f250:	460d      	mov	r5, r1
 800f252:	4299      	cmp	r1, r3
 800f254:	468a      	mov	sl, r1
 800f256:	468b      	mov	fp, r1
 800f258:	f340 82f0 	ble.w	800f83c <__ieee754_pow+0x9a4>
 800f25c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f260:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f264:	4303      	orrs	r3, r0
 800f266:	f000 81e8 	beq.w	800f63a <__ieee754_pow+0x7a2>
 800f26a:	2200      	movs	r2, #0
 800f26c:	2300      	movs	r3, #0
 800f26e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f272:	f7f1 fc2f 	bl	8000ad4 <__aeabi_dcmplt>
 800f276:	3800      	subs	r0, #0
 800f278:	bf18      	it	ne
 800f27a:	2001      	movne	r0, #1
 800f27c:	e714      	b.n	800f0a8 <__ieee754_pow+0x210>
 800f27e:	bf00      	nop
 800f280:	60000000 	.word	0x60000000
 800f284:	3ff71547 	.word	0x3ff71547
 800f288:	f85ddf44 	.word	0xf85ddf44
 800f28c:	3e54ae0b 	.word	0x3e54ae0b
 800f290:	55555555 	.word	0x55555555
 800f294:	3fd55555 	.word	0x3fd55555
 800f298:	652b82fe 	.word	0x652b82fe
 800f29c:	3ff71547 	.word	0x3ff71547
 800f2a0:	3ff00000 	.word	0x3ff00000
 800f2a4:	3fd00000 	.word	0x3fd00000
 800f2a8:	3fe00000 	.word	0x3fe00000
 800f2ac:	408fffff 	.word	0x408fffff
 800f2b0:	4bd5      	ldr	r3, [pc, #852]	@ (800f608 <__ieee754_pow+0x770>)
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	402b      	ands	r3, r5
 800f2b6:	b92b      	cbnz	r3, 800f2c4 <__ieee754_pow+0x42c>
 800f2b8:	4bd4      	ldr	r3, [pc, #848]	@ (800f60c <__ieee754_pow+0x774>)
 800f2ba:	f7f1 f999 	bl	80005f0 <__aeabi_dmul>
 800f2be:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f2c2:	468b      	mov	fp, r1
 800f2c4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f2c8:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f2cc:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f2d0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f2d4:	4413      	add	r3, r2
 800f2d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f2da:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2dc:	4bcc      	ldr	r3, [pc, #816]	@ (800f610 <__ieee754_pow+0x778>)
 800f2de:	459b      	cmp	fp, r3
 800f2e0:	dd08      	ble.n	800f2f4 <__ieee754_pow+0x45c>
 800f2e2:	4bcc      	ldr	r3, [pc, #816]	@ (800f614 <__ieee754_pow+0x77c>)
 800f2e4:	459b      	cmp	fp, r3
 800f2e6:	f340 81a5 	ble.w	800f634 <__ieee754_pow+0x79c>
 800f2ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2ec:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2f4:	f04f 0a00 	mov.w	sl, #0
 800f2f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f2fc:	4629      	mov	r1, r5
 800f2fe:	106d      	asrs	r5, r5, #1
 800f300:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f302:	4bc5      	ldr	r3, [pc, #788]	@ (800f618 <__ieee754_pow+0x780>)
 800f304:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f308:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f30c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f310:	ed93 7b00 	vldr	d7, [r3]
 800f314:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f318:	ec53 2b17 	vmov	r2, r3, d7
 800f31c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f320:	f7f0 ffae 	bl	8000280 <__aeabi_dsub>
 800f324:	4606      	mov	r6, r0
 800f326:	460f      	mov	r7, r1
 800f328:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f32c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f330:	f7f0 ffa8 	bl	8000284 <__adddf3>
 800f334:	4602      	mov	r2, r0
 800f336:	460b      	mov	r3, r1
 800f338:	2000      	movs	r0, #0
 800f33a:	49b8      	ldr	r1, [pc, #736]	@ (800f61c <__ieee754_pow+0x784>)
 800f33c:	f7f1 fa82 	bl	8000844 <__aeabi_ddiv>
 800f340:	4602      	mov	r2, r0
 800f342:	460b      	mov	r3, r1
 800f344:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f348:	4630      	mov	r0, r6
 800f34a:	4639      	mov	r1, r7
 800f34c:	f7f1 f950 	bl	80005f0 <__aeabi_dmul>
 800f350:	2200      	movs	r2, #0
 800f352:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f356:	4614      	mov	r4, r2
 800f358:	461d      	mov	r5, r3
 800f35a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f35e:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f362:	f04f 0b00 	mov.w	fp, #0
 800f366:	4661      	mov	r1, ip
 800f368:	46e1      	mov	r9, ip
 800f36a:	4658      	mov	r0, fp
 800f36c:	46d8      	mov	r8, fp
 800f36e:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f372:	f7f1 f93d 	bl	80005f0 <__aeabi_dmul>
 800f376:	4602      	mov	r2, r0
 800f378:	460b      	mov	r3, r1
 800f37a:	4630      	mov	r0, r6
 800f37c:	4639      	mov	r1, r7
 800f37e:	f7f0 ff7f 	bl	8000280 <__aeabi_dsub>
 800f382:	4606      	mov	r6, r0
 800f384:	460f      	mov	r7, r1
 800f386:	4620      	mov	r0, r4
 800f388:	4629      	mov	r1, r5
 800f38a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f38e:	f7f0 ff77 	bl	8000280 <__aeabi_dsub>
 800f392:	4602      	mov	r2, r0
 800f394:	460b      	mov	r3, r1
 800f396:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f39a:	f7f0 ff71 	bl	8000280 <__aeabi_dsub>
 800f39e:	465a      	mov	r2, fp
 800f3a0:	464b      	mov	r3, r9
 800f3a2:	f7f1 f925 	bl	80005f0 <__aeabi_dmul>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	4639      	mov	r1, r7
 800f3ae:	f7f0 ff67 	bl	8000280 <__aeabi_dsub>
 800f3b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f3b6:	f7f1 f91b 	bl	80005f0 <__aeabi_dmul>
 800f3ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f3c2:	4610      	mov	r0, r2
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	f7f1 f913 	bl	80005f0 <__aeabi_dmul>
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	460d      	mov	r5, r1
 800f3ce:	a37c      	add	r3, pc, #496	@ (adr r3, 800f5c0 <__ieee754_pow+0x728>)
 800f3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d4:	f7f1 f90c 	bl	80005f0 <__aeabi_dmul>
 800f3d8:	a37b      	add	r3, pc, #492	@ (adr r3, 800f5c8 <__ieee754_pow+0x730>)
 800f3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3de:	f7f0 ff51 	bl	8000284 <__adddf3>
 800f3e2:	4622      	mov	r2, r4
 800f3e4:	462b      	mov	r3, r5
 800f3e6:	f7f1 f903 	bl	80005f0 <__aeabi_dmul>
 800f3ea:	a379      	add	r3, pc, #484	@ (adr r3, 800f5d0 <__ieee754_pow+0x738>)
 800f3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f0:	f7f0 ff48 	bl	8000284 <__adddf3>
 800f3f4:	4622      	mov	r2, r4
 800f3f6:	462b      	mov	r3, r5
 800f3f8:	f7f1 f8fa 	bl	80005f0 <__aeabi_dmul>
 800f3fc:	a376      	add	r3, pc, #472	@ (adr r3, 800f5d8 <__ieee754_pow+0x740>)
 800f3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f402:	f7f0 ff3f 	bl	8000284 <__adddf3>
 800f406:	4622      	mov	r2, r4
 800f408:	462b      	mov	r3, r5
 800f40a:	f7f1 f8f1 	bl	80005f0 <__aeabi_dmul>
 800f40e:	a374      	add	r3, pc, #464	@ (adr r3, 800f5e0 <__ieee754_pow+0x748>)
 800f410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f414:	f7f0 ff36 	bl	8000284 <__adddf3>
 800f418:	4622      	mov	r2, r4
 800f41a:	462b      	mov	r3, r5
 800f41c:	f7f1 f8e8 	bl	80005f0 <__aeabi_dmul>
 800f420:	a371      	add	r3, pc, #452	@ (adr r3, 800f5e8 <__ieee754_pow+0x750>)
 800f422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f426:	f7f0 ff2d 	bl	8000284 <__adddf3>
 800f42a:	4606      	mov	r6, r0
 800f42c:	460f      	mov	r7, r1
 800f42e:	4622      	mov	r2, r4
 800f430:	462b      	mov	r3, r5
 800f432:	4620      	mov	r0, r4
 800f434:	4629      	mov	r1, r5
 800f436:	f7f1 f8db 	bl	80005f0 <__aeabi_dmul>
 800f43a:	4602      	mov	r2, r0
 800f43c:	460b      	mov	r3, r1
 800f43e:	4630      	mov	r0, r6
 800f440:	4639      	mov	r1, r7
 800f442:	f7f1 f8d5 	bl	80005f0 <__aeabi_dmul>
 800f446:	465a      	mov	r2, fp
 800f448:	4604      	mov	r4, r0
 800f44a:	460d      	mov	r5, r1
 800f44c:	464b      	mov	r3, r9
 800f44e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f452:	f7f0 ff17 	bl	8000284 <__adddf3>
 800f456:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f45a:	f7f1 f8c9 	bl	80005f0 <__aeabi_dmul>
 800f45e:	4622      	mov	r2, r4
 800f460:	462b      	mov	r3, r5
 800f462:	f7f0 ff0f 	bl	8000284 <__adddf3>
 800f466:	465a      	mov	r2, fp
 800f468:	464b      	mov	r3, r9
 800f46a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f46e:	4658      	mov	r0, fp
 800f470:	4649      	mov	r1, r9
 800f472:	f7f1 f8bd 	bl	80005f0 <__aeabi_dmul>
 800f476:	2200      	movs	r2, #0
 800f478:	4b69      	ldr	r3, [pc, #420]	@ (800f620 <__ieee754_pow+0x788>)
 800f47a:	4606      	mov	r6, r0
 800f47c:	460f      	mov	r7, r1
 800f47e:	f7f0 ff01 	bl	8000284 <__adddf3>
 800f482:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f486:	f7f0 fefd 	bl	8000284 <__adddf3>
 800f48a:	460d      	mov	r5, r1
 800f48c:	460b      	mov	r3, r1
 800f48e:	4640      	mov	r0, r8
 800f490:	4649      	mov	r1, r9
 800f492:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800f496:	465c      	mov	r4, fp
 800f498:	465a      	mov	r2, fp
 800f49a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800f49e:	f7f1 f8a7 	bl	80005f0 <__aeabi_dmul>
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	4680      	mov	r8, r0
 800f4a6:	4689      	mov	r9, r1
 800f4a8:	4b5d      	ldr	r3, [pc, #372]	@ (800f620 <__ieee754_pow+0x788>)
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	4629      	mov	r1, r5
 800f4ae:	f7f0 fee7 	bl	8000280 <__aeabi_dsub>
 800f4b2:	4632      	mov	r2, r6
 800f4b4:	463b      	mov	r3, r7
 800f4b6:	f7f0 fee3 	bl	8000280 <__aeabi_dsub>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	460b      	mov	r3, r1
 800f4be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f4c2:	f7f0 fedd 	bl	8000280 <__aeabi_dsub>
 800f4c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4ca:	f7f1 f891 	bl	80005f0 <__aeabi_dmul>
 800f4ce:	4606      	mov	r6, r0
 800f4d0:	460f      	mov	r7, r1
 800f4d2:	4622      	mov	r2, r4
 800f4d4:	462b      	mov	r3, r5
 800f4d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4da:	f7f1 f889 	bl	80005f0 <__aeabi_dmul>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	4639      	mov	r1, r7
 800f4e6:	f7f0 fecd 	bl	8000284 <__adddf3>
 800f4ea:	4606      	mov	r6, r0
 800f4ec:	460f      	mov	r7, r1
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	4640      	mov	r0, r8
 800f4f4:	4649      	mov	r1, r9
 800f4f6:	f7f0 fec5 	bl	8000284 <__adddf3>
 800f4fa:	460d      	mov	r5, r1
 800f4fc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f500:	a33b      	add	r3, pc, #236	@ (adr r3, 800f5f0 <__ieee754_pow+0x758>)
 800f502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f506:	465c      	mov	r4, fp
 800f508:	4658      	mov	r0, fp
 800f50a:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f50e:	f7f1 f86f 	bl	80005f0 <__aeabi_dmul>
 800f512:	4642      	mov	r2, r8
 800f514:	464b      	mov	r3, r9
 800f516:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f51a:	4620      	mov	r0, r4
 800f51c:	4629      	mov	r1, r5
 800f51e:	f7f0 feaf 	bl	8000280 <__aeabi_dsub>
 800f522:	4602      	mov	r2, r0
 800f524:	460b      	mov	r3, r1
 800f526:	4630      	mov	r0, r6
 800f528:	4639      	mov	r1, r7
 800f52a:	f7f0 fea9 	bl	8000280 <__aeabi_dsub>
 800f52e:	a332      	add	r3, pc, #200	@ (adr r3, 800f5f8 <__ieee754_pow+0x760>)
 800f530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f534:	f7f1 f85c 	bl	80005f0 <__aeabi_dmul>
 800f538:	4606      	mov	r6, r0
 800f53a:	460f      	mov	r7, r1
 800f53c:	4620      	mov	r0, r4
 800f53e:	4629      	mov	r1, r5
 800f540:	a32f      	add	r3, pc, #188	@ (adr r3, 800f600 <__ieee754_pow+0x768>)
 800f542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f546:	f7f1 f853 	bl	80005f0 <__aeabi_dmul>
 800f54a:	4602      	mov	r2, r0
 800f54c:	460b      	mov	r3, r1
 800f54e:	4630      	mov	r0, r6
 800f550:	4639      	mov	r1, r7
 800f552:	f7f0 fe97 	bl	8000284 <__adddf3>
 800f556:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f558:	4b32      	ldr	r3, [pc, #200]	@ (800f624 <__ieee754_pow+0x78c>)
 800f55a:	4413      	add	r3, r2
 800f55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f560:	f7f0 fe90 	bl	8000284 <__adddf3>
 800f564:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f568:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f56a:	f7f0 ffd7 	bl	800051c <__aeabi_i2d>
 800f56e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f570:	4b2d      	ldr	r3, [pc, #180]	@ (800f628 <__ieee754_pow+0x790>)
 800f572:	4606      	mov	r6, r0
 800f574:	460f      	mov	r7, r1
 800f576:	4413      	add	r3, r2
 800f578:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f57c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f580:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f584:	f7f0 fe7e 	bl	8000284 <__adddf3>
 800f588:	4642      	mov	r2, r8
 800f58a:	464b      	mov	r3, r9
 800f58c:	f7f0 fe7a 	bl	8000284 <__adddf3>
 800f590:	4632      	mov	r2, r6
 800f592:	463b      	mov	r3, r7
 800f594:	f7f0 fe76 	bl	8000284 <__adddf3>
 800f598:	4632      	mov	r2, r6
 800f59a:	463b      	mov	r3, r7
 800f59c:	460d      	mov	r5, r1
 800f59e:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800f5a2:	4658      	mov	r0, fp
 800f5a4:	465c      	mov	r4, fp
 800f5a6:	f7f0 fe6b 	bl	8000280 <__aeabi_dsub>
 800f5aa:	4642      	mov	r2, r8
 800f5ac:	464b      	mov	r3, r9
 800f5ae:	f7f0 fe67 	bl	8000280 <__aeabi_dsub>
 800f5b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5b6:	f7f0 fe63 	bl	8000280 <__aeabi_dsub>
 800f5ba:	4602      	mov	r2, r0
 800f5bc:	e036      	b.n	800f62c <__ieee754_pow+0x794>
 800f5be:	bf00      	nop
 800f5c0:	4a454eef 	.word	0x4a454eef
 800f5c4:	3fca7e28 	.word	0x3fca7e28
 800f5c8:	93c9db65 	.word	0x93c9db65
 800f5cc:	3fcd864a 	.word	0x3fcd864a
 800f5d0:	a91d4101 	.word	0xa91d4101
 800f5d4:	3fd17460 	.word	0x3fd17460
 800f5d8:	518f264d 	.word	0x518f264d
 800f5dc:	3fd55555 	.word	0x3fd55555
 800f5e0:	db6fabff 	.word	0xdb6fabff
 800f5e4:	3fdb6db6 	.word	0x3fdb6db6
 800f5e8:	33333303 	.word	0x33333303
 800f5ec:	3fe33333 	.word	0x3fe33333
 800f5f0:	e0000000 	.word	0xe0000000
 800f5f4:	3feec709 	.word	0x3feec709
 800f5f8:	dc3a03fd 	.word	0xdc3a03fd
 800f5fc:	3feec709 	.word	0x3feec709
 800f600:	145b01f5 	.word	0x145b01f5
 800f604:	be3e2fe0 	.word	0xbe3e2fe0
 800f608:	7ff00000 	.word	0x7ff00000
 800f60c:	43400000 	.word	0x43400000
 800f610:	0003988e 	.word	0x0003988e
 800f614:	000bb679 	.word	0x000bb679
 800f618:	0800fdb0 	.word	0x0800fdb0
 800f61c:	3ff00000 	.word	0x3ff00000
 800f620:	40080000 	.word	0x40080000
 800f624:	0800fd90 	.word	0x0800fd90
 800f628:	0800fda0 	.word	0x0800fda0
 800f62c:	460b      	mov	r3, r1
 800f62e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f632:	e5d7      	b.n	800f1e4 <__ieee754_pow+0x34c>
 800f634:	f04f 0a01 	mov.w	sl, #1
 800f638:	e65e      	b.n	800f2f8 <__ieee754_pow+0x460>
 800f63a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800f90c <__ieee754_pow+0xa74>)
 800f63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f640:	4630      	mov	r0, r6
 800f642:	4639      	mov	r1, r7
 800f644:	f7f0 fe1e 	bl	8000284 <__adddf3>
 800f648:	4642      	mov	r2, r8
 800f64a:	464b      	mov	r3, r9
 800f64c:	e9cd 0100 	strd	r0, r1, [sp]
 800f650:	4620      	mov	r0, r4
 800f652:	4629      	mov	r1, r5
 800f654:	f7f0 fe14 	bl	8000280 <__aeabi_dsub>
 800f658:	4602      	mov	r2, r0
 800f65a:	460b      	mov	r3, r1
 800f65c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f660:	f7f1 fa56 	bl	8000b10 <__aeabi_dcmpgt>
 800f664:	2800      	cmp	r0, #0
 800f666:	f47f ae00 	bne.w	800f26a <__ieee754_pow+0x3d2>
 800f66a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800f66e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f672:	48a1      	ldr	r0, [pc, #644]	@ (800f8f8 <__ieee754_pow+0xa60>)
 800f674:	f1bb 0f00 	cmp.w	fp, #0
 800f678:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800f67c:	f04f 0200 	mov.w	r2, #0
 800f680:	fa43 fa0a 	asr.w	sl, r3, sl
 800f684:	44da      	add	sl, fp
 800f686:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f68a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f68e:	fa40 f001 	asr.w	r0, r0, r1
 800f692:	f1c1 0114 	rsb	r1, r1, #20
 800f696:	ea00 030a 	and.w	r3, r0, sl
 800f69a:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f69e:	4640      	mov	r0, r8
 800f6a0:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800f6a4:	fa4a fa01 	asr.w	sl, sl, r1
 800f6a8:	4649      	mov	r1, r9
 800f6aa:	bfb8      	it	lt
 800f6ac:	f1ca 0a00 	rsblt	sl, sl, #0
 800f6b0:	f7f0 fde6 	bl	8000280 <__aeabi_dsub>
 800f6b4:	4680      	mov	r8, r0
 800f6b6:	4689      	mov	r9, r1
 800f6b8:	2400      	movs	r4, #0
 800f6ba:	4632      	mov	r2, r6
 800f6bc:	463b      	mov	r3, r7
 800f6be:	4640      	mov	r0, r8
 800f6c0:	4649      	mov	r1, r9
 800f6c2:	f7f0 fddf 	bl	8000284 <__adddf3>
 800f6c6:	460d      	mov	r5, r1
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	a37b      	add	r3, pc, #492	@ (adr r3, 800f8b8 <__ieee754_pow+0xa20>)
 800f6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d0:	f7f0 ff8e 	bl	80005f0 <__aeabi_dmul>
 800f6d4:	4642      	mov	r2, r8
 800f6d6:	464b      	mov	r3, r9
 800f6d8:	e9cd 0100 	strd	r0, r1, [sp]
 800f6dc:	4620      	mov	r0, r4
 800f6de:	4629      	mov	r1, r5
 800f6e0:	f7f0 fdce 	bl	8000280 <__aeabi_dsub>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	4639      	mov	r1, r7
 800f6ec:	f7f0 fdc8 	bl	8000280 <__aeabi_dsub>
 800f6f0:	a373      	add	r3, pc, #460	@ (adr r3, 800f8c0 <__ieee754_pow+0xa28>)
 800f6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f6:	f7f0 ff7b 	bl	80005f0 <__aeabi_dmul>
 800f6fa:	4680      	mov	r8, r0
 800f6fc:	4689      	mov	r9, r1
 800f6fe:	4620      	mov	r0, r4
 800f700:	4629      	mov	r1, r5
 800f702:	a371      	add	r3, pc, #452	@ (adr r3, 800f8c8 <__ieee754_pow+0xa30>)
 800f704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f708:	f7f0 ff72 	bl	80005f0 <__aeabi_dmul>
 800f70c:	4602      	mov	r2, r0
 800f70e:	460b      	mov	r3, r1
 800f710:	4640      	mov	r0, r8
 800f712:	4649      	mov	r1, r9
 800f714:	f7f0 fdb6 	bl	8000284 <__adddf3>
 800f718:	4604      	mov	r4, r0
 800f71a:	460d      	mov	r5, r1
 800f71c:	4602      	mov	r2, r0
 800f71e:	460b      	mov	r3, r1
 800f720:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f724:	f7f0 fdae 	bl	8000284 <__adddf3>
 800f728:	4680      	mov	r8, r0
 800f72a:	4689      	mov	r9, r1
 800f72c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f730:	f7f0 fda6 	bl	8000280 <__aeabi_dsub>
 800f734:	4602      	mov	r2, r0
 800f736:	460b      	mov	r3, r1
 800f738:	4620      	mov	r0, r4
 800f73a:	4629      	mov	r1, r5
 800f73c:	f7f0 fda0 	bl	8000280 <__aeabi_dsub>
 800f740:	4642      	mov	r2, r8
 800f742:	4606      	mov	r6, r0
 800f744:	460f      	mov	r7, r1
 800f746:	464b      	mov	r3, r9
 800f748:	4640      	mov	r0, r8
 800f74a:	4649      	mov	r1, r9
 800f74c:	f7f0 ff50 	bl	80005f0 <__aeabi_dmul>
 800f750:	4604      	mov	r4, r0
 800f752:	460d      	mov	r5, r1
 800f754:	a35e      	add	r3, pc, #376	@ (adr r3, 800f8d0 <__ieee754_pow+0xa38>)
 800f756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75a:	f7f0 ff49 	bl	80005f0 <__aeabi_dmul>
 800f75e:	a35e      	add	r3, pc, #376	@ (adr r3, 800f8d8 <__ieee754_pow+0xa40>)
 800f760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f764:	f7f0 fd8c 	bl	8000280 <__aeabi_dsub>
 800f768:	4622      	mov	r2, r4
 800f76a:	462b      	mov	r3, r5
 800f76c:	f7f0 ff40 	bl	80005f0 <__aeabi_dmul>
 800f770:	a35b      	add	r3, pc, #364	@ (adr r3, 800f8e0 <__ieee754_pow+0xa48>)
 800f772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f776:	f7f0 fd85 	bl	8000284 <__adddf3>
 800f77a:	4622      	mov	r2, r4
 800f77c:	462b      	mov	r3, r5
 800f77e:	f7f0 ff37 	bl	80005f0 <__aeabi_dmul>
 800f782:	a359      	add	r3, pc, #356	@ (adr r3, 800f8e8 <__ieee754_pow+0xa50>)
 800f784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f788:	f7f0 fd7a 	bl	8000280 <__aeabi_dsub>
 800f78c:	4622      	mov	r2, r4
 800f78e:	462b      	mov	r3, r5
 800f790:	f7f0 ff2e 	bl	80005f0 <__aeabi_dmul>
 800f794:	a356      	add	r3, pc, #344	@ (adr r3, 800f8f0 <__ieee754_pow+0xa58>)
 800f796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79a:	f7f0 fd73 	bl	8000284 <__adddf3>
 800f79e:	4622      	mov	r2, r4
 800f7a0:	462b      	mov	r3, r5
 800f7a2:	f7f0 ff25 	bl	80005f0 <__aeabi_dmul>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	4640      	mov	r0, r8
 800f7ac:	4649      	mov	r1, r9
 800f7ae:	f7f0 fd67 	bl	8000280 <__aeabi_dsub>
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	460d      	mov	r5, r1
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	4640      	mov	r0, r8
 800f7bc:	4649      	mov	r1, r9
 800f7be:	f7f0 ff17 	bl	80005f0 <__aeabi_dmul>
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f7c8:	e9cd 0100 	strd	r0, r1, [sp]
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	4629      	mov	r1, r5
 800f7d0:	f7f0 fd56 	bl	8000280 <__aeabi_dsub>
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7dc:	f7f1 f832 	bl	8000844 <__aeabi_ddiv>
 800f7e0:	4632      	mov	r2, r6
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	460d      	mov	r5, r1
 800f7e6:	463b      	mov	r3, r7
 800f7e8:	4640      	mov	r0, r8
 800f7ea:	4649      	mov	r1, r9
 800f7ec:	f7f0 ff00 	bl	80005f0 <__aeabi_dmul>
 800f7f0:	4632      	mov	r2, r6
 800f7f2:	463b      	mov	r3, r7
 800f7f4:	f7f0 fd46 	bl	8000284 <__adddf3>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	4629      	mov	r1, r5
 800f800:	f7f0 fd3e 	bl	8000280 <__aeabi_dsub>
 800f804:	4642      	mov	r2, r8
 800f806:	464b      	mov	r3, r9
 800f808:	f7f0 fd3a 	bl	8000280 <__aeabi_dsub>
 800f80c:	460b      	mov	r3, r1
 800f80e:	4602      	mov	r2, r0
 800f810:	493a      	ldr	r1, [pc, #232]	@ (800f8fc <__ieee754_pow+0xa64>)
 800f812:	2000      	movs	r0, #0
 800f814:	f7f0 fd34 	bl	8000280 <__aeabi_dsub>
 800f818:	ec41 0b10 	vmov	d0, r0, r1
 800f81c:	ee10 3a90 	vmov	r3, s1
 800f820:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f824:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f828:	da30      	bge.n	800f88c <__ieee754_pow+0x9f4>
 800f82a:	4650      	mov	r0, sl
 800f82c:	f000 f87c 	bl	800f928 <scalbn>
 800f830:	ec51 0b10 	vmov	r0, r1, d0
 800f834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f838:	f7ff bbd5 	b.w	800efe6 <__ieee754_pow+0x14e>
 800f83c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f840:	4c2f      	ldr	r4, [pc, #188]	@ (800f900 <__ieee754_pow+0xa68>)
 800f842:	42a3      	cmp	r3, r4
 800f844:	d91a      	bls.n	800f87c <__ieee754_pow+0x9e4>
 800f846:	4b2f      	ldr	r3, [pc, #188]	@ (800f904 <__ieee754_pow+0xa6c>)
 800f848:	440b      	add	r3, r1
 800f84a:	4303      	orrs	r3, r0
 800f84c:	d009      	beq.n	800f862 <__ieee754_pow+0x9ca>
 800f84e:	2200      	movs	r2, #0
 800f850:	2300      	movs	r3, #0
 800f852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f856:	f7f1 f93d 	bl	8000ad4 <__aeabi_dcmplt>
 800f85a:	3800      	subs	r0, #0
 800f85c:	bf18      	it	ne
 800f85e:	2001      	movne	r0, #1
 800f860:	e42e      	b.n	800f0c0 <__ieee754_pow+0x228>
 800f862:	4642      	mov	r2, r8
 800f864:	464b      	mov	r3, r9
 800f866:	f7f0 fd0b 	bl	8000280 <__aeabi_dsub>
 800f86a:	4632      	mov	r2, r6
 800f86c:	463b      	mov	r3, r7
 800f86e:	f7f1 f945 	bl	8000afc <__aeabi_dcmpge>
 800f872:	2800      	cmp	r0, #0
 800f874:	d1eb      	bne.n	800f84e <__ieee754_pow+0x9b6>
 800f876:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800f914 <__ieee754_pow+0xa7c>
 800f87a:	e6f6      	b.n	800f66a <__ieee754_pow+0x7d2>
 800f87c:	469a      	mov	sl, r3
 800f87e:	4b22      	ldr	r3, [pc, #136]	@ (800f908 <__ieee754_pow+0xa70>)
 800f880:	459a      	cmp	sl, r3
 800f882:	f63f aef2 	bhi.w	800f66a <__ieee754_pow+0x7d2>
 800f886:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f88a:	e715      	b.n	800f6b8 <__ieee754_pow+0x820>
 800f88c:	ec51 0b10 	vmov	r0, r1, d0
 800f890:	4619      	mov	r1, r3
 800f892:	e7cf      	b.n	800f834 <__ieee754_pow+0x99c>
 800f894:	2000      	movs	r0, #0
 800f896:	4919      	ldr	r1, [pc, #100]	@ (800f8fc <__ieee754_pow+0xa64>)
 800f898:	f7ff bb1b 	b.w	800eed2 <__ieee754_pow+0x3a>
 800f89c:	2000      	movs	r0, #0
 800f89e:	2100      	movs	r1, #0
 800f8a0:	f7ff bb17 	b.w	800eed2 <__ieee754_pow+0x3a>
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	4639      	mov	r1, r7
 800f8a8:	f7ff bb13 	b.w	800eed2 <__ieee754_pow+0x3a>
 800f8ac:	460c      	mov	r4, r1
 800f8ae:	f7ff bb61 	b.w	800ef74 <__ieee754_pow+0xdc>
 800f8b2:	2400      	movs	r4, #0
 800f8b4:	f7ff bb4c 	b.w	800ef50 <__ieee754_pow+0xb8>
 800f8b8:	00000000 	.word	0x00000000
 800f8bc:	3fe62e43 	.word	0x3fe62e43
 800f8c0:	fefa39ef 	.word	0xfefa39ef
 800f8c4:	3fe62e42 	.word	0x3fe62e42
 800f8c8:	0ca86c39 	.word	0x0ca86c39
 800f8cc:	be205c61 	.word	0xbe205c61
 800f8d0:	72bea4d0 	.word	0x72bea4d0
 800f8d4:	3e663769 	.word	0x3e663769
 800f8d8:	c5d26bf1 	.word	0xc5d26bf1
 800f8dc:	3ebbbd41 	.word	0x3ebbbd41
 800f8e0:	af25de2c 	.word	0xaf25de2c
 800f8e4:	3f11566a 	.word	0x3f11566a
 800f8e8:	16bebd93 	.word	0x16bebd93
 800f8ec:	3f66c16c 	.word	0x3f66c16c
 800f8f0:	5555553e 	.word	0x5555553e
 800f8f4:	3fc55555 	.word	0x3fc55555
 800f8f8:	fff00000 	.word	0xfff00000
 800f8fc:	3ff00000 	.word	0x3ff00000
 800f900:	4090cbff 	.word	0x4090cbff
 800f904:	3f6f3400 	.word	0x3f6f3400
 800f908:	3fe00000 	.word	0x3fe00000
 800f90c:	652b82fe 	.word	0x652b82fe
 800f910:	3c971547 	.word	0x3c971547
 800f914:	4090cc00 	.word	0x4090cc00

0800f918 <fabs>:
 800f918:	ec51 0b10 	vmov	r0, r1, d0
 800f91c:	4602      	mov	r2, r0
 800f91e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f922:	ec43 2b10 	vmov	d0, r2, r3
 800f926:	4770      	bx	lr

0800f928 <scalbn>:
 800f928:	b570      	push	{r4, r5, r6, lr}
 800f92a:	ec55 4b10 	vmov	r4, r5, d0
 800f92e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f932:	4606      	mov	r6, r0
 800f934:	462b      	mov	r3, r5
 800f936:	b991      	cbnz	r1, 800f95e <scalbn+0x36>
 800f938:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f93c:	4323      	orrs	r3, r4
 800f93e:	d03d      	beq.n	800f9bc <scalbn+0x94>
 800f940:	4b35      	ldr	r3, [pc, #212]	@ (800fa18 <scalbn+0xf0>)
 800f942:	4620      	mov	r0, r4
 800f944:	4629      	mov	r1, r5
 800f946:	2200      	movs	r2, #0
 800f948:	f7f0 fe52 	bl	80005f0 <__aeabi_dmul>
 800f94c:	4b33      	ldr	r3, [pc, #204]	@ (800fa1c <scalbn+0xf4>)
 800f94e:	4604      	mov	r4, r0
 800f950:	460d      	mov	r5, r1
 800f952:	429e      	cmp	r6, r3
 800f954:	da0f      	bge.n	800f976 <scalbn+0x4e>
 800f956:	a328      	add	r3, pc, #160	@ (adr r3, 800f9f8 <scalbn+0xd0>)
 800f958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95c:	e01e      	b.n	800f99c <scalbn+0x74>
 800f95e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f962:	4291      	cmp	r1, r2
 800f964:	d10b      	bne.n	800f97e <scalbn+0x56>
 800f966:	4622      	mov	r2, r4
 800f968:	4620      	mov	r0, r4
 800f96a:	4629      	mov	r1, r5
 800f96c:	f7f0 fc8a 	bl	8000284 <__adddf3>
 800f970:	4604      	mov	r4, r0
 800f972:	460d      	mov	r5, r1
 800f974:	e022      	b.n	800f9bc <scalbn+0x94>
 800f976:	460b      	mov	r3, r1
 800f978:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f97c:	3936      	subs	r1, #54	@ 0x36
 800f97e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f982:	4296      	cmp	r6, r2
 800f984:	dd0d      	ble.n	800f9a2 <scalbn+0x7a>
 800f986:	2d00      	cmp	r5, #0
 800f988:	a11d      	add	r1, pc, #116	@ (adr r1, 800fa00 <scalbn+0xd8>)
 800f98a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f98e:	da02      	bge.n	800f996 <scalbn+0x6e>
 800f990:	a11d      	add	r1, pc, #116	@ (adr r1, 800fa08 <scalbn+0xe0>)
 800f992:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f996:	a31a      	add	r3, pc, #104	@ (adr r3, 800fa00 <scalbn+0xd8>)
 800f998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99c:	f7f0 fe28 	bl	80005f0 <__aeabi_dmul>
 800f9a0:	e7e6      	b.n	800f970 <scalbn+0x48>
 800f9a2:	1872      	adds	r2, r6, r1
 800f9a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f9a8:	428a      	cmp	r2, r1
 800f9aa:	dcec      	bgt.n	800f986 <scalbn+0x5e>
 800f9ac:	2a00      	cmp	r2, #0
 800f9ae:	dd08      	ble.n	800f9c2 <scalbn+0x9a>
 800f9b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f9b4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f9b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f9bc:	ec45 4b10 	vmov	d0, r4, r5
 800f9c0:	bd70      	pop	{r4, r5, r6, pc}
 800f9c2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f9c6:	da08      	bge.n	800f9da <scalbn+0xb2>
 800f9c8:	2d00      	cmp	r5, #0
 800f9ca:	a10b      	add	r1, pc, #44	@ (adr r1, 800f9f8 <scalbn+0xd0>)
 800f9cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9d0:	dac1      	bge.n	800f956 <scalbn+0x2e>
 800f9d2:	a10f      	add	r1, pc, #60	@ (adr r1, 800fa10 <scalbn+0xe8>)
 800f9d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9d8:	e7bd      	b.n	800f956 <scalbn+0x2e>
 800f9da:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f9de:	3236      	adds	r2, #54	@ 0x36
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f9e6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	4b0c      	ldr	r3, [pc, #48]	@ (800fa20 <scalbn+0xf8>)
 800f9ee:	4629      	mov	r1, r5
 800f9f0:	e7d4      	b.n	800f99c <scalbn+0x74>
 800f9f2:	bf00      	nop
 800f9f4:	f3af 8000 	nop.w
 800f9f8:	c2f8f359 	.word	0xc2f8f359
 800f9fc:	01a56e1f 	.word	0x01a56e1f
 800fa00:	8800759c 	.word	0x8800759c
 800fa04:	7e37e43c 	.word	0x7e37e43c
 800fa08:	8800759c 	.word	0x8800759c
 800fa0c:	fe37e43c 	.word	0xfe37e43c
 800fa10:	c2f8f359 	.word	0xc2f8f359
 800fa14:	81a56e1f 	.word	0x81a56e1f
 800fa18:	43500000 	.word	0x43500000
 800fa1c:	ffff3cb0 	.word	0xffff3cb0
 800fa20:	3c900000 	.word	0x3c900000

0800fa24 <with_errno>:
 800fa24:	b510      	push	{r4, lr}
 800fa26:	ed2d 8b02 	vpush	{d8}
 800fa2a:	eeb0 8a40 	vmov.f32	s16, s0
 800fa2e:	eef0 8a60 	vmov.f32	s17, s1
 800fa32:	4604      	mov	r4, r0
 800fa34:	f7ff f942 	bl	800ecbc <__errno>
 800fa38:	6004      	str	r4, [r0, #0]
 800fa3a:	eeb0 0a48 	vmov.f32	s0, s16
 800fa3e:	eef0 0a68 	vmov.f32	s1, s17
 800fa42:	ecbd 8b02 	vpop	{d8}
 800fa46:	bd10      	pop	{r4, pc}

0800fa48 <xflow>:
 800fa48:	4603      	mov	r3, r0
 800fa4a:	b507      	push	{r0, r1, r2, lr}
 800fa4c:	ec51 0b10 	vmov	r0, r1, d0
 800fa50:	b183      	cbz	r3, 800fa74 <xflow+0x2c>
 800fa52:	4602      	mov	r2, r0
 800fa54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa58:	e9cd 2300 	strd	r2, r3, [sp]
 800fa5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa60:	f7f0 fdc6 	bl	80005f0 <__aeabi_dmul>
 800fa64:	ec41 0b10 	vmov	d0, r0, r1
 800fa68:	2022      	movs	r0, #34	@ 0x22
 800fa6a:	b003      	add	sp, #12
 800fa6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa70:	f7ff bfd8 	b.w	800fa24 <with_errno>
 800fa74:	4602      	mov	r2, r0
 800fa76:	460b      	mov	r3, r1
 800fa78:	e7ee      	b.n	800fa58 <xflow+0x10>
 800fa7a:	0000      	movs	r0, r0
 800fa7c:	0000      	movs	r0, r0
	...

0800fa80 <__math_uflow>:
 800fa80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fa88 <__math_uflow+0x8>
 800fa84:	f7ff bfe0 	b.w	800fa48 <xflow>
 800fa88:	00000000 	.word	0x00000000
 800fa8c:	10000000 	.word	0x10000000

0800fa90 <__math_oflow>:
 800fa90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fa98 <__math_oflow+0x8>
 800fa94:	f7ff bfd8 	b.w	800fa48 <xflow>
 800fa98:	00000000 	.word	0x00000000
 800fa9c:	70000000 	.word	0x70000000

0800faa0 <__ieee754_sqrt>:
 800faa0:	4a6b      	ldr	r2, [pc, #428]	@ (800fc50 <__ieee754_sqrt+0x1b0>)
 800faa2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa6:	ec55 4b10 	vmov	r4, r5, d0
 800faaa:	43aa      	bics	r2, r5
 800faac:	462b      	mov	r3, r5
 800faae:	4621      	mov	r1, r4
 800fab0:	d110      	bne.n	800fad4 <__ieee754_sqrt+0x34>
 800fab2:	4622      	mov	r2, r4
 800fab4:	4620      	mov	r0, r4
 800fab6:	4629      	mov	r1, r5
 800fab8:	f7f0 fd9a 	bl	80005f0 <__aeabi_dmul>
 800fabc:	4602      	mov	r2, r0
 800fabe:	460b      	mov	r3, r1
 800fac0:	4620      	mov	r0, r4
 800fac2:	4629      	mov	r1, r5
 800fac4:	f7f0 fbde 	bl	8000284 <__adddf3>
 800fac8:	4604      	mov	r4, r0
 800faca:	460d      	mov	r5, r1
 800facc:	ec45 4b10 	vmov	d0, r4, r5
 800fad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fad4:	2d00      	cmp	r5, #0
 800fad6:	dc0e      	bgt.n	800faf6 <__ieee754_sqrt+0x56>
 800fad8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fadc:	4322      	orrs	r2, r4
 800fade:	d0f5      	beq.n	800facc <__ieee754_sqrt+0x2c>
 800fae0:	b19d      	cbz	r5, 800fb0a <__ieee754_sqrt+0x6a>
 800fae2:	4622      	mov	r2, r4
 800fae4:	4620      	mov	r0, r4
 800fae6:	4629      	mov	r1, r5
 800fae8:	f7f0 fbca 	bl	8000280 <__aeabi_dsub>
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	f7f0 fea8 	bl	8000844 <__aeabi_ddiv>
 800faf4:	e7e8      	b.n	800fac8 <__ieee754_sqrt+0x28>
 800faf6:	152a      	asrs	r2, r5, #20
 800faf8:	d115      	bne.n	800fb26 <__ieee754_sqrt+0x86>
 800fafa:	2000      	movs	r0, #0
 800fafc:	e009      	b.n	800fb12 <__ieee754_sqrt+0x72>
 800fafe:	0acb      	lsrs	r3, r1, #11
 800fb00:	3a15      	subs	r2, #21
 800fb02:	0549      	lsls	r1, r1, #21
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d0fa      	beq.n	800fafe <__ieee754_sqrt+0x5e>
 800fb08:	e7f7      	b.n	800fafa <__ieee754_sqrt+0x5a>
 800fb0a:	462a      	mov	r2, r5
 800fb0c:	e7fa      	b.n	800fb04 <__ieee754_sqrt+0x64>
 800fb0e:	005b      	lsls	r3, r3, #1
 800fb10:	3001      	adds	r0, #1
 800fb12:	02dc      	lsls	r4, r3, #11
 800fb14:	d5fb      	bpl.n	800fb0e <__ieee754_sqrt+0x6e>
 800fb16:	1e44      	subs	r4, r0, #1
 800fb18:	1b12      	subs	r2, r2, r4
 800fb1a:	f1c0 0420 	rsb	r4, r0, #32
 800fb1e:	fa21 f404 	lsr.w	r4, r1, r4
 800fb22:	4081      	lsls	r1, r0
 800fb24:	4323      	orrs	r3, r4
 800fb26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb2a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800fb2e:	07d2      	lsls	r2, r2, #31
 800fb30:	f04f 0600 	mov.w	r6, #0
 800fb34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb38:	ea4f 0565 	mov.w	r5, r5, asr #1
 800fb3c:	f04f 0016 	mov.w	r0, #22
 800fb40:	4632      	mov	r2, r6
 800fb42:	bf58      	it	pl
 800fb44:	005b      	lslpl	r3, r3, #1
 800fb46:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fb4a:	bf5c      	itt	pl
 800fb4c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fb50:	0049      	lslpl	r1, r1, #1
 800fb52:	005b      	lsls	r3, r3, #1
 800fb54:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fb58:	0049      	lsls	r1, r1, #1
 800fb5a:	1917      	adds	r7, r2, r4
 800fb5c:	429f      	cmp	r7, r3
 800fb5e:	bfde      	ittt	le
 800fb60:	193a      	addle	r2, r7, r4
 800fb62:	1bdb      	suble	r3, r3, r7
 800fb64:	1936      	addle	r6, r6, r4
 800fb66:	0fcf      	lsrs	r7, r1, #31
 800fb68:	3801      	subs	r0, #1
 800fb6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fb6e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800fb72:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fb76:	d1f0      	bne.n	800fb5a <__ieee754_sqrt+0xba>
 800fb78:	4604      	mov	r4, r0
 800fb7a:	2720      	movs	r7, #32
 800fb7c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fb80:	429a      	cmp	r2, r3
 800fb82:	eb00 0e0c 	add.w	lr, r0, ip
 800fb86:	db02      	blt.n	800fb8e <__ieee754_sqrt+0xee>
 800fb88:	d113      	bne.n	800fbb2 <__ieee754_sqrt+0x112>
 800fb8a:	458e      	cmp	lr, r1
 800fb8c:	d811      	bhi.n	800fbb2 <__ieee754_sqrt+0x112>
 800fb8e:	f1be 0f00 	cmp.w	lr, #0
 800fb92:	eb0e 000c 	add.w	r0, lr, ip
 800fb96:	da43      	bge.n	800fc20 <__ieee754_sqrt+0x180>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	db41      	blt.n	800fc20 <__ieee754_sqrt+0x180>
 800fb9c:	f102 0801 	add.w	r8, r2, #1
 800fba0:	1a9b      	subs	r3, r3, r2
 800fba2:	458e      	cmp	lr, r1
 800fba4:	4464      	add	r4, ip
 800fba6:	eba1 010e 	sub.w	r1, r1, lr
 800fbaa:	bf88      	it	hi
 800fbac:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fbb0:	4642      	mov	r2, r8
 800fbb2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fbb6:	3f01      	subs	r7, #1
 800fbb8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fbbc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fbc0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fbc4:	d1dc      	bne.n	800fb80 <__ieee754_sqrt+0xe0>
 800fbc6:	4319      	orrs	r1, r3
 800fbc8:	d01b      	beq.n	800fc02 <__ieee754_sqrt+0x162>
 800fbca:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800fc54 <__ieee754_sqrt+0x1b4>
 800fbce:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800fc58 <__ieee754_sqrt+0x1b8>
 800fbd2:	e9da 0100 	ldrd	r0, r1, [sl]
 800fbd6:	e9db 2300 	ldrd	r2, r3, [fp]
 800fbda:	e9da 8900 	ldrd	r8, r9, [sl]
 800fbde:	f7f0 fb4f 	bl	8000280 <__aeabi_dsub>
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	4640      	mov	r0, r8
 800fbe8:	4649      	mov	r1, r9
 800fbea:	f7f0 ff7d 	bl	8000ae8 <__aeabi_dcmple>
 800fbee:	b140      	cbz	r0, 800fc02 <__ieee754_sqrt+0x162>
 800fbf0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fbf4:	e9da 0100 	ldrd	r0, r1, [sl]
 800fbf8:	e9db 2300 	ldrd	r2, r3, [fp]
 800fbfc:	d112      	bne.n	800fc24 <__ieee754_sqrt+0x184>
 800fbfe:	3601      	adds	r6, #1
 800fc00:	463c      	mov	r4, r7
 800fc02:	1072      	asrs	r2, r6, #1
 800fc04:	07f1      	lsls	r1, r6, #31
 800fc06:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800fc0a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800fc0e:	bf48      	it	mi
 800fc10:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800fc14:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800fc18:	4618      	mov	r0, r3
 800fc1a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800fc1e:	e753      	b.n	800fac8 <__ieee754_sqrt+0x28>
 800fc20:	4690      	mov	r8, r2
 800fc22:	e7bd      	b.n	800fba0 <__ieee754_sqrt+0x100>
 800fc24:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc28:	f7f0 fb2c 	bl	8000284 <__adddf3>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	460b      	mov	r3, r1
 800fc30:	4640      	mov	r0, r8
 800fc32:	4649      	mov	r1, r9
 800fc34:	f7f0 ff4e 	bl	8000ad4 <__aeabi_dcmplt>
 800fc38:	b128      	cbz	r0, 800fc46 <__ieee754_sqrt+0x1a6>
 800fc3a:	1ca0      	adds	r0, r4, #2
 800fc3c:	f104 0402 	add.w	r4, r4, #2
 800fc40:	bf08      	it	eq
 800fc42:	3601      	addeq	r6, #1
 800fc44:	e7dd      	b.n	800fc02 <__ieee754_sqrt+0x162>
 800fc46:	1c63      	adds	r3, r4, #1
 800fc48:	f023 0401 	bic.w	r4, r3, #1
 800fc4c:	e7d9      	b.n	800fc02 <__ieee754_sqrt+0x162>
 800fc4e:	bf00      	nop
 800fc50:	7ff00000 	.word	0x7ff00000
 800fc54:	20000250 	.word	0x20000250
 800fc58:	20000248 	.word	0x20000248

0800fc5c <_init>:
 800fc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5e:	bf00      	nop
 800fc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc62:	bc08      	pop	{r3}
 800fc64:	469e      	mov	lr, r3
 800fc66:	4770      	bx	lr

0800fc68 <_fini>:
 800fc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc6a:	bf00      	nop
 800fc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc6e:	bc08      	pop	{r3}
 800fc70:	469e      	mov	lr, r3
 800fc72:	4770      	bx	lr
